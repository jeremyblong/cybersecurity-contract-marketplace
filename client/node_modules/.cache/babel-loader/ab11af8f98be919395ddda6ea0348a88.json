{"ast":null,"code":"var _jsxFileName = \"/home/kali/Documents/cybersecurity/client/src/components/dashboard/softwareHardwareExchanges/software/landing/helpers/generalHelperFunctions.js\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport { Badge } from \"reactstrap\";\nconst dummyNoteDescription = `Dillinger is a cloud-enabled, mobile-ready, offline-storage compatible,\nAngularJS-powered HTML5 Markdown editor.\n\n- Type some Markdown on the left\n- See HTML in the right\n- ✨Magic ✨\n\n## Features\n\n- Import a HTML file and watch it magically convert to Markdown\n- Drag and drop images (requires your Dropbox account be linked)\n- Import and save files from GitHub, Dropbox, Google Drive and One Drive\n- Drag and drop markdown and HTML files into Dillinger\n- Export documents as Markdown, HTML and PDF\n\nMarkdown is a lightweight markup language based on the formatting conventions\nthat people naturally use in email.\nAs [John Gruber] writes on the [Markdown site][df1]\n\n> The overriding design goal for Markdowns\n> formatting syntax is to make it as readable\n> as possible. The idea is that a\n> Markdown-formatted document should be\n> publishable as-is, as plain text, without\n> looking like its been marked up with tags\n> or formatting instructions.\n\nThis text you see here is *actually- written in Markdown! To get a feel\nfor Markdowns syntax, type some text into the left window and\nwatch the results in the right.\n\n## Tech\n\nDillinger uses a number of open source projects to work properly:\n\n- [AngularJS] - HTML enhanced for web apps!\n- [Ace Editor] - awesome web-based text editor\n- [markdown-it] - Markdown parser done right. Fast and easy to extend.\n- [Twitter Bootstrap] - great UI boilerplate for modern web apps\n- [node.js] - evented I/O for the backend\n- [Express] - fast node.js network app framework [@tjholowaychuk]\n- [Gulp] - the streaming build system\n- [Breakdance](https://breakdance.github.io/breakdance/) - HTML\nto Markdown converter\n- [jQuery] - duh\n\nAnd of course Dillinger itself is open source with a [public repository][dill]\n on GitHub.\n\n## Installation\n\nDillinger requires [Node.js](https://nodejs.org/) v10+ to run.\n\nInstall the dependencies and devDependencies and start the server.\n\n## Plugins\n\nDillinger is currently extended with the following plugins.\nInstructions on how to use them in your own application are linked below.`; // calculate listing tag to display at corner\n\nconst calculateStatus = num => {\n  switch (num) {\n    case 1:\n      return \"love\";\n      break;\n\n    case 2:\n      return \"Hot\";\n      break;\n\n    case 3:\n      return \"gift\";\n      break;\n\n    case 4:\n      return \"50%\";\n      break;\n\n    case 5:\n      return \"sale\";\n      break;\n\n    default:\n      break;\n  }\n}; // calculate auction type\n\n\nconst calculateAuctionType = type => {\n  switch (type) {\n    case \"buy-it-now-ONLY\":\n      return \"buy-it-now ONLY\";\n      break;\n\n    case \"buy-it-now-OR-best-offer\":\n      return \"buy-it-now & best-offer\";\n      break;\n\n    case \"auction-AND-buy-it-now\":\n      return \"auction & buy-it-now\";\n      break;\n\n    case \"auction-ONLY\":\n      return \"auction ONLY\";\n      break;\n\n    default:\n      break;\n  }\n}; // render hashtags in mapped logic (returning data portion)\n\n\nconst renderTags = tags => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tags-container-listing-preview\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      paddingBottom: \"12.5px\"\n    },\n    className: \"listing-description-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, \"Relevant Tags/Hashtags\"), tags.map((tag, index) => {\n    return /*#__PURE__*/React.createElement(Badge, {\n      className: \"listing-preview-badge\",\n      key: index,\n      color: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 24\n      }\n    }, tag.text);\n  }));\n};\n\nconst preparePriceString = (bids, currentPrice, type, live, item) => {\n  // real live data exists - not a filler item\n  if (live === true) {\n    // AUCTION LISTINGS (((ONLY)))\n    if (type.includes(\"auction\")) {\n      if (type === \"auction-ONLY\") {\n        return /*#__PURE__*/React.createElement(Fragment, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 21\n          }\n        }, `${bids.length} current bid's at $${currentPrice} (USD`, /*#__PURE__*/React.createElement(\"p\", {\n          className: \"pricing-details-custom\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 25\n          }\n        }, \"Auction ONLY\"));\n      } else if (type === \"auction-AND-buy-it-now\") {\n        const minOffer = item.auctionPriceRelatedData.offerFeatureData.minimumRequiredOfferValue;\n        return /*#__PURE__*/React.createElement(Fragment, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 21\n          }\n        }, `$${currentPrice.toFixed(2)} (Auction)`, /*#__PURE__*/React.createElement(\"p\", {\n          className: \"pricing-details-custom\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 25\n          }\n        }, `$${minOffer.toFixed(2)} (Buy-it-now)`));\n      } // BUY IT NOW LISTINGS (((ONLY)))\n\n    } else {\n      // create buy-it-now variable\n      const buyitnow = item.auctionPriceRelatedData.buyItNowPrice; // buy it now OR best offer\n\n      if (type === \"buy-it-now-OR-best-offer\") {\n        // create minoffer variable for string below\n        const minOffer = item.auctionPriceRelatedData.offerFeatureData.minimumRequiredOfferValue; // RETURN both best - offer buy it now\n\n        return /*#__PURE__*/React.createElement(Fragment, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 21\n          }\n        }, `$${buyitnow.toFixed(2)} (Buy-it-now)`, /*#__PURE__*/React.createElement(\"p\", {\n          className: \"pricing-details-custom\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 25\n          }\n        }, `$${minOffer.toFixed(2)} (Min-offer)`));\n      } else if (type === \"buy-it-now-ONLY\") {\n        return /*#__PURE__*/React.createElement(Fragment, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 21\n          }\n        }, `$${buyitnow.toFixed(2)} (buy-it-now) ONLY`, /*#__PURE__*/React.createElement(\"p\", {\n          className: \"pricing-details-custom\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 25\n          }\n        }, \"Buy-it-now ONLY\"));\n      }\n    }\n  } else {\n    return `${item.discountPrice}`;\n  }\n};\n\nexport default {\n  dummyNoteDescription,\n  preparePriceString,\n  renderTags,\n  calculateAuctionType,\n  calculateStatus\n};","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/softwareHardwareExchanges/software/landing/helpers/generalHelperFunctions.js"],"names":["React","useState","useEffect","Fragment","Badge","dummyNoteDescription","calculateStatus","num","calculateAuctionType","type","renderTags","tags","paddingBottom","map","tag","index","text","preparePriceString","bids","currentPrice","live","item","includes","length","minOffer","auctionPriceRelatedData","offerFeatureData","minimumRequiredOfferValue","toFixed","buyitnow","buyItNowPrice","discountPrice"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\nimport { Badge } from \"reactstrap\";\n\nconst dummyNoteDescription = `Dillinger is a cloud-enabled, mobile-ready, offline-storage compatible,\nAngularJS-powered HTML5 Markdown editor.\n\n- Type some Markdown on the left\n- See HTML in the right\n- ✨Magic ✨\n\n## Features\n\n- Import a HTML file and watch it magically convert to Markdown\n- Drag and drop images (requires your Dropbox account be linked)\n- Import and save files from GitHub, Dropbox, Google Drive and One Drive\n- Drag and drop markdown and HTML files into Dillinger\n- Export documents as Markdown, HTML and PDF\n\nMarkdown is a lightweight markup language based on the formatting conventions\nthat people naturally use in email.\nAs [John Gruber] writes on the [Markdown site][df1]\n\n> The overriding design goal for Markdowns\n> formatting syntax is to make it as readable\n> as possible. The idea is that a\n> Markdown-formatted document should be\n> publishable as-is, as plain text, without\n> looking like its been marked up with tags\n> or formatting instructions.\n\nThis text you see here is *actually- written in Markdown! To get a feel\nfor Markdowns syntax, type some text into the left window and\nwatch the results in the right.\n\n## Tech\n\nDillinger uses a number of open source projects to work properly:\n\n- [AngularJS] - HTML enhanced for web apps!\n- [Ace Editor] - awesome web-based text editor\n- [markdown-it] - Markdown parser done right. Fast and easy to extend.\n- [Twitter Bootstrap] - great UI boilerplate for modern web apps\n- [node.js] - evented I/O for the backend\n- [Express] - fast node.js network app framework [@tjholowaychuk]\n- [Gulp] - the streaming build system\n- [Breakdance](https://breakdance.github.io/breakdance/) - HTML\nto Markdown converter\n- [jQuery] - duh\n\nAnd of course Dillinger itself is open source with a [public repository][dill]\n on GitHub.\n\n## Installation\n\nDillinger requires [Node.js](https://nodejs.org/) v10+ to run.\n\nInstall the dependencies and devDependencies and start the server.\n\n## Plugins\n\nDillinger is currently extended with the following plugins.\nInstructions on how to use them in your own application are linked below.`;\n\n// calculate listing tag to display at corner\nconst calculateStatus = (num) => {\n    switch (num) {\n        case 1:\n            return \"love\"\n            break;\n        case 2: \n            return \"Hot\"\n            break;\n        case 3:\n            return \"gift\"\n            break;\n        case 4: \n            return \"50%\"\n            break;\n        case 5:\n            return \"sale\"\n            break;\n        default:\n            break;\n    }\n}\n// calculate auction type\nconst calculateAuctionType = (type) => {\n    switch (type) {\n        case \"buy-it-now-ONLY\":\n            return \"buy-it-now ONLY\"\n            break;\n        case \"buy-it-now-OR-best-offer\":\n            return \"buy-it-now & best-offer\";\n            break;\n        case \"auction-AND-buy-it-now\":\n            return \"auction & buy-it-now\";\n            break;\n        case \"auction-ONLY\":\n            return \"auction ONLY\";\n            break;\n        default:\n            break;\n    }\n}\n// render hashtags in mapped logic (returning data portion)\nconst renderTags = (tags) => {\n    return (\n        <div className=\"tags-container-listing-preview\">\n            <p style={{ paddingBottom: \"12.5px\" }} className=\"listing-description-header\">Relevant Tags/Hashtags</p>\n            {tags.map((tag, index) => {\n                return <Badge className=\"listing-preview-badge\" key={index} color=\"secondary\">{tag.text}</Badge>;\n            })}\n        </div>\n    );\n}\n\nconst preparePriceString = (bids, currentPrice, type, live, item) => {\n    // real live data exists - not a filler item\n    if (live === true) {\n        // AUCTION LISTINGS (((ONLY)))\n        if (type.includes(\"auction\")) {\n            if (type === \"auction-ONLY\") {\n                return (\n                    <Fragment>\n                        {`${bids.length} current bid's at $${currentPrice} (USD`}\n                        <p className={\"pricing-details-custom\"}>{\"Auction ONLY\"}</p>\n                    </Fragment>\n                );\n            } else if (type === \"auction-AND-buy-it-now\") {\n                const minOffer = item.auctionPriceRelatedData.offerFeatureData.minimumRequiredOfferValue;\n                return (\n                    <Fragment>\n                        {`$${currentPrice.toFixed(2)} (Auction)`}\n                        <p className={\"pricing-details-custom\"}>{`$${minOffer.toFixed(2)} (Buy-it-now)`}</p>\n                    </Fragment>\n                );\n            } \n            // BUY IT NOW LISTINGS (((ONLY)))\n        } else {\n            // create buy-it-now variable\n            const buyitnow = item.auctionPriceRelatedData.buyItNowPrice;\n            // buy it now OR best offer\n            if (type === \"buy-it-now-OR-best-offer\") {\n                // create minoffer variable for string below\n                const minOffer = item.auctionPriceRelatedData.offerFeatureData.minimumRequiredOfferValue;\n                // RETURN both best - offer buy it now\n                return (\n                    <Fragment>\n                        {`$${buyitnow.toFixed(2)} (Buy-it-now)`}\n                        <p className={\"pricing-details-custom\"}>{`$${minOffer.toFixed(2)} (Min-offer)`}</p>\n                    </Fragment>\n                );\n            } else if (type === \"buy-it-now-ONLY\") {\n                return (\n                    <Fragment>\n                        {`$${buyitnow.toFixed(2)} (buy-it-now) ONLY`}\n                        <p className={\"pricing-details-custom\"}>{\"Buy-it-now ONLY\"}</p>\n                    </Fragment>\n                );\n            }\n        }\n    } else {\n        return `${item.discountPrice}`;\n    }\n}\n\n\nexport default {\n    dummyNoteDescription,\n    preparePriceString,\n    renderTags,\n    calculateAuctionType,\n    calculateStatus\n}"]},"metadata":{},"sourceType":"module"}