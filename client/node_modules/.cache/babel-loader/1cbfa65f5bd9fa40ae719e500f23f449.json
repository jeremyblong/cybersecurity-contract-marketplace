{"ast":null,"code":"import React,{Fragment,useState,useEffect}from'react';import\"./styles.css\";import Breadcrumb from'../../../../../../../../../layout/breadcrumb';import{Container,Row,Col,Card,CardBody,CardFooter,CardHeader,ListGroup,ListGroupItem,Popover,PopoverHeader,PopoverBody,Button}from\"reactstrap\";import axios from'axios';import{Link}from\"react-router-dom\";import Sheet from'react-modal-sheet';import{connect}from\"react-redux\";import{NotificationManager}from'react-notifications';import Skeleton,{SkeletonTheme}from'react-loading-skeleton';import{confirmAlert}from'react-confirm-alert';import moment from\"moment\";import Slider from'rc-slider';const ClearPaymentsOrPartialPane=_ref=>{let{listing,setCurrentApplication,currentApplication,userData,isOpen,setIsOpenState}=_ref;const[cards,setCards]=useState([]);const[activeCard,setActiveCard]=useState(null);const[percentageToBePaid,setPercentageToBePaid]=useState(50);const[cost,setCost]=useState(0);const[marks,setMarks]=useState({0:{style:{color:\"blue\"},label:\"0%\"},10:{style:{color:\"blue\"},label:\"10%\"},20:{style:{color:\"blue\"},label:\"20%\"},30:{style:{color:\"blue\"},label:\"30%\"},40:{style:{color:\"blue\"},label:\"40%\"},50:{style:{color:\"blue\"},label:\"50%\"},60:{style:{color:\"blue\"},label:\"60%\"},70:{style:{color:\"blue\"},label:\"70%\"},80:{style:{color:\"blue\"},label:\"80%\"},90:{style:{color:\"blue\"},label:\"90%\"},100:{style:{color:\"blue\"},label:\"100%\"}});useEffect(()=>{const configuration={params:{id:userData.uniqueId}};axios.get(\"\".concat(process.env.REACT_APP_BASE_URL,\"/gather/employer/payment/methods/cards/only\"),configuration).then(res=>{if(res.data.message===\"Gathered employer payment cards!\"){console.log(res.data);const{cards}=res.data;setCards(cards.data);}else{console.log(\"Err\",res.data);}}).catch(err=>{console.log(\"Critical errror...:\",err);});},[]);const handlePaymentInitialization=()=>{confirmAlert({title:\"Are you SURE you'd like to deposit a partial deposit of \".concat(cost.toFixed(2),\"?\"),message:\"This is NOT completely permanent, IF the contracted hacker does NOT complete the required work or is incompetent, you have the ABILITY to RETRIEVE your un-used funds at a later point. Confirmed transfers/payments will ALSO need to be confirmed by you prior to any money being transferred throughout accounts.\",buttons:[{label:'Yes, Deposit Partial Funds!',onClick:()=>{console.log(\"yes notify and run logic!\");if(activeCard!==null){const config={userID:userData.uniqueId,depositAmount:Number(cost),hackerID:currentApplication.applicantId,activeCard,publicCompanyName:listing.publicCompanyName,jobID:currentApplication.generatedID};axios.post(\"\".concat(process.env.REACT_APP_BASE_URL,\"/deposit/funds/specific/hacker/initialization/process/partial/specific\"),config).then(res=>{if(res.data.message===\"Successfully deposited funds and notified hacker!\"){console.log(res.data);const{employer}=res.data;setIsOpenState(false);setActiveCard(null);setPercentageToBePaid(50);const findIndexJobUpdated=employer.activeHiredHackers.findIndex(x=>x.id===currentApplication.id);const promises=[];const foundRelated=employer.activeHiredHackers[findIndexJobUpdated];for(let index=0;index<foundRelated.paymentHistory.length;index++){const payment=foundRelated.paymentHistory[index];if(payment.recurring===true){// fetch the payment data..\nconst{price}=payment.completedPayment.phases[0].items[0];promises.push(new Promise((resolve,reject)=>{axios.get(\"\".concat(process.env.REACT_APP_BASE_URL,\"/fetch/price/by/id/quick\"),{params:{priceID:price}}).then(res=>{const{priceData,message}=res.data;if(message===\"Success!\"){const newPriceObj={...payment,paymentData:priceData};resolve(newPriceObj);}else{resolve(null);}}).catch(err=>{reject(err);});}));}else{// just return the item - payment data already exists\npromises.push(new Promise(resolve=>{resolve(payment);}));}}Promise.all(promises).then(passedData=>{console.log(\"passedData\",passedData);setCurrentApplication({...foundRelated,paymentHistory:passedData});});NotificationManager.success(\"We've successfully deposited the funds into \".concat(process.env.REACT_APP_APPLICATION_NAME,\" & your contracted hacker is now READY to go and should start working immediately (within 1 business day)! Congrats on your new hire!\"),\"Succesfully processed request & notified hacker!\",4750);}else if(res.data.message===\"Listing/job is already complete, cannot make payment!\"){console.log(\"Err - already paid and job has ended..\",res.data);setIsOpenState(false);setActiveCard(null);setPercentageToBePaid(50);NotificationManager.info(\"This listing has ALREADY ended & the recipient of your payment transaction WILL NOT receive these funds, therefore we have declined to accept your payment & no charge was made.\",\"NO CHARGE WAS MADE/INITIATED!\",4750);}else{console.log(\"Err\",res.data);setIsOpenState(false);setActiveCard(null);setPercentageToBePaid(50);NotificationManager.error(\"An error occurred while attempting to make changes, update the hacker hiree and process overall related logic - if this problem persists, please contact support or try this action again!\",\"An error occurred while attempting to notifiy related hacker!\",4750);}}).catch(err=>{console.log(\"Critical err\",err);setIsOpenState(false);setActiveCard(null);setPercentageToBePaid(50);NotificationManager.error(\"An error occurred while attempting to make changes, update the hacker hiree and process overall related logic - if this problem persists, please contact support or try this action again!\",\"An error occurred while attempting to notifiy related hacker!\",4750);});}else{setIsOpenState(false);setActiveCard(null);setPercentageToBePaid(50);NotificationManager.warning(\"You MUST select a 'payment card' to take the desired funds from, We will bill/draw funds from this account so check your balance prior to running this command to avoid errors!\",\"Please select a 'payment card' before continuing!\",4750);}}},{label:'No, Cancel/Exit.',onClick:()=>{console.log(\"canelled/don't run logic\");}}]});};const handleSliderValueChange=percentage=>{console.log(\"handleSliderValueChange percentage\",percentage);setPercentageToBePaid(percentage);};const onAfterChange=percentage=>{console.log(\"onAfterChange percentage\",percentage);const totalCost=Math.round(Number(currentApplication.amountOfMoneyUponCompletion));const perc=parseFloat(percentage)/100.0;const converted=totalCost*perc;setCost(converted);};const calculateCurrentSelectedCost=percentage=>{const totalCost=Math.round(Number(currentApplication.amountOfMoneyUponCompletion));const perc=parseFloat(percentage)/100.0;const converted=totalCost*perc;return\"$\".concat(converted.toFixed(2),\" currently selected to be paid\");};console.log(\"Cost\",cost);return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Sheet,{disableDrag:true,className:\"my-sheet-container-price-wrapper\",draggable:false,isOpen:isOpen,onClose:()=>{setIsOpenState(false);}},/*#__PURE__*/React.createElement(Sheet.Container,{className:\"my-sheet-container-price\"},/*#__PURE__*/React.createElement(Sheet.Header,null,/*#__PURE__*/React.createElement(\"div\",{style:{margin:\"12.5px\"},className:\"centered-both-ways\"},/*#__PURE__*/React.createElement(Button,{onClick:()=>{setActiveCard(null);setIsOpenState(false);},className:\"btn-square-danger\",outline:true,color:\"danger-2x\",style:{width:\"100%\"}},\"Exit/Close This Pane\"))),/*#__PURE__*/React.createElement(Sheet.Content,null,/*#__PURE__*/React.createElement(\"div\",{id:\"breadcrumb-full-payment\"},/*#__PURE__*/React.createElement(Breadcrumb,{id:\"breadcrumb-full-payment\",parent:\"Make FULL Payment\",title:currentApplication!==null?\"Make a full deposit/payment to this contractor (\".concat(currentApplication.applicantName,\")\"):\"Loading Data...\"}),/*#__PURE__*/React.createElement(Container,{className:\"container-pane-full-payment\",fluid:true},currentApplication!==null?/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{sm:\"12\",md:\"12\",lg:\"12\",xl:\"12\"},/*#__PURE__*/React.createElement(Card,{className:\"card-payment-entirely-halved\"},/*#__PURE__*/React.createElement(CardHeader,null,/*#__PURE__*/React.createElement(\"h3\",{className:\"make-full-payment-header\"},\"Make \",/*#__PURE__*/React.createElement(\"strong\",null,\"PARTIAL\"),\" payments with the logic below, you may decide to only pay a portion - use this to pay fractions of a overall full payment\"),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(\"p\",{className:\"lead\"},\"You can choose ANY amount below in which you'd like to deposit with our \",/*#__PURE__*/React.createElement(\"strong\",{style:{color:\"#7366ff\",textDecorationLine:\"underline\"}},\"escrow style stripe payment system.\"),\" Use the progress bar to adjust your overall payment.\"),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(\"p\",{className:\"lead\"},\"This is essentially an 'escrow' type service with \",/*#__PURE__*/React.createElement(\"em\",{style:{textDecorationLine:\"underline\"}},\"stripe\"),\" that deposit's funds PRIOR to a hacker starting a contract to assure both \",process.env.REACT_APP_APPLICATION_NAME,\" AND the hacker themselves that once the \",/*#__PURE__*/React.createElement(\"strong\",{style:{color:\"#7366ff\",textDecorationLine:\"underline\"}},\"contract is successfully completed, the funds will be released..\"))),/*#__PURE__*/React.createElement(CardBody,null,/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(\"div\",{className:\"centered-both-ways\"},/*#__PURE__*/React.createElement(Col,{className:\"dotted-border-col\",sm:\"12\",md:\"6\",lg:\"6\",xl:\"6\"},/*#__PURE__*/React.createElement(\"h3\",null,\"Please select how much you'd like to pay out of the total \",/*#__PURE__*/React.createElement(\"strong\",{style:{color:\"darkred\",textDecorationLine:\"underline\"}},\"$\",Number(currentApplication.amountOfMoneyUponCompletion).toFixed(2),\" (USD-$)\"),\" amount to the hacker named \",/*#__PURE__*/React.createElement(\"strong\",{style:{color:\"darkred\",textDecorationLine:\"underline\"}},currentApplication.applicantName)),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(\"div\",{className:\"center-slider-adjustment-bar\"},/*#__PURE__*/React.createElement(\"p\",{className:\"lead\"},\"Please drag the marker to the appropriate position marking 'how much' you'd like to pay on this overall payment..\"),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(Slider,{value:percentageToBePaid,startPoint:0,onAfterChange:onAfterChange,onChange:handleSliderValueChange,marks:marks}),/*#__PURE__*/React.createElement(\"div\",{className:\"centered-both-ways\"},/*#__PURE__*/React.createElement(\"h3\",{className:\"current-selected-cost\"},calculateCurrentSelectedCost(percentageToBePaid))))),/*#__PURE__*/React.createElement(Col,{className:\"dotted-border-col\",sm:\"12\",md:\"6\",lg:\"6\",xl:\"6\"},/*#__PURE__*/React.createElement(\"h3\",null,\"Select a card that you wish to make this payment with..\"),/*#__PURE__*/React.createElement(\"hr\",null),typeof cards!==\"undefined\"&&cards.length>0?cards.slice(0,3).map((payment,idx)=>{return/*#__PURE__*/React.createElement(Fragment,{key:idx},/*#__PURE__*/React.createElement(ListGroupItem,{onClick:()=>setActiveCard(payment),className:activeCard!==null&&activeCard.id===payment.id?\"list-group-item-action listitem-pricing-card flex-column align-items-start active active-picked\":\"list-group-item-action listitem-pricing-card flex-column align-items-start\"},/*#__PURE__*/React.createElement(\"div\",{className:\"d-flex w-100 justify-content-between\"},/*#__PURE__*/React.createElement(\"h5\",{className:\"mb-1\"},\"ID: \",payment.id.slice(0,7),\"...\"),/*#__PURE__*/React.createElement(\"small\",{style:{color:\"#f73164\"},className:\"text-secondary\"},\"Added/Created: \",moment(payment.created*1000).fromNow())),/*#__PURE__*/React.createElement(\"p\",{className:\"mb-1\",style:{color:\"#51bb25\",fontWeight:\"bold\"}},\"**** **** **** \".concat(payment.card.last4)),/*#__PURE__*/React.createElement(\"small\",{className:\"text-muted\"},\"Exp. \".concat(payment.card.exp_month,\"/\").concat(payment.card.exp_year),\" \",/*#__PURE__*/React.createElement(\"small\",{className:\"float-right\"},\"Card Type: \",payment.card.brand))));}):/*#__PURE__*/React.createElement(Fragment,null,/*#__PURE__*/React.createElement(\"h3\",{style:{color:\"blue\",textDecorationLine:\"underline\"}},\"You don't have any availiable cards on file..\"),/*#__PURE__*/React.createElement(\"div\",{style:{padding:\"27.5px\"},className:\"centered-both-ways\"},/*#__PURE__*/React.createElement(\"img\",{src:require(\"../../../../../../../../../assets/images/credit-cards.jpg\"),className:\"credit-cards-placeholder\"})))))),/*#__PURE__*/React.createElement(Button,{onClick:()=>{handlePaymentInitialization();},className:\"btn-square-success\",outline:true,color:\"success-2x\",style:{width:\"100%\",marginTop:\"17.5px\"}},\"Make Payment (will need to double confirm)\")),/*#__PURE__*/React.createElement(CardFooter,null,/*#__PURE__*/React.createElement(\"h3\",null,\"If you're confused or would like more information on \",/*#__PURE__*/React.createElement(Link,{className:\"payment-linky\",to:\"/frequently/asked/questions/main/employer\"},\"escrow services\"),\", you can find a plethorea of information between the \",/*#__PURE__*/React.createElement(\"a\",{target:\"_blank\",href:\"https://en.wikipedia.org/wiki/Escrow\"},\"wiki page\"),\" or by clicking \",/*#__PURE__*/React.createElement(Link,{className:\"payment-linky\",to:\"/frequently/asked/questions/main/employer\"},\"here\"),\" to see exactly how \",/*#__PURE__*/React.createElement(\"strong\",{style:{textDecorationLine:\"underline\"}},\"WE\"),\" implement escrow type services!\"))))):/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(SkeletonTheme,{baseColor:\"#c9c9c9\",highlightColor:\"#444\"},/*#__PURE__*/React.createElement(\"p\",null,/*#__PURE__*/React.createElement(Skeleton,{count:45})))))))),/*#__PURE__*/React.createElement(Sheet.Backdrop,null)));};const mapStateToProps=state=>{return{userData:state.auth.data};};export default connect(mapStateToProps,{})(ClearPaymentsOrPartialPane);","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/src/components/dashboard/jobManagement/employers/manageHiredHackers/paymentRelated/mainSelection/sheetHelpers/partialPaymentClear/clearPaymentsOrPartial.js"],"names":["React","Fragment","useState","useEffect","Breadcrumb","Container","Row","Col","Card","CardBody","CardFooter","CardHeader","ListGroup","ListGroupItem","Popover","PopoverHeader","PopoverBody","Button","axios","Link","Sheet","connect","NotificationManager","Skeleton","SkeletonTheme","confirmAlert","moment","Slider","ClearPaymentsOrPartialPane","listing","setCurrentApplication","currentApplication","userData","isOpen","setIsOpenState","cards","setCards","activeCard","setActiveCard","percentageToBePaid","setPercentageToBePaid","cost","setCost","marks","setMarks","style","color","label","configuration","params","id","uniqueId","get","process","env","REACT_APP_BASE_URL","then","res","data","message","console","log","catch","err","handlePaymentInitialization","title","toFixed","buttons","onClick","config","userID","depositAmount","Number","hackerID","applicantId","publicCompanyName","jobID","generatedID","post","employer","findIndexJobUpdated","activeHiredHackers","findIndex","x","promises","foundRelated","index","paymentHistory","length","payment","recurring","price","completedPayment","phases","items","push","Promise","resolve","reject","priceID","priceData","newPriceObj","paymentData","all","passedData","success","REACT_APP_APPLICATION_NAME","info","error","warning","handleSliderValueChange","percentage","onAfterChange","totalCost","Math","round","amountOfMoneyUponCompletion","perc","parseFloat","converted","calculateCurrentSelectedCost","margin","width","applicantName","textDecorationLine","slice","map","idx","created","fromNow","fontWeight","card","last4","exp_month","exp_year","brand","padding","require","marginTop","mapStateToProps","state","auth"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport \"./styles.css\";\nimport Breadcrumb from '../../../../../../../../../layout/breadcrumb'\nimport { Container, Row, Col, Card, CardBody, CardFooter, CardHeader, ListGroup, ListGroupItem, Popover, PopoverHeader, PopoverBody, Button } from \"reactstrap\"\nimport axios from 'axios';\nimport { Link } from \"react-router-dom\";\nimport Sheet from 'react-modal-sheet';\nimport { connect } from \"react-redux\";\nimport { NotificationManager } from 'react-notifications';\nimport Skeleton, { SkeletonTheme } from 'react-loading-skeleton';\nimport { confirmAlert } from 'react-confirm-alert';\nimport moment from \"moment\";\nimport Slider from 'rc-slider';\n\n\nconst ClearPaymentsOrPartialPane = ({ listing, setCurrentApplication, currentApplication, userData, isOpen, setIsOpenState }) => {\n\n    const [ cards, setCards ] = useState([]);\n    const [ activeCard, setActiveCard ] = useState(null);\n    const [ percentageToBePaid, setPercentageToBePaid ] = useState(50);\n    const [ cost, setCost ] = useState(0);\n    const [ marks, setMarks ] = useState({\n        0: { style: { color: \"blue\" }, label: \"0%\" },\n        10: { style: { color: \"blue\" }, label: \"10%\" },\n        20: { style: { color: \"blue\" }, label: \"20%\" },\n        30: { style: { color: \"blue\" }, label: \"30%\" },\n        40: { style: { color: \"blue\" }, label: \"40%\" },\n        50: { style: { color: \"blue\" }, label: \"50%\" },\n        60: { style: { color: \"blue\" }, label: \"60%\" },\n        70: { style: { color: \"blue\" }, label: \"70%\" },\n        80: { style: { color: \"blue\" }, label: \"80%\" },\n        90: { style: { color: \"blue\" }, label: \"90%\" },\n        100: { style: { color: \"blue\" }, label: \"100%\" }\n    });\n\n    useEffect(() => {\n        const configuration = {\n            params: {\n                id: userData.uniqueId\n            }\n        }\n        axios.get(`${process.env.REACT_APP_BASE_URL}/gather/employer/payment/methods/cards/only`, configuration).then((res) => {\n            if (res.data.message === \"Gathered employer payment cards!\") {\n                console.log(res.data);\n\n                const { cards } = res.data;\n\n                setCards(cards.data);\n            } else {\n                console.log(\"Err\", res.data);\n            }\n        }).catch((err) => {\n            console.log(\"Critical errror...:\", err);\n        })\n    }, [])\n\n    const handlePaymentInitialization = () => {\n        confirmAlert({\n            title: `Are you SURE you'd like to deposit a partial deposit of ${cost.toFixed(2)}?`,\n            message: `This is NOT completely permanent, IF the contracted hacker does NOT complete the required work or is incompetent, you have the ABILITY to RETRIEVE your un-used funds at a later point. Confirmed transfers/payments will ALSO need to be confirmed by you prior to any money being transferred throughout accounts.`,\n            buttons: [\n              {\n                label: 'Yes, Deposit Partial Funds!',\n                onClick: () => {\n                    console.log(\"yes notify and run logic!\");\n\n                    if (activeCard !== null) {\n                        const config = {\n                            userID: userData.uniqueId,\n                            depositAmount: Number(cost),\n                            hackerID: currentApplication.applicantId,\n                            activeCard,\n                            publicCompanyName: listing.publicCompanyName,\n                            jobID: currentApplication.generatedID\n                        };\n                \n                        axios.post(`${process.env.REACT_APP_BASE_URL}/deposit/funds/specific/hacker/initialization/process/partial/specific`, config).then((res) => {\n                            if (res.data.message === \"Successfully deposited funds and notified hacker!\") {\n                                console.log(res.data);\n\n                                const { employer } = res.data;\n    \n                                setIsOpenState(false);\n                                setActiveCard(null);\n                                setPercentageToBePaid(50);\n\n                                const findIndexJobUpdated = employer.activeHiredHackers.findIndex((x) => x.id === currentApplication.id);\n                                \n                                const promises = [];\n                                const foundRelated = employer.activeHiredHackers[findIndexJobUpdated];\n\n                                for (let index = 0; index < foundRelated.paymentHistory.length; index++) {\n                                    const payment = foundRelated.paymentHistory[index];\n\n                                    if (payment.recurring === true) {\n                                        // fetch the payment data..\n                                        const { price } = payment.completedPayment.phases[0].items[0];\n\n                                        promises.push(new Promise((resolve, reject) => {\n                                            axios.get(`${process.env.REACT_APP_BASE_URL}/fetch/price/by/id/quick`, {\n                                                params: {\n                                                    priceID: price\n                                                }\n                                            }).then((res) => {\n                                                const { priceData, message } = res.data;\n\n                                                if (message === \"Success!\") {\n                                                    const newPriceObj = {\n                                                        ...payment,\n                                                        paymentData: priceData\n                                                    }\n                                                    resolve(newPriceObj);\n                                                } else {\n                                                    resolve(null);\n                                                }\n                                            }).catch((err) => {\n                                                reject(err);\n                                            })\n                                        }));\n                                    } else {\n                                        // just return the item - payment data already exists\n                                        promises.push(new Promise((resolve) => {\n                                            resolve(payment);\n                                        }));\n                                    }\n                                }\n\n                                Promise.all(promises).then((passedData) => {\n                                    console.log(\"passedData\", passedData);\n\n                                    setCurrentApplication({\n                                        ...foundRelated,\n                                        paymentHistory: passedData\n                                    });\n                                })\n    \n                                NotificationManager.success(`We've successfully deposited the funds into ${process.env.REACT_APP_APPLICATION_NAME} & your contracted hacker is now READY to go and should start working immediately (within 1 business day)! Congrats on your new hire!`, \"Succesfully processed request & notified hacker!\", 4750);\n                            } else if (res.data.message === \"Listing/job is already complete, cannot make payment!\") {\n                                console.log(\"Err - already paid and job has ended..\", res.data);\n\n                                setIsOpenState(false);\n                                setActiveCard(null);\n                                setPercentageToBePaid(50);\n    \n                                NotificationManager.info(\"This listing has ALREADY ended & the recipient of your payment transaction WILL NOT receive these funds, therefore we have declined to accept your payment & no charge was made.\", \"NO CHARGE WAS MADE/INITIATED!\", 4750);\n                            } else {\n                                console.log(\"Err\", res.data);\n\n                                setIsOpenState(false);\n                                setActiveCard(null);\n                                setPercentageToBePaid(50);\n    \n                                NotificationManager.error(\"An error occurred while attempting to make changes, update the hacker hiree and process overall related logic - if this problem persists, please contact support or try this action again!\", \"An error occurred while attempting to notifiy related hacker!\", 4750);\n                            }\n                        }).catch((err) => {\n                            console.log(\"Critical err\", err);\n                            \n                            setIsOpenState(false);\n                            setActiveCard(null);\n                            setPercentageToBePaid(50);\n    \n                            NotificationManager.error(\"An error occurred while attempting to make changes, update the hacker hiree and process overall related logic - if this problem persists, please contact support or try this action again!\", \"An error occurred while attempting to notifiy related hacker!\", 4750);\n                        })\n                    } else {\n                        setIsOpenState(false);\n                        setActiveCard(null);\n                        setPercentageToBePaid(50);\n\n                        NotificationManager.warning(\"You MUST select a 'payment card' to take the desired funds from, We will bill/draw funds from this account so check your balance prior to running this command to avoid errors!\", \"Please select a 'payment card' before continuing!\", 4750);\n                    }\n                }\n              },\n              {\n                label: 'No, Cancel/Exit.',\n                onClick: () => {\n                    console.log(\"canelled/don't run logic\");\n                }\n              }\n            ]\n        });\n    }\n    const handleSliderValueChange = (percentage) => {\n        console.log(\"handleSliderValueChange percentage\", percentage);\n\n        setPercentageToBePaid(percentage);\n    }\n    const onAfterChange = (percentage) => {\n        console.log(\"onAfterChange percentage\", percentage);\n\n        const totalCost = Math.round(Number(currentApplication.amountOfMoneyUponCompletion));\n        const perc = parseFloat(percentage) / 100.0;\n        const converted = totalCost * perc;\n        setCost(converted);\n    }\n    const calculateCurrentSelectedCost = (percentage) => {\n        const totalCost = Math.round(Number(currentApplication.amountOfMoneyUponCompletion));\n        const perc = parseFloat(percentage) / 100.0;\n        const converted = totalCost * perc;\n        return `$${converted.toFixed(2)} currently selected to be paid`;\n    }\n\n    console.log(\"Cost\", cost);\n\n    return (\n        <div>\n            <Sheet disableDrag={true} className={\"my-sheet-container-price-wrapper\"} draggable={false} isOpen={isOpen} onClose={() => {\n                setIsOpenState(false);\n            }}>\n                <Sheet.Container className={\"my-sheet-container-price\"}>\n                    <Sheet.Header>\n                        <div style={{ margin: \"12.5px\" }} className=\"centered-both-ways\">\n                            <Button onClick={() => {\n                                setActiveCard(null);\n                                setIsOpenState(false);\n                            }} className={\"btn-square-danger\"} outline color={\"danger-2x\"} style={{ width: \"100%\" }}>Exit/Close This Pane</Button>\n                        </div>\n                    </Sheet.Header>\n                    <Sheet.Content>\n                        <div id={\"breadcrumb-full-payment\"}>\n                            <Breadcrumb id={\"breadcrumb-full-payment\"} parent={\"Make FULL Payment\"} title={currentApplication !== null ? `Make a full deposit/payment to this contractor (${currentApplication.applicantName})` : \"Loading Data...\"} />\n                            <Container className='container-pane-full-payment' fluid={true}>\n                                {currentApplication !== null ? <Row>\n                                    <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                                        <Card className='card-payment-entirely-halved'>\n                                            <CardHeader>\n                                                <h3 className='make-full-payment-header'>Make <strong>PARTIAL</strong> payments with the logic below, you may decide to only pay a portion - use this to pay fractions of a overall full payment</h3>\n                                                <hr />\n                                                <p className='lead'>You can choose ANY amount below in which you'd like to deposit with our <strong style={{ color: \"#7366ff\", textDecorationLine: \"underline\" }}>escrow style stripe payment system.</strong> Use the progress bar to adjust your overall payment.</p>\n                                                <hr />\n                                                <p className='lead'>This is essentially an 'escrow' type service with <em style={{ textDecorationLine: \"underline\" }}>stripe</em> that deposit's funds PRIOR to a hacker starting a contract to assure both {process.env.REACT_APP_APPLICATION_NAME} AND the hacker themselves that once the <strong style={{ color: \"#7366ff\", textDecorationLine: \"underline\" }}>contract is successfully completed, the funds will be released..</strong></p>\n                                            </CardHeader>\n                                            <CardBody>\n                                                <Row>\n                                                    <div className='centered-both-ways'>\n                                                        <Col className='dotted-border-col' sm=\"12\" md=\"6\" lg=\"6\" xl=\"6\">\n                                                            <h3>Please select how much you'd like to pay out of the total <strong style={{ color: \"darkred\", textDecorationLine: \"underline\" }}>${Number(currentApplication.amountOfMoneyUponCompletion).toFixed(2)} (USD-$)</strong> amount to the hacker named <strong style={{ color: \"darkred\", textDecorationLine: \"underline\" }}>{currentApplication.applicantName}</strong></h3>\n                                                            <hr />\n                                                            <div className='center-slider-adjustment-bar'>\n                                                                <p className='lead'>Please drag the marker to the appropriate position marking 'how much' you'd like to pay on this overall payment..</p>\n                                                                <hr />\n                                                                <Slider value={percentageToBePaid} startPoint={0} onAfterChange={onAfterChange} onChange={handleSliderValueChange} marks={marks} />\n                                                                <div className='centered-both-ways'>\n                                                                    <h3 className='current-selected-cost'>{calculateCurrentSelectedCost(percentageToBePaid)}</h3>\n                                                                </div>\n                                                            </div>\n                                                        </Col>\n                                                        <Col className='dotted-border-col' sm=\"12\" md=\"6\" lg=\"6\" xl=\"6\">\n                                                            <h3>Select a card that you wish to make this payment with..</h3>\n                                                            <hr />\n                                                            {typeof cards !== \"undefined\" && cards.length > 0 ? cards.slice(0, 3).map((payment, idx) => {\n                                                                return (\n                                                                    <Fragment key={idx}>\n                                                                        <ListGroupItem onClick={() => setActiveCard(payment)} className={activeCard !== null && activeCard.id === payment.id ? \"list-group-item-action listitem-pricing-card flex-column align-items-start active active-picked\" : \"list-group-item-action listitem-pricing-card flex-column align-items-start\"}>\n                                                                            <div className=\"d-flex w-100 justify-content-between\">\n                                                                                <h5 className=\"mb-1\">ID: {payment.id.slice(0, 7)}...</h5><small style={{ color: \"#f73164\" }} className=\"text-secondary\">Added/Created: {moment(payment.created * 1000).fromNow()}</small>\n                                                                            </div>\n                                                                            <p className=\"mb-1\" style={{ color: \"#51bb25\", fontWeight: \"bold\" }}>{`**** **** **** ${payment.card.last4}`}</p>\n                                                                            <small className=\"text-muted\">{`Exp. ${payment.card.exp_month}/${payment.card.exp_year}`} <small className=\"float-right\">Card Type: {payment.card.brand}</small></small>\n                                                                        </ListGroupItem>\n                                                                    </Fragment>\n                                                                );\n                                                            }) : <Fragment>\n                                                                <h3 style={{ color: \"blue\", textDecorationLine: \"underline\" }}>You don't have any availiable cards on file..</h3>\n                                                                <div style={{ padding: \"27.5px\" }} className=\"centered-both-ways\">\n                                                                    <img src={require(\"../../../../../../../../../assets/images/credit-cards.jpg\")} className={\"credit-cards-placeholder\"} />\n                                                                </div>\n                                                            </Fragment>}\n                                                        </Col>\n                                                    </div>\n                                                </Row>\n                                                <Button onClick={() => {\n                                                    handlePaymentInitialization();\n                                                }} className={\"btn-square-success\"} outline color={\"success-2x\"} style={{ width: \"100%\", marginTop: \"17.5px\" }}>Make Payment (will need to double confirm)</Button>\n                                            </CardBody>\n                                            <CardFooter>\n                                                <h3>If you're confused or would like more information on <Link className={\"payment-linky\"} to={\"/frequently/asked/questions/main/employer\"}>escrow services</Link>, you can find a plethorea of information between the <a target=\"_blank\" href={\"https://en.wikipedia.org/wiki/Escrow\"}>wiki page</a> or by clicking <Link className={\"payment-linky\"} to={\"/frequently/asked/questions/main/employer\"}>here</Link> to see exactly how <strong style={{ textDecorationLine: \"underline\" }}>WE</strong> implement escrow type services!</h3>\n                                            </CardFooter>\n                                        </Card>\n                                    </Col>\n                                </Row> : <Row>\n                                <SkeletonTheme baseColor=\"#c9c9c9\" highlightColor=\"#444\">\n                                    <p>\n                                        <Skeleton count={45} />\n                                    </p>\n                                </SkeletonTheme>\n                                </Row>}\n                            </Container>\n                        </div>\n                    </Sheet.Content>\n                    </Sheet.Container>\n                <Sheet.Backdrop />\n            </Sheet>\n        </div>\n    );\n}\nconst mapStateToProps = (state) => {\n    return {\n        userData: state.auth.data\n    }\n}\nexport default connect(mapStateToProps, {  })(ClearPaymentsOrPartialPane);"]},"metadata":{},"sourceType":"module"}