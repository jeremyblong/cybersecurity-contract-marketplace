{"ast":null,"code":"var _jsxFileName = \"/home/kali/Documents/cybersecurity/client/src/components/dashboard/learning/educationalCoursesSeminars/viewCourses/helpers/comments/helpers/helperFunctions.js\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { Popover, PopoverHeader, PopoverBody } from \"reactstrap\";\n\nconst RenderPopoverEmojiLogic = _ref => {\n  let {\n    reactions\n  } = _ref;\n  const [emojiStateArr, setEmojiStateArray] = useState([]);\n  const [stateCount, setStateCount] = useState(0);\n  const [ready, setReady] = useState(false);\n  useEffect(() => {\n    const emojiArray = [];\n    const alreadyAdded = [];\n    let count = 0;\n\n    for (const key in reactions) {\n      const reactionName = key;\n      const reactionOutcome = reactions[key];\n      count++;\n      console.log(\"emoji looped...:\", reactionName, reactionOutcome); // // check if emoji is already added - if not... add it!\n      // if (!alreadyAdded.includes(reactionName)) {\n      // } else {\n      //     const newItem = {};\n      //     // push into array\n      //     emojiArray.push(newItem);\n      // }\n    }\n\n    setStateCount(count);\n    setEmojiStateArray(emojiArray);\n  }, []);\n\n  const renderMainContentPopover = () => {\n    if (ready === true) {\n      return /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Popover, {\n        placement: \"bottom\",\n        isOpen: emojiOpen,\n        target: \"Popover1\",\n        toggle: () => {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(PopoverHeader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 25\n        }\n      }, \"Current Comment Reaction's (\", stateCount, \" total response's)\"), /*#__PURE__*/React.createElement(PopoverBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 29\n        }\n      }, typeof emojiStateArr !== \"undefined\" && emojiStateArr.length > 0 ? emojiStateArr.map((emoji, idxxx) => {\n        console.log(\"custom emoji rendered...:\", emoji);\n        return /*#__PURE__*/React.createElement(Fragment, {\n          key: idxxx,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 41\n          }\n        });\n      }) : null))));\n    } else {\n      return null;\n    }\n  };\n\n  console.log(\"Reactions...: \", reactions, count, emojiArray);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, renderMainContentPopover());\n};\n\nexport default {\n  RenderPopoverEmojiLogic\n};","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/learning/educationalCoursesSeminars/viewCourses/helpers/comments/helpers/helperFunctions.js"],"names":["React","Fragment","useEffect","useState","Popover","PopoverHeader","PopoverBody","RenderPopoverEmojiLogic","reactions","emojiStateArr","setEmojiStateArray","stateCount","setStateCount","ready","setReady","emojiArray","alreadyAdded","count","key","reactionName","reactionOutcome","console","log","renderMainContentPopover","emojiOpen","length","map","emoji","idxxx"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,SAASC,OAAT,EAAkBC,aAAlB,EAAiCC,WAAjC,QAAoD,YAApD;;AAEA,MAAMC,uBAAuB,GAAG,QAAmB;AAAA,MAAlB;AAAEC,IAAAA;AAAF,GAAkB;AAE/C,QAAM,CAAEC,aAAF,EAAiBC,kBAAjB,IAAwCP,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAAEQ,UAAF,EAAcC,aAAd,IAAgCT,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAAEU,KAAF,EAASC,QAAT,IAAsBX,QAAQ,CAAC,KAAD,CAApC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AAEZ,UAAMa,UAAU,GAAG,EAAnB;AACA,UAAMC,YAAY,GAAG,EAArB;AACA,QAAIC,KAAK,GAAG,CAAZ;;AAEA,SAAK,MAAMC,GAAX,IAAkBV,SAAlB,EAA6B;AACzB,YAAMW,YAAY,GAAGD,GAArB;AACA,YAAME,eAAe,GAAGZ,SAAS,CAACU,GAAD,CAAjC;AACAD,MAAAA,KAAK;AAELI,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCH,YAAhC,EAA8CC,eAA9C,EALyB,CAOzB;AACA;AAEA;AACA;AACA;AACA;AACA;AACH;;AACDR,IAAAA,aAAa,CAACK,KAAD,CAAb;AACAP,IAAAA,kBAAkB,CAACK,UAAD,CAAlB;AACH,GAxBQ,EAwBN,EAxBM,CAAT;;AA0BA,QAAMQ,wBAAwB,GAAG,MAAM;AACnC,QAAIV,KAAK,KAAK,IAAd,EAAoB;AAChB,0BACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,OAAD;AAAS,QAAA,SAAS,EAAC,QAAnB;AAA4B,QAAA,MAAM,EAAEW,SAApC;AAA+C,QAAA,MAAM,EAAC,UAAtD;AAAiE,QAAA,MAAM,EAAE,MAAM,CAAE,CAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAA4Cb,UAA5C,uBADJ,eAEI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,OAAOF,aAAP,KAAyB,WAAzB,IAAwCA,aAAa,CAACgB,MAAd,GAAuB,CAA/D,GAAmEhB,aAAa,CAACiB,GAAd,CAAkB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACpGP,QAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCK,KAAzC;AACA,4BACI,oBAAC,QAAD;AAAU,UAAA,GAAG,EAAEC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,OAPmE,CAAnE,GAOI,IART,CADJ,CAFJ,CADJ,CADJ;AAmBH,KApBD,MAoBO;AACH,aAAO,IAAP;AACH;AACJ,GAxBD;;AA0BAP,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8Bd,SAA9B,EAAyCS,KAAzC,EAAgDF,UAAhD;AAEA,sBACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKQ,wBAAwB,EAD7B,CADJ;AAKH,CAjED;;AAmEA,eAAe;AACXhB,EAAAA;AADW,CAAf","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\nimport { Popover, PopoverHeader, PopoverBody } from \"reactstrap\";\n\nconst RenderPopoverEmojiLogic = ({ reactions }) => {\n\n    const [ emojiStateArr, setEmojiStateArray ] = useState([]);\n    const [ stateCount, setStateCount ] = useState(0);\n    const [ ready, setReady ] = useState(false);\n\n    useEffect(() => {\n\n        const emojiArray = [];\n        const alreadyAdded = [];\n        let count = 0;\n\n        for (const key in reactions) {\n            const reactionName = key;\n            const reactionOutcome = reactions[key];\n            count++;\n\n            console.log(\"emoji looped...:\", reactionName, reactionOutcome);\n        \n            // // check if emoji is already added - if not... add it!\n            // if (!alreadyAdded.includes(reactionName)) {\n                \n            // } else {\n            //     const newItem = {};\n            //     // push into array\n            //     emojiArray.push(newItem);\n            // }\n        }\n        setStateCount(count);\n        setEmojiStateArray(emojiArray);\n    }, [])\n\n    const renderMainContentPopover = () => {\n        if (ready === true) {\n            return (\n                <Fragment>\n                    <Popover placement=\"bottom\" isOpen={emojiOpen} target=\"Popover1\" toggle={() => {}}>\n                        <PopoverHeader>Current Comment Reaction's ({stateCount} total response's)</PopoverHeader>\n                        <PopoverBody>\n                            <Row>\n                                {typeof emojiStateArr !== \"undefined\" && emojiStateArr.length > 0 ? emojiStateArr.map((emoji, idxxx) => {\n                                    console.log(\"custom emoji rendered...:\", emoji);\n                                    return (\n                                        <Fragment key={idxxx}>\n\n                                        </Fragment>\n                                    );\n                                }) : null}\n                            </Row>\n                        </PopoverBody>\n                    </Popover>\n                </Fragment>\n            );\n        } else {\n            return null;\n        }\n    }\n\n    console.log(\"Reactions...: \", reactions, count, emojiArray);\n\n    return (\n        <Fragment>\n            {renderMainContentPopover()}\n        </Fragment>\n    );\n}\n\nexport default {\n    RenderPopoverEmojiLogic\n};"]},"metadata":{},"sourceType":"module"}