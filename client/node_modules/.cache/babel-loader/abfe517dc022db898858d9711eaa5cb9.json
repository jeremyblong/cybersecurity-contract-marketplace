{"ast":null,"code":"import _toConsumableArray from \"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/src/components/dashboard/learning/tutorialVideos/create/formSteps/pageOne/formPageOne.js\";\n\nimport React, { Fragment } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { Row, Col, Form, Label, Input, ListGroupItem, ListGroup, Button } from 'reactstrap';\nimport { WithContext as ReactTags } from 'react-tag-input';\nimport { NotificationManager } from \"react-notifications\";\nvar KeyCodes = {\n  comma: 188,\n  enter: [10, 13]\n};\nvar delimiters = [].concat(_toConsumableArray(KeyCodes.enter), [KeyCodes.comma]);\nvar suggestions = [];\n\nvar PageOneVideoCreationHelper = function PageOneVideoCreationHelper(_ref) {\n  var saveNewDetails = _ref.saveNewDetails,\n      jumpToStep = _ref.jumpToStep,\n      progress = _ref.progress,\n      setProgress = _ref.setProgress;\n\n  var _useForm = useForm({\n    mode: \"onTouched\",\n    reValidateMode: \"onBlur\"\n  }),\n      register = _useForm.register,\n      handleSubmit = _useForm.handleSubmit,\n      control = _useForm.control,\n      getValues = _useForm.getValues,\n      setValue = _useForm.setValue,\n      errors = _useForm.formState.errors;\n\n  var onSubmit = function onSubmit(data) {\n    if (data !== '') {\n      console.log(\"Great success!\");\n      saveNewDetails(data);\n      jumpToStep(1);\n    } else {\n      errors.showMessages();\n    }\n  };\n\n  var gatheredValues = getValues();\n  console.log(\"gatheredValues\", gatheredValues);\n\n  var _handleDelete = function handleDelete(i) {\n    setValue(\"hashtags\", gatheredValues.hashtags.filter(function (tag, index) {\n      return index !== i;\n    }), {\n      shouldValidate: true\n    });\n  };\n\n  var _handleAddition = function handleAddition(tag) {\n    setValue(\"hashtags\", [].concat(_toConsumableArray(gatheredValues.hashtags), [tag]), {\n      shouldValidate: true\n    });\n  };\n\n  var _handleDrag = function handleDrag(tag, currPos, newPos, tagggs) {\n    var tags = _toConsumableArray(tagggs);\n\n    var newTags = tags.slice();\n    newTags.splice(currPos, 1);\n    newTags.splice(newPos, 0, tag); // re-render\n\n    return newTags;\n  };\n\n  var handleInputChange = function handleInputChange(e) {\n    var _e$target = e.target,\n        value = _e$target.value,\n        name = _e$target.name;\n    setValue(name, value, {\n      shouldValidate: true\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    className: \"needs-validation\",\n    onSubmit: handleSubmit(onSubmit, function (errorsss, e) {\n      console.log(\"errrrrrs\", errorsss, e);\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: \"12 mb-3\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 33\n    }\n  }, \"Video Title\"), /*#__PURE__*/React.createElement(Input, Object.assign({}, register(\"videoTitle\", {\n    required: {\n      value: true,\n      message: \"You MUST enter a value between 15-125 characters\"\n    },\n    minLength: {\n      value: 15,\n      message: \"You must enter AT Least 15 characters\"\n    },\n    maxLength: {\n      value: 125,\n      message: \"You may ONLY enter 125 characters or less\"\n    }\n  }), {\n    className: \"form-control\",\n    onChange: function onChange(e) {\n      return handleInputChange(e);\n    },\n    value: gatheredValues.videoTitle,\n    name: \"videoTitle\",\n    type: \"text\",\n    placeholder: \"Enter your 'video title' for this tutorial..\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 33\n    }\n  })), errors.videoTitle ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"span-tooltip\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 54\n    }\n  }, errors.videoTitle.message) : null), /*#__PURE__*/React.createElement(Col, {\n    md: \"12 mb-3\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 33\n    }\n  }, \"Video Subtitle\"), /*#__PURE__*/React.createElement(Input, Object.assign({}, register(\"videoSubtitle\", {\n    required: {\n      value: true,\n      message: \"You MUST enter a value between 15-125 characters\"\n    },\n    minLength: {\n      value: 15,\n      message: \"You must enter AT Least 15 characters\"\n    },\n    maxLength: {\n      value: 125,\n      message: \"You may ONLY enter 125 characters or less\"\n    }\n  }), {\n    className: \"form-control\",\n    onChange: function onChange(e) {\n      return handleInputChange(e);\n    },\n    value: gatheredValues.videoSubtitle,\n    name: \"videoSubtitle\",\n    type: \"text\",\n    placeholder: \"Enter your 'subtitle' for this tutorial..\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 33\n    }\n  })), errors.videoSubtitle ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"span-tooltip\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 57\n    }\n  }, errors.videoSubtitle.message) : null), /*#__PURE__*/React.createElement(Col, {\n    sm: \"12 mb-3\",\n    md: \"12 mb-3\",\n    lg: \"12 mb-3\",\n    xl: \"12 mb-3\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 33\n    }\n  }, \"Enter relevant tags/hashtags (people will use these tags when searching for specific/condensed results) - \", /*#__PURE__*/React.createElement(\"strong\", {\n    style: {\n      color: \"blue\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 146\n    }\n  }, \"5(MIN) - 15(MAX) Tags\")), /*#__PURE__*/React.createElement(ListGroup, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Controller, Object.assign({\n    control: control,\n    name: \"hashtags\"\n  }, register(\"hashtags\", {\n    required: {\n      value: true,\n      message: \"You MUST enter AT least 5 (five) tags up to a maximum of 15 (fifteen) tags\"\n    }\n  }), {\n    render: function render(_ref2) {\n      var field = _ref2.field;\n      return /*#__PURE__*/React.createElement(ReactTags, Object.assign({}, field, {\n        tags: gatheredValues.hashtags,\n        name: \"hashtags\",\n        suggestions: suggestions,\n        classNames: {\n          tags: 'hashtagsTagsClass',\n          tagInput: 'hashtagsTagInputClass',\n          tagInputField: 'hashtagsTagInputFieldClass',\n          selected: 'hashtagsSelectedClass',\n          tag: 'hashtagsTagClass badge badge-primary',\n          remove: 'hashtagsRemoveClass',\n          suggestions: 'hashtagsSuggestionsClass',\n          activeSuggestion: 'hashtagsActiveSuggestionClass'\n        },\n        handleDelete: function handleDelete(index) {\n          setValue('hashtags', _handleDelete(index, gatheredValues.hashtags), {\n            shouldValidate: true\n          });\n        },\n        renderSuggestion: function renderSuggestion(suggestion) {\n          // return list item(s)\n          return /*#__PURE__*/React.createElement(ListGroupItem, {\n            className: \"custom-suggestion-groupitem\",\n            key: suggestion.index,\n            onClick: function onClick() {\n              // run conditional checks\n              if (typeof gatheredValues.hashtags !== \"undefined\") {\n                if (gatheredValues.hashtags.length < 15) {\n                  if (gatheredValues.hashtags.length > 0) {\n                    setValue('hashtags', [].concat(_toConsumableArray(gatheredValues.hashtags), [suggestion]), {\n                      shouldValidate: true\n                    });\n                  } else {\n                    setValue('hashtags', [suggestion], {\n                      shouldValidate: true\n                    });\n                  }\n                } else {\n                  NotificationManager.warning('You have entered TOO many hashtags & we cannot add your current tag until some are removed.', \"Too many hashtags!\", 4250);\n                }\n              } else {\n                setValue('hashtags', [suggestion], {\n                  shouldValidate: true\n                });\n              }\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 57\n            }\n          }, suggestion.text);\n        },\n        readOnly: false,\n        placeholder: \"Enter a tag (these are how people search & find your listing)\",\n        maxLength: 15,\n        handleAddition: function handleAddition(tag) {\n          if (typeof gatheredValues.hashtags !== \"undefined\") {\n            if (gatheredValues.hashtags.length < 15) {\n              if (gatheredValues.hashtags.length > 0) {\n                _handleAddition(tag);\n              } else {\n                setValue('hashtags', [tag], {\n                  shouldValidate: true\n                });\n              }\n            } else {\n              NotificationManager.warning('You have entered TOO many hashtags & we cannot add your current tag until some are removed.', \"Too many hashtags!\", 4500);\n            }\n          } else {\n            setValue('hashtags', [tag], {\n              shouldValidate: true\n            });\n          }\n        },\n        handleDrag: function handleDrag(tag, currPos, newPos) {\n          setValue('hashtags', _handleDrag(tag, currPos, newPos, gatheredValues.hashtags), {\n            shouldValidate: true\n          });\n        },\n        delimiters: delimiters,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 45\n        }\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 37\n    }\n  }))), errors.hashtags ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"span-tooltip\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 52\n    }\n  }, errors.hashtags.message) : null), /*#__PURE__*/React.createElement(Col, {\n    sm: \"12 mb-3\",\n    md: \"12 mb-3\",\n    lg: \"12 mb-3\",\n    xl: \"12 mb-3\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 33\n    }\n  }, \"Video Description\"), /*#__PURE__*/React.createElement(Input, Object.assign({}, register(\"description\", {\n    required: {\n      value: true,\n      message: \"You MUST enter a value between 15-350 characters\"\n    },\n    minLength: {\n      value: 15,\n      message: \"You must enter AT Least 15 characters\"\n    },\n    maxLength: {\n      value: 350,\n      message: \"You may ONLY enter 350 characters or less\"\n    }\n  }), {\n    className: \"form-control\",\n    onChange: function onChange(e) {\n      return handleInputChange(e);\n    },\n    value: gatheredValues.description,\n    name: \"description\",\n    type: \"textarea\",\n    rows: 10,\n    placeholder: \"Enter your 'video title' for this tutorial..\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 33\n    }\n  })), errors.description ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"span-tooltip\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 55\n    }\n  }, errors.description.message) : null)), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    className: \"btn-square-success\",\n    color: \"success\",\n    style: {\n      width: \"100%\",\n      marginBottom: \"12.5px\",\n      marginTop: \"12.5px\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 25\n    }\n  }, \"Proceed Forward W/Next Step\")))));\n};\n\nexport default PageOneVideoCreationHelper;","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/src/components/dashboard/learning/tutorialVideos/create/formSteps/pageOne/formPageOne.js"],"names":["React","Fragment","useForm","Controller","Row","Col","Form","Label","Input","ListGroupItem","ListGroup","Button","WithContext","ReactTags","NotificationManager","KeyCodes","comma","enter","delimiters","suggestions","PageOneVideoCreationHelper","saveNewDetails","jumpToStep","progress","setProgress","mode","reValidateMode","register","handleSubmit","control","getValues","setValue","errors","formState","onSubmit","data","console","log","showMessages","gatheredValues","handleDelete","i","hashtags","filter","tag","index","shouldValidate","handleAddition","handleDrag","currPos","newPos","tagggs","tags","newTags","slice","splice","handleInputChange","e","target","value","name","errorsss","required","message","minLength","maxLength","videoTitle","videoSubtitle","color","field","tagInput","tagInputField","selected","remove","activeSuggestion","suggestion","length","warning","text","description","width","marginBottom","marginTop"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { Row, Col, Form, Label, Input, ListGroupItem, ListGroup, Button } from 'reactstrap';\nimport { WithContext as ReactTags } from 'react-tag-input';\nimport { NotificationManager } from \"react-notifications\";\n\n\nconst KeyCodes = {\n  comma: 188,\n  enter: [10, 13],\n};\n\nconst delimiters = [...KeyCodes.enter, KeyCodes.comma];\n\nconst suggestions = [];\n\nconst PageOneVideoCreationHelper = ({ saveNewDetails, jumpToStep, progress, setProgress }) => {\n\n    const { register, handleSubmit, control, getValues, setValue, formState: { errors }} = useForm({\n        mode: \"onTouched\",\n        reValidateMode: \"onBlur\"\n    });\n\n    const onSubmit = data => {\n\n        if (data !== '') {\n            \n            console.log(\"Great success!\");\n\n            saveNewDetails(data);\n\n            jumpToStep(1);\n        } else {\n            errors.showMessages();\n        }\n    };\n\n    const gatheredValues = getValues();\n\n    console.log(\"gatheredValues\", gatheredValues);\n\n    const handleDelete = (i) => {\n        setValue(\"hashtags\", gatheredValues.hashtags.filter((tag, index) => index !== i), { shouldValidate: true });\n    }\n    const handleAddition = (tag) => {\n        setValue(\"hashtags\", [...gatheredValues.hashtags, tag], { shouldValidate: true });\n    }\n\n    const handleDrag = (tag, currPos, newPos, tagggs) => {\n        const tags = [...tagggs];\n        const newTags = tags.slice();\n\n        newTags.splice(currPos, 1);\n        newTags.splice(newPos, 0, tag);\n\n        // re-render\n        return newTags;\n    }\n\n    const handleInputChange = (e) => {\n        const { value, name } = e.target;\n\n        setValue(name, value, { shouldValidate: true });\n    }\n\n    return (\n        <Fragment>\n            <Row>\n                <Col sm=\"12\">\n                    <Form className=\"needs-validation\" onSubmit={handleSubmit(onSubmit, (errorsss, e) => {\n                        console.log(\"errrrrrs\", errorsss, e);\n                    })}>\n                        <div className=\"form-row\">\n                            \n                            <Col md=\"12 mb-3\">\n                                <Label>Video Title</Label>\n                                <Input {...register(\"videoTitle\", { required: {\n                                    value: true,\n                                    message: \"You MUST enter a value between 15-125 characters\"\n                                }, minLength: {\n                                    value: 15,\n                                    message: \"You must enter AT Least 15 characters\"\n                                }, maxLength: {\n                                    value: 125,\n                                    message: \"You may ONLY enter 125 characters or less\"\n                                }})} className=\"form-control\" onChange={(e) => handleInputChange(e)} value={gatheredValues.videoTitle} name=\"videoTitle\" type=\"text\" placeholder=\"Enter your 'video title' for this tutorial..\" />\n                                {errors.videoTitle ? <span className=\"span-tooltip\">{errors.videoTitle.message}</span> : null}\n                            </Col>\n                            \n                            <Col md=\"12 mb-3\">\n                                <Label>Video Subtitle</Label>\n                                <Input {...register(\"videoSubtitle\", { required: {\n                                    value: true,\n                                    message: \"You MUST enter a value between 15-125 characters\"\n                                }, minLength: {\n                                    value: 15,\n                                    message: \"You must enter AT Least 15 characters\"\n                                }, maxLength: {\n                                    value: 125,\n                                    message: \"You may ONLY enter 125 characters or less\"\n                                }})} className=\"form-control\" onChange={(e) => handleInputChange(e)} value={gatheredValues.videoSubtitle} name=\"videoSubtitle\" type=\"text\" placeholder=\"Enter your 'subtitle' for this tutorial..\" />\n                                {errors.videoSubtitle ? <span className=\"span-tooltip\">{errors.videoSubtitle.message}</span> : null}\n                            </Col>\n                            <Col sm=\"12 mb-3\" md=\"12 mb-3\" lg=\"12 mb-3\" xl=\"12 mb-3\">\n                                <Label>Enter relevant tags/hashtags (people will use these tags when searching for specific/condensed results) - <strong style={{ color: \"blue\" }}>5(MIN) - 15(MAX) Tags</strong></Label>\n                                <ListGroup>\n                                    <Controller\n                                        control={control}\n                                        name=\"hashtags\"\n                                        {...register(\"hashtags\", { required: {\n                                            value: true,\n                                            message: \"You MUST enter AT least 5 (five) tags up to a maximum of 15 (fifteen) tags\"\n                                        }})}\n                                        render={({ field }) => (\n                                            <ReactTags \n                                                {...field}\n                                                tags={gatheredValues.hashtags}\n                                                name={\"hashtags\"}\n                                                suggestions={suggestions}\n                                                classNames={{\n                                                    tags: 'hashtagsTagsClass',\n                                                    tagInput: 'hashtagsTagInputClass',\n                                                    tagInputField: 'hashtagsTagInputFieldClass',\n                                                    selected: 'hashtagsSelectedClass',\n                                                    tag: 'hashtagsTagClass badge badge-primary',\n                                                    remove: 'hashtagsRemoveClass',\n                                                    suggestions: 'hashtagsSuggestionsClass',\n                                                    activeSuggestion: 'hashtagsActiveSuggestionClass'\n                                                }}\n                                                handleDelete={(index) => {\n                                                    setValue('hashtags', handleDelete(index, gatheredValues.hashtags), { shouldValidate: true });\n                                                }}\n                                                renderSuggestion={(suggestion) => {\n                                                    // return list item(s)\n                                                    return (\n                                                        <ListGroupItem className=\"custom-suggestion-groupitem\" key={suggestion.index} onClick={() => {\n                                                            // run conditional checks\n                                                            if (typeof gatheredValues.hashtags !== \"undefined\") {\n                                                                if (gatheredValues.hashtags.length < 15) {\n                                                                    if (gatheredValues.hashtags.length > 0) {\n                                                                        setValue('hashtags', [...gatheredValues.hashtags, suggestion], { shouldValidate: true });\n                                                                    } else {\n                                                                        setValue('hashtags', [suggestion], { shouldValidate: true });\n                                                                    }\n                                                                } else {\n                                                                    NotificationManager.warning('You have entered TOO many hashtags & we cannot add your current tag until some are removed.', \"Too many hashtags!\", 4250);\n                                                                }\n                                                            } else {\n                                                                setValue('hashtags', [suggestion], { shouldValidate: true });\n                                                            }\n                                                        }}>{suggestion.text}</ListGroupItem>\n                                                    );\n                                                }}\n                                                readOnly={false}\n                                                placeholder={\"Enter a tag (these are how people search & find your listing)\"}\n                                                maxLength={15}\n                                                handleAddition={(tag) => {\n                                                    if (typeof gatheredValues.hashtags !== \"undefined\") {\n                                                        if (gatheredValues.hashtags.length < 15) {\n                                                            if (gatheredValues.hashtags.length > 0) {\n                                                                handleAddition(tag);\n                                                            } else {\n                                                                setValue('hashtags', [tag], { shouldValidate: true });\n                                                            }\n                                                        } else {\n                                                            NotificationManager.warning('You have entered TOO many hashtags & we cannot add your current tag until some are removed.', \"Too many hashtags!\", 4500);\n                                                        }\n                                                    } else {\n                                                        setValue('hashtags', [tag], { shouldValidate: true });\n                                                    }\n                                                }}\n                                                handleDrag={(tag, currPos, newPos) => {\n                                                    setValue('hashtags', handleDrag(tag, currPos, newPos, gatheredValues.hashtags), { shouldValidate: true });\n                                                }}\n                                                delimiters={delimiters} \n                                            />\n                                            \n                                        )}\n                                    />\n                                </ListGroup>\n                                {errors.hashtags ? <span className=\"span-tooltip\">{errors.hashtags.message}</span> : null}\n                            </Col>\n                            <Col sm=\"12 mb-3\" md=\"12 mb-3\" lg=\"12 mb-3\" xl=\"12 mb-3\">\n                                <Label>Video Description</Label>\n                                <Input {...register(\"description\", { required: {\n                                    value: true,\n                                    message: \"You MUST enter a value between 15-350 characters\"\n                                }, minLength: {\n                                    value: 15,\n                                    message: \"You must enter AT Least 15 characters\"\n                                }, maxLength: {\n                                    value: 350,\n                                    message: \"You may ONLY enter 350 characters or less\"\n                                }})} className=\"form-control\" onChange={(e) => handleInputChange(e)} value={gatheredValues.description} name=\"description\" type=\"textarea\" rows={10} placeholder=\"Enter your 'video title' for this tutorial..\" />\n                                {errors.description ? <span className=\"span-tooltip\">{errors.description.message}</span> : null}\n                            </Col>\n                        </div>\n                        <Button type={\"submit\"} className={\"btn-square-success\"} color={\"success\"} style={{ width: \"100%\", marginBottom: \"12.5px\", marginTop: \"12.5px\" }}>Proceed Forward W/Next Step</Button>\n                    </Form>\n                </Col>\n            </Row>\n        </Fragment>\n    );\n};\n\nexport default PageOneVideoCreationHelper;"]},"metadata":{},"sourceType":"module"}