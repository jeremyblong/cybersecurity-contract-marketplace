{"ast":null,"code":"var _jsxFileName = \"/home/kali/Documents/cybersecurity/client/src/components/dashboard/streamingLiveHacks/createLiveStream/createNewStream/helpers/nonFormHelpers.js\";\nimport React, { Component } from 'react';\nimport { WithContext as ReactTags } from 'react-tag-input';\nimport { connect } from \"react-redux\";\nimport { InputGroup, InputGroupAddon, InputGroupText } from \"reactstrap\";\nimport _ from \"lodash\";\nconst KeyCodes = {\n  comma: 188,\n  enter: [10, 13]\n};\nconst delimiters = [...KeyCodes.enter, KeyCodes.comma];\n\nclass HashtagLiveStreamHelper extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tags: [],\n      suggestions: []\n    };\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleAddition = this.handleAddition.bind(this);\n    this.handleDrag = this.handleDrag.bind(this);\n  }\n\n  handleDelete(i) {\n    const {\n      tags\n    } = this.state;\n    this.setState({\n      tags: tags.filter((tag, index) => index !== i)\n    }, () => {// this.props.saveListingData({\n      //     ...this.props.previousData,\n      //     hashtags: this.state.tags\n      // })\n    });\n  }\n\n  handleAddition(tag) {\n    this.setState(state => {\n      return {\n        tags: [...state.tags, tag]\n      };\n    }, () => {// this.props.saveListingData({\n      //     ...this.props.previousData,\n      //     hashtags: this.state.tags\n      // })\n    });\n  }\n\n  handleDrag(tag, currPos, newPos) {\n    const tags = [...this.state.tags];\n    const newTags = tags.slice();\n    newTags.splice(currPos, 1);\n    newTags.splice(newPos, 0, tag); // re-render\n\n    this.setState({\n      tags: newTags\n    }, () => {// this.props.saveListingData({\n      //     ...this.props.previousData,\n      //     hashtags: newTags\n      // })\n    });\n  }\n\n  componentDidMount() {\n    const {\n      hashtags\n    } = this.props.previousData;\n    this.setState({\n      tags: typeof hashtags !== \"undefined\" && hashtags.length > 0 ? hashtags : []\n    });\n  }\n\n  render() {\n    const {\n      tags,\n      suggestions\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(InputGroupAddon, {\n      addonType: \"prepend\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(InputGroupText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }\n    }, \"Tag\")), /*#__PURE__*/React.createElement(ReactTags, {\n      tags: tags,\n      classNames: {\n        tags: 'tagsClass',\n        tagInput: 'tagInputClass',\n        tagInputField: 'form-control',\n        selected: 'selectedClass',\n        tag: 'badge badge-primary',\n        remove: 'removeClass',\n        suggestions: 'suggestionsClass',\n        activeSuggestion: 'activeSuggestionClass'\n      },\n      maxLength: 10,\n      suggestions: suggestions,\n      handleDelete: this.handleDelete,\n      handleAddition: this.handleAddition,\n      handleDrag: this.handleDrag,\n      delimiters: delimiters,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }), this.props.errors.streamHashtags ? /*#__PURE__*/React.createElement(\"span\", {\n      className: \"span-tooltip\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 49\n      }\n    }, this.props.errors.streamHashtags.message) : null);\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => {\n  return {\n    previousData: _.has(state.listingData, \"listingData\") ? state.listingData.listingData : {}\n  };\n};\n\nconst HashtagHelper = connect(mapStateToProps, {})(HashtagLiveStreamHelper);\nexport default {\n  HashtagHelper\n};","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/streamingLiveHacks/createLiveStream/createNewStream/helpers/nonFormHelpers.js"],"names":["React","Component","WithContext","ReactTags","connect","InputGroup","InputGroupAddon","InputGroupText","_","KeyCodes","comma","enter","delimiters","HashtagLiveStreamHelper","constructor","props","state","tags","suggestions","handleDelete","bind","handleAddition","handleDrag","i","setState","filter","tag","index","currPos","newPos","newTags","slice","splice","componentDidMount","hashtags","previousData","length","render","tagInput","tagInputField","selected","remove","activeSuggestion","errors","streamHashtags","message","mapStateToProps","has","listingData","HashtagHelper"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { WithContext as ReactTags } from 'react-tag-input';\nimport { connect } from \"react-redux\";\nimport { InputGroup, InputGroupAddon, InputGroupText } from \"reactstrap\";\nimport _ from \"lodash\";\n\nconst KeyCodes = {\n  comma: 188,\n  enter: [10, 13],\n};\n\nconst delimiters = [...KeyCodes.enter, KeyCodes.comma];\n\nclass HashtagLiveStreamHelper extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            tags: [],\n            suggestions: []\n        };\n        this.handleDelete = this.handleDelete.bind(this);\n        this.handleAddition = this.handleAddition.bind(this);\n        this.handleDrag = this.handleDrag.bind(this);\n    }\n\n    handleDelete(i) {\n        const { tags } = this.state;\n\n        this.setState({\n            tags: tags.filter((tag, index) => index !== i),\n        }, () => {\n            // this.props.saveListingData({\n            //     ...this.props.previousData,\n            //     hashtags: this.state.tags\n            // })\n        });\n    }\n    handleAddition(tag) {\n        this.setState(state => {\n            return { tags: [...state.tags, tag] }\n        }, () => {\n            // this.props.saveListingData({\n            //     ...this.props.previousData,\n            //     hashtags: this.state.tags\n            // })\n        });\n    }\n\n    handleDrag(tag, currPos, newPos) {\n        const tags = [...this.state.tags];\n        const newTags = tags.slice();\n\n        newTags.splice(currPos, 1);\n        newTags.splice(newPos, 0, tag);\n\n        // re-render\n        this.setState({ tags: newTags }, () => {\n            // this.props.saveListingData({\n            //     ...this.props.previousData,\n            //     hashtags: newTags\n            // })\n        });\n    }\n    componentDidMount() {\n        const { hashtags } = this.props.previousData;\n        this.setState({\n            tags: typeof hashtags !== \"undefined\" && hashtags.length > 0 ? hashtags : []\n        })\n    }\n    render() {\n        const { tags, suggestions } = this.state;\n        return (\n            <div>\n            <InputGroupAddon addonType=\"prepend\">\n                <InputGroupText>{\"Tag\"}</InputGroupText>\n            </InputGroupAddon>\n            <ReactTags \n                tags={tags}\n                classNames={{\n                    tags: 'tagsClass',\n                    tagInput: 'tagInputClass',\n                    tagInputField: 'form-control',\n                    selected: 'selectedClass',\n                    tag: 'badge badge-primary',\n                    remove: 'removeClass',\n                    suggestions: 'suggestionsClass',\n                    activeSuggestion: 'activeSuggestionClass'\n                }}\n                maxLength={10}\n                suggestions={suggestions}\n                handleDelete={this.handleDelete}\n                handleAddition={this.handleAddition}\n                handleDrag={this.handleDrag}\n                delimiters={delimiters} \n            />\n            {this.props.errors.streamHashtags ? <span className=\"span-tooltip\">{this.props.errors.streamHashtags.message}</span> : null}\n            </div>\n        )\n    }\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        previousData: _.has(state.listingData, \"listingData\") ? state.listingData.listingData : {}\n    }\n}\nconst HashtagHelper = connect(mapStateToProps, {  })(HashtagLiveStreamHelper);\n\nexport default {\n    HashtagHelper\n};"]},"metadata":{},"sourceType":"module"}