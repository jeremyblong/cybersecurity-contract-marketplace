{"ast":null,"code":"'use strict';\n\nvar _defineProperty2 = require(\"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _objectWithoutProperties = require(\"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _assertThisInitialized = require(\"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _regeneratorRuntime = require(\"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _toConsumableArray = require(\"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _createForOfIteratorHelper = require(\"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _slicedToArray = require(\"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _objectSpread = require(\"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _wrapNativeSuper = require(\"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\n\nvar _inherits = require(\"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _createClass = require(\"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _excluded = [\"default\"];\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar react = _interopDefault(require('react'));\n\nvar reactDom = _interopDefault(require('react-dom'));\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\n\nfunction sprintf(format) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  var index = 0;\n  return format.replace(/%s/g, function () {\n    return String(args[index++]);\n  });\n}\n\nvar Recoil_sprintf = sprintf; // @oss-only\n// prettier-ignore\n\nfunction expectationViolation(format) {\n  // @oss-only\n  {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    // @oss-only\n    var message = Recoil_sprintf.call.apply(Recoil_sprintf, [null, format].concat(args)); // @oss-only\n\n    var error = new Error(message); // @oss-only\n\n    error.name = 'Expectation Violation'; // @oss-only\n\n    console.error(error); // @oss-only\n  } // @oss-only\n} // @oss-only\n\n\nvar Recoil_expectationViolation = expectationViolation;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n// prettier-ignore\n\n/* eslint-disable no-lone-blocks */\n// this {} block is necessary to keep prettier off on internal repo\n// @fb-only: {\n\nfunction recoverableViolation( // @oss-only\nmessage, // @oss-only\nprojectName) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      error = _ref.error;\n\n  // @oss-only\n  {\n    // @oss-only\n    console.error(message, error); // @oss-only\n  } // @oss-only\n\n  return null; // @oss-only\n} // @oss-only\n// @fb-only: }\n\n/* eslint-enable no-lone-blocks */\n\n\nvar Recoil_recoverableViolation = recoverableViolation;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n// eslint-disable-next-line no-unused-vars\n\n\nvar AbstractRecoilValue = /*#__PURE__*/_createClass(function AbstractRecoilValue(newKey) {\n  _classCallCheck(this, AbstractRecoilValue);\n\n  _defineProperty(this, \"key\", void 0);\n\n  this.key = newKey;\n});\n\nvar RecoilState = /*#__PURE__*/function (_AbstractRecoilValue) {\n  _inherits(RecoilState, _AbstractRecoilValue);\n\n  var _super = _createSuper(RecoilState);\n\n  function RecoilState() {\n    _classCallCheck(this, RecoilState);\n\n    return _super.apply(this, arguments);\n  }\n\n  return _createClass(RecoilState);\n}(AbstractRecoilValue);\n\nvar RecoilValueReadOnly = /*#__PURE__*/function (_AbstractRecoilValue2) {\n  _inherits(RecoilValueReadOnly, _AbstractRecoilValue2);\n\n  var _super2 = _createSuper(RecoilValueReadOnly);\n\n  function RecoilValueReadOnly() {\n    _classCallCheck(this, RecoilValueReadOnly);\n\n    return _super2.apply(this, arguments);\n  }\n\n  return _createClass(RecoilValueReadOnly);\n}(AbstractRecoilValue);\n\nfunction isRecoilValue(x) {\n  return x instanceof RecoilState || x instanceof RecoilValueReadOnly;\n}\n\nvar Recoil_RecoilValue = {\n  AbstractRecoilValue: AbstractRecoilValue,\n  RecoilState: RecoilState,\n  RecoilValueReadOnly: RecoilValueReadOnly,\n  isRecoilValue: isRecoilValue\n};\nvar Recoil_RecoilValue_1 = Recoil_RecoilValue.AbstractRecoilValue;\nvar Recoil_RecoilValue_2 = Recoil_RecoilValue.RecoilState;\nvar Recoil_RecoilValue_3 = Recoil_RecoilValue.RecoilValueReadOnly;\nvar Recoil_RecoilValue_4 = Recoil_RecoilValue.isRecoilValue;\nvar Recoil_RecoilValue$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  AbstractRecoilValue: Recoil_RecoilValue_1,\n  RecoilState: Recoil_RecoilValue_2,\n  RecoilValueReadOnly: Recoil_RecoilValue_3,\n  isRecoilValue: Recoil_RecoilValue_4\n});\n\nvar DefaultValue = /*#__PURE__*/_createClass(function DefaultValue() {\n  _classCallCheck(this, DefaultValue);\n});\n\nvar DEFAULT_VALUE = new DefaultValue();\n\nvar RecoilValueNotReady = /*#__PURE__*/function (_Error) {\n  _inherits(RecoilValueNotReady, _Error);\n\n  var _super3 = _createSuper(RecoilValueNotReady);\n\n  function RecoilValueNotReady(key) {\n    _classCallCheck(this, RecoilValueNotReady);\n\n    return _super3.call(this, \"Tried to set the value of Recoil selector \".concat(key, \" using an updater function, but it is an async selector in a pending or error state; this is not supported.\"));\n  }\n\n  return _createClass(RecoilValueNotReady);\n}( /*#__PURE__*/_wrapNativeSuper(Error)); // flowlint-next-line unclear-type:off\n\n\nvar nodes = new Map();\n/* eslint-disable no-redeclare */\n\nfunction registerNode(node) {\n  if (nodes.has(node.key)) {\n    var message = \"Duplicate atom key \\\"\".concat(node.key, \"\\\". This is a FATAL ERROR in\\n      production. But it is safe to ignore this warning if it occurred because of\\n      hot module replacement.\"); // TODO Need to figure out if there is a standard/open-source equivalent to see if hot module replacement is happening:\n    // prettier-ignore\n    // @fb-only: if (__DEV__) {\n    // @fb-only: const isAcceptingUpdate = require('__debug').isAcceptingUpdate;\n    // prettier-ignore\n    // @fb-only: if (typeof isAcceptingUpdate !== 'function' || !isAcceptingUpdate()) {\n    // @fb-only: expectationViolation(message, 'recoil');\n    // @fb-only: }\n    // prettier-ignore\n    // @fb-only: } else {\n\n    Recoil_recoverableViolation(message); // @fb-only: }\n  }\n\n  nodes.set(node.key, node);\n  return node.set == null ? new Recoil_RecoilValue$1.RecoilValueReadOnly(node.key) : new Recoil_RecoilValue$1.RecoilState(node.key);\n}\n/* eslint-enable no-redeclare */\n\n\nvar NodeMissingError = /*#__PURE__*/function (_Error2) {\n  _inherits(NodeMissingError, _Error2);\n\n  var _super4 = _createSuper(NodeMissingError);\n\n  function NodeMissingError() {\n    _classCallCheck(this, NodeMissingError);\n\n    return _super4.apply(this, arguments);\n  }\n\n  return _createClass(NodeMissingError);\n}( /*#__PURE__*/_wrapNativeSuper(Error)); // flowlint-next-line unclear-type:off\n\n\nfunction getNode(key) {\n  var node = nodes.get(key);\n\n  if (node == null) {\n    throw new NodeMissingError(\"Missing definition for RecoilValue: \\\"\".concat(key, \"\\\"\\\"\"));\n  }\n\n  return node;\n}\n\nvar Recoil_Node = {\n  nodes: nodes,\n  registerNode: registerNode,\n  getNode: getNode,\n  NodeMissingError: NodeMissingError,\n  DefaultValue: DefaultValue,\n  DEFAULT_VALUE: DEFAULT_VALUE,\n  RecoilValueNotReady: RecoilValueNotReady\n};\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction enqueueExecution(s, f) {\n  f();\n}\n\nvar Recoil_Queue = {\n  enqueueExecution: enqueueExecution\n};\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Utilities for working with built-in Maps and Sets without mutating them.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction setByAddingToSet(set, v) {\n  var next = new Set(set);\n  next.add(v);\n  return next;\n}\n\nfunction setByDeletingFromSet(set, v) {\n  var next = new Set(set);\n  next.delete(v);\n  return next;\n}\n\nfunction mapBySettingInMap(map, k, v) {\n  var next = new Map(map);\n  next.set(k, v);\n  return next;\n}\n\nfunction mapByUpdatingInMap(map, k, updater) {\n  var next = new Map(map);\n  next.set(k, updater(next.get(k)));\n  return next;\n}\n\nfunction mapByDeletingFromMap(map, k) {\n  var next = new Map(map);\n  next.delete(k);\n  return next;\n}\n\nvar Recoil_CopyOnWrite = {\n  setByAddingToSet: setByAddingToSet,\n  setByDeletingFromSet: setByDeletingFromSet,\n  mapBySettingInMap: mapBySettingInMap,\n  mapByUpdatingInMap: mapByUpdatingInMap,\n  mapByDeletingFromMap: mapByDeletingFromMap\n};\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Interface for `scheduler/tracing` to aid in profiling Recoil and Recoil apps.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n// flowlint-next-line untyped-import:off\n// @fb-only: const SchedulerTracing = require('SchedulerTracing');\n\nfunction trace(message, node, fn) {\n  // prettier-ignore\n  // @fb-only: if (__DEV__) {\n  // prettier-ignore\n  // @fb-only: if (\n  // prettier-ignore\n  // @fb-only: SchedulerTracing.unstable_trace !== undefined &&\n  // prettier-ignore\n  // @fb-only: window.performance !== undefined\n  // prettier-ignore\n  // @fb-only: ) {\n  // prettier-ignore\n  // @fb-only: return SchedulerTracing.unstable_trace(\n  // prettier-ignore\n  // @fb-only: `Recoil: ${message} for node: ${\n  // prettier-ignore\n  // @fb-only: typeof node === 'string' ? node : node.key\n  // prettier-ignore\n  // @fb-only: }`,\n  // prettier-ignore\n  // @fb-only: window.performance.now(),\n  // prettier-ignore\n  // @fb-only: fn,\n  // prettier-ignore\n  // @fb-only: );\n  // prettier-ignore\n  // @fb-only: }\n  // prettier-ignore\n  // @fb-only: }\n  return fn();\n}\n\nfunction wrap(fn) {\n  // prettier-ignore\n  // @fb-only: if (__DEV__) {\n  // prettier-ignore\n  // @fb-only: if (SchedulerTracing.unstable_wrap !== undefined) {\n  // prettier-ignore\n  // @fb-only: return SchedulerTracing.unstable_wrap(fn);\n  // prettier-ignore\n  // @fb-only: }\n  // prettier-ignore\n  // @fb-only: }\n  return fn;\n}\n\nvar Recoil_Tracing = {\n  trace: trace,\n  wrap: wrap\n};\nvar mapByDeletingFromMap$1 = Recoil_CopyOnWrite.mapByDeletingFromMap,\n    mapBySettingInMap$1 = Recoil_CopyOnWrite.mapBySettingInMap,\n    mapByUpdatingInMap$1 = Recoil_CopyOnWrite.mapByUpdatingInMap,\n    setByAddingToSet$1 = Recoil_CopyOnWrite.setByAddingToSet;\nvar getNode$1 = Recoil_Node.getNode; // flowlint-next-line unclear-type:off\n\nvar emptyMap = Object.freeze(new Map()); // flowlint-next-line unclear-type:off\n\nvar emptySet = Object.freeze(new Set());\n\nvar ReadOnlyRecoilValueError = /*#__PURE__*/function (_Error3) {\n  _inherits(ReadOnlyRecoilValueError, _Error3);\n\n  var _super5 = _createSuper(ReadOnlyRecoilValueError);\n\n  function ReadOnlyRecoilValueError() {\n    _classCallCheck(this, ReadOnlyRecoilValueError);\n\n    return _super5.apply(this, arguments);\n  }\n\n  return _createClass(ReadOnlyRecoilValueError);\n}( /*#__PURE__*/_wrapNativeSuper(Error)); // Get the current value loadable of a node and update the state.\n// Update dependencies and subscriptions for selectors.\n// Update saved value validation for atoms.\n\n\nfunction getNodeLoadable(store, state, key) {\n  return getNode$1(key).get(store, state);\n} // Peek at the current value loadable for a node.\n// NOTE: This will ignore updating the state for subscriptions so use sparingly!!\n\n\nfunction peekNodeLoadable(store, state, key) {\n  return getNodeLoadable(store, state, key)[1];\n} // Write value directly to state bypassing the Node interface as the node\n// definitions may not have been loaded yet when processing the initial snapshot.\n\n\nfunction setUnvalidatedAtomValue(state, key, newValue) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    atomValues: mapByDeletingFromMap$1(state.atomValues, key),\n    nonvalidatedAtoms: mapBySettingInMap$1(state.nonvalidatedAtoms, key, newValue),\n    dirtyAtoms: setByAddingToSet$1(state.dirtyAtoms, key)\n  });\n} // Set a node value and return the set of nodes that were actually written.\n// That does not include any downstream nodes which are dependent on them.\n\n\nfunction setNodeValue(store, state, key, newValue) {\n  var node = getNode$1(key);\n\n  if (node.set == null) {\n    throw new ReadOnlyRecoilValueError(\"Attempt to set read-only RecoilValue: \".concat(key));\n  }\n\n  var _node$set = node.set(store, state, newValue),\n      _node$set2 = _slicedToArray(_node$set, 2),\n      newState = _node$set2[0],\n      writtenNodes = _node$set2[1];\n\n  return [newState, writtenNodes];\n} // Find all of the recursively dependent nodes\n\n\nfunction getDownstreamNodes(state, keys) {\n  var dependentNodes = new Set();\n  var visitedNodes = new Set();\n  var visitingNodes = Array.from(keys);\n\n  for (var key = visitingNodes.pop(); key; key = visitingNodes.pop()) {\n    var _state$nodeToNodeSubs;\n\n    dependentNodes.add(key);\n    visitedNodes.add(key);\n    var subscribedNodes = (_state$nodeToNodeSubs = state.nodeToNodeSubscriptions.get(key)) !== null && _state$nodeToNodeSubs !== void 0 ? _state$nodeToNodeSubs : emptySet;\n\n    var _iterator = _createForOfIteratorHelper(subscribedNodes),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var downstreamNode = _step.value;\n\n        if (!visitedNodes.has(downstreamNode)) {\n          visitingNodes.push(downstreamNode);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  return dependentNodes;\n}\n\nvar subscriptionID = 0;\n\nfunction subscribeComponentToNode(state, key, callback) {\n  var subID = subscriptionID++;\n\n  var newState = _objectSpread(_objectSpread({}, state), {}, {\n    nodeToComponentSubscriptions: mapByUpdatingInMap$1(state.nodeToComponentSubscriptions, key, function (subsForAtom) {\n      return mapBySettingInMap$1(subsForAtom !== null && subsForAtom !== void 0 ? subsForAtom : emptyMap, subID, ['TODO debug name', callback]);\n    })\n  });\n\n  function release(state) {\n    var newState = _objectSpread(_objectSpread({}, state), {}, {\n      nodeToComponentSubscriptions: mapByUpdatingInMap$1(state.nodeToComponentSubscriptions, key, function (subsForAtom) {\n        return mapByDeletingFromMap$1(subsForAtom !== null && subsForAtom !== void 0 ? subsForAtom : emptyMap, subID);\n      })\n    });\n\n    return newState;\n  }\n\n  return [newState, release];\n} // Fire or enqueue callbacks to rerender components that are subscribed to\n// nodes affected by the updatedNodes\n\n\nfunction fireNodeSubscriptions(store, updatedNodes, when) {\n  var _store$getState$nextT;\n  /*\n  This is called in two conditions: When an atom is set (with 'enqueue') and\n  when an async selector resolves (with 'now'). When an atom is set, we want\n  to use the latest dependencies that may have become dependencies due to\n  earlier changes in a batch. But if an async selector happens to resolve during\n  a batch, it should use the currently rendered output, and then the end of the\n  batch will trigger any further subscriptions due to new deps in the new state.\n  */\n\n\n  var state = when === 'enqueue' ? (_store$getState$nextT = store.getState().nextTree) !== null && _store$getState$nextT !== void 0 ? _store$getState$nextT : store.getState().currentTree : store.getState().currentTree;\n  var dependentNodes = getDownstreamNodes(state, updatedNodes);\n\n  var _iterator2 = _createForOfIteratorHelper(dependentNodes),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var key = _step2.value;\n\n      var _state$nodeToComponen;\n\n      ((_state$nodeToComponen = state.nodeToComponentSubscriptions.get(key)) !== null && _state$nodeToComponen !== void 0 ? _state$nodeToComponen : []).forEach(function (_ref2) {\n        var _ref3 = _slicedToArray(_ref2, 2),\n            _debugName = _ref3[0],\n            cb = _ref3[1];\n\n        when === 'enqueue' ? store.getState().queuedComponentCallbacks.push(cb) : cb(state);\n      });\n    } // Wake all suspended components so the right one(s) can try to re-render.\n    // We need to wake up components not just when some asynchronous selector\n    // resolved (when === 'now'), but also when changing synchronous values because\n    // they may cause a selector to change from asynchronous to synchronous, in\n    // which case there would be no follow-up asynchronous resolution to wake us up.\n    // TODO OPTIMIZATION Only wake up related downstream components\n\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  Recoil_Tracing.trace('value became available, waking components', Array.from(updatedNodes).join(', '), function () {\n    var resolvers = store.getState().suspendedComponentResolvers;\n    resolvers.forEach(function (r) {\n      return r();\n    });\n    resolvers.clear();\n  });\n}\n\nfunction detectCircularDependencies(state, stack) {\n  if (!stack.length) {\n    return;\n  }\n\n  var leaf = stack[stack.length - 1];\n  var downstream = state.nodeToNodeSubscriptions.get(leaf);\n\n  if (!(downstream === null || downstream === void 0 ? void 0 : downstream.size)) {\n    return;\n  }\n\n  var root = stack[0];\n\n  if (downstream.has(root)) {\n    throw new Error(\"Recoil selector has circular dependencies: \".concat([].concat(_toConsumableArray(stack), [root]).reverse().join(\" \\u2192 \")));\n  }\n\n  var _iterator3 = _createForOfIteratorHelper(downstream),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var next = _step3.value;\n      detectCircularDependencies(state, [].concat(_toConsumableArray(stack), [next]));\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n}\n\nvar Recoil_FunctionalCore = {\n  getNodeLoadable: getNodeLoadable,\n  peekNodeLoadable: peekNodeLoadable,\n  setNodeValue: setNodeValue,\n  setUnvalidatedAtomValue: setUnvalidatedAtomValue,\n  subscribeComponentToNode: subscribeComponentToNode,\n  fireNodeSubscriptions: fireNodeSubscriptions,\n  detectCircularDependencies: detectCircularDependencies\n};\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\n/**\n * Returns a new Map object with the same keys as the original, but with the\n * values replaced with the output of the given callback function.\n */\n\nfunction mapMap(map, callback) {\n  var result = new Map();\n  map.forEach(function (value, key) {\n    result.set(key, callback(value, key));\n  });\n  return result;\n}\n\nvar Recoil_mapMap = mapMap;\nvar getNodeLoadable$1 = Recoil_FunctionalCore.getNodeLoadable,\n    peekNodeLoadable$1 = Recoil_FunctionalCore.peekNodeLoadable,\n    setNodeValue$1 = Recoil_FunctionalCore.setNodeValue,\n    setUnvalidatedAtomValue$1 = Recoil_FunctionalCore.setUnvalidatedAtomValue,\n    subscribeComponentToNode$1 = Recoil_FunctionalCore.subscribeComponentToNode;\nvar RecoilValueNotReady$1 = Recoil_Node.RecoilValueNotReady;\nvar AbstractRecoilValue$1 = Recoil_RecoilValue$1.AbstractRecoilValue,\n    RecoilState$1 = Recoil_RecoilValue$1.RecoilState,\n    RecoilValueReadOnly$1 = Recoil_RecoilValue$1.RecoilValueReadOnly;\n\nfunction getRecoilValueAsLoadable(store, _ref4) {\n  var key = _ref4.key;\n  var result; // Save any state changes during read, such as validating atoms,\n  // updated selector subscriptions/dependencies, &c.\n\n  Recoil_Tracing.trace('get RecoilValue', key, function () {\n    return store.replaceState(Recoil_Tracing.wrap(function (state) {\n      var _getNodeLoadable$ = getNodeLoadable$1(store, state, key),\n          _getNodeLoadable$2 = _slicedToArray(_getNodeLoadable$, 2),\n          newState = _getNodeLoadable$2[0],\n          loadable = _getNodeLoadable$2[1];\n\n      result = loadable;\n      return newState;\n    }));\n  });\n  return result; // flowlint-line unclear-type:off\n}\n\nfunction setRecoilValue(store, _ref5, newValue) {\n  var key = _ref5.key;\n  Recoil_Tracing.trace('set RecoilValue', key, function () {\n    return store.replaceState(Recoil_Tracing.wrap(function (state) {\n      var _setNodeValue$ = setNodeValue$1(store, state, key, newValue),\n          _setNodeValue$2 = _slicedToArray(_setNodeValue$, 2),\n          newState = _setNodeValue$2[0],\n          writtenNodes = _setNodeValue$2[1];\n\n      store.fireNodeSubscriptions(writtenNodes, 'enqueue');\n      return newState;\n    }));\n  });\n}\n\nfunction setUnvalidatedRecoilValue(store, _ref6, newValue) {\n  var key = _ref6.key;\n  Recoil_Tracing.trace('set unvalidated persisted atom', key, function () {\n    return store.replaceState(Recoil_Tracing.wrap(function (state) {\n      var newState = setUnvalidatedAtomValue$1(state, key, newValue);\n      store.fireNodeSubscriptions(new Set([key]), 'enqueue');\n      return newState;\n    }));\n  });\n}\n\nfunction valueFromValueOrUpdater(store, _ref7, valueOrUpdater) {\n  var key = _ref7.key;\n\n  if (typeof valueOrUpdater === 'function') {\n    var _storeState$nextTree; // Updater form: pass in the current value. Throw if the current value\n    // is unavailable (namely when updating an async selector that's\n    // pending or errored):\n\n\n    var storeState = store.getState();\n    var state = (_storeState$nextTree = storeState.nextTree) !== null && _storeState$nextTree !== void 0 ? _storeState$nextTree : storeState.currentTree; // NOTE: This will not update state with node subscriptions.\n\n    var current = peekNodeLoadable$1(store, state, key);\n\n    if (current.state === 'loading') {\n      throw new RecoilValueNotReady$1(key);\n    } else if (current.state === 'hasError') {\n      throw current.contents;\n    } // T itself may be a function, so our refinement is not sufficient:\n\n\n    return valueOrUpdater(current.contents); // flowlint-line unclear-type:off\n  } else {\n    return valueOrUpdater;\n  }\n}\n\nfunction subscribeToRecoilValue(store, _ref8, callback) {\n  var key = _ref8.key;\n  var newState, releaseFn;\n  Recoil_Tracing.trace('subscribe component to RecoilValue', key, function () {\n    return store.replaceState(Recoil_Tracing.wrap(function (state) {\n      var _subscribeComponentTo = subscribeComponentToNode$1(state, key, callback);\n\n      var _subscribeComponentTo2 = _slicedToArray(_subscribeComponentTo, 2);\n\n      newState = _subscribeComponentTo2[0];\n      releaseFn = _subscribeComponentTo2[1];\n      return newState;\n    }));\n  });\n  return {\n    release: function release(store) {\n      return store.replaceState(releaseFn);\n    }\n  };\n}\n\nvar Recoil_RecoilValueInterface = {\n  RecoilValueReadOnly: RecoilValueReadOnly$1,\n  AbstractRecoilValue: AbstractRecoilValue$1,\n  RecoilState: RecoilState$1,\n  valueFromValueOrUpdater: valueFromValueOrUpdater,\n  getRecoilValueAsLoadable: getRecoilValueAsLoadable,\n  setRecoilValue: setRecoilValue,\n  setUnvalidatedRecoilValue: setUnvalidatedRecoilValue,\n  subscribeToRecoilValue: subscribeToRecoilValue\n};\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n// TODO We could just store T instead of a Loadable<T> in atomValues\n// flowlint-next-line unclear-type:off\n// StoreState represents the state of a Recoil context. It is global and mutable.\n// It is updated only during effects, except that the nextTree property is updated\n// when atom values change and async requests resolve, and suspendedComponentResolvers\n// is updated when components are suspended.\n\nfunction makeEmptyTreeState() {\n  return {\n    transactionMetadata: {},\n    atomValues: new Map(),\n    nonvalidatedAtoms: new Map(),\n    dirtyAtoms: new Set(),\n    nodeDeps: new Map(),\n    nodeToNodeSubscriptions: new Map(),\n    nodeToComponentSubscriptions: new Map()\n  };\n}\n\nfunction makeStoreState(treeState) {\n  return {\n    currentTree: treeState,\n    nextTree: null,\n    transactionSubscriptions: new Map(),\n    queuedComponentCallbacks: [],\n    suspendedComponentResolvers: new Set()\n  };\n}\n\nfunction makeEmptyStoreState() {\n  return makeStoreState(makeEmptyTreeState());\n}\n\nvar Recoil_State = {\n  makeEmptyTreeState: makeEmptyTreeState,\n  makeEmptyStoreState: makeEmptyStoreState,\n  makeStoreState: makeStoreState\n};\nvar DEFAULT_VALUE$1 = Recoil_Node.DEFAULT_VALUE;\nvar getRecoilValueAsLoadable$1 = Recoil_RecoilValueInterface.getRecoilValueAsLoadable,\n    setRecoilValue$1 = Recoil_RecoilValueInterface.setRecoilValue,\n    valueFromValueOrUpdater$1 = Recoil_RecoilValueInterface.valueFromValueOrUpdater;\nvar makeEmptyTreeState$1 = Recoil_State.makeEmptyTreeState,\n    makeStoreState$1 = Recoil_State.makeStoreState;\n\nfunction makeStore(treeState) {\n  var storeState = makeStoreState$1(treeState);\n  var store = {\n    getState: function getState() {\n      return storeState;\n    },\n    replaceState: function replaceState(replacer) {\n      storeState.currentTree = replacer(storeState.currentTree); // no batching so nextTree is never active\n    },\n    subscribeToTransactions: function subscribeToTransactions() {\n      throw new Error('Cannot subscribe to Snapshots');\n    },\n    addTransactionMetadata: function addTransactionMetadata() {\n      throw new Error('Cannot subscribe to Snapshots');\n    },\n    fireNodeSubscriptions: function fireNodeSubscriptions() {}\n  };\n  return store;\n} // A \"Snapshot\" is \"read-only\" and captures a specific set of values of atoms.\n// However, the data-flow-graph and selector values may evolve as selector\n// evaluation functions are executed and async selectors resolve.\n\n\nvar Snapshot = /*#__PURE__*/function () {\n  function Snapshot(treeState) {\n    var _this = this;\n\n    _classCallCheck(this, Snapshot);\n\n    _defineProperty(this, \"_store\", void 0);\n\n    _defineProperty(this, \"getLoadable\", function (recoilValue) {\n      return getRecoilValueAsLoadable$1(_this._store, recoilValue);\n    });\n\n    _defineProperty(this, \"getPromise\", function (recoilValue) {\n      return _this.getLoadable(recoilValue).toPromise();\n    });\n\n    _defineProperty(this, \"map\", function (mapper) {\n      var mutableSnapshot = new MutableSnapshot(_this._store.getState().currentTree);\n      mapper(mutableSnapshot);\n      var newState = mutableSnapshot.getStore_INTERNAL().getState().currentTree;\n      return cloneSnapshot(newState);\n    });\n\n    _defineProperty(this, \"asyncMap\", /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(mapper) {\n        var mutableSnapshot, newState;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                mutableSnapshot = new MutableSnapshot(_this._store.getState().currentTree);\n                _context.next = 3;\n                return mapper(mutableSnapshot);\n\n              case 3:\n                newState = mutableSnapshot.getStore_INTERNAL().getState().currentTree;\n                return _context.abrupt(\"return\", cloneSnapshot(newState));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n\n    this._store = makeStore(treeState);\n  }\n\n  _createClass(Snapshot, [{\n    key: \"getStore_INTERNAL\",\n    value: function getStore_INTERNAL() {\n      return this._store;\n    }\n  }]);\n\n  return Snapshot;\n}();\n\nfunction cloneTreeState(treeState) {\n  return {\n    transactionMetadata: _objectSpread({}, treeState.transactionMetadata),\n    atomValues: new Map(treeState.atomValues),\n    nonvalidatedAtoms: new Map(treeState.nonvalidatedAtoms),\n    dirtyAtoms: new Set(treeState.dirtyAtoms),\n    nodeDeps: new Map(treeState.nodeDeps),\n    nodeToNodeSubscriptions: Recoil_mapMap(treeState.nodeToNodeSubscriptions, function (keys) {\n      return new Set(keys);\n    }),\n    nodeToComponentSubscriptions: new Map()\n  };\n} // Factory to build a fresh snapshot\n\n\nfunction freshSnapshot() {\n  return new Snapshot(makeEmptyTreeState$1());\n} // Factory to clone a snapahot state\n\n\nfunction cloneSnapshot(treeState) {\n  return new Snapshot(cloneTreeState(treeState));\n}\n\nvar MutableSnapshot = /*#__PURE__*/function (_Snapshot) {\n  _inherits(MutableSnapshot, _Snapshot);\n\n  var _super6 = _createSuper(MutableSnapshot);\n\n  function MutableSnapshot(treeState) {\n    var _this2;\n\n    _classCallCheck(this, MutableSnapshot);\n\n    _this2 = _super6.call(this, cloneTreeState(treeState));\n\n    _defineProperty(_assertThisInitialized(_this2), \"set\", function (recoilState, newValueOrUpdater) {\n      var store = _this2.getStore_INTERNAL();\n\n      var newValue = valueFromValueOrUpdater$1(store, recoilState, newValueOrUpdater);\n      setRecoilValue$1(store, recoilState, newValue);\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"reset\", function (recoilState) {\n      return setRecoilValue$1(_this2.getStore_INTERNAL(), recoilState, DEFAULT_VALUE$1);\n    });\n\n    return _this2;\n  } // We want to allow the methods to be destructured and used as accessors\n  // eslint-disable-next-line fb-www/extra-arrow-initializer\n\n\n  return _createClass(MutableSnapshot);\n}(Snapshot);\n\nvar Recoil_Snapshot = {\n  Snapshot: Snapshot,\n  MutableSnapshot: MutableSnapshot,\n  freshSnapshot: freshSnapshot,\n  cloneSnapshot: cloneSnapshot\n};\nvar Recoil_Snapshot_1 = Recoil_Snapshot.Snapshot;\nvar Recoil_Snapshot_2 = Recoil_Snapshot.MutableSnapshot;\nvar Recoil_Snapshot_3 = Recoil_Snapshot.freshSnapshot;\nvar Recoil_Snapshot_4 = Recoil_Snapshot.cloneSnapshot;\nvar Recoil_Snapshot$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Snapshot: Recoil_Snapshot_1,\n  MutableSnapshot: Recoil_Snapshot_2,\n  freshSnapshot: Recoil_Snapshot_3,\n  cloneSnapshot: Recoil_Snapshot_4\n});\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction nullthrows(x, message) {\n  if (x != null) {\n    return x;\n  }\n\n  throw new Error(message !== null && message !== void 0 ? message : 'Got unexpected null or undefined');\n}\n\nvar Recoil_nullthrows = nullthrows;\nvar useContext = react.useContext,\n    useEffect = react.useEffect,\n    useRef = react.useRef,\n    useState = react.useState;\nvar fireNodeSubscriptions$1 = Recoil_FunctionalCore.fireNodeSubscriptions,\n    setNodeValue$2 = Recoil_FunctionalCore.setNodeValue,\n    setUnvalidatedAtomValue$2 = Recoil_FunctionalCore.setUnvalidatedAtomValue;\nvar freshSnapshot$1 = Recoil_Snapshot$1.freshSnapshot;\nvar makeEmptyStoreState$1 = Recoil_State.makeEmptyStoreState,\n    makeStoreState$2 = Recoil_State.makeStoreState;\n\nfunction notInAContext() {\n  throw new Error('This component must be used inside a <RecoilRoot> component.');\n}\n\nvar defaultStore = Object.freeze({\n  getState: notInAContext,\n  replaceState: notInAContext,\n  subscribeToTransactions: notInAContext,\n  addTransactionMetadata: notInAContext,\n  fireNodeSubscriptions: notInAContext\n});\n\nfunction startNextTreeIfNeeded(storeState) {\n  if (storeState.nextTree === null) {\n    storeState.nextTree = _objectSpread(_objectSpread({}, storeState.currentTree), {}, {\n      dirtyAtoms: new Set(),\n      transactionMetadata: {}\n    });\n  }\n}\n\nvar AppContext = react.createContext({\n  current: defaultStore\n});\n\nvar useStoreRef = function useStoreRef() {\n  return useContext(AppContext);\n};\n/*\n * The purpose of the Batcher is to observe when React batches end so that\n * Recoil state changes can be batched. Whenever Recoil state changes, we call\n * setState on the batcher. Then we wait for that change to be committed, which\n * signifies the end of the batch. That's when we respond to the Recoil change.\n */\n\n\nfunction Batcher(props) {\n  var storeRef = useStoreRef();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      _ = _useState2[0],\n      setState = _useState2[1];\n\n  props.setNotifyBatcherOfChange(function () {\n    return setState({});\n  });\n  useEffect(function () {\n    // enqueueExecution runs this function immediately; it is only used to\n    // manipulate the order of useEffects during tests, since React seems to\n    // call useEffect in an unpredictable order sometimes.\n    Recoil_Queue.enqueueExecution('Batcher', function () {\n      var storeState = storeRef.current.getState();\n      var nextTree = storeState.nextTree; // Ignore commits that are not because of Recoil transactions -- namely,\n      // because something above RecoilRoot re-rendered:\n\n      if (nextTree === null) {\n        return;\n      } // Inform transaction subscribers of the transaction:\n\n\n      var dirtyAtoms = nextTree.dirtyAtoms;\n\n      if (dirtyAtoms.size) {\n        storeState.transactionSubscriptions.forEach(function (sub) {\n          return sub(storeRef.current);\n        });\n      } // Inform components that depend on dirty atoms of the transaction:\n      // FIXME why is this StoreState but dirtyAtoms is TreeState? Seems like they should be the same.\n\n\n      storeState.queuedComponentCallbacks.forEach(function (cb) {\n        return cb(nextTree);\n      });\n      storeState.queuedComponentCallbacks.splice(0, storeState.queuedComponentCallbacks.length); // nextTree is now committed -- note that copying and reset occurs when\n      // a transaction begins, in startNextTreeIfNeeded:\n\n      storeState.currentTree = nextTree;\n      storeState.nextTree = null;\n    });\n  });\n  return null;\n}\n\n{\n  if (typeof window !== 'undefined' && !window.$recoilDebugStates) {\n    window.$recoilDebugStates = [];\n  }\n}\n\nfunction initialStoreState_DEPRECATED(store, initializeState) {\n  var initial = makeEmptyStoreState$1();\n  initializeState({\n    set: function set(atom, value) {\n      initial.currentTree = setNodeValue$2(store, initial.currentTree, atom.key, value)[0];\n    },\n    setUnvalidatedAtomValues: function setUnvalidatedAtomValues(atomValues) {\n      atomValues.forEach(function (v, k) {\n        initial.currentTree = setUnvalidatedAtomValue$2(initial.currentTree, k, v);\n      });\n    }\n  });\n  return initial;\n}\n\nfunction initialStoreState(initializeState) {\n  var snapshot = freshSnapshot$1().map(initializeState);\n  return makeStoreState$2(snapshot.getStore_INTERNAL().getState().currentTree);\n}\n\nvar nextID = 0;\n\nfunction RecoilRoot(_ref10) {\n  var initializeState_DEPRECATED = _ref10.initializeState_DEPRECATED,\n      initializeState = _ref10.initializeState,\n      children = _ref10.children;\n  var storeState; // eslint-disable-line prefer-const\n\n  var subscribeToTransactions = function subscribeToTransactions(callback) {\n    var id = nextID++;\n    storeRef.current.getState().transactionSubscriptions.set(id, callback);\n    return {\n      release: function release() {\n        storeRef.current.getState().transactionSubscriptions.delete(id);\n      }\n    };\n  };\n\n  var addTransactionMetadata = function addTransactionMetadata(metadata) {\n    startNextTreeIfNeeded(storeRef.current.getState());\n\n    for (var _i = 0, _Object$keys = Object.keys(metadata); _i < _Object$keys.length; _i++) {\n      var k = _Object$keys[_i];\n      Recoil_nullthrows(storeRef.current.getState().nextTree).transactionMetadata[k] = metadata[k];\n    }\n  };\n\n  function fireNodeSubscriptionsForStore(updatedNodes, when) {\n    fireNodeSubscriptions$1(storeRef.current, updatedNodes, when);\n  }\n\n  var replaceState = function replaceState(replacer) {\n    var storeState = storeRef.current.getState();\n    startNextTreeIfNeeded(storeState); // Use replacer to get the next state:\n\n    var nextTree = Recoil_nullthrows(storeState.nextTree);\n    var replaced = replacer(nextTree);\n\n    if (replaced === nextTree) {\n      return;\n    }\n\n    {\n      if (typeof window !== 'undefined') {\n        window.$recoilDebugStates.push(replaced); // TODO this shouldn't happen here because it's not batched\n      }\n    } // Save changes to nextTree and schedule a React update:\n\n    storeState.nextTree = replaced;\n    Recoil_nullthrows(notifyBatcherOfChange.current)();\n  };\n\n  var notifyBatcherOfChange = useRef(null);\n\n  function setNotifyBatcherOfChange(x) {\n    notifyBatcherOfChange.current = x;\n  }\n\n  var store = {\n    getState: function getState() {\n      return storeState.current;\n    },\n    replaceState: replaceState,\n    subscribeToTransactions: subscribeToTransactions,\n    addTransactionMetadata: addTransactionMetadata,\n    fireNodeSubscriptions: fireNodeSubscriptionsForStore\n  };\n  var storeRef = useRef(store);\n  storeState = useRef(initializeState_DEPRECATED != null ? initialStoreState_DEPRECATED(store, initializeState_DEPRECATED) : initializeState != null ? initialStoreState(initializeState) : makeEmptyStoreState$1());\n  return /*#__PURE__*/react.createElement(AppContext.Provider, {\n    value: storeRef\n  }, /*#__PURE__*/react.createElement(Batcher, {\n    setNotifyBatcherOfChange: setNotifyBatcherOfChange\n  }), children);\n}\n\nvar Recoil_RecoilRoot_react = {\n  useStoreRef: useStoreRef,\n  RecoilRoot: RecoilRoot\n};\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\n/**\n * Returns a set containing all of the values from the first set that are not\n * present in any of the subsequent sets.\n *\n * Note: this is written procedurally (i.e., without filterSet) for performant\n * use in tight loops.\n */\n\nfunction differenceSets(set) {\n  var ret = new Set();\n\n  for (var _len3 = arguments.length, setsWithValuesToRemove = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    setsWithValuesToRemove[_key3 - 1] = arguments[_key3];\n  }\n\n  var _iterator4 = _createForOfIteratorHelper(set),\n      _step4;\n\n  try {\n    FIRST: for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var value = _step4.value;\n\n      var _iterator5 = _createForOfIteratorHelper(setsWithValuesToRemove),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var otherSet = _step5.value;\n\n          if (otherSet.has(value)) {\n            continue FIRST;\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      ret.add(value);\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  return ret;\n}\n\nvar Recoil_differenceSets = differenceSets;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\n/**\n * Returns a map containing all of the keys + values from the original map where\n * the given callback returned true.\n */\n\nfunction filterMap(map, callback) {\n  var result = new Map();\n\n  var _iterator6 = _createForOfIteratorHelper(map),\n      _step6;\n\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var _step6$value = _slicedToArray(_step6.value, 2),\n          key = _step6$value[0],\n          value = _step6$value[1];\n\n      if (callback(value, key)) {\n        result.set(key, value);\n      }\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n\n  return result;\n}\n\nvar Recoil_filterMap = filterMap;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Returns the set of values that are present in all the given sets, preserving\n * the order of the first set.\n *\n * Note: this is written procedurally (i.e., without filterSet) for performant\n * use in tight loops.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction intersectSets(first) {\n  var ret = new Set();\n\n  for (var _len4 = arguments.length, rest = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n    rest[_key4 - 1] = arguments[_key4];\n  }\n\n  var _iterator7 = _createForOfIteratorHelper(first),\n      _step7;\n\n  try {\n    FIRST: for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var value = _step7.value;\n\n      var _iterator8 = _createForOfIteratorHelper(rest),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var otherSet = _step8.value;\n\n          if (!otherSet.has(value)) {\n            continue FIRST;\n          }\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n\n      ret.add(value);\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n\n  return ret;\n}\n\nvar Recoil_intersectSets = intersectSets;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n// prettier-ignore\n\nfunction invariant(condition, message) {\n  // @oss-only\n  if (!condition) {\n    // @oss-only\n    throw new Error(message); // @oss-only\n  } // @oss-only\n\n} // @oss-only\n\n\nvar Recoil_invariant = invariant;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction mergeMaps() {\n  var result = new Map();\n\n  for (var _len5 = arguments.length, maps = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    maps[_key5] = arguments[_key5];\n  }\n\n  for (var i = 0; i < maps.length; i++) {\n    var iterator = maps[i].keys();\n    var nextKey = void 0;\n\n    while (!(nextKey = iterator.next()).done) {\n      // $FlowFixMe - map/iterator knows nothing about flow types\n      result.set(nextKey.value, maps[i].get(nextKey.value));\n    }\n  }\n  /* $FlowFixMe(>=0.66.0 site=www,mobile) This comment suppresses an error\n   * found when Flow v0.66 was deployed. To see the error delete this comment\n   * and run Flow. */\n\n\n  return result;\n}\n\nvar Recoil_mergeMaps = mergeMaps;\nvar useCallback = react.useCallback,\n    useEffect$1 = react.useEffect,\n    useMemo = react.useMemo,\n    useRef$1 = react.useRef,\n    useState$1 = react.useState;\nvar peekNodeLoadable$2 = Recoil_FunctionalCore.peekNodeLoadable,\n    setNodeValue$3 = Recoil_FunctionalCore.setNodeValue;\nvar DEFAULT_VALUE$2 = Recoil_Node.DEFAULT_VALUE,\n    getNode$2 = Recoil_Node.getNode,\n    nodes$1 = Recoil_Node.nodes;\nvar useStoreRef$1 = Recoil_RecoilRoot_react.useStoreRef;\nvar isRecoilValue$1 = Recoil_RecoilValue$1.isRecoilValue;\nvar AbstractRecoilValue$2 = Recoil_RecoilValueInterface.AbstractRecoilValue,\n    getRecoilValueAsLoadable$2 = Recoil_RecoilValueInterface.getRecoilValueAsLoadable,\n    setRecoilValue$2 = Recoil_RecoilValueInterface.setRecoilValue,\n    setUnvalidatedRecoilValue$1 = Recoil_RecoilValueInterface.setUnvalidatedRecoilValue,\n    subscribeToRecoilValue$1 = Recoil_RecoilValueInterface.subscribeToRecoilValue,\n    valueFromValueOrUpdater$2 = Recoil_RecoilValueInterface.valueFromValueOrUpdater;\nvar Snapshot$1 = Recoil_Snapshot$1.Snapshot,\n    cloneSnapshot$1 = Recoil_Snapshot$1.cloneSnapshot;\nvar setByAddingToSet$2 = Recoil_CopyOnWrite.setByAddingToSet;\n\nfunction cloneState_DEPRECATED(state) {\n  return {\n    transactionMetadata: _objectSpread({}, state.transactionMetadata),\n    atomValues: new Map(state.atomValues),\n    nonvalidatedAtoms: new Map(state.nonvalidatedAtoms),\n    dirtyAtoms: new Set(state.dirtyAtoms),\n    nodeDeps: new Map(state.nodeDeps),\n    nodeToNodeSubscriptions: Recoil_mapMap(state.nodeToNodeSubscriptions, function (keys) {\n      return new Set(keys);\n    }),\n    nodeToComponentSubscriptions: Recoil_mapMap(state.nodeToComponentSubscriptions, function (subsByAtom) {\n      return new Map(subsByAtom);\n    })\n  };\n}\n\nfunction handleLoadable(loadable, atom, storeRef) {\n  // We can't just throw the promise we are waiting on to Suspense.  If the\n  // upstream dependencies change it may produce a state in which the component\n  // can render, but it would still be suspended on a Promise that may never resolve.\n  if (loadable.state === 'hasValue') {\n    return loadable.contents;\n  } else if (loadable.state === 'loading') {\n    var promise = new Promise(function (resolve) {\n      storeRef.current.getState().suspendedComponentResolvers.add(resolve);\n    });\n    throw promise;\n  } else if (loadable.state === 'hasError') {\n    throw loadable.contents;\n  } else {\n    throw new Error(\"Invalid value of loadable atom \\\"\".concat(atom.key, \"\\\"\"));\n  }\n}\n\nfunction validateRecoilValue(recoilValue, hookName) {\n  if (!isRecoilValue$1(recoilValue)) {\n    throw new Error(\"Invalid argument to \".concat(hookName, \": expected an atom or selector but got \").concat(String(recoilValue)));\n  }\n}\n\nfunction useInterface() {\n  var storeRef = useStoreRef$1();\n\n  var _useState$ = useState$1([]),\n      _useState$2 = _slicedToArray(_useState$, 2),\n      _ = _useState$2[0],\n      forceUpdate = _useState$2[1];\n\n  var recoilValuesUsed = useRef$1(new Set());\n  recoilValuesUsed.current = new Set(); // Track the RecoilValues used just during this render\n\n  var previousSubscriptions = useRef$1(new Set());\n  var subscriptions = useRef$1(new Map());\n  var unsubscribeFrom = useCallback(function (key) {\n    var sub = subscriptions.current.get(key);\n\n    if (sub) {\n      sub.release(storeRef.current);\n      subscriptions.current.delete(key);\n    }\n  }, [storeRef, subscriptions]);\n  useEffect$1(function () {\n    var store = storeRef.current;\n\n    function updateState(_state, key) {\n      if (!subscriptions.current.has(key)) {\n        return;\n      }\n\n      forceUpdate([]);\n    }\n\n    Recoil_differenceSets(recoilValuesUsed.current, previousSubscriptions.current).forEach(function (key) {\n      if (subscriptions.current.has(key)) {\n        Recoil_expectationViolation(\"Double subscription to RecoilValue \\\"\".concat(key, \"\\\"\"));\n        return;\n      }\n\n      var sub = subscribeToRecoilValue$1(store, new AbstractRecoilValue$2(key), function (state) {\n        Recoil_Tracing.trace('RecoilValue subscription fired', key, function () {\n          updateState(state, key);\n        });\n      });\n      subscriptions.current.set(key, sub);\n      Recoil_Tracing.trace('initial update on subscribing', key, function () {\n        updateState(store.getState(), key);\n      });\n    });\n    Recoil_differenceSets(previousSubscriptions.current, recoilValuesUsed.current).forEach(function (key) {\n      unsubscribeFrom(key);\n    });\n    previousSubscriptions.current = recoilValuesUsed.current;\n  });\n  useEffect$1(function () {\n    var subs = subscriptions.current;\n    return function () {\n      return subs.forEach(function (_, key) {\n        return unsubscribeFrom(key);\n      });\n    };\n  }, [unsubscribeFrom]);\n  return useMemo(function () {\n    function useSetRecoilState(recoilState) {\n      {\n        validateRecoilValue(recoilState, 'useSetRecoilState');\n      }\n      return function (newValueOrUpdater) {\n        var newValue = valueFromValueOrUpdater$2(storeRef.current, recoilState, newValueOrUpdater);\n        setRecoilValue$2(storeRef.current, recoilState, newValue);\n      };\n    }\n\n    function useResetRecoilState(recoilState) {\n      {\n        validateRecoilValue(recoilState, 'useResetRecoilState');\n      }\n      return function () {\n        return setRecoilValue$2(storeRef.current, recoilState, DEFAULT_VALUE$2);\n      };\n    }\n\n    function useRecoilValueLoadable(recoilValue) {\n      {\n        validateRecoilValue(recoilValue, 'useRecoilValueLoadable');\n      }\n\n      if (!recoilValuesUsed.current.has(recoilValue.key)) {\n        recoilValuesUsed.current = setByAddingToSet$2(recoilValuesUsed.current, recoilValue.key);\n      } // TODO Restore optimization to memoize lookup\n\n\n      return getRecoilValueAsLoadable$2(storeRef.current, recoilValue);\n    }\n\n    function useRecoilValue(recoilValue) {\n      {\n        validateRecoilValue(recoilValue, 'useRecoilValue');\n      }\n      var loadable = useRecoilValueLoadable(recoilValue);\n      return handleLoadable(loadable, recoilValue, storeRef);\n    }\n\n    function useRecoilState(recoilState) {\n      {\n        validateRecoilValue(recoilState, 'useRecoilState');\n      }\n      return [useRecoilValue(recoilState), useSetRecoilState(recoilState)];\n    }\n\n    function useRecoilStateLoadable(recoilState) {\n      {\n        validateRecoilValue(recoilState, 'useRecoilStateLoadable');\n      }\n      return [useRecoilValueLoadable(recoilState), useSetRecoilState(recoilState)];\n    }\n\n    return {\n      getRecoilValue: useRecoilValue,\n      getRecoilValueLoadable: useRecoilValueLoadable,\n      getRecoilState: useRecoilState,\n      getRecoilStateLoadable: useRecoilStateLoadable,\n      getSetRecoilState: useSetRecoilState,\n      getResetRecoilState: useResetRecoilState\n    };\n  }, [recoilValuesUsed, storeRef]);\n}\n/**\n  Returns the value represented by the RecoilValue.\n  If the value is pending, it will throw a Promise to suspend the component,\n  if the value is an error it will throw it for the nearest React error boundary.\n  This will also subscribe the component for any updates in the value.\n  */\n\n\nfunction useRecoilValue(recoilValue) {\n  return useInterface().getRecoilValue(recoilValue);\n}\n/**\n  Like useRecoilValue(), but either returns the value if available or\n  just undefined if not available for any reason, such as pending or error.\n*/\n\n\nfunction useRecoilValueLoadable(recoilValue) {\n  return useInterface().getRecoilValueLoadable(recoilValue);\n}\n/**\n  Returns a function that allows the value of a RecoilState to be updated, but does\n  not subscribe the component to changes to that RecoilState.\n*/\n\n\nfunction useSetRecoilState(recoilState) {\n  return useCallback(useInterface().getSetRecoilState(recoilState), [recoilState]);\n}\n/**\n  Returns a function that will reset the value of a RecoilState to its default\n*/\n\n\nfunction useResetRecoilState(recoilState) {\n  return useCallback(useInterface().getResetRecoilState(recoilState), [recoilState]);\n}\n/**\n  Equivalent to useState(). Allows the value of the RecoilState to be read and written.\n  Subsequent updates to the RecoilState will cause the component to re-render. If the\n  RecoilState is pending, this will suspend the component and initiate the\n  retrieval of the value. If evaluating the RecoilState resulted in an error, this will\n  throw the error so that the nearest React error boundary can catch it.\n*/\n\n\nfunction useRecoilState(recoilState) {\n  var recoilInterface = useInterface();\n\n  var _recoilInterface$getR = recoilInterface.getRecoilState(recoilState),\n      _recoilInterface$getR2 = _slicedToArray(_recoilInterface$getR, 1),\n      value = _recoilInterface$getR2[0];\n\n  var setValue = useCallback(recoilInterface.getSetRecoilState(recoilState), [recoilState]);\n  return [value, setValue];\n}\n/**\n  Like useRecoilState(), but does not cause Suspense or React error handling. Returns\n  an object that indicates whether the RecoilState is available, pending, or\n  unavailable due to an error.\n*/\n\n\nfunction useRecoilStateLoadable(recoilState) {\n  var recoilInterface = useInterface();\n\n  var _recoilInterface$getR3 = recoilInterface.getRecoilStateLoadable(recoilState),\n      _recoilInterface$getR4 = _slicedToArray(_recoilInterface$getR3, 1),\n      value = _recoilInterface$getR4[0];\n\n  var setValue = useCallback(recoilInterface.getSetRecoilState(recoilState), [recoilState]);\n  return [value, setValue];\n}\n\nfunction useTransactionSubscription(callback) {\n  var storeRef = useStoreRef$1();\n  useEffect$1(function () {\n    var sub = storeRef.current.subscribeToTransactions(callback);\n    return sub.release;\n  }, [callback, storeRef]);\n} // TODO instead of force update can put snapshot into local state\n\n\nfunction useTreeStateClone_DEPRECATED() {\n  var _useState$3 = useState$1(0),\n      _useState$4 = _slicedToArray(_useState$3, 2),\n      _ = _useState$4[0],\n      setState = _useState$4[1];\n\n  var forceUpdate = useCallback(function () {\n    return setState(function (x) {\n      return x + 1;\n    });\n  }, []);\n  useTransactionSubscription(forceUpdate);\n  var storeRef = useStoreRef$1();\n  return cloneState_DEPRECATED(storeRef.current.getState().currentTree);\n}\n\nfunction useSnapshotWithStateChange_DEPRECATED(transaction) {\n  var storeRef = useStoreRef$1();\n  var snapshot = useTreeStateClone_DEPRECATED();\n\n  var update = function update(_ref11, updater) {\n    var key = _ref11.key;\n\n    var _setNodeValue$3 = setNodeValue$3(storeRef.current, snapshot, key, peekNodeLoadable$2(storeRef.current, snapshot, key).map(updater));\n\n    var _setNodeValue$4 = _slicedToArray(_setNodeValue$3, 1);\n\n    snapshot = _setNodeValue$4[0];\n  };\n\n  transaction(update);\n  var atomValues = Recoil_mapMap(snapshot.atomValues, function (v) {\n    return v.contents;\n  }); // Only report atoms, not selectors\n\n  var updatedAtoms = Recoil_intersectSets(snapshot.dirtyAtoms, new Set(atomValues.keys()));\n  return {\n    atomValues: atomValues,\n    updatedAtoms: updatedAtoms\n  };\n}\n\nfunction externallyVisibleAtomValuesInState(state) {\n  var atomValues = state.atomValues;\n  var persistedAtomContentsValues = Recoil_mapMap(Recoil_filterMap(atomValues, function (v, k) {\n    var _node$options;\n\n    var node = getNode$2(k);\n    var persistence = (_node$options = node.options) === null || _node$options === void 0 ? void 0 : _node$options.persistence_UNSTABLE;\n    return persistence != null && persistence.type !== 'none' && v.state === 'hasValue';\n  }), function (v) {\n    return v.contents;\n  }); // Merge in nonvalidated atoms; we may not have defs for them but they will\n  // all have persistence on or they wouldn't be there in the first place.\n\n  return Recoil_mergeMaps(state.nonvalidatedAtoms, persistedAtomContentsValues);\n}\n/**\n  Calls the given callback after any atoms have been modified and the consequent\n  component re-renders have been committed. This is intended for persisting\n  the values of the atoms to storage. The stored values can then be restored\n  using the useSetUnvalidatedAtomValues hook.\n\n  The callback receives the following info:\n\n  atomValues: The current value of every atom that is both persistable (persistence\n              type not set to 'none') and whose value is available (not in an\n              error or loading state).\n\n  previousAtomValues: The value of every persistable and available atom before\n               the transaction began.\n\n  atomInfo: A map containing the persistence settings for each atom. Every key\n            that exists in atomValues will also exist in atomInfo.\n\n  modifiedAtoms: The set of atoms that were written to during the transaction.\n\n  transactionMetadata: Arbitrary information that was added via the\n          useSetUnvalidatedAtomValues hook. Useful for ignoring the useSetUnvalidatedAtomValues\n          transaction, to avoid loops.\n*/\n\n\nfunction useTransactionObservation_DEPRECATED(callback) {\n  useTransactionSubscription(useCallback(function (store) {\n    var previousState = store.getState().currentTree;\n    var nextState = store.getState().nextTree;\n\n    if (!nextState) {\n      Recoil_recoverableViolation('Transaction subscribers notified without a next tree being present -- this is a bug in Recoil');\n      nextState = store.getState().currentTree; // attempt to trundle on\n    }\n\n    var atomValues = externallyVisibleAtomValuesInState(nextState);\n    var previousAtomValues = externallyVisibleAtomValuesInState(previousState);\n    var atomInfo = Recoil_mapMap(nodes$1, function (node) {\n      var _node$options$persist, _node$options2, _node$options2$persis, _node$options$persist2, _node$options3, _node$options3$persis;\n\n      return {\n        persistence_UNSTABLE: {\n          type: (_node$options$persist = (_node$options2 = node.options) === null || _node$options2 === void 0 ? void 0 : (_node$options2$persis = _node$options2.persistence_UNSTABLE) === null || _node$options2$persis === void 0 ? void 0 : _node$options2$persis.type) !== null && _node$options$persist !== void 0 ? _node$options$persist : 'none',\n          backButton: (_node$options$persist2 = (_node$options3 = node.options) === null || _node$options3 === void 0 ? void 0 : (_node$options3$persis = _node$options3.persistence_UNSTABLE) === null || _node$options3$persis === void 0 ? void 0 : _node$options3$persis.backButton) !== null && _node$options$persist2 !== void 0 ? _node$options$persist2 : false\n        }\n      };\n    });\n    var modifiedAtoms = new Set(nextState.dirtyAtoms);\n    callback({\n      atomValues: atomValues,\n      previousAtomValues: previousAtomValues,\n      atomInfo: atomInfo,\n      modifiedAtoms: modifiedAtoms,\n      transactionMetadata: _objectSpread({}, nextState.transactionMetadata)\n    });\n  }, [callback]));\n}\n\nfunction useRecoilTransactionObserver(callback) {\n  useTransactionSubscription(useCallback(function (store) {\n    var previousState = store.getState().currentTree;\n    var nextState = store.getState().nextTree;\n\n    if (!nextState) {\n      Recoil_recoverableViolation('Transaction subscribers notified without a next tree being present -- this is a bug in Recoil');\n      nextState = previousState; // attempt to trundle on\n    }\n\n    callback({\n      snapshot: cloneSnapshot$1(nextState),\n      previousSnapshot: cloneSnapshot$1(previousState)\n    });\n  }, [callback]));\n} // Return a snapshot of the current state and subscribe to all state changes\n\n\nfunction useRecoilSnapshot() {\n  var store = useStoreRef$1();\n\n  var _useState$5 = useState$1(function () {\n    return cloneSnapshot$1(store.current.getState().currentTree);\n  }),\n      _useState$6 = _slicedToArray(_useState$5, 2),\n      snapshot = _useState$6[0],\n      setSnapshot = _useState$6[1];\n\n  useTransactionSubscription(useCallback(function (store) {\n    var _store$getState$nextT;\n\n    return setSnapshot(cloneSnapshot$1((_store$getState$nextT = store.getState().nextTree) !== null && _store$getState$nextT !== void 0 ? _store$getState$nextT : store.getState().currentTree));\n  }, []));\n  return snapshot;\n}\n\nfunction useGoToSnapshot_DEPRECATED() {\n  var storeRef = useStoreRef$1();\n  return function (snapshot) {\n    reactDom.unstable_batchedUpdates(function () {\n      snapshot.updatedAtoms.forEach(function (key) {\n        setRecoilValue$2(storeRef.current, new AbstractRecoilValue$2(key), snapshot.atomValues.get(key));\n      });\n    });\n  };\n}\n\nfunction useGotoRecoilSnapshot() {\n  var storeRef = useStoreRef$1();\n  return useCallback(function (snapshot) {\n    reactDom.unstable_batchedUpdates(function () {\n      storeRef.current.replaceState(function (prevState) {\n        var nextState = snapshot.getStore_INTERNAL().getState().currentTree; // Fire subscriptions for any atoms that changed values\n\n        var updatedKeys = new Set(); // Going through both seems to be more efficient than constructing a union set of keys\n\n        for (var _i2 = 0, _arr = [prevState.atomValues.keys(), nextState.atomValues.keys()]; _i2 < _arr.length; _i2++) {\n          var keys = _arr[_i2];\n\n          var _iterator9 = _createForOfIteratorHelper(keys),\n              _step9;\n\n          try {\n            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n              var key = _step9.value;\n\n              var _prevState$atomValues, _nextState$atomValues;\n\n              if (((_prevState$atomValues = prevState.atomValues.get(key)) === null || _prevState$atomValues === void 0 ? void 0 : _prevState$atomValues.contents) !== ((_nextState$atomValues = nextState.atomValues.get(key)) === null || _nextState$atomValues === void 0 ? void 0 : _nextState$atomValues.contents)) {\n                updatedKeys.add(key);\n              }\n            }\n          } catch (err) {\n            _iterator9.e(err);\n          } finally {\n            _iterator9.f();\n          }\n        }\n\n        storeRef.current.fireNodeSubscriptions(updatedKeys, 'enqueue');\n        return _objectSpread(_objectSpread({}, nextState), {}, {\n          nodeToComponentSubscriptions: prevState.nodeToComponentSubscriptions\n        });\n      });\n    });\n  }, [storeRef]);\n}\n\nfunction useSetUnvalidatedAtomValues() {\n  var storeRef = useStoreRef$1();\n  return function (values) {\n    var transactionMetadata = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    reactDom.unstable_batchedUpdates(function () {\n      storeRef.current.addTransactionMetadata(transactionMetadata);\n      values.forEach(function (value, key) {\n        return setUnvalidatedRecoilValue$1(storeRef.current, new AbstractRecoilValue$2(key), value);\n      });\n    });\n  };\n}\n\nvar Sentinel = /*#__PURE__*/_createClass(function Sentinel() {\n  _classCallCheck(this, Sentinel);\n});\n\nvar SENTINEL = new Sentinel();\n\nfunction useRecoilCallback(fn, deps) {\n  var storeRef = useStoreRef$1();\n  var gotoSnapshot = useGotoRecoilSnapshot();\n  return useCallback(function () {\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n\n    // Use currentTree for the snapshot to show the currently committed stable state\n    var snapshot = cloneSnapshot$1(storeRef.current.getState().currentTree);\n\n    function set(recoilState, newValueOrUpdater) {\n      var newValue = valueFromValueOrUpdater$2(storeRef.current, recoilState, newValueOrUpdater);\n      setRecoilValue$2(storeRef.current, recoilState, newValue);\n    }\n\n    function reset(recoilState) {\n      setRecoilValue$2(storeRef.current, recoilState, DEFAULT_VALUE$2);\n    }\n\n    var ret = SENTINEL;\n    reactDom.unstable_batchedUpdates(function () {\n      // flowlint-next-line unclear-type:off\n      ret = fn({\n        set: set,\n        reset: reset,\n        snapshot: snapshot,\n        gotoSnapshot: gotoSnapshot\n      }).apply(void 0, args);\n    });\n    !!(ret instanceof Sentinel) ? Recoil_invariant(false, 'unstable_batchedUpdates should return immediately') : void 0;\n    return ret;\n  }, deps != null ? [].concat(_toConsumableArray(deps), [storeRef]) : undefined // eslint-disable-line fb-www/react-hooks-deps\n  );\n}\n\nvar Recoil_Hooks = {\n  useRecoilCallback: useRecoilCallback,\n  useRecoilValue: useRecoilValue,\n  useRecoilValueLoadable: useRecoilValueLoadable,\n  useRecoilState: useRecoilState,\n  useRecoilStateLoadable: useRecoilStateLoadable,\n  useSetRecoilState: useSetRecoilState,\n  useResetRecoilState: useResetRecoilState,\n  useRecoilInterface: useInterface,\n  useSnapshotWithStateChange_DEPRECATED: useSnapshotWithStateChange_DEPRECATED,\n  useTransactionSubscription_DEPRECATED: useTransactionSubscription,\n  useTransactionObservation_DEPRECATED: useTransactionObservation_DEPRECATED,\n  useRecoilTransactionObserver: useRecoilTransactionObserver,\n  useRecoilSnapshot: useRecoilSnapshot,\n  useGoToSnapshot_DEPRECATED: useGoToSnapshot_DEPRECATED,\n  useGotoRecoilSnapshot: useGotoRecoilSnapshot,\n  useSetUnvalidatedAtomValues: useSetUnvalidatedAtomValues\n};\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n// Split declaration and implementation to allow this function to pretend to\n// check for actual instance of Promise instead of something with a `then`\n// method.\n// eslint-disable-next-line no-redeclare\n\nfunction isPromise(p) {\n  return !!p && typeof p.then === 'function';\n}\n\nvar Recoil_isPromise = isPromise; // TODO Convert Loadable to a Class to allow for runtime type detection.\n// Containing static factories of withValue(), withError(), withPromise(), and all()\n\nvar loadableAccessors = {\n  getValue: function getValue() {\n    if (this.state !== 'hasValue') {\n      throw this.contents; // Throw Error, or Promise for the loading state\n    }\n\n    return this.contents;\n  },\n  toPromise: function toPromise() {\n    return this.state === 'hasValue' ? Promise.resolve(this.contents) : this.state === 'hasError' ? Promise.reject(this.contents) : this.contents;\n  },\n  valueMaybe: function valueMaybe() {\n    return this.state === 'hasValue' ? this.contents : undefined;\n  },\n  valueOrThrow: function valueOrThrow() {\n    if (this.state !== 'hasValue') {\n      throw new Error(\"Loadable expected value, but in \\\"\".concat(this.state, \"\\\" state\"));\n    }\n\n    return this.contents;\n  },\n  errorMaybe: function errorMaybe() {\n    return this.state === 'hasError' ? this.contents : undefined;\n  },\n  errorOrThrow: function errorOrThrow() {\n    if (this.state !== 'hasError') {\n      throw new Error(\"Loadable expected error, but in \\\"\".concat(this.state, \"\\\" state\"));\n    }\n\n    return this.contents;\n  },\n  promiseMaybe: function promiseMaybe() {\n    return this.state === 'loading' ? this.contents : undefined;\n  },\n  promiseOrThrow: function promiseOrThrow() {\n    if (this.state !== 'loading') {\n      throw new Error(\"Loadable expected promise, but in \\\"\".concat(this.state, \"\\\" state\"));\n    }\n\n    return this.contents;\n  },\n  // TODO Unit tests\n  // TODO Convert Loadable to a Class to better support chaining\n  //      by returning a Loadable from a map function\n  map: function map(_map) {\n    var _this3 = this;\n\n    if (this.state === 'hasError') {\n      return this;\n    }\n\n    if (this.state === 'hasValue') {\n      try {\n        var next = _map(this.contents); // TODO if next instanceof Loadable, then return next\n\n\n        return Recoil_isPromise(next) ? loadableWithPromise(next) : loadableWithValue(next);\n      } catch (e) {\n        return Recoil_isPromise(e) ? // If we \"suspended\", then try again.\n        // errors and subsequent retries will be handled in 'loading' case\n        loadableWithPromise(e.next(function () {\n          return _map(_this3.contents);\n        })) : loadableWithError(e);\n      }\n    }\n\n    if (this.state === 'loading') {\n      return loadableWithPromise(this.contents // TODO if map returns a loadable, then return the value or promise or throw the error\n      .then(_map).catch(function (e) {\n        if (Recoil_isPromise(e)) {\n          // we were \"suspended,\" try again\n          return e.then(function () {\n            return _map(_this3.contents);\n          });\n        }\n\n        throw e;\n      }));\n    }\n\n    throw new Error('Invalid Loadable state');\n  }\n};\n\nfunction loadableWithValue(value) {\n  // Build objects this way since Flow doesn't support disjoint unions for class properties\n  return Object.freeze(_objectSpread({\n    state: 'hasValue',\n    contents: value\n  }, loadableAccessors));\n}\n\nfunction loadableWithError(error) {\n  return Object.freeze(_objectSpread({\n    state: 'hasError',\n    contents: error\n  }, loadableAccessors));\n}\n\nfunction loadableWithPromise(promise) {\n  return Object.freeze(_objectSpread({\n    state: 'loading',\n    contents: promise\n  }, loadableAccessors));\n}\n\nfunction loadableLoading() {\n  return loadableWithPromise(new Promise(function () {}));\n}\n\nfunction loadableAll(inputs) {\n  return inputs.every(function (i) {\n    return i.state === 'hasValue';\n  }) ? loadableWithValue(inputs.map(function (i) {\n    return i.contents;\n  })) : inputs.some(function (i) {\n    return i.state === 'hasError';\n  }) ? loadableWithError( // $FlowIssue #44070740 Array.find should refine parameter\n  Recoil_nullthrows(inputs.find(function (i) {\n    return i.state === 'hasError';\n  }), 'Invalid loadable passed to loadableAll').contents) : loadableWithPromise(Promise.all(inputs.map(function (i) {\n    return i.contents;\n  })));\n}\n\nvar Recoil_Loadable = {\n  loadableWithValue: loadableWithValue,\n  loadableWithError: loadableWithError,\n  loadableWithPromise: loadableWithPromise,\n  loadableLoading: loadableLoading,\n  loadableAll: loadableAll\n};\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction isNode(object) {\n  var _ownerDocument, _doc$defaultView;\n\n  if (typeof window === 'undefined') {\n    return false;\n  }\n\n  var doc = object != null ? (_ownerDocument = object.ownerDocument) !== null && _ownerDocument !== void 0 ? _ownerDocument : object : document;\n  var defaultView = (_doc$defaultView = doc.defaultView) !== null && _doc$defaultView !== void 0 ? _doc$defaultView : window;\n  return !!(object != null && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));\n}\n\nvar Recoil_isNode = isNode;\n\nfunction shouldNotBeFrozen(value) {\n  // Primitives and functions:\n  if (value === null || typeof value !== 'object') {\n    return true;\n  } // React elements:\n\n\n  switch (typeof value.$$typeof) {\n    case 'symbol':\n      return true;\n\n    case 'number':\n      return true;\n  } // Immutable structures:\n\n\n  if (value['@@__IMMUTABLE_ITERABLE__@@'] != null || value['@@__IMMUTABLE_KEYED__@@'] != null || value['@@__IMMUTABLE_INDEXED__@@'] != null || value['@@__IMMUTABLE_ORDERED__@@'] != null || value['@@__IMMUTABLE_RECORD__@@'] != null) {\n    return true;\n  } // DOM nodes:\n\n\n  if (Recoil_isNode(value)) {\n    return true;\n  }\n\n  if (Recoil_isPromise(value)) {\n    return true;\n  }\n\n  return false;\n} // Recursively freeze a value to enforce it is read-only.\n// This may also have minimal performance improvements for enumerating\n// objects (based on browser implementations, of course)\n\n\nfunction deepFreezeValue(value) {\n  if (typeof value !== 'object' || shouldNotBeFrozen(value)) {\n    return;\n  }\n\n  Object.freeze(value); // Make all properties read-only\n\n  for (var key in value) {\n    if (Object.prototype.hasOwnProperty.call(value, key)) {\n      var prop = value[key]; // Prevent infinite recurssion for circular references.\n\n      if (typeof prop === 'object' && prop != null && !Object.isFrozen(prop)) {\n        deepFreezeValue(prop);\n      }\n    }\n  }\n\n  Object.seal(value); // This also makes existing properties non-configurable.\n}\n\nvar Recoil_deepFreezeValue = deepFreezeValue;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Implements (a subset of) the interface of built-in Map but supports arrays as\n * keys. Two keys are equal if corresponding elements are equal according to the\n * equality semantics of built-in Map. Operations are at worst O(n*b) where n is\n * the array length and b is the complexity of the built-in operation.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nvar LEAF = Symbol('ArrayKeyedMap');\nvar emptyMap$1 = new Map();\n\nvar ArrayKeyedMap = /*#__PURE__*/function () {\n  // @fb-only: _base: Map<any, any> = new Map();\n  function ArrayKeyedMap(existing) {\n    _classCallCheck(this, ArrayKeyedMap);\n\n    // $FlowOSSFixMe\n    this._base = new Map(); // @oss-only\n\n    if (existing instanceof ArrayKeyedMap) {\n      var _iterator10 = _createForOfIteratorHelper(existing.entries()),\n          _step10;\n\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var _step10$value = _slicedToArray(_step10.value, 2),\n              k = _step10$value[0],\n              v = _step10$value[1];\n\n          this.set(k, v);\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n    } else if (existing) {\n      var _iterator11 = _createForOfIteratorHelper(existing),\n          _step11;\n\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var _step11$value = _slicedToArray(_step11.value, 2),\n              _k = _step11$value[0],\n              _v = _step11$value[1];\n\n          this.set(_k, _v);\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n    }\n\n    return this;\n  }\n\n  _createClass(ArrayKeyedMap, [{\n    key: \"get\",\n    value: function get(key) {\n      var ks = Array.isArray(key) ? key : [key]; // $FlowOSSFixMe\n\n      var map = this._base;\n      ks.forEach(function (k) {\n        var _map$get;\n\n        map = (_map$get = map.get(k)) !== null && _map$get !== void 0 ? _map$get : emptyMap$1;\n      });\n      return map === undefined ? undefined : map.get(LEAF);\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      var ks = Array.isArray(key) ? key : [key]; // $FlowOSSFixMe\n\n      var map = this._base;\n      var next = map;\n      ks.forEach(function (k) {\n        next = map.get(k);\n\n        if (!next) {\n          next = new Map();\n          map.set(k, next);\n        }\n\n        map = next;\n      });\n      next.set(LEAF, value);\n      return this;\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(key) {\n      var ks = Array.isArray(key) ? key : [key]; // $FlowOSSFixMe\n\n      var map = this._base;\n      var next = map;\n      ks.forEach(function (k) {\n        next = map.get(k);\n\n        if (!next) {\n          next = new Map();\n          map.set(k, next);\n        }\n\n        map = next;\n      });\n      next.delete(LEAF); // TODO We could cleanup empty maps\n\n      return this;\n    }\n  }, {\n    key: \"entries\",\n    value: function entries() {\n      var answer = [];\n\n      function recurse(level, prefix) {\n        level.forEach(function (v, k) {\n          if (k === LEAF) {\n            answer.push([prefix, v]);\n          } else {\n            recurse(v, prefix.concat(k));\n          }\n        });\n      } // $FlowOSSFixMe\n\n\n      recurse(this._base, []);\n      return answer.values();\n    }\n  }, {\n    key: \"toBuiltInMap\",\n    value: function toBuiltInMap() {\n      return new Map(this.entries());\n    }\n  }]);\n\n  return ArrayKeyedMap;\n}();\n\nvar Recoil_ArrayKeyedMap = ArrayKeyedMap;\n\nfunction cacheWithReferenceEquality() {\n  return new Recoil_ArrayKeyedMap();\n}\n\nvar Recoil_cacheWithReferenceEquality = cacheWithReferenceEquality;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\n/**\n * The everySet() method tests whether all elements in the given Set pass the\n * test implemented by the provided function.\n */\n\nfunction everySet(set, callback, context) {\n  var iterator = set.entries();\n  var current = iterator.next();\n\n  while (!current.done) {\n    var entry = current.value;\n\n    if (!callback.call(context, entry[1], entry[0], set)) {\n      return false;\n    }\n\n    current = iterator.next();\n  }\n\n  return true;\n}\n\nvar Recoil_everySet = everySet;\n/**\n * Checks if two sets are equal\n */\n\nfunction equalsSet(one, two) {\n  if (one.size !== two.size) {\n    return false;\n  }\n\n  return Recoil_everySet(one, function (value) {\n    return two.has(value);\n  });\n}\n\nvar Recoil_equalsSet = equalsSet;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n *\n * This is a stub for some integration into FB internal stuff\n */\n\nfunction startPerfBlock(_id) {\n  return function () {\n    return null;\n  };\n}\n\nvar Recoil_PerformanceTimings = {\n  startPerfBlock: startPerfBlock\n};\nvar emptySet$1 = Object.freeze(new Set());\nvar mapBySettingInMap$2 = Recoil_CopyOnWrite.mapBySettingInMap,\n    mapByUpdatingInMap$2 = Recoil_CopyOnWrite.mapByUpdatingInMap,\n    setByAddingToSet$3 = Recoil_CopyOnWrite.setByAddingToSet,\n    setByDeletingFromSet$1 = Recoil_CopyOnWrite.setByDeletingFromSet;\nvar detectCircularDependencies$1 = Recoil_FunctionalCore.detectCircularDependencies,\n    getNodeLoadable$2 = Recoil_FunctionalCore.getNodeLoadable,\n    setNodeValue$4 = Recoil_FunctionalCore.setNodeValue;\nvar loadableWithError$1 = Recoil_Loadable.loadableWithError,\n    loadableWithPromise$1 = Recoil_Loadable.loadableWithPromise,\n    loadableWithValue$1 = Recoil_Loadable.loadableWithValue;\nvar DEFAULT_VALUE$3 = Recoil_Node.DEFAULT_VALUE,\n    RecoilValueNotReady$2 = Recoil_Node.RecoilValueNotReady,\n    registerNode$1 = Recoil_Node.registerNode;\nvar startPerfBlock$1 = Recoil_PerformanceTimings.startPerfBlock;\nvar isRecoilValue$2 = Recoil_RecoilValue$1.isRecoilValue; // flowlint-next-line unclear-type:off\n\nvar emptySet$2 = Object.freeze(new Set());\n\nfunction cacheKeyFromDepValues(depValues) {\n  var answer = [];\n\n  var _iterator12 = _createForOfIteratorHelper(Array.from(depValues.keys()).sort()),\n      _step12;\n\n  try {\n    for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n      var key = _step12.value;\n      var loadable = Recoil_nullthrows(depValues.get(key));\n      answer.push(key);\n      answer.push(loadable.contents);\n    }\n  } catch (err) {\n    _iterator12.e(err);\n  } finally {\n    _iterator12.f();\n  }\n\n  return answer;\n}\n/* eslint-disable no-redeclare */\n\n\nfunction selector(options) {\n  var key = options.key,\n      get = options.get,\n      cacheImplementation = options.cacheImplementation_UNSTABLE;\n  var set = options.set != null ? options.set : undefined; // flow\n\n  var cache = cacheImplementation !== null && cacheImplementation !== void 0 ? cacheImplementation : Recoil_cacheWithReferenceEquality();\n\n  function putIntoCache(store, cacheKey, loadable) {\n    if (loadable.state !== 'loading') {\n      // Synchronous result\n      if (!options.dangerouslyAllowMutability === true) {\n        Recoil_deepFreezeValue(loadable.contents);\n      }\n    } else {\n      // Asynchronous result\n      // When the promise resolves, we need to replace the loading state in the\n      // cache and fire any external subscriptions to re-render with the new value.\n      loadable.contents.then(function (result) {\n        // If the value is now resolved, then update the cache with the new value\n        if (!options.dangerouslyAllowMutability === true) {\n          Recoil_deepFreezeValue(result);\n        }\n\n        cache = cache.set(cacheKey, loadableWithValue$1(result)); // TODO Potential optimization: I think this is updating the cache\n        // with a cacheKey of the dep when it wasn't ready yet.  We could also\n        // theoretically put the result in the cache for a cacheKey with the\n        // dep resolved.  If we had some way of figuring out what that cacheKey was..\n        // Note that this optimization would change the user visible behavior slightly,\n        // see the unit test \"useRecoilState - selector catching promise 2\".\n        // If the user catches and handles pending async dependencies, then returns\n        // a promise that resolves when they are available there is a question if\n        // the result of that promise should be the value of the selector, or if\n        // the selector should re-evaluate when the dependency is available.\n        // If the promise returned and the pending dependency resolve at different\n        // times, then the behaviour is better defined, as in the unit test,\n        // \"useRecoilState - selector catching promise and resolving asynchronously\"\n        // Fire subscriptions to re-render any subscribed components with the new value.\n        // The store uses the CURRENT state, not the old state from which\n        // this was called.  That state likely doesn't have the subscriptions saved yet.\n\n        store.fireNodeSubscriptions(new Set([key]), 'now');\n        return result;\n      }).catch(function (error) {\n        // TODO Figure out why we are catching promises here versus evaluateSelectorFunction\n        // OH, I see why.  Ok, work on this.\n        if (Recoil_isPromise(error)) {\n          return error;\n        } // The async value was rejected with an error.  Update the cache with\n        // the error and fire subscriptions to re-render.\n\n\n        if (!options.dangerouslyAllowMutability === true) {\n          Recoil_deepFreezeValue(error);\n        }\n\n        cache = cache.set(cacheKey, loadableWithError$1(error));\n        store.fireNodeSubscriptions(new Set([key]), 'now');\n        return error;\n      });\n    }\n\n    cache = cache.set(cacheKey, loadable);\n  }\n\n  function getFromCache(store, state) {\n    var _state$nodeDeps$get;\n\n    var newState = state; // First, get the current deps for this selector\n\n    var currentDeps = (_state$nodeDeps$get = state.nodeDeps.get(key)) !== null && _state$nodeDeps$get !== void 0 ? _state$nodeDeps$get : emptySet$2;\n    var depValues = new Map(Array.from(currentDeps).sort().map(function (depKey) {\n      var _getNodeLoadable$3 = getNodeLoadable$2(store, newState, depKey),\n          _getNodeLoadable$4 = _slicedToArray(_getNodeLoadable$3, 2),\n          nextState = _getNodeLoadable$4[0],\n          loadable = _getNodeLoadable$4[1];\n\n      newState = nextState;\n      return [depKey, loadable];\n    })); // Always cache and evaluate a selector\n    // It may provide a result even when not all deps are available.\n\n    var cacheKey = cacheKeyFromDepValues(depValues);\n    var cached = cache.get(cacheKey);\n\n    if (cached != null) {\n      return [newState, cached];\n    } // Cache miss, compute the value\n\n\n    var _computeAndSubscribeS = computeAndSubscribeSelector(store, newState),\n        _computeAndSubscribeS2 = _slicedToArray(_computeAndSubscribeS, 3),\n        nextState = _computeAndSubscribeS2[0],\n        loadable = _computeAndSubscribeS2[1],\n        newDepValues = _computeAndSubscribeS2[2];\n\n    newState = nextState; // Save result in cache\n\n    var newCacheKey = cacheKeyFromDepValues(newDepValues);\n    putIntoCache(store, newCacheKey, loadable);\n    return [newState, loadable];\n  }\n\n  function evaluateSelectorFunction(store, state) {\n    var endPerfBlock = startPerfBlock$1(key);\n    var newState = state;\n    var depValues = new Map();\n\n    function getRecoilValue(_ref12) {\n      var key = _ref12.key;\n      var loadable;\n\n      var _getNodeLoadable$5 = getNodeLoadable$2(store, newState, key);\n\n      var _getNodeLoadable$6 = _slicedToArray(_getNodeLoadable$5, 2);\n\n      newState = _getNodeLoadable$6[0];\n      loadable = _getNodeLoadable$6[1];\n      depValues.set(key, loadable);\n\n      if (loadable.state === 'hasValue') {\n        return loadable.contents;\n      } else {\n        throw loadable.contents; // Promise or error\n      }\n    }\n\n    try {\n      // The big moment!\n      var output = get({\n        get: getRecoilValue\n      });\n      var result = isRecoilValue$2(output) ? getRecoilValue(output) : output; // TODO Allow user to also return Loadables for improved composability\n\n      var loadable = !Recoil_isPromise(result) ? ( // The selector returned a simple synchronous value, so let's use it!\n      endPerfBlock(), loadableWithValue$1(result)) : // The user returned a promise for an asynchronous selector.  This will\n      // resolve to the proper value of the selector when available.\n      loadableWithPromise$1(result.finally(endPerfBlock));\n      return [newState, loadable, depValues];\n    } catch (errorOrDepPromise) {\n      var _loadable = !Recoil_isPromise(errorOrDepPromise) ? ( // There was a synchronous error in the evaluation\n      endPerfBlock(), loadableWithError$1(errorOrDepPromise)) : // If an asynchronous dependency was not ready, then return a promise that\n      // will resolve when we finally do have a real value or error for the selector.\n      loadableWithPromise$1(errorOrDepPromise.then(function () {\n        // The dependency we were waiting on is now available.\n        // So, let's try to evaluate the selector again and return that value.\n        var loadable = loadableWithError$1(new Error('Internal Recoil Selector Error') // To make Flow happy\n        ); // This is done asynchronously, so we need to make sure to save the state\n\n        store.replaceState(function (asyncState) {\n          var newAsyncState;\n\n          var _getFromCache = getFromCache(store, asyncState);\n\n          var _getFromCache2 = _slicedToArray(_getFromCache, 2);\n\n          newAsyncState = _getFromCache2[0];\n          loadable = _getFromCache2[1];\n          return newAsyncState;\n        });\n\n        if (loadable.state === 'hasError') {\n          throw loadable.contents;\n        } // Either the re-try provided a value, which we will use, or it\n        // got blocked again.  In that case this is a promise and we'll try again.\n\n\n        return loadable.contents;\n      }).finally(endPerfBlock));\n\n      return [newState, _loadable, depValues];\n    }\n  }\n\n  function computeAndSubscribeSelector(store, state) {\n    var _state$nodeDeps$get2; // Call the selector get evaluation function to get the new value\n\n\n    var _evaluateSelectorFunc = evaluateSelectorFunction(store, state),\n        _evaluateSelectorFunc2 = _slicedToArray(_evaluateSelectorFunc, 3),\n        newStateFromEvaluate = _evaluateSelectorFunc2[0],\n        loadable = _evaluateSelectorFunc2[1],\n        newDepValues = _evaluateSelectorFunc2[2];\n\n    var newState = newStateFromEvaluate; // Update state with new upsteram dependencies\n\n    var oldDeps = (_state$nodeDeps$get2 = state.nodeDeps.get(key)) !== null && _state$nodeDeps$get2 !== void 0 ? _state$nodeDeps$get2 : emptySet$2;\n    var newDeps = new Set(newDepValues.keys());\n    newState = Recoil_equalsSet(oldDeps, newDeps) ? newState : _objectSpread(_objectSpread({}, newState), {}, {\n      nodeDeps: mapBySettingInMap$2(newState.nodeDeps, key, newDeps)\n    }); // Update state with new downstream subscriptions\n\n    var addedDeps = Recoil_differenceSets(newDeps, oldDeps);\n    var removedDeps = Recoil_differenceSets(oldDeps, newDeps);\n\n    var _iterator13 = _createForOfIteratorHelper(addedDeps),\n        _step13;\n\n    try {\n      for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n        var upstreamNode = _step13.value;\n        newState = _objectSpread(_objectSpread({}, newState), {}, {\n          nodeToNodeSubscriptions: mapByUpdatingInMap$2(newState.nodeToNodeSubscriptions, upstreamNode, function (subs) {\n            return setByAddingToSet$3(subs !== null && subs !== void 0 ? subs : emptySet$2, key);\n          })\n        });\n      }\n    } catch (err) {\n      _iterator13.e(err);\n    } finally {\n      _iterator13.f();\n    }\n\n    var _iterator14 = _createForOfIteratorHelper(removedDeps),\n        _step14;\n\n    try {\n      for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n        var _upstreamNode = _step14.value;\n        newState = _objectSpread(_objectSpread({}, newState), {}, {\n          nodeToNodeSubscriptions: mapByUpdatingInMap$2(newState.nodeToNodeSubscriptions, _upstreamNode, function (subs) {\n            return setByDeletingFromSet$1(subs !== null && subs !== void 0 ? subs : emptySet$2, key);\n          })\n        });\n      }\n    } catch (err) {\n      _iterator14.e(err);\n    } finally {\n      _iterator14.f();\n    }\n\n    {\n      detectCircularDependencies$1(newState, [key]);\n    }\n    return [newState, loadable, newDepValues];\n  }\n\n  function myGet(store, state) {\n    // TODO memoize a value if no deps have changed to avoid a cache lookup\n    // Lookup the node value in the cache.  If not there, then compute\n    // the value and update the state with any changed node subscriptions.\n    return getFromCache(store, state);\n  }\n\n  if (set != null) {\n    var mySet = function mySet(store, state, newValue) {\n      var newState = state;\n      var writtenNodes = new Set();\n\n      function getRecoilValue(_ref13) {\n        var key = _ref13.key;\n\n        var _getNodeLoadable$7 = getNodeLoadable$2(store, newState, key),\n            _getNodeLoadable$8 = _slicedToArray(_getNodeLoadable$7, 2),\n            nextState = _getNodeLoadable$8[0],\n            loadable = _getNodeLoadable$8[1];\n\n        newState = nextState;\n\n        if (loadable.state === 'hasValue') {\n          return loadable.contents;\n        } else if (loadable.state === 'loading') {\n          throw new RecoilValueNotReady$2(key);\n        } else {\n          throw loadable.contents;\n        }\n      }\n\n      function setRecoilState(recoilState, valueOrUpdater) {\n        var newValue = typeof valueOrUpdater === 'function' ? // cast to any because we can't restrict type S from being a function itself without losing support for opaque types\n        // flowlint-next-line unclear-type:off\n        valueOrUpdater(getRecoilValue(recoilState)) : valueOrUpdater;\n        var written;\n\n        var _setNodeValue$5 = setNodeValue$4(store, newState, recoilState.key, newValue);\n\n        var _setNodeValue$6 = _slicedToArray(_setNodeValue$5, 2);\n\n        newState = _setNodeValue$6[0];\n        written = _setNodeValue$6[1];\n        written.forEach(function (atom) {\n          return writtenNodes.add(atom);\n        });\n      }\n\n      function resetRecoilState(recoilState) {\n        setRecoilState(recoilState, DEFAULT_VALUE$3);\n      }\n\n      set({\n        set: setRecoilState,\n        get: getRecoilValue,\n        reset: resetRecoilState\n      }, newValue);\n      return [newState, writtenNodes];\n    };\n\n    return registerNode$1({\n      key: key,\n      options: options,\n      get: myGet,\n      set: mySet\n    });\n  } else {\n    return registerNode$1({\n      key: key,\n      options: options,\n      get: myGet\n    });\n  }\n}\n/* eslint-enable no-redeclare */\n\n\nvar Recoil_selector_OLD = selector;\nvar selector$1 = Recoil_selector_OLD;\nvar Recoil_selector = selector$1; // @fb-only: import type {ScopeRules} from './Recoil_ScopedAtom';\n\nvar loadableWithValue$2 = Recoil_Loadable.loadableWithValue;\nvar DEFAULT_VALUE$4 = Recoil_Node.DEFAULT_VALUE,\n    DefaultValue$1 = Recoil_Node.DefaultValue,\n    registerNode$2 = Recoil_Node.registerNode;\nvar isRecoilValue$3 = Recoil_RecoilValue$1.isRecoilValue;\nvar mapByDeletingFromMap$2 = Recoil_CopyOnWrite.mapByDeletingFromMap,\n    mapBySettingInMap$3 = Recoil_CopyOnWrite.mapBySettingInMap,\n    setByAddingToSet$4 = Recoil_CopyOnWrite.setByAddingToSet; // @fb-only: const {scopedAtom} = require('./Recoil_ScopedAtom');\n// It would be nice if this didn't have to be defined at the Recoil level, but I don't want to make\n// the api cumbersome. One way to do this would be to have a selector mark the atom as persisted.\n// Note that this should also allow for special URL handling. (Although the persistence observer could\n// have this as a separate configuration.)\n\nfunction baseAtom(options) {\n  var key = options.key,\n      persistence = options.persistence_UNSTABLE;\n  return registerNode$2({\n    key: key,\n    options: options,\n    get: function get(_store, state) {\n      if (state.atomValues.has(key)) {\n        // atom value is stored in state\n        return [state, Recoil_nullthrows(state.atomValues.get(key))];\n      } else if (state.nonvalidatedAtoms.has(key)) {\n        if (persistence == null) {\n          Recoil_expectationViolation(\"Tried to restore a persisted value for atom \".concat(key, \" but it has no persistence settings.\"));\n          return [state, loadableWithValue$2(options.default)];\n        }\n\n        var nonvalidatedValue = state.nonvalidatedAtoms.get(key);\n        var validatedValue = persistence.validator(nonvalidatedValue, DEFAULT_VALUE$4);\n        return validatedValue instanceof DefaultValue$1 ? [_objectSpread(_objectSpread({}, state), {}, {\n          nonvalidatedAtoms: mapByDeletingFromMap$2(state.nonvalidatedAtoms, key)\n        }), loadableWithValue$2(options.default)] : [_objectSpread(_objectSpread({}, state), {}, {\n          atomValues: mapBySettingInMap$3(state.atomValues, key, loadableWithValue$2(validatedValue)),\n          nonvalidatedAtoms: mapByDeletingFromMap$2(state.nonvalidatedAtoms, key)\n        }), loadableWithValue$2(validatedValue)];\n      } else {\n        return [state, loadableWithValue$2(options.default)];\n      }\n    },\n    set: function set(_store, state, newValue) {\n      if (options.dangerouslyAllowMutability !== true) {\n        Recoil_deepFreezeValue(newValue);\n      }\n\n      return [_objectSpread(_objectSpread({}, state), {}, {\n        dirtyAtoms: setByAddingToSet$4(state.dirtyAtoms, key),\n        atomValues: newValue instanceof DefaultValue$1 ? mapByDeletingFromMap$2(state.atomValues, key) : mapBySettingInMap$3(state.atomValues, key, loadableWithValue$2(newValue)),\n        nonvalidatedAtoms: mapByDeletingFromMap$2(state.nonvalidatedAtoms, key)\n      }), new Set([key])];\n    }\n  });\n} // prettier-ignore\n\n\nfunction atom(options) {\n  var optionsDefault = options.default,\n      restOptions = _objectWithoutProperties(options, _excluded);\n\n  if (isRecoilValue$3(optionsDefault) || Recoil_isPromise(optionsDefault)) {\n    return atomWithFallback(_objectSpread(_objectSpread({}, restOptions), {}, {\n      default: optionsDefault // @fb-only: scopeRules_APPEND_ONLY_READ_THE_DOCS,\n\n    })); // @fb-only: } else if (scopeRules_APPEND_ONLY_READ_THE_DOCS) {\n    // @fb-only: return scopedAtom<T>({\n    // @fb-only: ...restOptions,\n    // @fb-only: default: optionsDefault,\n    // @fb-only: scopeRules_APPEND_ONLY_READ_THE_DOCS,\n    // @fb-only: });\n  } else {\n    return baseAtom(_objectSpread(_objectSpread({}, restOptions), {}, {\n      default: optionsDefault\n    }));\n  }\n}\n\nfunction atomWithFallback(options) {\n  var base = atom(_objectSpread(_objectSpread({}, options), {}, {\n    default: DEFAULT_VALUE$4,\n    persistence_UNSTABLE: options.persistence_UNSTABLE === undefined ? undefined : _objectSpread(_objectSpread({}, options.persistence_UNSTABLE), {}, {\n      validator: function validator(storedValue) {\n        return storedValue instanceof DefaultValue$1 ? storedValue : Recoil_nullthrows(options.persistence_UNSTABLE).validator(storedValue, DEFAULT_VALUE$4);\n      }\n    })\n  }));\n  return Recoil_selector({\n    key: \"\".concat(options.key, \"__withFallback\"),\n    get: function get(_ref14) {\n      var _get = _ref14.get;\n\n      var baseValue = _get(base);\n\n      return baseValue instanceof DefaultValue$1 ? options.default : baseValue;\n    },\n    set: function set(_ref15, newValue) {\n      var _set = _ref15.set;\n      return _set(base, newValue);\n    },\n    dangerouslyAllowMutability: options.dangerouslyAllowMutability\n  });\n}\n\nvar Recoil_atom = atom;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nvar Recoil_ParameterizedAtomTaggedValue_DEPRECATED = /*#__PURE__*/Object.freeze({\n  __proto__: null\n});\nvar TIME_WARNING_THRESHOLD_MS = 15;\n\nfunction stringify(x, opt, key) {\n  // A optimization to avoid the more expensive JSON.stringify() for simple strings\n  // This may lose protection for u2028 and u2029, though.\n  if (typeof x === 'string' && !x.includes('\"') && !x.includes('\\\\')) {\n    return \"\\\"\".concat(x, \"\\\"\");\n  } // Handle primitive types\n\n\n  switch (typeof x) {\n    case 'undefined':\n      return '';\n    // JSON.stringify(undefined) returns undefined, but we always want to return a string\n\n    case 'boolean':\n      return x ? 'true' : 'false';\n\n    case 'number':\n    case 'symbol':\n      // case 'bigint': // BigInt is not supported in www\n      return String(x);\n\n    case 'string':\n      // Add surrounding quotes and escape internal quotes\n      return JSON.stringify(x);\n\n    case 'function':\n      if ((opt === null || opt === void 0 ? void 0 : opt.allowFunctions) !== true) {\n        throw new Error('Attempt to serialize function in a Recoil cache key');\n      }\n\n      return \"__FUNCTION(\".concat(x.name, \")__\");\n  }\n\n  if (x === null) {\n    return 'null';\n  } // Fallback case for unknown types\n\n\n  if (typeof x !== 'object') {\n    var _JSON$stringify;\n\n    return (_JSON$stringify = JSON.stringify(x)) !== null && _JSON$stringify !== void 0 ? _JSON$stringify : '';\n  } // Deal with all promises as equivalent for now.\n\n\n  if (Recoil_isPromise(x)) {\n    return '__PROMISE__';\n  } // Arrays handle recursive stringification\n\n\n  if (Array.isArray(x)) {\n    return \"[\".concat(x.map(function (v, i) {\n      return stringify(v, opt, i.toString());\n    }), \"]\");\n  } // If an object defines a toJSON() method, then use that to override the\n  // serialization.  This matches the behavior of JSON.stringify().\n  // Pass the key for compatibility.\n  // Immutable.js collections define this method to allow us to serialize them.\n\n\n  if (typeof x.toJSON === 'function') {\n    // flowlint-next-line unclear-type: off\n    return stringify(x.toJSON(key), opt, key);\n  } // For built-in Maps, sort the keys in a stable order instead of the\n  // default insertion order.  Support non-string keys.\n\n\n  if (x instanceof Map) {\n    return stringify( // TODO Object.fromEntries(x) isn't supported in Babel yet (7/17/19)\n    Array.from(x).reduce(function (obj, _ref16) {\n      var _ref17 = _slicedToArray(_ref16, 2),\n          k = _ref17[0],\n          v = _ref17[1];\n\n      return _objectSpread(_objectSpread({}, obj), {}, _defineProperty2({}, typeof k === 'string' ? k : stringify(k, opt), v));\n    }, {}), opt, key);\n  } // For built-in Sets, sort the keys in a stable order instead of the\n  // default insertion order.\n\n\n  if (x instanceof Set) {\n    return stringify(Array.from(x).sort(function (a, b) {\n      return stringify(a, opt).localeCompare(stringify(b, opt));\n    }), opt, key);\n  } // Anything else that is iterable serialize as an Array.\n\n\n  if (x[Symbol.iterator] != null && typeof x[Symbol.iterator] === 'function') {\n    // flowlint-next-line unclear-type: off\n    return stringify(Array.from(x), opt, key);\n  } // For all other Objects, sort the keys in a stable order.\n\n\n  return \"{\".concat(Object.keys(x).filter(function (key) {\n    return x[key] !== undefined;\n  }).sort() // stringify the key to add quotes and escape any nested slashes or quotes.\n  .map(function (key) {\n    return \"\".concat(stringify(key, opt), \":\").concat(stringify(x[key], opt, key));\n  }).join(','), \"}\");\n} // Utility similar to JSON.stringify() except:\n// * Serialize built-in Sets as an Array\n// * Serialize built-in Maps as an Object.  Supports non-string keys.\n// * Serialize other iterables as arrays\n// * Sort the keys of Objects and Maps to have a stable order based on string conversion.\n//    This overrides their default insertion order.\n// * Still uses toJSON() of any object to override serialization\n// * Support Symbols (though don't guarantee uniqueness)\n// * We could support BigInt, but Flow doesn't seem to like it.\n// See Recoil_stableStringify-test.js for examples\n\n\nfunction stableStringify(x) {\n  var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    allowFunctions: false\n  };\n  {\n    if (typeof window !== 'undefined') {\n      var startTime = window.performance ? window.performance.now() : 0;\n      var str = stringify(x, opt);\n      var endTime = window.performance ? window.performance.now() : 0;\n\n      if (endTime - startTime > TIME_WARNING_THRESHOLD_MS) {\n        /* eslint-disable fb-www/no-console */\n        console.groupCollapsed(\"Recoil: Spent \".concat(endTime - startTime, \"ms computing a cache key\"));\n        console.warn(x, str);\n        console.groupEnd();\n        /* eslint-enable fb-www/no-console */\n      }\n\n      return str;\n    }\n  }\n  return stringify(x, opt);\n}\n\nvar Recoil_stableStringify = stableStringify; // If we do profile and find the key equality check is expensive,\n// we could always try to optimize..  Something that comes to mind is having\n// each check assign an incrementing index to each reference that maps to the\n// value equivalency.  Then, if an object already has an index, the comparison\n// check/lookup would be trivial and the string serialization would only need\n// to be done once per object instance.  Just a thought..\n// Cache implementation to use value equality for keys instead of the default\n// reference equality.  This allows different instances of dependency values to\n// be used.  Normally this is not needed, as dependent atoms/selectors will\n// themselves be cached and always return the same instance.  However, if\n// different params or upstream values for those dependencies could produce\n// equivalent values or they have a custom cache implementation, then this\n// implementation may be needed.  The downside with this approach is that it\n// takes longer to compute the value equivalence vs simple reference equality.\n\nfunction cacheWithValueEquality() {\n  var map = new Map();\n  var cache = {\n    get: function get(key) {\n      return map.get(Recoil_stableStringify(key));\n    },\n    set: function set(key, value) {\n      map.set(Recoil_stableStringify(key), value);\n      return cache;\n    },\n    map: map // For debugging\n\n  };\n  return cache;\n}\n\nvar Recoil_cacheWithValueEquality = cacheWithValueEquality; // Keep in mind the parameter needs to be serializable as a cahche key\n// using Recoil_stableStringify\n// Add a unique index to each selector in case the cache implementation allows\n// duplicate keys based on equivalent stringified parameters\n\nvar nextIndex = 0;\n/* eslint-disable no-redeclare */\n// Return a function that returns members of a family of selectors of the same type\n// E.g.,\n//\n// const s = selectorFamily(...);\n// s({a: 1}) => a selector\n// s({a: 2}) => a different selector\n//\n// By default, the selectors are distinguished by distinct values of the\n// parameter based on value equality, not reference equality.  This allows using\n// object literals or other equivalent objects at callsites to not create\n// duplicate cache entries.  This behavior may be overridden with the\n// cacheImplementationForParams option.\n\nfunction selectorFamily(options) {\n  var _options$cacheImpleme, _options$cacheImpleme2;\n\n  var selectorCache = (_options$cacheImpleme = (_options$cacheImpleme2 = options.cacheImplementationForParams_UNSTABLE) === null || _options$cacheImpleme2 === void 0 ? void 0 : _options$cacheImpleme2.call(options)) !== null && _options$cacheImpleme !== void 0 ? _options$cacheImpleme : Recoil_cacheWithValueEquality();\n  return function (params) {\n    var _stableStringify, _options$cacheImpleme3;\n\n    var cachedSelector = selectorCache.get(params);\n\n    if (cachedSelector != null) {\n      return cachedSelector;\n    }\n\n    var myKey = \"\".concat(options.key, \"__selectorFamily/\").concat((_stableStringify = Recoil_stableStringify(params, {\n      // It is possible to use functions in parameters if the user uses\n      // a cache with reference equality thanks to the incrementing index.\n      allowFunctions: true\n    })) !== null && _stableStringify !== void 0 ? _stableStringify : 'void', \"/\").concat(nextIndex++); // Append index in case values serialize to the same key string\n\n    var myGet = function myGet(callbacks) {\n      return options.get(params)(callbacks);\n    };\n\n    var myCacheImplementation = (_options$cacheImpleme3 = options.cacheImplementation_UNSTABLE) === null || _options$cacheImpleme3 === void 0 ? void 0 : _options$cacheImpleme3.call(options);\n    var newSelector;\n\n    if (options.set != null) {\n      var set = options.set;\n\n      var mySet = function mySet(callbacks, newValue) {\n        return set(params)(callbacks, newValue);\n      };\n\n      newSelector = Recoil_selector({\n        key: myKey,\n        get: myGet,\n        set: mySet,\n        cacheImplementation_UNSTABLE: myCacheImplementation,\n        dangerouslyAllowMutability: options.dangerouslyAllowMutability\n      });\n    } else {\n      newSelector = Recoil_selector({\n        key: myKey,\n        get: myGet,\n        cacheImplementation_UNSTABLE: myCacheImplementation,\n        dangerouslyAllowMutability: options.dangerouslyAllowMutability\n      });\n    }\n\n    selectorCache = selectorCache.set(params, newSelector);\n    return newSelector;\n  };\n}\n/* eslint-enable no-redeclare */\n\n\nvar Recoil_selectorFamily = selectorFamily; // @fb-only: import type {ScopeRules} from './Recoil_ScopedAtom';\n\nvar DEFAULT_VALUE$5 = Recoil_Node.DEFAULT_VALUE,\n    DefaultValue$2 = Recoil_Node.DefaultValue; // @fb-only: const {parameterizedScopedAtomLegacy} = require('./Recoil_ScopedAtom');\n\nfunction isSuperset(setA, setB) {\n  return Recoil_everySet(setB, function (b) {\n    return setA.has(b);\n  });\n}\n\nvar pick = function pick(object, chosenKeys) {\n  return Array.from(chosenKeys).reduce(function (obj, key) {\n    return _objectSpread(_objectSpread({}, obj), {}, _defineProperty2({}, key, object[key]));\n  }, {});\n};\n\nfunction getParameterizedValue_DEPRECATED(baseValue, parameter) {\n  // Allow simple atoms to be upgraded to atomFamilies\n  if (!(baseValue instanceof Recoil_ParameterizedAtomTaggedValue_DEPRECATED)) {\n    return baseValue;\n  } // Legacy ParameterizedAtomTaggedValue only supported object type parameters\n\n\n  if (typeof parameter !== 'object' || parameter == null || Array.isArray(parameter)) {\n    return DEFAULT_VALUE$5;\n  }\n\n  var entries = baseValue.value;\n  var parameterKeys = new Set(Object.keys(parameter));\n\n  var _iterator15 = _createForOfIteratorHelper(entries),\n      _step15;\n\n  try {\n    for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n      var _step15$value = _slicedToArray(_step15.value, 2),\n          entryParameterKeys = _step15$value[0],\n          entryMap = _step15$value[1];\n\n      if (isSuperset(parameterKeys, entryParameterKeys)) {\n        var contextOrSubcontext = parameterKeys.size === entryParameterKeys.size // if true they are equal\n        ? parameter : pick(parameter, entryParameterKeys);\n        var value = entryMap.get(Recoil_stableStringify(contextOrSubcontext));\n\n        if (value !== undefined) {\n          return value;\n        }\n      }\n    }\n  } catch (err) {\n    _iterator15.e(err);\n  } finally {\n    _iterator15.f();\n  }\n\n  return DEFAULT_VALUE$5;\n}\n\nfunction mapPersistenceSettings_DEPRECATED(settings) {\n  if (settings == null) {\n    return undefined;\n  }\n\n  var passthrough = Object.assign({}, settings);\n  return _objectSpread(_objectSpread({}, passthrough), {}, {\n    validator: function validator(storedValue) {\n      if (storedValue instanceof Recoil_ParameterizedAtomTaggedValue_DEPRECATED) {\n        return new Recoil_ParameterizedAtomTaggedValue_DEPRECATED(storedValue.value.filter(function (_ref18) {\n          var _ref19 = _slicedToArray(_ref18, 2),\n              keys = _ref19[0],\n              map = _ref19[1];\n\n          return keys instanceof Set && map instanceof Map;\n        }).map(function (_ref20) {\n          var _ref21 = _slicedToArray(_ref20, 2),\n              keys = _ref21[0],\n              map = _ref21[1];\n\n          return [keys, Array.from(map.entries()).reduce(function (acc, _ref22) {\n            var _ref23 = _slicedToArray(_ref22, 2),\n                k = _ref23[0],\n                v = _ref23[1];\n\n            var validatedValue = passthrough.validator(v, DEFAULT_VALUE$5);\n\n            if (validatedValue instanceof DefaultValue$2) {\n              return acc;\n            }\n\n            acc.set(k, validatedValue);\n            return acc;\n          }, new Map())];\n        }));\n      } else {\n        return passthrough.validator(storedValue, DEFAULT_VALUE$5);\n      }\n    }\n  });\n} // Process scopeRules to handle any entries which are functions taking parameters\n\n/*\nA function which returns an atom based on the input parameter.\n\nEach unique parameter returns a unique atom. E.g.,\n\n  const f = atomFamily(...);\n  f({a: 1}) => an atom\n  f({a: 2}) => a different atom\n\nThis allows components to persist local, private state using atoms.  Each\ninstance of the component may have a different key, which it uses as the\nparameter for a family of atoms; in this way, each component will have\nits own atom not shared by other instances.  These state keys may be composed\ninto children's state keys as well.\n*/\n\n\nfunction atomFamily(options) {\n  var atomCache = Recoil_cacheWithValueEquality(); // An atom to represent any legacy atoms that we can upgrade to an atomFamily\n\n  var legacyAtomOptions = {\n    key: options.key,\n    // Legacy atoms just used the plain key directly\n    default: DEFAULT_VALUE$5,\n    // TODO Drop support for ParameterizedAtomTaggedValue_DEPRECATED June 2020\n    persistence_UNSTABLE: mapPersistenceSettings_DEPRECATED(options.persistence_UNSTABLE)\n  };\n  var legacyAtom; // prettier-ignore\n  // @fb-only: if (\n  // @fb-only: options.scopeRules_APPEND_ONLY_READ_THE_DOCS\n  // @fb-only: ) {\n  // @fb-only: legacyAtom = parameterizedScopedAtomLegacy<\n  // @fb-only: StoredBaseValue_DEPRECATED<T> | DefaultValue,\n  // @fb-only: P,\n  // @fb-only: >({\n  // @fb-only: ...legacyAtomOptions,\n  // @fb-only: scopeRules_APPEND_ONLY_READ_THE_DOCS:\n  // @fb-only: options.scopeRules_APPEND_ONLY_READ_THE_DOCS,\n  // @fb-only: });\n  // @fb-only: } else {\n\n  legacyAtom = Recoil_atom(legacyAtomOptions); // @fb-only: }\n  // Selector to calculate the default value based on any persisted legacy atoms\n  // that were upgraded to a atomFamily\n\n  var atomFamilyDefault = Recoil_selectorFamily({\n    key: \"\".concat(options.key, \"__atomFamily/Default\"),\n    get: function get(param) {\n      return function (_ref24) {\n        var get = _ref24.get;\n        var legacyValue = get(typeof legacyAtom === 'function' ? legacyAtom(param) : legacyAtom);\n\n        if (!(legacyValue instanceof DefaultValue$2)) {\n          // Atom was upgraded from a non-parameterized atom\n          // or a legacy ParameterizedAtomTaggedValue\n          // TODO Drop support for ParameterizedAtomTaggedValue_DEPRECATED June 2020\n          var upgradedValue = getParameterizedValue_DEPRECATED(legacyValue, param);\n\n          if (!(upgradedValue instanceof DefaultValue$2)) {\n            return upgradedValue;\n          }\n        } // There's no legacy atom value, so use the user-specified default\n\n\n        return typeof options.default === 'function' ? // The default was parameterized\n        // Flow doesn't know that T isn't a function, so we need to case to any\n        options.default(param) // flowlint-line unclear-type:off\n        : // Default may be a static value, promise, or RecoilValue\n        options.default;\n      };\n    },\n    dangerouslyAllowMutability: options.dangerouslyAllowMutability\n  }); // Simple atomFamily implementation to cache individual atoms based\n  // on the parameter value equality.\n\n  return function (params) {\n    var _stableStringify;\n\n    var cachedAtom = atomCache.get(params);\n\n    if (cachedAtom != null) {\n      return cachedAtom;\n    }\n\n    var newAtom = Recoil_atom({\n      key: \"\".concat(options.key, \"__\").concat((_stableStringify = Recoil_stableStringify(params)) !== null && _stableStringify !== void 0 ? _stableStringify : 'void'),\n      default: atomFamilyDefault(params),\n      // prettier-ignore\n      // @fb-only: scopeRules_APPEND_ONLY_READ_THE_DOCS: mapScopeRules(\n      // @fb-only: options.scopeRules_APPEND_ONLY_READ_THE_DOCS,\n      // @fb-only: params,\n      // @fb-only: ),\n      persistence_UNSTABLE: options.persistence_UNSTABLE,\n      dangerouslyAllowMutability: options.dangerouslyAllowMutability\n    });\n    atomCache = atomCache.set(params, newAtom);\n    return newAtom;\n  };\n}\n\nvar Recoil_atomFamily = atomFamily; // flowlint-next-line unclear-type:off\n\nvar constantSelector = Recoil_selectorFamily({\n  key: '__constant',\n  get: function get(constant) {\n    return function () {\n      return constant;\n    };\n  },\n  cacheImplementationForParams_UNSTABLE: Recoil_cacheWithReferenceEquality\n}); // Function that returns a selector which always produces the\n// same constant value.  It may be called multiple times with the\n// same value, based on reference equality, and will provide the\n// same selector.\n\nfunction constSelector(constant) {\n  return constantSelector(constant);\n}\n\nvar Recoil_constSelector = constSelector; // flowlint-next-line unclear-type:off\n\nvar throwingSelector = Recoil_selectorFamily({\n  key: '__error',\n  get: function get(message) {\n    return function () {\n      throw new Error(message);\n    };\n  },\n  cacheImplementationForParams_UNSTABLE: Recoil_cacheWithReferenceEquality\n}); // Function that returns a selector which always throws an error\n// with the provided message.\n\nfunction errorSelector(message) {\n  return throwingSelector(message);\n}\n\nvar Recoil_errorSelector = errorSelector;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Wraps another recoil value and prevents writing to it.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction readOnlySelector(atom) {\n  // flowlint-next-line unclear-type: off\n  return atom;\n}\n\nvar Recoil_readOnlySelector = readOnlySelector;\nvar loadableWithError$2 = Recoil_Loadable.loadableWithError,\n    loadableWithPromise$2 = Recoil_Loadable.loadableWithPromise,\n    loadableWithValue$3 = Recoil_Loadable.loadableWithValue; /////////////////\n//  TRUTH TABLE\n/////////////////\n// Dependencies        waitForNone         waitForAny        waitForAll\n//  [loading, loading]  [Promise, Promise]  Promise           Promise\n//  [value, loading]    [value, Promise]    [value, Promise]  Promise\n//  [value, value]      [value, value]      [value, value]    [value, value]\n//\n//  [error, loading]    [Error, Promise]    Promise           Error\n//  [error, error]      [Error, Error]      Error             Error\n//  [value, error]      [value, Error]      [value, Error]    Error\n// Issue parallel requests for all dependencies and return the current\n// status if they have results, have some error, or are still pending.\n\nfunction concurrentRequests(getRecoilValue, deps) {\n  var results = Array(deps.length).fill(undefined);\n  var exceptions = Array(deps.length).fill(undefined);\n\n  var _iterator16 = _createForOfIteratorHelper(deps.entries()),\n      _step16;\n\n  try {\n    for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n      var _step16$value = _slicedToArray(_step16.value, 2),\n          i = _step16$value[0],\n          dep = _step16$value[1];\n\n      try {\n        results[i] = getRecoilValue(dep);\n      } catch (e) {\n        // exceptions can either be Promises of pending results or real errors\n        exceptions[i] = e;\n      }\n    }\n  } catch (err) {\n    _iterator16.e(err);\n  } finally {\n    _iterator16.f();\n  }\n\n  return [results, exceptions];\n}\n\nfunction isError(exp) {\n  return exp != null && !Recoil_isPromise(exp);\n}\n\nfunction unwrapDependencies(dependencies) {\n  return Array.isArray(dependencies) ? dependencies : Object.getOwnPropertyNames(dependencies).map(function (key) {\n    return dependencies[key];\n  });\n}\n\nfunction wrapResults(dependencies, results) {\n  return Array.isArray(dependencies) ? results : // Object.getOwnPropertyNames() has consistent key ordering with ES6\n  Object.getOwnPropertyNames(dependencies).reduce(function (out, key, idx) {\n    return _objectSpread(_objectSpread({}, out), {}, _defineProperty2({}, key, results[idx]));\n  }, {});\n}\n\nfunction wrapLoadables(dependencies, results, exceptions) {\n  var output = exceptions.map(function (exception, idx) {\n    return exception == null ? loadableWithValue$3(results[idx]) : Recoil_isPromise(exception) ? loadableWithPromise$2(exception) : loadableWithError$2(exception);\n  });\n  return wrapResults(dependencies, output);\n} // Selector that requests all dependencies in parallel and immediately returns\n// current results without waiting.\n\n\nvar waitForNone = Recoil_selectorFamily({\n  key: '__waitForNone',\n  get: function get(dependencies) {\n    return function (_ref25) {\n      var get = _ref25.get;\n      // Issue requests for all dependencies in parallel.\n      var deps = unwrapDependencies(dependencies);\n\n      var _concurrentRequests = concurrentRequests(get, deps),\n          _concurrentRequests2 = _slicedToArray(_concurrentRequests, 2),\n          results = _concurrentRequests2[0],\n          exceptions = _concurrentRequests2[1]; // Always return the current status of the results; never block.\n\n\n      return wrapLoadables(dependencies, results, exceptions);\n    };\n  }\n}); // Selector that requests all dependencies in parallel and waits for at least\n// one to be available before returning results.  It will only error if all\n// dependencies have errors.\n\nvar waitForAny = Recoil_selectorFamily({\n  key: '__waitForAny',\n  get: function get(dependencies) {\n    return function (_ref26) {\n      var get = _ref26.get;\n      // Issue requests for all dependencies in parallel.\n      // Exceptions can either be Promises of pending results or real errors\n      var deps = unwrapDependencies(dependencies);\n\n      var _concurrentRequests3 = concurrentRequests(get, deps),\n          _concurrentRequests4 = _slicedToArray(_concurrentRequests3, 2),\n          results = _concurrentRequests4[0],\n          exceptions = _concurrentRequests4[1]; // If any results are available, return the current status\n\n\n      if (exceptions.some(function (exp) {\n        return exp == null;\n      })) {\n        return wrapLoadables(dependencies, results, exceptions);\n      } // Since we are waiting for any results, only throw an error if all\n      // dependencies have an error.  Then, throw the first one.\n\n\n      if (exceptions.every(isError)) {\n        throw exceptions.find(isError);\n      }\n\n      {\n        throw new Promise(function (resolve, reject) {\n          var _iterator17 = _createForOfIteratorHelper(exceptions.entries()),\n              _step17;\n\n          try {\n            var _loop = function _loop() {\n              var _step17$value = _slicedToArray(_step17.value, 2),\n                  i = _step17$value[0],\n                  exp = _step17$value[1];\n\n              if (Recoil_isPromise(exp)) {\n                exp.then(function (result) {\n                  results[i] = result;\n                  exceptions[i] = null;\n                  resolve(wrapLoadables(dependencies, results, exceptions));\n                }).catch(function (error) {\n                  exceptions[i] = error;\n\n                  if (exceptions.every(isError)) {\n                    reject(exceptions[0]);\n                  }\n                });\n              }\n            };\n\n            for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n              _loop();\n            }\n          } catch (err) {\n            _iterator17.e(err);\n          } finally {\n            _iterator17.f();\n          }\n        });\n      }\n    };\n  }\n}); // Selector that requests all dependencies in parallel and waits for all to be\n// available before returning a value.  It will error if any dependencies error.\n\nvar waitForAll = Recoil_selectorFamily({\n  key: '__waitForAll',\n  get: function get(dependencies) {\n    return function (_ref27) {\n      var get = _ref27.get;\n      // Issue requests for all dependencies in parallel.\n      // Exceptions can either be Promises of pending results or real errors\n      var deps = unwrapDependencies(dependencies);\n\n      var _concurrentRequests5 = concurrentRequests(get, deps),\n          _concurrentRequests6 = _slicedToArray(_concurrentRequests5, 2),\n          results = _concurrentRequests6[0],\n          exceptions = _concurrentRequests6[1]; // If all results are available, return the results\n\n\n      if (exceptions.every(function (exp) {\n        return exp == null;\n      })) {\n        return wrapResults(dependencies, results);\n      } // If we have any errors, throw the first error\n\n\n      var error = exceptions.find(isError);\n\n      if (error != null) {\n        throw error;\n      }\n\n      {\n        throw Promise.all(exceptions).then(function (results) {\n          return wrapResults(dependencies, results);\n        });\n      }\n    };\n  }\n});\nvar noWait = Recoil_selectorFamily({\n  key: '__noWait',\n  get: function get(dependency) {\n    return function (_ref28) {\n      var get = _ref28.get;\n\n      try {\n        return loadableWithValue$3(get(dependency));\n      } catch (exception) {\n        return Recoil_isPromise(exception) ? loadableWithPromise$2(exception) : loadableWithError$2(exception);\n      }\n    };\n  }\n});\nvar Recoil_WaitFor = {\n  waitForNone: waitForNone,\n  waitForAny: waitForAny,\n  waitForAll: waitForAll,\n  noWait: noWait\n};\nvar DefaultValue$3 = Recoil_Node.DefaultValue;\nvar RecoilRoot$1 = Recoil_RecoilRoot_react.RecoilRoot;\nvar isRecoilValue$4 = Recoil_RecoilValue$1.isRecoilValue;\nvar useGotoRecoilSnapshot$1 = Recoil_Hooks.useGotoRecoilSnapshot,\n    useRecoilCallback$1 = Recoil_Hooks.useRecoilCallback,\n    useRecoilSnapshot$1 = Recoil_Hooks.useRecoilSnapshot,\n    useRecoilState$1 = Recoil_Hooks.useRecoilState,\n    useRecoilStateLoadable$1 = Recoil_Hooks.useRecoilStateLoadable,\n    useRecoilTransactionObserver$1 = Recoil_Hooks.useRecoilTransactionObserver,\n    useRecoilValue$1 = Recoil_Hooks.useRecoilValue,\n    useRecoilValueLoadable$1 = Recoil_Hooks.useRecoilValueLoadable,\n    useResetRecoilState$1 = Recoil_Hooks.useResetRecoilState,\n    useSetRecoilState$1 = Recoil_Hooks.useSetRecoilState,\n    useSetUnvalidatedAtomValues$1 = Recoil_Hooks.useSetUnvalidatedAtomValues,\n    useTransactionObservation_DEPRECATED$1 = Recoil_Hooks.useTransactionObservation_DEPRECATED;\nvar noWait$1 = Recoil_WaitFor.noWait,\n    waitForAll$1 = Recoil_WaitFor.waitForAll,\n    waitForAny$1 = Recoil_WaitFor.waitForAny,\n    waitForNone$1 = Recoil_WaitFor.waitForNone;\nvar Recoil_index = {\n  // Types\n  DefaultValue: DefaultValue$3,\n  // Components\n  RecoilRoot: RecoilRoot$1,\n  // RecoilValues\n  atom: Recoil_atom,\n  selector: Recoil_selector,\n  // Convenience RecoilValues\n  atomFamily: Recoil_atomFamily,\n  selectorFamily: Recoil_selectorFamily,\n  constSelector: Recoil_constSelector,\n  errorSelector: Recoil_errorSelector,\n  readOnlySelector: Recoil_readOnlySelector,\n  // Hooks that accept RecoilValues\n  useRecoilValue: useRecoilValue$1,\n  useRecoilValueLoadable: useRecoilValueLoadable$1,\n  useRecoilState: useRecoilState$1,\n  useRecoilStateLoadable: useRecoilStateLoadable$1,\n  useSetRecoilState: useSetRecoilState$1,\n  useResetRecoilState: useResetRecoilState$1,\n  // Hooks for asynchronous Recoil\n  useRecoilCallback: useRecoilCallback$1,\n  // Hooks for Snapshots\n  useGotoRecoilSnapshot: useGotoRecoilSnapshot$1,\n  useRecoilSnapshot: useRecoilSnapshot$1,\n  useRecoilTransactionObserver_UNSTABLE: useRecoilTransactionObserver$1,\n  useTransactionObservation_UNSTABLE: useTransactionObservation_DEPRECATED$1,\n  useSetUnvalidatedAtomValues_UNSTABLE: useSetUnvalidatedAtomValues$1,\n  // Concurrency Helpers\n  noWait: noWait$1,\n  waitForNone: waitForNone$1,\n  waitForAny: waitForAny$1,\n  waitForAll: waitForAll$1,\n  // Other functions\n  isRecoilValue: isRecoilValue$4\n};\nvar Recoil_index_1 = Recoil_index.DefaultValue;\nvar Recoil_index_2 = Recoil_index.RecoilRoot;\nvar Recoil_index_3 = Recoil_index.atom;\nvar Recoil_index_4 = Recoil_index.selector;\nvar Recoil_index_5 = Recoil_index.atomFamily;\nvar Recoil_index_6 = Recoil_index.selectorFamily;\nvar Recoil_index_7 = Recoil_index.constSelector;\nvar Recoil_index_8 = Recoil_index.errorSelector;\nvar Recoil_index_9 = Recoil_index.readOnlySelector;\nvar Recoil_index_10 = Recoil_index.useRecoilValue;\nvar Recoil_index_11 = Recoil_index.useRecoilValueLoadable;\nvar Recoil_index_12 = Recoil_index.useRecoilState;\nvar Recoil_index_13 = Recoil_index.useRecoilStateLoadable;\nvar Recoil_index_14 = Recoil_index.useSetRecoilState;\nvar Recoil_index_15 = Recoil_index.useResetRecoilState;\nvar Recoil_index_16 = Recoil_index.useRecoilCallback;\nvar Recoil_index_17 = Recoil_index.useGotoRecoilSnapshot;\nvar Recoil_index_18 = Recoil_index.useRecoilSnapshot;\nvar Recoil_index_19 = Recoil_index.useRecoilTransactionObserver_UNSTABLE;\nvar Recoil_index_20 = Recoil_index.useTransactionObservation_UNSTABLE;\nvar Recoil_index_21 = Recoil_index.useSetUnvalidatedAtomValues_UNSTABLE;\nvar Recoil_index_22 = Recoil_index.noWait;\nvar Recoil_index_23 = Recoil_index.waitForNone;\nvar Recoil_index_24 = Recoil_index.waitForAny;\nvar Recoil_index_25 = Recoil_index.waitForAll;\nvar Recoil_index_26 = Recoil_index.isRecoilValue;\nexports.DefaultValue = Recoil_index_1;\nexports.RecoilRoot = Recoil_index_2;\nexports.atom = Recoil_index_3;\nexports.atomFamily = Recoil_index_5;\nexports.constSelector = Recoil_index_7;\nexports.default = Recoil_index;\nexports.errorSelector = Recoil_index_8;\nexports.isRecoilValue = Recoil_index_26;\nexports.noWait = Recoil_index_22;\nexports.readOnlySelector = Recoil_index_9;\nexports.selector = Recoil_index_4;\nexports.selectorFamily = Recoil_index_6;\nexports.useGotoRecoilSnapshot = Recoil_index_17;\nexports.useRecoilCallback = Recoil_index_16;\nexports.useRecoilSnapshot = Recoil_index_18;\nexports.useRecoilState = Recoil_index_12;\nexports.useRecoilStateLoadable = Recoil_index_13;\nexports.useRecoilTransactionObserver_UNSTABLE = Recoil_index_19;\nexports.useRecoilValue = Recoil_index_10;\nexports.useRecoilValueLoadable = Recoil_index_11;\nexports.useResetRecoilState = Recoil_index_15;\nexports.useSetRecoilState = Recoil_index_14;\nexports.useSetUnvalidatedAtomValues_UNSTABLE = Recoil_index_21;\nexports.useTransactionObservation_UNSTABLE = Recoil_index_20;\nexports.waitForAll = Recoil_index_25;\nexports.waitForAny = Recoil_index_24;\nexports.waitForNone = Recoil_index_23;","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/node_modules/recoil/dist/recoil.development.js"],"names":["Object","defineProperty","exports","value","_interopDefault","ex","react","require","reactDom","sprintf","format","args","index","replace","String","Recoil_sprintf","expectationViolation","message","call","error","Error","name","console","Recoil_expectationViolation","recoverableViolation","projectName","Recoil_recoverableViolation","_defineProperty","obj","key","enumerable","configurable","writable","AbstractRecoilValue","newKey","RecoilState","RecoilValueReadOnly","isRecoilValue","x","Recoil_RecoilValue","Recoil_RecoilValue_1","Recoil_RecoilValue_2","Recoil_RecoilValue_3","Recoil_RecoilValue_4","Recoil_RecoilValue$1","freeze","__proto__","DefaultValue","DEFAULT_VALUE","RecoilValueNotReady","nodes","Map","registerNode","node","has","set","NodeMissingError","getNode","get","Recoil_Node","enqueueExecution","s","f","Recoil_Queue","setByAddingToSet","v","next","Set","add","setByDeletingFromSet","delete","mapBySettingInMap","map","k","mapByUpdatingInMap","updater","mapByDeletingFromMap","Recoil_CopyOnWrite","trace","fn","wrap","Recoil_Tracing","mapByDeletingFromMap$1","mapBySettingInMap$1","mapByUpdatingInMap$1","setByAddingToSet$1","getNode$1","emptyMap","emptySet","ReadOnlyRecoilValueError","getNodeLoadable","store","state","peekNodeLoadable","setUnvalidatedAtomValue","newValue","atomValues","nonvalidatedAtoms","dirtyAtoms","setNodeValue","newState","writtenNodes","getDownstreamNodes","keys","dependentNodes","visitedNodes","visitingNodes","Array","from","pop","_state$nodeToNodeSubs","subscribedNodes","nodeToNodeSubscriptions","downstreamNode","push","subscriptionID","subscribeComponentToNode","callback","subID","nodeToComponentSubscriptions","subsForAtom","release","fireNodeSubscriptions","updatedNodes","when","_store$getState$nextT","getState","nextTree","currentTree","_state$nodeToComponen","forEach","_debugName","cb","queuedComponentCallbacks","join","resolvers","suspendedComponentResolvers","r","clear","detectCircularDependencies","stack","length","leaf","downstream","size","root","reverse","Recoil_FunctionalCore","mapMap","result","Recoil_mapMap","getNodeLoadable$1","peekNodeLoadable$1","setNodeValue$1","setUnvalidatedAtomValue$1","subscribeComponentToNode$1","RecoilValueNotReady$1","AbstractRecoilValue$1","RecoilState$1","RecoilValueReadOnly$1","getRecoilValueAsLoadable","replaceState","loadable","setRecoilValue","setUnvalidatedRecoilValue","valueFromValueOrUpdater","valueOrUpdater","_storeState$nextTree","storeState","current","contents","subscribeToRecoilValue","releaseFn","Recoil_RecoilValueInterface","makeEmptyTreeState","transactionMetadata","nodeDeps","makeStoreState","treeState","transactionSubscriptions","makeEmptyStoreState","Recoil_State","DEFAULT_VALUE$1","getRecoilValueAsLoadable$1","setRecoilValue$1","valueFromValueOrUpdater$1","makeEmptyTreeState$1","makeStoreState$1","makeStore","replacer","subscribeToTransactions","addTransactionMetadata","Snapshot","recoilValue","_store","getLoadable","toPromise","mapper","mutableSnapshot","MutableSnapshot","getStore_INTERNAL","cloneSnapshot","cloneTreeState","freshSnapshot","recoilState","newValueOrUpdater","Recoil_Snapshot","Recoil_Snapshot_1","Recoil_Snapshot_2","Recoil_Snapshot_3","Recoil_Snapshot_4","Recoil_Snapshot$1","nullthrows","Recoil_nullthrows","useContext","useEffect","useRef","useState","fireNodeSubscriptions$1","setNodeValue$2","setUnvalidatedAtomValue$2","freshSnapshot$1","makeEmptyStoreState$1","makeStoreState$2","notInAContext","defaultStore","startNextTreeIfNeeded","AppContext","createContext","useStoreRef","Batcher","props","storeRef","_","setState","setNotifyBatcherOfChange","sub","splice","window","$recoilDebugStates","initialStoreState_DEPRECATED","initializeState","initial","atom","setUnvalidatedAtomValues","initialStoreState","snapshot","nextID","RecoilRoot","initializeState_DEPRECATED","children","id","metadata","fireNodeSubscriptionsForStore","replaced","notifyBatcherOfChange","createElement","Provider","Recoil_RecoilRoot_react","differenceSets","ret","setsWithValuesToRemove","FIRST","otherSet","Recoil_differenceSets","filterMap","Recoil_filterMap","intersectSets","first","rest","Recoil_intersectSets","invariant","condition","Recoil_invariant","mergeMaps","maps","i","iterator","nextKey","done","Recoil_mergeMaps","useCallback","useEffect$1","useMemo","useRef$1","useState$1","peekNodeLoadable$2","setNodeValue$3","DEFAULT_VALUE$2","getNode$2","nodes$1","useStoreRef$1","isRecoilValue$1","AbstractRecoilValue$2","getRecoilValueAsLoadable$2","setRecoilValue$2","setUnvalidatedRecoilValue$1","subscribeToRecoilValue$1","valueFromValueOrUpdater$2","Snapshot$1","cloneSnapshot$1","setByAddingToSet$2","cloneState_DEPRECATED","subsByAtom","handleLoadable","promise","Promise","resolve","validateRecoilValue","hookName","useInterface","forceUpdate","recoilValuesUsed","previousSubscriptions","subscriptions","unsubscribeFrom","updateState","_state","subs","useSetRecoilState","useResetRecoilState","useRecoilValueLoadable","useRecoilValue","useRecoilState","useRecoilStateLoadable","getRecoilValue","getRecoilValueLoadable","getRecoilState","getRecoilStateLoadable","getSetRecoilState","getResetRecoilState","recoilInterface","setValue","useTransactionSubscription","useTreeStateClone_DEPRECATED","useSnapshotWithStateChange_DEPRECATED","transaction","update","updatedAtoms","externallyVisibleAtomValuesInState","persistedAtomContentsValues","_node$options","persistence","options","persistence_UNSTABLE","type","useTransactionObservation_DEPRECATED","previousState","nextState","previousAtomValues","atomInfo","_node$options$persist","_node$options2","_node$options2$persis","_node$options$persist2","_node$options3","_node$options3$persis","backButton","modifiedAtoms","useRecoilTransactionObserver","previousSnapshot","useRecoilSnapshot","setSnapshot","useGoToSnapshot_DEPRECATED","unstable_batchedUpdates","useGotoRecoilSnapshot","prevState","updatedKeys","_prevState$atomValues","_nextState$atomValues","useSetUnvalidatedAtomValues","values","Sentinel","SENTINEL","useRecoilCallback","deps","gotoSnapshot","reset","undefined","Recoil_Hooks","useRecoilInterface","useTransactionSubscription_DEPRECATED","isPromise","p","then","Recoil_isPromise","loadableAccessors","getValue","reject","valueMaybe","valueOrThrow","errorMaybe","errorOrThrow","promiseMaybe","promiseOrThrow","loadableWithPromise","loadableWithValue","e","loadableWithError","catch","loadableLoading","loadableAll","inputs","every","some","find","all","Recoil_Loadable","isNode","object","_ownerDocument","_doc$defaultView","doc","ownerDocument","document","defaultView","Node","nodeType","nodeName","Recoil_isNode","shouldNotBeFrozen","$$typeof","deepFreezeValue","prototype","hasOwnProperty","prop","isFrozen","seal","Recoil_deepFreezeValue","LEAF","Symbol","emptyMap$1","ArrayKeyedMap","existing","_base","entries","ks","isArray","_map$get","answer","recurse","level","prefix","concat","Recoil_ArrayKeyedMap","cacheWithReferenceEquality","Recoil_cacheWithReferenceEquality","everySet","context","entry","Recoil_everySet","equalsSet","one","two","Recoil_equalsSet","startPerfBlock","_id","Recoil_PerformanceTimings","emptySet$1","mapBySettingInMap$2","mapByUpdatingInMap$2","setByAddingToSet$3","setByDeletingFromSet$1","detectCircularDependencies$1","getNodeLoadable$2","setNodeValue$4","loadableWithError$1","loadableWithPromise$1","loadableWithValue$1","DEFAULT_VALUE$3","RecoilValueNotReady$2","registerNode$1","startPerfBlock$1","isRecoilValue$2","emptySet$2","cacheKeyFromDepValues","depValues","sort","selector","cacheImplementation","cacheImplementation_UNSTABLE","cache","putIntoCache","cacheKey","dangerouslyAllowMutability","getFromCache","_state$nodeDeps$get","currentDeps","depKey","cached","computeAndSubscribeSelector","newDepValues","newCacheKey","evaluateSelectorFunction","endPerfBlock","output","finally","errorOrDepPromise","asyncState","newAsyncState","_state$nodeDeps$get2","newStateFromEvaluate","oldDeps","newDeps","addedDeps","removedDeps","upstreamNode","myGet","mySet","setRecoilState","written","resetRecoilState","Recoil_selector_OLD","selector$1","Recoil_selector","loadableWithValue$2","DEFAULT_VALUE$4","DefaultValue$1","registerNode$2","isRecoilValue$3","mapByDeletingFromMap$2","mapBySettingInMap$3","setByAddingToSet$4","baseAtom","default","nonvalidatedValue","validatedValue","validator","optionsDefault","restOptions","atomWithFallback","base","storedValue","baseValue","Recoil_atom","Recoil_ParameterizedAtomTaggedValue_DEPRECATED","TIME_WARNING_THRESHOLD_MS","stringify","opt","includes","JSON","allowFunctions","_JSON$stringify","toString","toJSON","reduce","a","b","localeCompare","filter","stableStringify","startTime","performance","now","str","endTime","groupCollapsed","warn","groupEnd","Recoil_stableStringify","cacheWithValueEquality","Recoil_cacheWithValueEquality","nextIndex","selectorFamily","_options$cacheImpleme","_options$cacheImpleme2","selectorCache","cacheImplementationForParams_UNSTABLE","params","_stableStringify","_options$cacheImpleme3","cachedSelector","myKey","callbacks","myCacheImplementation","newSelector","Recoil_selectorFamily","DEFAULT_VALUE$5","DefaultValue$2","isSuperset","setA","setB","pick","chosenKeys","getParameterizedValue_DEPRECATED","parameter","parameterKeys","entryParameterKeys","entryMap","contextOrSubcontext","mapPersistenceSettings_DEPRECATED","settings","passthrough","acc","atomFamily","atomCache","legacyAtomOptions","legacyAtom","atomFamilyDefault","param","legacyValue","upgradedValue","cachedAtom","newAtom","Recoil_atomFamily","constantSelector","constant","constSelector","Recoil_constSelector","throwingSelector","errorSelector","Recoil_errorSelector","readOnlySelector","Recoil_readOnlySelector","loadableWithError$2","loadableWithPromise$2","loadableWithValue$3","concurrentRequests","results","fill","exceptions","dep","isError","exp","unwrapDependencies","dependencies","getOwnPropertyNames","wrapResults","out","idx","wrapLoadables","exception","waitForNone","waitForAny","waitForAll","noWait","dependency","Recoil_WaitFor","DefaultValue$3","RecoilRoot$1","isRecoilValue$4","useGotoRecoilSnapshot$1","useRecoilCallback$1","useRecoilSnapshot$1","useRecoilState$1","useRecoilStateLoadable$1","useRecoilTransactionObserver$1","useRecoilValue$1","useRecoilValueLoadable$1","useResetRecoilState$1","useSetRecoilState$1","useSetUnvalidatedAtomValues$1","useTransactionObservation_DEPRECATED$1","noWait$1","waitForAll$1","waitForAny$1","waitForNone$1","Recoil_index","useRecoilTransactionObserver_UNSTABLE","useTransactionObservation_UNSTABLE","useSetUnvalidatedAtomValues_UNSTABLE","Recoil_index_1","Recoil_index_2","Recoil_index_3","Recoil_index_4","Recoil_index_5","Recoil_index_6","Recoil_index_7","Recoil_index_8","Recoil_index_9","Recoil_index_10","Recoil_index_11","Recoil_index_12","Recoil_index_13","Recoil_index_14","Recoil_index_15","Recoil_index_16","Recoil_index_17","Recoil_index_18","Recoil_index_19","Recoil_index_20","Recoil_index_21","Recoil_index_22","Recoil_index_23","Recoil_index_24","Recoil_index_25","Recoil_index_26"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar react = _interopDefault(require('react'));\nvar reactDom = _interopDefault(require('react-dom'));\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction sprintf(format, ...args) {\n  let index = 0;\n  return format.replace(/%s/g, () => String(args[index++]));\n}\n\nvar Recoil_sprintf = sprintf;\n\n// @oss-only\n// prettier-ignore\n\n\nfunction expectationViolation(format, ...args) {\n  // @oss-only\n  {\n    // @oss-only\n    const message = Recoil_sprintf.call(null, format, ...args); // @oss-only\n\n    const error = new Error(message); // @oss-only\n\n    error.name = 'Expectation Violation'; // @oss-only\n\n    console.error(error); // @oss-only\n  } // @oss-only\n\n} // @oss-only\n\n\nvar Recoil_expectationViolation = expectationViolation;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n// prettier-ignore\n\n/* eslint-disable no-lone-blocks */\n// this {} block is necessary to keep prettier off on internal repo\n// @fb-only: {\n\nfunction recoverableViolation( // @oss-only\nmessage, // @oss-only\nprojectName, // @oss-only\n{\n  error\n} = {}) {\n  // @oss-only\n  {\n    // @oss-only\n    console.error(message, error); // @oss-only\n  } // @oss-only\n\n\n  return null; // @oss-only\n} // @oss-only\n// @fb-only: }\n\n/* eslint-enable no-lone-blocks */\n\n\nvar Recoil_recoverableViolation = recoverableViolation;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\n// eslint-disable-next-line no-unused-vars\nclass AbstractRecoilValue {\n  constructor(newKey) {\n    _defineProperty(this, \"key\", void 0);\n\n    this.key = newKey;\n  }\n\n}\n\nclass RecoilState extends AbstractRecoilValue {}\n\nclass RecoilValueReadOnly extends AbstractRecoilValue {}\n\nfunction isRecoilValue(x) {\n  return x instanceof RecoilState || x instanceof RecoilValueReadOnly;\n}\n\nvar Recoil_RecoilValue = {\n  AbstractRecoilValue,\n  RecoilState,\n  RecoilValueReadOnly,\n  isRecoilValue\n};\n\nvar Recoil_RecoilValue_1 = Recoil_RecoilValue.AbstractRecoilValue;\nvar Recoil_RecoilValue_2 = Recoil_RecoilValue.RecoilState;\nvar Recoil_RecoilValue_3 = Recoil_RecoilValue.RecoilValueReadOnly;\nvar Recoil_RecoilValue_4 = Recoil_RecoilValue.isRecoilValue;\n\nvar Recoil_RecoilValue$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  AbstractRecoilValue: Recoil_RecoilValue_1,\n  RecoilState: Recoil_RecoilValue_2,\n  RecoilValueReadOnly: Recoil_RecoilValue_3,\n  isRecoilValue: Recoil_RecoilValue_4\n});\n\nclass DefaultValue {}\n\nconst DEFAULT_VALUE = new DefaultValue();\n\nclass RecoilValueNotReady extends Error {\n  constructor(key) {\n    super(`Tried to set the value of Recoil selector ${key} using an updater function, but it is an async selector in a pending or error state; this is not supported.`);\n  }\n\n}\n\n// flowlint-next-line unclear-type:off\nconst nodes = new Map();\n/* eslint-disable no-redeclare */\n\nfunction registerNode(node) {\n  if (nodes.has(node.key)) {\n    const message = `Duplicate atom key \"${node.key}\". This is a FATAL ERROR in\n      production. But it is safe to ignore this warning if it occurred because of\n      hot module replacement.`; // TODO Need to figure out if there is a standard/open-source equivalent to see if hot module replacement is happening:\n    // prettier-ignore\n    // @fb-only: if (__DEV__) {\n    // @fb-only: const isAcceptingUpdate = require('__debug').isAcceptingUpdate;\n    // prettier-ignore\n    // @fb-only: if (typeof isAcceptingUpdate !== 'function' || !isAcceptingUpdate()) {\n    // @fb-only: expectationViolation(message, 'recoil');\n    // @fb-only: }\n    // prettier-ignore\n    // @fb-only: } else {\n\n    Recoil_recoverableViolation(message); // @fb-only: }\n  }\n\n  nodes.set(node.key, node);\n  return node.set == null ? new Recoil_RecoilValue$1.RecoilValueReadOnly(node.key) : new Recoil_RecoilValue$1.RecoilState(node.key);\n}\n/* eslint-enable no-redeclare */\n\n\nclass NodeMissingError extends Error {} // flowlint-next-line unclear-type:off\n\n\nfunction getNode(key) {\n  const node = nodes.get(key);\n\n  if (node == null) {\n    throw new NodeMissingError(`Missing definition for RecoilValue: \"${key}\"\"`);\n  }\n\n  return node;\n}\n\nvar Recoil_Node = {\n  nodes,\n  registerNode,\n  getNode,\n  NodeMissingError,\n  DefaultValue,\n  DEFAULT_VALUE,\n  RecoilValueNotReady\n};\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction enqueueExecution(s, f) {\n  f();\n}\n\nvar Recoil_Queue = {\n  enqueueExecution\n};\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Utilities for working with built-in Maps and Sets without mutating them.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction setByAddingToSet(set, v) {\n  const next = new Set(set);\n  next.add(v);\n  return next;\n}\n\nfunction setByDeletingFromSet(set, v) {\n  const next = new Set(set);\n  next.delete(v);\n  return next;\n}\n\nfunction mapBySettingInMap(map, k, v) {\n  const next = new Map(map);\n  next.set(k, v);\n  return next;\n}\n\nfunction mapByUpdatingInMap(map, k, updater) {\n  const next = new Map(map);\n  next.set(k, updater(next.get(k)));\n  return next;\n}\n\nfunction mapByDeletingFromMap(map, k) {\n  const next = new Map(map);\n  next.delete(k);\n  return next;\n}\n\nvar Recoil_CopyOnWrite = {\n  setByAddingToSet,\n  setByDeletingFromSet,\n  mapBySettingInMap,\n  mapByUpdatingInMap,\n  mapByDeletingFromMap\n};\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Interface for `scheduler/tracing` to aid in profiling Recoil and Recoil apps.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\n// flowlint-next-line untyped-import:off\n// @fb-only: const SchedulerTracing = require('SchedulerTracing');\nfunction trace(message, node, fn) {\n  // prettier-ignore\n  // @fb-only: if (__DEV__) {\n  // prettier-ignore\n  // @fb-only: if (\n  // prettier-ignore\n  // @fb-only: SchedulerTracing.unstable_trace !== undefined &&\n  // prettier-ignore\n  // @fb-only: window.performance !== undefined\n  // prettier-ignore\n  // @fb-only: ) {\n  // prettier-ignore\n  // @fb-only: return SchedulerTracing.unstable_trace(\n  // prettier-ignore\n  // @fb-only: `Recoil: ${message} for node: ${\n  // prettier-ignore\n  // @fb-only: typeof node === 'string' ? node : node.key\n  // prettier-ignore\n  // @fb-only: }`,\n  // prettier-ignore\n  // @fb-only: window.performance.now(),\n  // prettier-ignore\n  // @fb-only: fn,\n  // prettier-ignore\n  // @fb-only: );\n  // prettier-ignore\n  // @fb-only: }\n  // prettier-ignore\n  // @fb-only: }\n  return fn();\n}\n\nfunction wrap(fn) {\n  // prettier-ignore\n  // @fb-only: if (__DEV__) {\n  // prettier-ignore\n  // @fb-only: if (SchedulerTracing.unstable_wrap !== undefined) {\n  // prettier-ignore\n  // @fb-only: return SchedulerTracing.unstable_wrap(fn);\n  // prettier-ignore\n  // @fb-only: }\n  // prettier-ignore\n  // @fb-only: }\n  return fn;\n}\n\nvar Recoil_Tracing = {\n  trace,\n  wrap\n};\n\nconst {\n  mapByDeletingFromMap: mapByDeletingFromMap$1,\n  mapBySettingInMap: mapBySettingInMap$1,\n  mapByUpdatingInMap: mapByUpdatingInMap$1,\n  setByAddingToSet: setByAddingToSet$1\n} = Recoil_CopyOnWrite;\n\n\n\nconst {\n  getNode: getNode$1\n} = Recoil_Node; // flowlint-next-line unclear-type:off\n\n\nconst emptyMap = Object.freeze(new Map()); // flowlint-next-line unclear-type:off\n\nconst emptySet = Object.freeze(new Set());\n\nclass ReadOnlyRecoilValueError extends Error {} // Get the current value loadable of a node and update the state.\n// Update dependencies and subscriptions for selectors.\n// Update saved value validation for atoms.\n\n\nfunction getNodeLoadable(store, state, key) {\n  return getNode$1(key).get(store, state);\n} // Peek at the current value loadable for a node.\n// NOTE: This will ignore updating the state for subscriptions so use sparingly!!\n\n\nfunction peekNodeLoadable(store, state, key) {\n  return getNodeLoadable(store, state, key)[1];\n} // Write value directly to state bypassing the Node interface as the node\n// definitions may not have been loaded yet when processing the initial snapshot.\n\n\nfunction setUnvalidatedAtomValue(state, key, newValue) {\n  return { ...state,\n    atomValues: mapByDeletingFromMap$1(state.atomValues, key),\n    nonvalidatedAtoms: mapBySettingInMap$1(state.nonvalidatedAtoms, key, newValue),\n    dirtyAtoms: setByAddingToSet$1(state.dirtyAtoms, key)\n  };\n} // Set a node value and return the set of nodes that were actually written.\n// That does not include any downstream nodes which are dependent on them.\n\n\nfunction setNodeValue(store, state, key, newValue) {\n  const node = getNode$1(key);\n\n  if (node.set == null) {\n    throw new ReadOnlyRecoilValueError(`Attempt to set read-only RecoilValue: ${key}`);\n  }\n\n  const [newState, writtenNodes] = node.set(store, state, newValue);\n  return [newState, writtenNodes];\n} // Find all of the recursively dependent nodes\n\n\nfunction getDownstreamNodes(state, keys) {\n  const dependentNodes = new Set();\n  const visitedNodes = new Set();\n  const visitingNodes = Array.from(keys);\n\n  for (let key = visitingNodes.pop(); key; key = visitingNodes.pop()) {\n    var _state$nodeToNodeSubs;\n\n    dependentNodes.add(key);\n    visitedNodes.add(key);\n    const subscribedNodes = (_state$nodeToNodeSubs = state.nodeToNodeSubscriptions.get(key)) !== null && _state$nodeToNodeSubs !== void 0 ? _state$nodeToNodeSubs : emptySet;\n\n    for (const downstreamNode of subscribedNodes) {\n      if (!visitedNodes.has(downstreamNode)) {\n        visitingNodes.push(downstreamNode);\n      }\n    }\n  }\n\n  return dependentNodes;\n}\n\nlet subscriptionID = 0;\n\nfunction subscribeComponentToNode(state, key, callback) {\n  const subID = subscriptionID++;\n  const newState = { ...state,\n    nodeToComponentSubscriptions: mapByUpdatingInMap$1(state.nodeToComponentSubscriptions, key, subsForAtom => mapBySettingInMap$1(subsForAtom !== null && subsForAtom !== void 0 ? subsForAtom : emptyMap, subID, ['TODO debug name', callback]))\n  };\n\n  function release(state) {\n    const newState = { ...state,\n      nodeToComponentSubscriptions: mapByUpdatingInMap$1(state.nodeToComponentSubscriptions, key, subsForAtom => mapByDeletingFromMap$1(subsForAtom !== null && subsForAtom !== void 0 ? subsForAtom : emptyMap, subID))\n    };\n    return newState;\n  }\n\n  return [newState, release];\n} // Fire or enqueue callbacks to rerender components that are subscribed to\n// nodes affected by the updatedNodes\n\n\nfunction fireNodeSubscriptions(store, updatedNodes, when) {\n  var _store$getState$nextT;\n\n  /*\n  This is called in two conditions: When an atom is set (with 'enqueue') and\n  when an async selector resolves (with 'now'). When an atom is set, we want\n  to use the latest dependencies that may have become dependencies due to\n  earlier changes in a batch. But if an async selector happens to resolve during\n  a batch, it should use the currently rendered output, and then the end of the\n  batch will trigger any further subscriptions due to new deps in the new state.\n  */\n  const state = when === 'enqueue' ? (_store$getState$nextT = store.getState().nextTree) !== null && _store$getState$nextT !== void 0 ? _store$getState$nextT : store.getState().currentTree : store.getState().currentTree;\n  const dependentNodes = getDownstreamNodes(state, updatedNodes);\n\n  for (const key of dependentNodes) {\n    var _state$nodeToComponen;\n\n    ((_state$nodeToComponen = state.nodeToComponentSubscriptions.get(key)) !== null && _state$nodeToComponen !== void 0 ? _state$nodeToComponen : []).forEach(([_debugName, cb]) => {\n      when === 'enqueue' ? store.getState().queuedComponentCallbacks.push(cb) : cb(state);\n    });\n  } // Wake all suspended components so the right one(s) can try to re-render.\n  // We need to wake up components not just when some asynchronous selector\n  // resolved (when === 'now'), but also when changing synchronous values because\n  // they may cause a selector to change from asynchronous to synchronous, in\n  // which case there would be no follow-up asynchronous resolution to wake us up.\n  // TODO OPTIMIZATION Only wake up related downstream components\n\n\n  Recoil_Tracing.trace('value became available, waking components', Array.from(updatedNodes).join(', '), () => {\n    const resolvers = store.getState().suspendedComponentResolvers;\n    resolvers.forEach(r => r());\n    resolvers.clear();\n  });\n}\n\nfunction detectCircularDependencies(state, stack) {\n  if (!stack.length) {\n    return;\n  }\n\n  const leaf = stack[stack.length - 1];\n  const downstream = state.nodeToNodeSubscriptions.get(leaf);\n\n  if (!(downstream === null || downstream === void 0 ? void 0 : downstream.size)) {\n    return;\n  }\n\n  const root = stack[0];\n\n  if (downstream.has(root)) {\n    throw new Error(`Recoil selector has circular dependencies: ${[...stack, root].reverse().join(' \\u2192 ')}`);\n  }\n\n  for (const next of downstream) {\n    detectCircularDependencies(state, [...stack, next]);\n  }\n}\n\nvar Recoil_FunctionalCore = {\n  getNodeLoadable,\n  peekNodeLoadable,\n  setNodeValue,\n  setUnvalidatedAtomValue,\n  subscribeComponentToNode,\n  fireNodeSubscriptions,\n  detectCircularDependencies\n};\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n/**\n * Returns a new Map object with the same keys as the original, but with the\n * values replaced with the output of the given callback function.\n */\n\nfunction mapMap(map, callback) {\n  const result = new Map();\n  map.forEach((value, key) => {\n    result.set(key, callback(value, key));\n  });\n  return result;\n}\n\nvar Recoil_mapMap = mapMap;\n\nconst {\n  getNodeLoadable: getNodeLoadable$1,\n  peekNodeLoadable: peekNodeLoadable$1,\n  setNodeValue: setNodeValue$1,\n  setUnvalidatedAtomValue: setUnvalidatedAtomValue$1,\n  subscribeComponentToNode: subscribeComponentToNode$1\n} = Recoil_FunctionalCore;\n\nconst {\n  RecoilValueNotReady: RecoilValueNotReady$1\n} = Recoil_Node;\n\nconst {\n  AbstractRecoilValue: AbstractRecoilValue$1,\n  RecoilState: RecoilState$1,\n  RecoilValueReadOnly: RecoilValueReadOnly$1\n} = Recoil_RecoilValue$1;\n\nfunction getRecoilValueAsLoadable(store, {\n  key\n}) {\n  let result; // Save any state changes during read, such as validating atoms,\n  // updated selector subscriptions/dependencies, &c.\n\n  Recoil_Tracing.trace('get RecoilValue', key, () => store.replaceState(Recoil_Tracing.wrap(state => {\n    const [newState, loadable] = getNodeLoadable$1(store, state, key);\n    result = loadable;\n    return newState;\n  })));\n  return result; // flowlint-line unclear-type:off\n}\n\nfunction setRecoilValue(store, {\n  key\n}, newValue) {\n  Recoil_Tracing.trace('set RecoilValue', key, () => store.replaceState(Recoil_Tracing.wrap(state => {\n    const [newState, writtenNodes] = setNodeValue$1(store, state, key, newValue);\n    store.fireNodeSubscriptions(writtenNodes, 'enqueue');\n    return newState;\n  })));\n}\n\nfunction setUnvalidatedRecoilValue(store, {\n  key\n}, newValue) {\n  Recoil_Tracing.trace('set unvalidated persisted atom', key, () => store.replaceState(Recoil_Tracing.wrap(state => {\n    const newState = setUnvalidatedAtomValue$1(state, key, newValue);\n    store.fireNodeSubscriptions(new Set([key]), 'enqueue');\n    return newState;\n  })));\n}\n\nfunction valueFromValueOrUpdater(store, {\n  key\n}, valueOrUpdater) {\n  if (typeof valueOrUpdater === 'function') {\n    var _storeState$nextTree;\n\n    // Updater form: pass in the current value. Throw if the current value\n    // is unavailable (namely when updating an async selector that's\n    // pending or errored):\n    const storeState = store.getState();\n    const state = (_storeState$nextTree = storeState.nextTree) !== null && _storeState$nextTree !== void 0 ? _storeState$nextTree : storeState.currentTree; // NOTE: This will not update state with node subscriptions.\n\n    const current = peekNodeLoadable$1(store, state, key);\n\n    if (current.state === 'loading') {\n      throw new RecoilValueNotReady$1(key);\n    } else if (current.state === 'hasError') {\n      throw current.contents;\n    } // T itself may be a function, so our refinement is not sufficient:\n\n\n    return valueOrUpdater(current.contents); // flowlint-line unclear-type:off\n  } else {\n    return valueOrUpdater;\n  }\n}\n\nfunction subscribeToRecoilValue(store, {\n  key\n}, callback) {\n  let newState, releaseFn;\n  Recoil_Tracing.trace('subscribe component to RecoilValue', key, () => store.replaceState(Recoil_Tracing.wrap(state => {\n    [newState, releaseFn] = subscribeComponentToNode$1(state, key, callback);\n    return newState;\n  })));\n  return {\n    release: store => store.replaceState(releaseFn)\n  };\n}\n\nvar Recoil_RecoilValueInterface = {\n  RecoilValueReadOnly: RecoilValueReadOnly$1,\n  AbstractRecoilValue: AbstractRecoilValue$1,\n  RecoilState: RecoilState$1,\n  valueFromValueOrUpdater,\n  getRecoilValueAsLoadable,\n  setRecoilValue,\n  setUnvalidatedRecoilValue,\n  subscribeToRecoilValue\n};\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\n// TODO We could just store T instead of a Loadable<T> in atomValues\n// flowlint-next-line unclear-type:off\n// StoreState represents the state of a Recoil context. It is global and mutable.\n// It is updated only during effects, except that the nextTree property is updated\n// when atom values change and async requests resolve, and suspendedComponentResolvers\n// is updated when components are suspended.\nfunction makeEmptyTreeState() {\n  return {\n    transactionMetadata: {},\n    atomValues: new Map(),\n    nonvalidatedAtoms: new Map(),\n    dirtyAtoms: new Set(),\n    nodeDeps: new Map(),\n    nodeToNodeSubscriptions: new Map(),\n    nodeToComponentSubscriptions: new Map()\n  };\n}\n\nfunction makeStoreState(treeState) {\n  return {\n    currentTree: treeState,\n    nextTree: null,\n    transactionSubscriptions: new Map(),\n    queuedComponentCallbacks: [],\n    suspendedComponentResolvers: new Set()\n  };\n}\n\nfunction makeEmptyStoreState() {\n  return makeStoreState(makeEmptyTreeState());\n}\n\nvar Recoil_State = {\n  makeEmptyTreeState,\n  makeEmptyStoreState,\n  makeStoreState\n};\n\nconst {\n  DEFAULT_VALUE: DEFAULT_VALUE$1\n} = Recoil_Node;\n\nconst {\n  getRecoilValueAsLoadable: getRecoilValueAsLoadable$1,\n  setRecoilValue: setRecoilValue$1,\n  valueFromValueOrUpdater: valueFromValueOrUpdater$1\n} = Recoil_RecoilValueInterface;\n\nconst {\n  makeEmptyTreeState: makeEmptyTreeState$1,\n  makeStoreState: makeStoreState$1\n} = Recoil_State;\n\nfunction makeStore(treeState) {\n  const storeState = makeStoreState$1(treeState);\n  const store = {\n    getState: () => storeState,\n    replaceState: replacer => {\n      storeState.currentTree = replacer(storeState.currentTree); // no batching so nextTree is never active\n    },\n    subscribeToTransactions: () => {\n      throw new Error('Cannot subscribe to Snapshots');\n    },\n    addTransactionMetadata: () => {\n      throw new Error('Cannot subscribe to Snapshots');\n    },\n    fireNodeSubscriptions: () => {}\n  };\n  return store;\n} // A \"Snapshot\" is \"read-only\" and captures a specific set of values of atoms.\n// However, the data-flow-graph and selector values may evolve as selector\n// evaluation functions are executed and async selectors resolve.\n\n\nclass Snapshot {\n  constructor(treeState) {\n    _defineProperty(this, \"_store\", void 0);\n\n    _defineProperty(this, \"getLoadable\", recoilValue => getRecoilValueAsLoadable$1(this._store, recoilValue));\n\n    _defineProperty(this, \"getPromise\", recoilValue =>  this.getLoadable(recoilValue).toPromise());\n\n    _defineProperty(this, \"map\", mapper => {\n      const mutableSnapshot = new MutableSnapshot(this._store.getState().currentTree);\n      mapper(mutableSnapshot);\n      const newState = mutableSnapshot.getStore_INTERNAL().getState().currentTree;\n      return cloneSnapshot(newState);\n    });\n\n    _defineProperty(this, \"asyncMap\", async mapper => {\n      const mutableSnapshot = new MutableSnapshot(this._store.getState().currentTree);\n      await mapper(mutableSnapshot);\n      const newState = mutableSnapshot.getStore_INTERNAL().getState().currentTree;\n      return cloneSnapshot(newState);\n    });\n\n    this._store = makeStore(treeState);\n  }\n\n  getStore_INTERNAL() {\n    return this._store;\n  }\n\n}\n\nfunction cloneTreeState(treeState) {\n  return {\n    transactionMetadata: { ...treeState.transactionMetadata\n    },\n    atomValues: new Map(treeState.atomValues),\n    nonvalidatedAtoms: new Map(treeState.nonvalidatedAtoms),\n    dirtyAtoms: new Set(treeState.dirtyAtoms),\n    nodeDeps: new Map(treeState.nodeDeps),\n    nodeToNodeSubscriptions: Recoil_mapMap(treeState.nodeToNodeSubscriptions, keys => new Set(keys)),\n    nodeToComponentSubscriptions: new Map()\n  };\n} // Factory to build a fresh snapshot\n\n\nfunction freshSnapshot() {\n  return new Snapshot(makeEmptyTreeState$1());\n} // Factory to clone a snapahot state\n\n\nfunction cloneSnapshot(treeState) {\n  return new Snapshot(cloneTreeState(treeState));\n}\n\nclass MutableSnapshot extends Snapshot {\n  constructor(treeState) {\n    super(cloneTreeState(treeState));\n\n    _defineProperty(this, \"set\", (recoilState, newValueOrUpdater) => {\n      const store = this.getStore_INTERNAL();\n      const newValue = valueFromValueOrUpdater$1(store, recoilState, newValueOrUpdater);\n      setRecoilValue$1(store, recoilState, newValue);\n    });\n\n    _defineProperty(this, \"reset\", recoilState => setRecoilValue$1(this.getStore_INTERNAL(), recoilState, DEFAULT_VALUE$1));\n  } // We want to allow the methods to be destructured and used as accessors\n  // eslint-disable-next-line fb-www/extra-arrow-initializer\n\n\n}\n\nvar Recoil_Snapshot = {\n  Snapshot,\n  MutableSnapshot,\n  freshSnapshot,\n  cloneSnapshot\n};\n\nvar Recoil_Snapshot_1 = Recoil_Snapshot.Snapshot;\nvar Recoil_Snapshot_2 = Recoil_Snapshot.MutableSnapshot;\nvar Recoil_Snapshot_3 = Recoil_Snapshot.freshSnapshot;\nvar Recoil_Snapshot_4 = Recoil_Snapshot.cloneSnapshot;\n\nvar Recoil_Snapshot$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Snapshot: Recoil_Snapshot_1,\n  MutableSnapshot: Recoil_Snapshot_2,\n  freshSnapshot: Recoil_Snapshot_3,\n  cloneSnapshot: Recoil_Snapshot_4\n});\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction nullthrows(x, message) {\n  if (x != null) {\n    return x;\n  }\n\n  throw new Error(message !== null && message !== void 0 ? message : 'Got unexpected null or undefined');\n}\n\nvar Recoil_nullthrows = nullthrows;\n\nconst {\n  useContext,\n  useEffect,\n  useRef,\n  useState\n} = react;\n\n\n\nconst {\n  fireNodeSubscriptions: fireNodeSubscriptions$1,\n  setNodeValue: setNodeValue$2,\n  setUnvalidatedAtomValue: setUnvalidatedAtomValue$2\n} = Recoil_FunctionalCore;\n\nconst {\n  freshSnapshot: freshSnapshot$1\n} = Recoil_Snapshot$1;\n\nconst {\n  makeEmptyStoreState: makeEmptyStoreState$1,\n  makeStoreState: makeStoreState$2\n} = Recoil_State;\n\n\n\nfunction notInAContext() {\n  throw new Error('This component must be used inside a <RecoilRoot> component.');\n}\n\nconst defaultStore = Object.freeze({\n  getState: notInAContext,\n  replaceState: notInAContext,\n  subscribeToTransactions: notInAContext,\n  addTransactionMetadata: notInAContext,\n  fireNodeSubscriptions: notInAContext\n});\n\nfunction startNextTreeIfNeeded(storeState) {\n  if (storeState.nextTree === null) {\n    storeState.nextTree = { ...storeState.currentTree,\n      dirtyAtoms: new Set(),\n      transactionMetadata: {}\n    };\n  }\n}\n\nconst AppContext = react.createContext({\n  current: defaultStore\n});\n\nconst useStoreRef = () => useContext(AppContext);\n/*\n * The purpose of the Batcher is to observe when React batches end so that\n * Recoil state changes can be batched. Whenever Recoil state changes, we call\n * setState on the batcher. Then we wait for that change to be committed, which\n * signifies the end of the batch. That's when we respond to the Recoil change.\n */\n\n\nfunction Batcher(props) {\n  const storeRef = useStoreRef();\n  const [_, setState] = useState([]);\n  props.setNotifyBatcherOfChange(() => setState({}));\n  useEffect(() => {\n    // enqueueExecution runs this function immediately; it is only used to\n    // manipulate the order of useEffects during tests, since React seems to\n    // call useEffect in an unpredictable order sometimes.\n    Recoil_Queue.enqueueExecution('Batcher', () => {\n      const storeState = storeRef.current.getState();\n      const {\n        nextTree\n      } = storeState; // Ignore commits that are not because of Recoil transactions -- namely,\n      // because something above RecoilRoot re-rendered:\n\n      if (nextTree === null) {\n        return;\n      } // Inform transaction subscribers of the transaction:\n\n\n      const dirtyAtoms = nextTree.dirtyAtoms;\n\n      if (dirtyAtoms.size) {\n        storeState.transactionSubscriptions.forEach(sub => sub(storeRef.current));\n      } // Inform components that depend on dirty atoms of the transaction:\n      // FIXME why is this StoreState but dirtyAtoms is TreeState? Seems like they should be the same.\n\n\n      storeState.queuedComponentCallbacks.forEach(cb => cb(nextTree));\n      storeState.queuedComponentCallbacks.splice(0, storeState.queuedComponentCallbacks.length); // nextTree is now committed -- note that copying and reset occurs when\n      // a transaction begins, in startNextTreeIfNeeded:\n\n      storeState.currentTree = nextTree;\n      storeState.nextTree = null;\n    });\n  });\n  return null;\n}\n\n{\n  if (typeof window !== 'undefined' && !window.$recoilDebugStates) {\n    window.$recoilDebugStates = [];\n  }\n}\n\nfunction initialStoreState_DEPRECATED(store, initializeState) {\n  const initial = makeEmptyStoreState$1();\n  initializeState({\n    set: (atom, value) => {\n      initial.currentTree = setNodeValue$2(store, initial.currentTree, atom.key, value)[0];\n    },\n    setUnvalidatedAtomValues: atomValues => {\n      atomValues.forEach((v, k) => {\n        initial.currentTree = setUnvalidatedAtomValue$2(initial.currentTree, k, v);\n      });\n    }\n  });\n  return initial;\n}\n\nfunction initialStoreState(initializeState) {\n  const snapshot = freshSnapshot$1().map(initializeState);\n  return makeStoreState$2(snapshot.getStore_INTERNAL().getState().currentTree);\n}\n\nlet nextID = 0;\n\nfunction RecoilRoot({\n  initializeState_DEPRECATED,\n  initializeState,\n  children\n}) {\n  let storeState; // eslint-disable-line prefer-const\n\n  const subscribeToTransactions = callback => {\n    const id = nextID++;\n    storeRef.current.getState().transactionSubscriptions.set(id, callback);\n    return {\n      release: () => {\n        storeRef.current.getState().transactionSubscriptions.delete(id);\n      }\n    };\n  };\n\n  const addTransactionMetadata = metadata => {\n    startNextTreeIfNeeded(storeRef.current.getState());\n\n    for (const k of Object.keys(metadata)) {\n      Recoil_nullthrows(storeRef.current.getState().nextTree).transactionMetadata[k] = metadata[k];\n    }\n  };\n\n  function fireNodeSubscriptionsForStore(updatedNodes, when) {\n    fireNodeSubscriptions$1(storeRef.current, updatedNodes, when);\n  }\n\n  const replaceState = replacer => {\n    const storeState = storeRef.current.getState();\n    startNextTreeIfNeeded(storeState); // Use replacer to get the next state:\n\n    const nextTree = Recoil_nullthrows(storeState.nextTree);\n    const replaced = replacer(nextTree);\n\n    if (replaced === nextTree) {\n      return;\n    }\n\n    {\n      if (typeof window !== 'undefined') {\n        window.$recoilDebugStates.push(replaced); // TODO this shouldn't happen here because it's not batched\n      }\n    } // Save changes to nextTree and schedule a React update:\n\n\n    storeState.nextTree = replaced;\n    Recoil_nullthrows(notifyBatcherOfChange.current)();\n  };\n\n  const notifyBatcherOfChange = useRef(null);\n\n  function setNotifyBatcherOfChange(x) {\n    notifyBatcherOfChange.current = x;\n  }\n\n  const store = {\n    getState: () => storeState.current,\n    replaceState,\n    subscribeToTransactions,\n    addTransactionMetadata,\n    fireNodeSubscriptions: fireNodeSubscriptionsForStore\n  };\n  const storeRef = useRef(store);\n  storeState = useRef(initializeState_DEPRECATED != null ? initialStoreState_DEPRECATED(store, initializeState_DEPRECATED) : initializeState != null ? initialStoreState(initializeState) : makeEmptyStoreState$1());\n  return /*#__PURE__*/react.createElement(AppContext.Provider, {\n    value: storeRef\n  }, /*#__PURE__*/react.createElement(Batcher, {\n    setNotifyBatcherOfChange: setNotifyBatcherOfChange\n  }), children);\n}\n\nvar Recoil_RecoilRoot_react = {\n  useStoreRef,\n  RecoilRoot\n};\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n/**\n * Returns a set containing all of the values from the first set that are not\n * present in any of the subsequent sets.\n *\n * Note: this is written procedurally (i.e., without filterSet) for performant\n * use in tight loops.\n */\n\nfunction differenceSets(set, ...setsWithValuesToRemove) {\n  const ret = new Set();\n\n  FIRST: for (const value of set) {\n    for (const otherSet of setsWithValuesToRemove) {\n      if (otherSet.has(value)) {\n        continue FIRST;\n      }\n    }\n\n    ret.add(value);\n  }\n\n  return ret;\n}\n\nvar Recoil_differenceSets = differenceSets;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n/**\n * Returns a map containing all of the keys + values from the original map where\n * the given callback returned true.\n */\n\nfunction filterMap(map, callback) {\n  const result = new Map();\n\n  for (const [key, value] of map) {\n    if (callback(value, key)) {\n      result.set(key, value);\n    }\n  }\n\n  return result;\n}\n\nvar Recoil_filterMap = filterMap;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Returns the set of values that are present in all the given sets, preserving\n * the order of the first set.\n *\n * Note: this is written procedurally (i.e., without filterSet) for performant\n * use in tight loops.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction intersectSets(first, ...rest) {\n  const ret = new Set();\n\n  FIRST: for (const value of first) {\n    for (const otherSet of rest) {\n      if (!otherSet.has(value)) {\n        continue FIRST;\n      }\n    }\n\n    ret.add(value);\n  }\n\n  return ret;\n}\n\nvar Recoil_intersectSets = intersectSets;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n// prettier-ignore\n\nfunction invariant(condition, message) {\n  // @oss-only\n  if (!condition) {\n    // @oss-only\n    throw new Error(message); // @oss-only\n  } // @oss-only\n\n} // @oss-only\n\n\nvar Recoil_invariant = invariant;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction mergeMaps(...maps) {\n  const result = new Map();\n\n  for (let i = 0; i < maps.length; i++) {\n    const iterator = maps[i].keys();\n    let nextKey;\n\n    while (!(nextKey = iterator.next()).done) {\n      // $FlowFixMe - map/iterator knows nothing about flow types\n      result.set(nextKey.value, maps[i].get(nextKey.value));\n    }\n  }\n  /* $FlowFixMe(>=0.66.0 site=www,mobile) This comment suppresses an error\n   * found when Flow v0.66 was deployed. To see the error delete this comment\n   * and run Flow. */\n\n\n  return result;\n}\n\nvar Recoil_mergeMaps = mergeMaps;\n\nconst {\n  useCallback,\n  useEffect: useEffect$1,\n  useMemo,\n  useRef: useRef$1,\n  useState: useState$1\n} = react;\n\n\n\nconst {\n  peekNodeLoadable: peekNodeLoadable$2,\n  setNodeValue: setNodeValue$3\n} = Recoil_FunctionalCore;\n\nconst {\n  DEFAULT_VALUE: DEFAULT_VALUE$2,\n  getNode: getNode$2,\n  nodes: nodes$1\n} = Recoil_Node;\n\nconst {\n  useStoreRef: useStoreRef$1\n} = Recoil_RecoilRoot_react;\n\nconst {\n  isRecoilValue: isRecoilValue$1\n} = Recoil_RecoilValue$1;\n\nconst {\n  AbstractRecoilValue: AbstractRecoilValue$2,\n  getRecoilValueAsLoadable: getRecoilValueAsLoadable$2,\n  setRecoilValue: setRecoilValue$2,\n  setUnvalidatedRecoilValue: setUnvalidatedRecoilValue$1,\n  subscribeToRecoilValue: subscribeToRecoilValue$1,\n  valueFromValueOrUpdater: valueFromValueOrUpdater$2\n} = Recoil_RecoilValueInterface;\n\nconst {\n  Snapshot: Snapshot$1,\n  cloneSnapshot: cloneSnapshot$1\n} = Recoil_Snapshot$1;\n\nconst {\n  setByAddingToSet: setByAddingToSet$2\n} = Recoil_CopyOnWrite;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction cloneState_DEPRECATED(state) {\n  return {\n    transactionMetadata: { ...state.transactionMetadata\n    },\n    atomValues: new Map(state.atomValues),\n    nonvalidatedAtoms: new Map(state.nonvalidatedAtoms),\n    dirtyAtoms: new Set(state.dirtyAtoms),\n    nodeDeps: new Map(state.nodeDeps),\n    nodeToNodeSubscriptions: Recoil_mapMap(state.nodeToNodeSubscriptions, keys => new Set(keys)),\n    nodeToComponentSubscriptions: Recoil_mapMap(state.nodeToComponentSubscriptions, subsByAtom => new Map(subsByAtom))\n  };\n}\n\nfunction handleLoadable(loadable, atom, storeRef) {\n  // We can't just throw the promise we are waiting on to Suspense.  If the\n  // upstream dependencies change it may produce a state in which the component\n  // can render, but it would still be suspended on a Promise that may never resolve.\n  if (loadable.state === 'hasValue') {\n    return loadable.contents;\n  } else if (loadable.state === 'loading') {\n    const promise = new Promise(resolve => {\n      storeRef.current.getState().suspendedComponentResolvers.add(resolve);\n    });\n    throw promise;\n  } else if (loadable.state === 'hasError') {\n    throw loadable.contents;\n  } else {\n    throw new Error(`Invalid value of loadable atom \"${atom.key}\"`);\n  }\n}\n\nfunction validateRecoilValue(recoilValue, hookName) {\n  if (!isRecoilValue$1(recoilValue)) {\n    throw new Error(`Invalid argument to ${hookName}: expected an atom or selector but got ${String(recoilValue)}`);\n  }\n}\n\nfunction useInterface() {\n  const storeRef = useStoreRef$1();\n  const [_, forceUpdate] = useState$1([]);\n  const recoilValuesUsed = useRef$1(new Set());\n  recoilValuesUsed.current = new Set(); // Track the RecoilValues used just during this render\n\n  const previousSubscriptions = useRef$1(new Set());\n  const subscriptions = useRef$1(new Map());\n  const unsubscribeFrom = useCallback(key => {\n    const sub = subscriptions.current.get(key);\n\n    if (sub) {\n      sub.release(storeRef.current);\n      subscriptions.current.delete(key);\n    }\n  }, [storeRef, subscriptions]);\n  useEffect$1(() => {\n    const store = storeRef.current;\n\n    function updateState(_state, key) {\n      if (!subscriptions.current.has(key)) {\n        return;\n      }\n\n      forceUpdate([]);\n    }\n\n    Recoil_differenceSets(recoilValuesUsed.current, previousSubscriptions.current).forEach(key => {\n      if (subscriptions.current.has(key)) {\n        Recoil_expectationViolation(`Double subscription to RecoilValue \"${key}\"`);\n        return;\n      }\n\n      const sub = subscribeToRecoilValue$1(store, new AbstractRecoilValue$2(key), state => {\n        Recoil_Tracing.trace('RecoilValue subscription fired', key, () => {\n          updateState(state, key);\n        });\n      });\n      subscriptions.current.set(key, sub);\n      Recoil_Tracing.trace('initial update on subscribing', key, () => {\n        updateState(store.getState(), key);\n      });\n    });\n    Recoil_differenceSets(previousSubscriptions.current, recoilValuesUsed.current).forEach(key => {\n      unsubscribeFrom(key);\n    });\n    previousSubscriptions.current = recoilValuesUsed.current;\n  });\n  useEffect$1(() => {\n    const subs = subscriptions.current;\n    return () => subs.forEach((_, key) => unsubscribeFrom(key));\n  }, [unsubscribeFrom]);\n  return useMemo(() => {\n    function useSetRecoilState(recoilState) {\n      {\n        validateRecoilValue(recoilState, 'useSetRecoilState');\n      }\n\n      return newValueOrUpdater => {\n        const newValue = valueFromValueOrUpdater$2(storeRef.current, recoilState, newValueOrUpdater);\n        setRecoilValue$2(storeRef.current, recoilState, newValue);\n      };\n    }\n\n    function useResetRecoilState(recoilState) {\n      {\n        validateRecoilValue(recoilState, 'useResetRecoilState');\n      }\n\n      return () => setRecoilValue$2(storeRef.current, recoilState, DEFAULT_VALUE$2);\n    }\n\n    function useRecoilValueLoadable(recoilValue) {\n      {\n        validateRecoilValue(recoilValue, 'useRecoilValueLoadable');\n      }\n\n      if (!recoilValuesUsed.current.has(recoilValue.key)) {\n        recoilValuesUsed.current = setByAddingToSet$2(recoilValuesUsed.current, recoilValue.key);\n      } // TODO Restore optimization to memoize lookup\n\n\n      return getRecoilValueAsLoadable$2(storeRef.current, recoilValue);\n    }\n\n    function useRecoilValue(recoilValue) {\n      {\n        validateRecoilValue(recoilValue, 'useRecoilValue');\n      }\n\n      const loadable = useRecoilValueLoadable(recoilValue);\n      return handleLoadable(loadable, recoilValue, storeRef);\n    }\n\n    function useRecoilState(recoilState) {\n      {\n        validateRecoilValue(recoilState, 'useRecoilState');\n      }\n\n      return [useRecoilValue(recoilState), useSetRecoilState(recoilState)];\n    }\n\n    function useRecoilStateLoadable(recoilState) {\n      {\n        validateRecoilValue(recoilState, 'useRecoilStateLoadable');\n      }\n\n      return [useRecoilValueLoadable(recoilState), useSetRecoilState(recoilState)];\n    }\n\n    return {\n      getRecoilValue: useRecoilValue,\n      getRecoilValueLoadable: useRecoilValueLoadable,\n      getRecoilState: useRecoilState,\n      getRecoilStateLoadable: useRecoilStateLoadable,\n      getSetRecoilState: useSetRecoilState,\n      getResetRecoilState: useResetRecoilState\n    };\n  }, [recoilValuesUsed, storeRef]);\n}\n/**\n  Returns the value represented by the RecoilValue.\n  If the value is pending, it will throw a Promise to suspend the component,\n  if the value is an error it will throw it for the nearest React error boundary.\n  This will also subscribe the component for any updates in the value.\n  */\n\n\nfunction useRecoilValue(recoilValue) {\n  return useInterface().getRecoilValue(recoilValue);\n}\n/**\n  Like useRecoilValue(), but either returns the value if available or\n  just undefined if not available for any reason, such as pending or error.\n*/\n\n\nfunction useRecoilValueLoadable(recoilValue) {\n  return useInterface().getRecoilValueLoadable(recoilValue);\n}\n/**\n  Returns a function that allows the value of a RecoilState to be updated, but does\n  not subscribe the component to changes to that RecoilState.\n*/\n\n\nfunction useSetRecoilState(recoilState) {\n  return useCallback(useInterface().getSetRecoilState(recoilState), [recoilState]);\n}\n/**\n  Returns a function that will reset the value of a RecoilState to its default\n*/\n\n\nfunction useResetRecoilState(recoilState) {\n  return useCallback(useInterface().getResetRecoilState(recoilState), [recoilState]);\n}\n/**\n  Equivalent to useState(). Allows the value of the RecoilState to be read and written.\n  Subsequent updates to the RecoilState will cause the component to re-render. If the\n  RecoilState is pending, this will suspend the component and initiate the\n  retrieval of the value. If evaluating the RecoilState resulted in an error, this will\n  throw the error so that the nearest React error boundary can catch it.\n*/\n\n\nfunction useRecoilState(recoilState) {\n  const recoilInterface = useInterface();\n  const [value] = recoilInterface.getRecoilState(recoilState);\n  const setValue = useCallback(recoilInterface.getSetRecoilState(recoilState), [recoilState]);\n  return [value, setValue];\n}\n/**\n  Like useRecoilState(), but does not cause Suspense or React error handling. Returns\n  an object that indicates whether the RecoilState is available, pending, or\n  unavailable due to an error.\n*/\n\n\nfunction useRecoilStateLoadable(recoilState) {\n  const recoilInterface = useInterface();\n  const [value] = recoilInterface.getRecoilStateLoadable(recoilState);\n  const setValue = useCallback(recoilInterface.getSetRecoilState(recoilState), [recoilState]);\n  return [value, setValue];\n}\n\nfunction useTransactionSubscription(callback) {\n  const storeRef = useStoreRef$1();\n  useEffect$1(() => {\n    const sub = storeRef.current.subscribeToTransactions(callback);\n    return sub.release;\n  }, [callback, storeRef]);\n} // TODO instead of force update can put snapshot into local state\n\n\nfunction useTreeStateClone_DEPRECATED() {\n  const [_, setState] = useState$1(0);\n  const forceUpdate = useCallback(() => setState(x => x + 1), []);\n  useTransactionSubscription(forceUpdate);\n  const storeRef = useStoreRef$1();\n  return cloneState_DEPRECATED(storeRef.current.getState().currentTree);\n}\n\nfunction useSnapshotWithStateChange_DEPRECATED(transaction) {\n  const storeRef = useStoreRef$1();\n  let snapshot = useTreeStateClone_DEPRECATED();\n\n  const update = ({\n    key\n  }, updater) => {\n    [snapshot] = setNodeValue$3(storeRef.current, snapshot, key, peekNodeLoadable$2(storeRef.current, snapshot, key).map(updater));\n  };\n\n  transaction(update);\n  const atomValues = Recoil_mapMap(snapshot.atomValues, v => v.contents); // Only report atoms, not selectors\n\n  const updatedAtoms = Recoil_intersectSets(snapshot.dirtyAtoms, new Set(atomValues.keys()));\n  return {\n    atomValues,\n    updatedAtoms\n  };\n}\n\nfunction externallyVisibleAtomValuesInState(state) {\n  const atomValues = state.atomValues;\n  const persistedAtomContentsValues = Recoil_mapMap(Recoil_filterMap(atomValues, (v, k) => {\n    var _node$options;\n\n    const node = getNode$2(k);\n    const persistence = (_node$options = node.options) === null || _node$options === void 0 ? void 0 : _node$options.persistence_UNSTABLE;\n    return persistence != null && persistence.type !== 'none' && v.state === 'hasValue';\n  }), v => v.contents); // Merge in nonvalidated atoms; we may not have defs for them but they will\n  // all have persistence on or they wouldn't be there in the first place.\n\n  return Recoil_mergeMaps(state.nonvalidatedAtoms, persistedAtomContentsValues);\n}\n\n/**\n  Calls the given callback after any atoms have been modified and the consequent\n  component re-renders have been committed. This is intended for persisting\n  the values of the atoms to storage. The stored values can then be restored\n  using the useSetUnvalidatedAtomValues hook.\n\n  The callback receives the following info:\n\n  atomValues: The current value of every atom that is both persistable (persistence\n              type not set to 'none') and whose value is available (not in an\n              error or loading state).\n\n  previousAtomValues: The value of every persistable and available atom before\n               the transaction began.\n\n  atomInfo: A map containing the persistence settings for each atom. Every key\n            that exists in atomValues will also exist in atomInfo.\n\n  modifiedAtoms: The set of atoms that were written to during the transaction.\n\n  transactionMetadata: Arbitrary information that was added via the\n          useSetUnvalidatedAtomValues hook. Useful for ignoring the useSetUnvalidatedAtomValues\n          transaction, to avoid loops.\n*/\nfunction useTransactionObservation_DEPRECATED(callback) {\n  useTransactionSubscription(useCallback(store => {\n    const previousState = store.getState().currentTree;\n    let nextState = store.getState().nextTree;\n\n    if (!nextState) {\n      Recoil_recoverableViolation('Transaction subscribers notified without a next tree being present -- this is a bug in Recoil');\n      nextState = store.getState().currentTree; // attempt to trundle on\n    }\n\n    const atomValues = externallyVisibleAtomValuesInState(nextState);\n    const previousAtomValues = externallyVisibleAtomValuesInState(previousState);\n    const atomInfo = Recoil_mapMap(nodes$1, node => {\n      var _node$options$persist, _node$options2, _node$options2$persis, _node$options$persist2, _node$options3, _node$options3$persis;\n\n      return {\n        persistence_UNSTABLE: {\n          type: (_node$options$persist = (_node$options2 = node.options) === null || _node$options2 === void 0 ? void 0 : (_node$options2$persis = _node$options2.persistence_UNSTABLE) === null || _node$options2$persis === void 0 ? void 0 : _node$options2$persis.type) !== null && _node$options$persist !== void 0 ? _node$options$persist : 'none',\n          backButton: (_node$options$persist2 = (_node$options3 = node.options) === null || _node$options3 === void 0 ? void 0 : (_node$options3$persis = _node$options3.persistence_UNSTABLE) === null || _node$options3$persis === void 0 ? void 0 : _node$options3$persis.backButton) !== null && _node$options$persist2 !== void 0 ? _node$options$persist2 : false\n        }\n      };\n    });\n    const modifiedAtoms = new Set(nextState.dirtyAtoms);\n    callback({\n      atomValues,\n      previousAtomValues,\n      atomInfo,\n      modifiedAtoms,\n      transactionMetadata: { ...nextState.transactionMetadata\n      }\n    });\n  }, [callback]));\n}\n\nfunction useRecoilTransactionObserver(callback) {\n  useTransactionSubscription(useCallback(store => {\n    const previousState = store.getState().currentTree;\n    let nextState = store.getState().nextTree;\n\n    if (!nextState) {\n      Recoil_recoverableViolation('Transaction subscribers notified without a next tree being present -- this is a bug in Recoil');\n      nextState = previousState; // attempt to trundle on\n    }\n\n    callback({\n      snapshot: cloneSnapshot$1(nextState),\n      previousSnapshot: cloneSnapshot$1(previousState)\n    });\n  }, [callback]));\n} // Return a snapshot of the current state and subscribe to all state changes\n\n\nfunction useRecoilSnapshot() {\n  const store = useStoreRef$1();\n  const [snapshot, setSnapshot] = useState$1(() => cloneSnapshot$1(store.current.getState().currentTree));\n  useTransactionSubscription(useCallback(store => {\n    var _store$getState$nextT;\n\n    return setSnapshot(cloneSnapshot$1((_store$getState$nextT = store.getState().nextTree) !== null && _store$getState$nextT !== void 0 ? _store$getState$nextT : store.getState().currentTree));\n  }, []));\n  return snapshot;\n}\n\nfunction useGoToSnapshot_DEPRECATED() {\n  const storeRef = useStoreRef$1();\n  return snapshot => {\n    reactDom.unstable_batchedUpdates(() => {\n      snapshot.updatedAtoms.forEach(key => {\n        setRecoilValue$2(storeRef.current, new AbstractRecoilValue$2(key), snapshot.atomValues.get(key));\n      });\n    });\n  };\n}\n\nfunction useGotoRecoilSnapshot() {\n  const storeRef = useStoreRef$1();\n  return useCallback(snapshot => {\n    reactDom.unstable_batchedUpdates(() => {\n      storeRef.current.replaceState(prevState => {\n        const nextState = snapshot.getStore_INTERNAL().getState().currentTree; // Fire subscriptions for any atoms that changed values\n\n        const updatedKeys = new Set(); // Going through both seems to be more efficient than constructing a union set of keys\n\n        for (const keys of [prevState.atomValues.keys(), nextState.atomValues.keys()]) {\n          for (const key of keys) {\n            var _prevState$atomValues, _nextState$atomValues;\n\n            if (((_prevState$atomValues = prevState.atomValues.get(key)) === null || _prevState$atomValues === void 0 ? void 0 : _prevState$atomValues.contents) !== ((_nextState$atomValues = nextState.atomValues.get(key)) === null || _nextState$atomValues === void 0 ? void 0 : _nextState$atomValues.contents)) {\n              updatedKeys.add(key);\n            }\n          }\n        }\n\n        storeRef.current.fireNodeSubscriptions(updatedKeys, 'enqueue');\n        return { ...nextState,\n          nodeToComponentSubscriptions: prevState.nodeToComponentSubscriptions\n        };\n      });\n    });\n  }, [storeRef]);\n}\n\nfunction useSetUnvalidatedAtomValues() {\n  const storeRef = useStoreRef$1();\n  return (values, transactionMetadata = {}) => {\n    reactDom.unstable_batchedUpdates(() => {\n      storeRef.current.addTransactionMetadata(transactionMetadata);\n      values.forEach((value, key) => setUnvalidatedRecoilValue$1(storeRef.current, new AbstractRecoilValue$2(key), value));\n    });\n  };\n}\n\nclass Sentinel {}\n\nconst SENTINEL = new Sentinel();\n\nfunction useRecoilCallback(fn, deps) {\n  const storeRef = useStoreRef$1();\n  const gotoSnapshot = useGotoRecoilSnapshot();\n  return useCallback((...args) => {\n    // Use currentTree for the snapshot to show the currently committed stable state\n    const snapshot = cloneSnapshot$1(storeRef.current.getState().currentTree);\n\n    function set(recoilState, newValueOrUpdater) {\n      const newValue = valueFromValueOrUpdater$2(storeRef.current, recoilState, newValueOrUpdater);\n      setRecoilValue$2(storeRef.current, recoilState, newValue);\n    }\n\n    function reset(recoilState) {\n      setRecoilValue$2(storeRef.current, recoilState, DEFAULT_VALUE$2);\n    }\n\n    let ret = SENTINEL;\n    reactDom.unstable_batchedUpdates(() => {\n      // flowlint-next-line unclear-type:off\n      ret = fn({\n        set,\n        reset,\n        snapshot,\n        gotoSnapshot\n      })(...args);\n    });\n    !!(ret instanceof Sentinel) ?  Recoil_invariant(false, 'unstable_batchedUpdates should return immediately')  : void 0;\n    return ret;\n  }, deps != null ? [...deps, storeRef] : undefined // eslint-disable-line fb-www/react-hooks-deps\n  );\n}\n\nvar Recoil_Hooks = {\n  useRecoilCallback,\n  useRecoilValue,\n  useRecoilValueLoadable,\n  useRecoilState,\n  useRecoilStateLoadable,\n  useSetRecoilState,\n  useResetRecoilState,\n  useRecoilInterface: useInterface,\n  useSnapshotWithStateChange_DEPRECATED,\n  useTransactionSubscription_DEPRECATED: useTransactionSubscription,\n  useTransactionObservation_DEPRECATED,\n  useRecoilTransactionObserver,\n  useRecoilSnapshot,\n  useGoToSnapshot_DEPRECATED,\n  useGotoRecoilSnapshot,\n  useSetUnvalidatedAtomValues\n};\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\n// Split declaration and implementation to allow this function to pretend to\n// check for actual instance of Promise instead of something with a `then`\n// method.\n// eslint-disable-next-line no-redeclare\nfunction isPromise(p) {\n  return !!p && typeof p.then === 'function';\n}\n\nvar Recoil_isPromise = isPromise;\n\n// TODO Convert Loadable to a Class to allow for runtime type detection.\n// Containing static factories of withValue(), withError(), withPromise(), and all()\n\n\nconst loadableAccessors = {\n  getValue() {\n    if (this.state !== 'hasValue') {\n      throw this.contents; // Throw Error, or Promise for the loading state\n    }\n\n    return this.contents;\n  },\n\n  toPromise() {\n    return this.state === 'hasValue' ? Promise.resolve(this.contents) : this.state === 'hasError' ? Promise.reject(this.contents) : this.contents;\n  },\n\n  valueMaybe() {\n    return this.state === 'hasValue' ? this.contents : undefined;\n  },\n\n  valueOrThrow() {\n    if (this.state !== 'hasValue') {\n      throw new Error(`Loadable expected value, but in \"${this.state}\" state`);\n    }\n\n    return this.contents;\n  },\n\n  errorMaybe() {\n    return this.state === 'hasError' ? this.contents : undefined;\n  },\n\n  errorOrThrow() {\n    if (this.state !== 'hasError') {\n      throw new Error(`Loadable expected error, but in \"${this.state}\" state`);\n    }\n\n    return this.contents;\n  },\n\n  promiseMaybe() {\n    return this.state === 'loading' ? this.contents : undefined;\n  },\n\n  promiseOrThrow() {\n    if (this.state !== 'loading') {\n      throw new Error(`Loadable expected promise, but in \"${this.state}\" state`);\n    }\n\n    return this.contents;\n  },\n\n  // TODO Unit tests\n  // TODO Convert Loadable to a Class to better support chaining\n  //      by returning a Loadable from a map function\n  map(map) {\n    if (this.state === 'hasError') {\n      return this;\n    }\n\n    if (this.state === 'hasValue') {\n      try {\n        const next = map(this.contents); // TODO if next instanceof Loadable, then return next\n\n        return Recoil_isPromise(next) ? loadableWithPromise(next) : loadableWithValue(next);\n      } catch (e) {\n        return Recoil_isPromise(e) ? // If we \"suspended\", then try again.\n        // errors and subsequent retries will be handled in 'loading' case\n        loadableWithPromise(e.next(() => map(this.contents))) : loadableWithError(e);\n      }\n    }\n\n    if (this.state === 'loading') {\n      return loadableWithPromise(this.contents // TODO if map returns a loadable, then return the value or promise or throw the error\n      .then(map).catch(e => {\n        if (Recoil_isPromise(e)) {\n          // we were \"suspended,\" try again\n          return e.then(() => map(this.contents));\n        }\n\n        throw e;\n      }));\n    }\n\n    throw new Error('Invalid Loadable state');\n  }\n\n};\n\nfunction loadableWithValue(value) {\n  // Build objects this way since Flow doesn't support disjoint unions for class properties\n  return Object.freeze({\n    state: 'hasValue',\n    contents: value,\n    ...loadableAccessors\n  });\n}\n\nfunction loadableWithError(error) {\n  return Object.freeze({\n    state: 'hasError',\n    contents: error,\n    ...loadableAccessors\n  });\n}\n\nfunction loadableWithPromise(promise) {\n  return Object.freeze({\n    state: 'loading',\n    contents: promise,\n    ...loadableAccessors\n  });\n}\n\nfunction loadableLoading() {\n  return loadableWithPromise(new Promise(() => {}));\n}\n\nfunction loadableAll(inputs) {\n  return inputs.every(i => i.state === 'hasValue') ? loadableWithValue(inputs.map(i => i.contents)) : inputs.some(i => i.state === 'hasError') ? loadableWithError( // $FlowIssue #44070740 Array.find should refine parameter\n  Recoil_nullthrows(inputs.find(i => i.state === 'hasError'), 'Invalid loadable passed to loadableAll').contents) : loadableWithPromise( Promise.all(inputs.map(i => i.contents)));\n}\n\nvar Recoil_Loadable = {\n  loadableWithValue,\n  loadableWithError,\n  loadableWithPromise,\n  loadableLoading,\n  loadableAll\n};\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction isNode(object) {\n  var _ownerDocument, _doc$defaultView;\n\n  if (typeof window === 'undefined') {\n    return false;\n  }\n\n  const doc = object != null ? (_ownerDocument = object.ownerDocument) !== null && _ownerDocument !== void 0 ? _ownerDocument : object : document;\n  const defaultView = (_doc$defaultView = doc.defaultView) !== null && _doc$defaultView !== void 0 ? _doc$defaultView : window;\n  return !!(object != null && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));\n}\n\nvar Recoil_isNode = isNode;\n\nfunction shouldNotBeFrozen(value) {\n  // Primitives and functions:\n  if (value === null || typeof value !== 'object') {\n    return true;\n  } // React elements:\n\n\n  switch (typeof value.$$typeof) {\n    case 'symbol':\n      return true;\n\n    case 'number':\n      return true;\n  } // Immutable structures:\n\n\n  if (value['@@__IMMUTABLE_ITERABLE__@@'] != null || value['@@__IMMUTABLE_KEYED__@@'] != null || value['@@__IMMUTABLE_INDEXED__@@'] != null || value['@@__IMMUTABLE_ORDERED__@@'] != null || value['@@__IMMUTABLE_RECORD__@@'] != null) {\n    return true;\n  } // DOM nodes:\n\n\n  if (Recoil_isNode(value)) {\n    return true;\n  }\n\n  if (Recoil_isPromise(value)) {\n    return true;\n  }\n\n  return false;\n} // Recursively freeze a value to enforce it is read-only.\n// This may also have minimal performance improvements for enumerating\n// objects (based on browser implementations, of course)\n\n\nfunction deepFreezeValue(value) {\n  if (typeof value !== 'object' || shouldNotBeFrozen(value)) {\n    return;\n  }\n\n  Object.freeze(value); // Make all properties read-only\n\n  for (const key in value) {\n    if (Object.prototype.hasOwnProperty.call(value, key)) {\n      const prop = value[key]; // Prevent infinite recurssion for circular references.\n\n      if (typeof prop === 'object' && prop != null && !Object.isFrozen(prop)) {\n        deepFreezeValue(prop);\n      }\n    }\n  }\n\n  Object.seal(value); // This also makes existing properties non-configurable.\n}\n\nvar Recoil_deepFreezeValue = deepFreezeValue;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Implements (a subset of) the interface of built-in Map but supports arrays as\n * keys. Two keys are equal if corresponding elements are equal according to the\n * equality semantics of built-in Map. Operations are at worst O(n*b) where n is\n * the array length and b is the complexity of the built-in operation.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nconst LEAF = Symbol('ArrayKeyedMap');\nconst emptyMap$1 = new Map();\n\nclass ArrayKeyedMap {\n  // @fb-only: _base: Map<any, any> = new Map();\n  constructor(existing) {\n    // $FlowOSSFixMe\n    this._base = new Map(); // @oss-only\n\n    if (existing instanceof ArrayKeyedMap) {\n      for (const [k, v] of existing.entries()) {\n        this.set(k, v);\n      }\n    } else if (existing) {\n      for (const [k, v] of existing) {\n        this.set(k, v);\n      }\n    }\n\n    return this;\n  }\n\n  get(key) {\n    const ks = Array.isArray(key) ? key : [key]; // $FlowOSSFixMe\n\n    let map = this._base;\n    ks.forEach(k => {\n      var _map$get;\n\n      map = (_map$get = map.get(k)) !== null && _map$get !== void 0 ? _map$get : emptyMap$1;\n    });\n    return map === undefined ? undefined : map.get(LEAF);\n  }\n\n  set(key, value) {\n    const ks = Array.isArray(key) ? key : [key]; // $FlowOSSFixMe\n\n    let map = this._base;\n    let next = map;\n    ks.forEach(k => {\n      next = map.get(k);\n\n      if (!next) {\n        next = new Map();\n        map.set(k, next);\n      }\n\n      map = next;\n    });\n    next.set(LEAF, value);\n    return this;\n  }\n\n  delete(key) {\n    const ks = Array.isArray(key) ? key : [key]; // $FlowOSSFixMe\n\n    let map = this._base;\n    let next = map;\n    ks.forEach(k => {\n      next = map.get(k);\n\n      if (!next) {\n        next = new Map();\n        map.set(k, next);\n      }\n\n      map = next;\n    });\n    next.delete(LEAF); // TODO We could cleanup empty maps\n\n    return this;\n  }\n\n  entries() {\n    const answer = [];\n\n    function recurse(level, prefix) {\n      level.forEach((v, k) => {\n        if (k === LEAF) {\n          answer.push([prefix, v]);\n        } else {\n          recurse(v, prefix.concat(k));\n        }\n      });\n    } // $FlowOSSFixMe\n\n\n    recurse(this._base, []);\n    return answer.values();\n  }\n\n  toBuiltInMap() {\n    return new Map(this.entries());\n  }\n\n}\n\nvar Recoil_ArrayKeyedMap = ArrayKeyedMap;\n\nfunction cacheWithReferenceEquality() {\n  return new Recoil_ArrayKeyedMap();\n}\n\nvar Recoil_cacheWithReferenceEquality = cacheWithReferenceEquality;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n/**\n * The everySet() method tests whether all elements in the given Set pass the\n * test implemented by the provided function.\n */\n\nfunction everySet(set, callback, context) {\n  const iterator = set.entries();\n  let current = iterator.next();\n\n  while (!current.done) {\n    const entry = current.value;\n\n    if (!callback.call(context, entry[1], entry[0], set)) {\n      return false;\n    }\n\n    current = iterator.next();\n  }\n\n  return true;\n}\n\nvar Recoil_everySet = everySet;\n\n/**\n * Checks if two sets are equal\n */\n\n\nfunction equalsSet(one, two) {\n  if (one.size !== two.size) {\n    return false;\n  }\n\n  return Recoil_everySet(one, value => two.has(value));\n}\n\nvar Recoil_equalsSet = equalsSet;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n *\n * This is a stub for some integration into FB internal stuff\n */\nfunction startPerfBlock(_id) {\n  return () => null;\n}\n\nvar Recoil_PerformanceTimings = {\n  startPerfBlock\n};\n\nconst emptySet$1 = Object.freeze(new Set());\n\nconst {\n  mapBySettingInMap: mapBySettingInMap$2,\n  mapByUpdatingInMap: mapByUpdatingInMap$2,\n  setByAddingToSet: setByAddingToSet$3,\n  setByDeletingFromSet: setByDeletingFromSet$1\n} = Recoil_CopyOnWrite;\n\n\n\nconst {\n  detectCircularDependencies: detectCircularDependencies$1,\n  getNodeLoadable: getNodeLoadable$2,\n  setNodeValue: setNodeValue$4\n} = Recoil_FunctionalCore;\n\nconst {\n  loadableWithError: loadableWithError$1,\n  loadableWithPromise: loadableWithPromise$1,\n  loadableWithValue: loadableWithValue$1\n} = Recoil_Loadable;\n\nconst {\n  DEFAULT_VALUE: DEFAULT_VALUE$3,\n  RecoilValueNotReady: RecoilValueNotReady$2,\n  registerNode: registerNode$1\n} = Recoil_Node;\n\nconst {\n  startPerfBlock: startPerfBlock$1\n} = Recoil_PerformanceTimings;\n\nconst {\n  isRecoilValue: isRecoilValue$2\n} = Recoil_RecoilValue$1;\n\n\n\n\n\n\n\n\n\n// flowlint-next-line unclear-type:off\nconst emptySet$2 = Object.freeze(new Set());\n\nfunction cacheKeyFromDepValues(depValues) {\n  const answer = [];\n\n  for (const key of Array.from(depValues.keys()).sort()) {\n    const loadable = Recoil_nullthrows(depValues.get(key));\n    answer.push(key);\n    answer.push(loadable.contents);\n  }\n\n  return answer;\n}\n/* eslint-disable no-redeclare */\n\n\nfunction selector(options) {\n  const {\n    key,\n    get,\n    cacheImplementation_UNSTABLE: cacheImplementation\n  } = options;\n  const set = options.set != null ? options.set : undefined; // flow\n\n  let cache = cacheImplementation !== null && cacheImplementation !== void 0 ? cacheImplementation : Recoil_cacheWithReferenceEquality();\n\n  function putIntoCache(store, cacheKey, loadable) {\n    if (loadable.state !== 'loading') {\n      // Synchronous result\n      if (!options.dangerouslyAllowMutability === true) {\n        Recoil_deepFreezeValue(loadable.contents);\n      }\n    } else {\n      // Asynchronous result\n      // When the promise resolves, we need to replace the loading state in the\n      // cache and fire any external subscriptions to re-render with the new value.\n      loadable.contents.then(result => {\n        // If the value is now resolved, then update the cache with the new value\n        if (!options.dangerouslyAllowMutability === true) {\n          Recoil_deepFreezeValue(result);\n        }\n\n        cache = cache.set(cacheKey, loadableWithValue$1(result)); // TODO Potential optimization: I think this is updating the cache\n        // with a cacheKey of the dep when it wasn't ready yet.  We could also\n        // theoretically put the result in the cache for a cacheKey with the\n        // dep resolved.  If we had some way of figuring out what that cacheKey was..\n        // Note that this optimization would change the user visible behavior slightly,\n        // see the unit test \"useRecoilState - selector catching promise 2\".\n        // If the user catches and handles pending async dependencies, then returns\n        // a promise that resolves when they are available there is a question if\n        // the result of that promise should be the value of the selector, or if\n        // the selector should re-evaluate when the dependency is available.\n        // If the promise returned and the pending dependency resolve at different\n        // times, then the behaviour is better defined, as in the unit test,\n        // \"useRecoilState - selector catching promise and resolving asynchronously\"\n        // Fire subscriptions to re-render any subscribed components with the new value.\n        // The store uses the CURRENT state, not the old state from which\n        // this was called.  That state likely doesn't have the subscriptions saved yet.\n\n        store.fireNodeSubscriptions(new Set([key]), 'now');\n        return result;\n      }).catch(error => {\n        // TODO Figure out why we are catching promises here versus evaluateSelectorFunction\n        // OH, I see why.  Ok, work on this.\n        if (Recoil_isPromise(error)) {\n          return error;\n        } // The async value was rejected with an error.  Update the cache with\n        // the error and fire subscriptions to re-render.\n\n\n        if (!options.dangerouslyAllowMutability === true) {\n          Recoil_deepFreezeValue(error);\n        }\n\n        cache = cache.set(cacheKey, loadableWithError$1(error));\n        store.fireNodeSubscriptions(new Set([key]), 'now');\n        return error;\n      });\n    }\n\n    cache = cache.set(cacheKey, loadable);\n  }\n\n  function getFromCache(store, state) {\n    var _state$nodeDeps$get;\n\n    let newState = state; // First, get the current deps for this selector\n\n    const currentDeps = (_state$nodeDeps$get = state.nodeDeps.get(key)) !== null && _state$nodeDeps$get !== void 0 ? _state$nodeDeps$get : emptySet$2;\n    const depValues = new Map(Array.from(currentDeps).sort().map(depKey => {\n      const [nextState, loadable] = getNodeLoadable$2(store, newState, depKey);\n      newState = nextState;\n      return [depKey, loadable];\n    })); // Always cache and evaluate a selector\n    // It may provide a result even when not all deps are available.\n\n    const cacheKey = cacheKeyFromDepValues(depValues);\n    const cached = cache.get(cacheKey);\n\n    if (cached != null) {\n      return [newState, cached];\n    } // Cache miss, compute the value\n\n\n    const [nextState, loadable, newDepValues] = computeAndSubscribeSelector(store, newState);\n    newState = nextState; // Save result in cache\n\n    const newCacheKey = cacheKeyFromDepValues(newDepValues);\n    putIntoCache(store, newCacheKey, loadable);\n    return [newState, loadable];\n  }\n\n  function evaluateSelectorFunction(store, state) {\n    const endPerfBlock = startPerfBlock$1(key);\n    let newState = state;\n    const depValues = new Map();\n\n    function getRecoilValue({\n      key\n    }) {\n      let loadable;\n      [newState, loadable] = getNodeLoadable$2(store, newState, key);\n      depValues.set(key, loadable);\n\n      if (loadable.state === 'hasValue') {\n        return loadable.contents;\n      } else {\n        throw loadable.contents; // Promise or error\n      }\n    }\n\n    try {\n      // The big moment!\n      const output = get({\n        get: getRecoilValue\n      });\n      const result = isRecoilValue$2(output) ? getRecoilValue(output) : output; // TODO Allow user to also return Loadables for improved composability\n\n      const loadable = !Recoil_isPromise(result) ? ( // The selector returned a simple synchronous value, so let's use it!\n      endPerfBlock(), loadableWithValue$1(result)) : // The user returned a promise for an asynchronous selector.  This will\n      // resolve to the proper value of the selector when available.\n      loadableWithPromise$1(result.finally(endPerfBlock));\n      return [newState, loadable, depValues];\n    } catch (errorOrDepPromise) {\n      const loadable = !Recoil_isPromise(errorOrDepPromise) ? ( // There was a synchronous error in the evaluation\n      endPerfBlock(), loadableWithError$1(errorOrDepPromise)) : // If an asynchronous dependency was not ready, then return a promise that\n      // will resolve when we finally do have a real value or error for the selector.\n      loadableWithPromise$1(errorOrDepPromise.then(() => {\n        // The dependency we were waiting on is now available.\n        // So, let's try to evaluate the selector again and return that value.\n        let loadable = loadableWithError$1(new Error('Internal Recoil Selector Error') // To make Flow happy\n        ); // This is done asynchronously, so we need to make sure to save the state\n\n        store.replaceState(asyncState => {\n          let newAsyncState;\n          [newAsyncState, loadable] = getFromCache(store, asyncState);\n          return newAsyncState;\n        });\n\n        if (loadable.state === 'hasError') {\n          throw loadable.contents;\n        } // Either the re-try provided a value, which we will use, or it\n        // got blocked again.  In that case this is a promise and we'll try again.\n\n\n        return loadable.contents;\n      }).finally(endPerfBlock));\n      return [newState, loadable, depValues];\n    }\n  }\n\n  function computeAndSubscribeSelector(store, state) {\n    var _state$nodeDeps$get2;\n\n    // Call the selector get evaluation function to get the new value\n    const [newStateFromEvaluate, loadable, newDepValues] = evaluateSelectorFunction(store, state);\n    let newState = newStateFromEvaluate; // Update state with new upsteram dependencies\n\n    const oldDeps = (_state$nodeDeps$get2 = state.nodeDeps.get(key)) !== null && _state$nodeDeps$get2 !== void 0 ? _state$nodeDeps$get2 : emptySet$2;\n    const newDeps = new Set(newDepValues.keys());\n    newState = Recoil_equalsSet(oldDeps, newDeps) ? newState : { ...newState,\n      nodeDeps: mapBySettingInMap$2(newState.nodeDeps, key, newDeps)\n    }; // Update state with new downstream subscriptions\n\n    const addedDeps = Recoil_differenceSets(newDeps, oldDeps);\n    const removedDeps = Recoil_differenceSets(oldDeps, newDeps);\n\n    for (const upstreamNode of addedDeps) {\n      newState = { ...newState,\n        nodeToNodeSubscriptions: mapByUpdatingInMap$2(newState.nodeToNodeSubscriptions, upstreamNode, subs => setByAddingToSet$3(subs !== null && subs !== void 0 ? subs : emptySet$2, key))\n      };\n    }\n\n    for (const upstreamNode of removedDeps) {\n      newState = { ...newState,\n        nodeToNodeSubscriptions: mapByUpdatingInMap$2(newState.nodeToNodeSubscriptions, upstreamNode, subs => setByDeletingFromSet$1(subs !== null && subs !== void 0 ? subs : emptySet$2, key))\n      };\n    }\n\n    {\n      detectCircularDependencies$1(newState, [key]);\n    }\n\n    return [newState, loadable, newDepValues];\n  }\n\n  function myGet(store, state) {\n    // TODO memoize a value if no deps have changed to avoid a cache lookup\n    // Lookup the node value in the cache.  If not there, then compute\n    // the value and update the state with any changed node subscriptions.\n    return getFromCache(store, state);\n  }\n\n  if (set != null) {\n    function mySet(store, state, newValue) {\n      let newState = state;\n      const writtenNodes = new Set();\n\n      function getRecoilValue({\n        key\n      }) {\n        const [nextState, loadable] = getNodeLoadable$2(store, newState, key);\n        newState = nextState;\n\n        if (loadable.state === 'hasValue') {\n          return loadable.contents;\n        } else if (loadable.state === 'loading') {\n          throw new RecoilValueNotReady$2(key);\n        } else {\n          throw loadable.contents;\n        }\n      }\n\n      function setRecoilState(recoilState, valueOrUpdater) {\n        const newValue = typeof valueOrUpdater === 'function' ? // cast to any because we can't restrict type S from being a function itself without losing support for opaque types\n        // flowlint-next-line unclear-type:off\n        valueOrUpdater(getRecoilValue(recoilState)) : valueOrUpdater;\n        let written;\n        [newState, written] = setNodeValue$4(store, newState, recoilState.key, newValue);\n        written.forEach(atom => writtenNodes.add(atom));\n      }\n\n      function resetRecoilState(recoilState) {\n        setRecoilState(recoilState, DEFAULT_VALUE$3);\n      }\n\n      set({\n        set: setRecoilState,\n        get: getRecoilValue,\n        reset: resetRecoilState\n      }, newValue);\n      return [newState, writtenNodes];\n    }\n\n    return registerNode$1({\n      key,\n      options,\n      get: myGet,\n      set: mySet\n    });\n  } else {\n    return registerNode$1({\n      key,\n      options,\n      get: myGet\n    });\n  }\n}\n/* eslint-enable no-redeclare */\n\n\nvar Recoil_selector_OLD = selector;\n\nconst selector$1 =  Recoil_selector_OLD;\nvar Recoil_selector = selector$1;\n\n// @fb-only: import type {ScopeRules} from './Recoil_ScopedAtom';\nconst {\n  loadableWithValue: loadableWithValue$2\n} = Recoil_Loadable;\n\nconst {\n  DEFAULT_VALUE: DEFAULT_VALUE$4,\n  DefaultValue: DefaultValue$1,\n  registerNode: registerNode$2\n} = Recoil_Node;\n\nconst {\n  isRecoilValue: isRecoilValue$3\n} = Recoil_RecoilValue$1;\n\nconst {\n  mapByDeletingFromMap: mapByDeletingFromMap$2,\n  mapBySettingInMap: mapBySettingInMap$3,\n  setByAddingToSet: setByAddingToSet$4\n} = Recoil_CopyOnWrite;\n\n\n\n\n\n\n\n // @fb-only: const {scopedAtom} = require('./Recoil_ScopedAtom');\n\n\n // It would be nice if this didn't have to be defined at the Recoil level, but I don't want to make\n// the api cumbersome. One way to do this would be to have a selector mark the atom as persisted.\n// Note that this should also allow for special URL handling. (Although the persistence observer could\n// have this as a separate configuration.)\n\n\nfunction baseAtom(options) {\n  const {\n    key,\n    persistence_UNSTABLE: persistence\n  } = options;\n  return registerNode$2({\n    key,\n    options,\n    get: (_store, state) => {\n      if (state.atomValues.has(key)) {\n        // atom value is stored in state\n        return [state, Recoil_nullthrows(state.atomValues.get(key))];\n      } else if (state.nonvalidatedAtoms.has(key)) {\n        if (persistence == null) {\n          Recoil_expectationViolation(`Tried to restore a persisted value for atom ${key} but it has no persistence settings.`);\n          return [state, loadableWithValue$2(options.default)];\n        }\n\n        const nonvalidatedValue = state.nonvalidatedAtoms.get(key);\n        const validatedValue = persistence.validator(nonvalidatedValue, DEFAULT_VALUE$4);\n        return validatedValue instanceof DefaultValue$1 ? [{ ...state,\n          nonvalidatedAtoms: mapByDeletingFromMap$2(state.nonvalidatedAtoms, key)\n        }, loadableWithValue$2(options.default)] : [{ ...state,\n          atomValues: mapBySettingInMap$3(state.atomValues, key, loadableWithValue$2(validatedValue)),\n          nonvalidatedAtoms: mapByDeletingFromMap$2(state.nonvalidatedAtoms, key)\n        }, loadableWithValue$2(validatedValue)];\n      } else {\n        return [state, loadableWithValue$2(options.default)];\n      }\n    },\n    set: (_store, state, newValue) => {\n      if (options.dangerouslyAllowMutability !== true) {\n        Recoil_deepFreezeValue(newValue);\n      }\n\n      return [{ ...state,\n        dirtyAtoms: setByAddingToSet$4(state.dirtyAtoms, key),\n        atomValues: newValue instanceof DefaultValue$1 ? mapByDeletingFromMap$2(state.atomValues, key) : mapBySettingInMap$3(state.atomValues, key, loadableWithValue$2(newValue)),\n        nonvalidatedAtoms: mapByDeletingFromMap$2(state.nonvalidatedAtoms, key)\n      }, new Set([key])];\n    }\n  });\n} // prettier-ignore\n\n\nfunction atom(options) {\n  const {\n    default: optionsDefault,\n    // @fb-only: scopeRules_APPEND_ONLY_READ_THE_DOCS,\n    ...restOptions\n  } = options;\n\n  if (isRecoilValue$3(optionsDefault) || Recoil_isPromise(optionsDefault)) {\n    return atomWithFallback({ ...restOptions,\n      default: optionsDefault // @fb-only: scopeRules_APPEND_ONLY_READ_THE_DOCS,\n\n    }); // @fb-only: } else if (scopeRules_APPEND_ONLY_READ_THE_DOCS) {\n    // @fb-only: return scopedAtom<T>({\n    // @fb-only: ...restOptions,\n    // @fb-only: default: optionsDefault,\n    // @fb-only: scopeRules_APPEND_ONLY_READ_THE_DOCS,\n    // @fb-only: });\n  } else {\n    return baseAtom({ ...restOptions,\n      default: optionsDefault\n    });\n  }\n}\n\nfunction atomWithFallback(options) {\n  const base = atom({ ...options,\n    default: DEFAULT_VALUE$4,\n    persistence_UNSTABLE: options.persistence_UNSTABLE === undefined ? undefined : { ...options.persistence_UNSTABLE,\n      validator: storedValue => storedValue instanceof DefaultValue$1 ? storedValue : Recoil_nullthrows(options.persistence_UNSTABLE).validator(storedValue, DEFAULT_VALUE$4)\n    }\n  });\n  return Recoil_selector({\n    key: `${options.key}__withFallback`,\n    get: ({\n      get\n    }) => {\n      const baseValue = get(base);\n      return baseValue instanceof DefaultValue$1 ? options.default : baseValue;\n    },\n    set: ({\n      set\n    }, newValue) => set(base, newValue),\n    dangerouslyAllowMutability: options.dangerouslyAllowMutability\n  });\n}\n\nvar Recoil_atom = atom;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nvar Recoil_ParameterizedAtomTaggedValue_DEPRECATED = /*#__PURE__*/Object.freeze({\n  __proto__: null\n});\n\nconst TIME_WARNING_THRESHOLD_MS = 15;\n\nfunction stringify(x, opt, key) {\n  // A optimization to avoid the more expensive JSON.stringify() for simple strings\n  // This may lose protection for u2028 and u2029, though.\n  if (typeof x === 'string' && !x.includes('\"') && !x.includes('\\\\')) {\n    return `\"${x}\"`;\n  } // Handle primitive types\n\n\n  switch (typeof x) {\n    case 'undefined':\n      return '';\n    // JSON.stringify(undefined) returns undefined, but we always want to return a string\n\n    case 'boolean':\n      return x ? 'true' : 'false';\n\n    case 'number':\n    case 'symbol':\n      // case 'bigint': // BigInt is not supported in www\n      return String(x);\n\n    case 'string':\n      // Add surrounding quotes and escape internal quotes\n      return JSON.stringify(x);\n\n    case 'function':\n      if ((opt === null || opt === void 0 ? void 0 : opt.allowFunctions) !== true) {\n        throw new Error('Attempt to serialize function in a Recoil cache key');\n      }\n\n      return `__FUNCTION(${x.name})__`;\n  }\n\n  if (x === null) {\n    return 'null';\n  } // Fallback case for unknown types\n\n\n  if (typeof x !== 'object') {\n    var _JSON$stringify;\n\n    return (_JSON$stringify = JSON.stringify(x)) !== null && _JSON$stringify !== void 0 ? _JSON$stringify : '';\n  } // Deal with all promises as equivalent for now.\n\n\n  if (Recoil_isPromise(x)) {\n    return '__PROMISE__';\n  } // Arrays handle recursive stringification\n\n\n  if (Array.isArray(x)) {\n    return `[${x.map((v, i) => stringify(v, opt, i.toString()))}]`;\n  } // If an object defines a toJSON() method, then use that to override the\n  // serialization.  This matches the behavior of JSON.stringify().\n  // Pass the key for compatibility.\n  // Immutable.js collections define this method to allow us to serialize them.\n\n\n  if (typeof x.toJSON === 'function') {\n    // flowlint-next-line unclear-type: off\n    return stringify(x.toJSON(key), opt, key);\n  } // For built-in Maps, sort the keys in a stable order instead of the\n  // default insertion order.  Support non-string keys.\n\n\n  if (x instanceof Map) {\n    return stringify( // TODO Object.fromEntries(x) isn't supported in Babel yet (7/17/19)\n    Array.from(x).reduce((obj, [k, v]) => ({ ...obj,\n      // Stringify will escape any nested quotes\n      [typeof k === 'string' ? k : stringify(k, opt)]: v\n    }), {}), opt, key);\n  } // For built-in Sets, sort the keys in a stable order instead of the\n  // default insertion order.\n\n\n  if (x instanceof Set) {\n    return stringify(Array.from(x).sort((a, b) => stringify(a, opt).localeCompare(stringify(b, opt))), opt, key);\n  } // Anything else that is iterable serialize as an Array.\n\n\n  if (x[Symbol.iterator] != null && typeof x[Symbol.iterator] === 'function') {\n    // flowlint-next-line unclear-type: off\n    return stringify(Array.from(x), opt, key);\n  } // For all other Objects, sort the keys in a stable order.\n\n\n  return `{${Object.keys(x).filter(key => x[key] !== undefined).sort() // stringify the key to add quotes and escape any nested slashes or quotes.\n  .map(key => `${stringify(key, opt)}:${stringify(x[key], opt, key)}`).join(',')}}`;\n} // Utility similar to JSON.stringify() except:\n// * Serialize built-in Sets as an Array\n// * Serialize built-in Maps as an Object.  Supports non-string keys.\n// * Serialize other iterables as arrays\n// * Sort the keys of Objects and Maps to have a stable order based on string conversion.\n//    This overrides their default insertion order.\n// * Still uses toJSON() of any object to override serialization\n// * Support Symbols (though don't guarantee uniqueness)\n// * We could support BigInt, but Flow doesn't seem to like it.\n// See Recoil_stableStringify-test.js for examples\n\n\nfunction stableStringify(x, opt = {\n  allowFunctions: false\n}) {\n  {\n    if (typeof window !== 'undefined') {\n      const startTime = window.performance ? window.performance.now() : 0;\n      const str = stringify(x, opt);\n      const endTime = window.performance ? window.performance.now() : 0;\n\n      if (endTime - startTime > TIME_WARNING_THRESHOLD_MS) {\n        /* eslint-disable fb-www/no-console */\n        console.groupCollapsed(`Recoil: Spent ${endTime - startTime}ms computing a cache key`);\n        console.warn(x, str);\n        console.groupEnd();\n        /* eslint-enable fb-www/no-console */\n      }\n\n      return str;\n    }\n  }\n\n  return stringify(x, opt);\n}\n\nvar Recoil_stableStringify = stableStringify;\n\n// If we do profile and find the key equality check is expensive,\n// we could always try to optimize..  Something that comes to mind is having\n// each check assign an incrementing index to each reference that maps to the\n// value equivalency.  Then, if an object already has an index, the comparison\n// check/lookup would be trivial and the string serialization would only need\n// to be done once per object instance.  Just a thought..\n// Cache implementation to use value equality for keys instead of the default\n// reference equality.  This allows different instances of dependency values to\n// be used.  Normally this is not needed, as dependent atoms/selectors will\n// themselves be cached and always return the same instance.  However, if\n// different params or upstream values for those dependencies could produce\n// equivalent values or they have a custom cache implementation, then this\n// implementation may be needed.  The downside with this approach is that it\n// takes longer to compute the value equivalence vs simple reference equality.\n\n\nfunction cacheWithValueEquality() {\n  const map = new Map();\n  const cache = {\n    get: key => map.get(Recoil_stableStringify(key)),\n    set: (key, value) => {\n      map.set(Recoil_stableStringify(key), value);\n      return cache;\n    },\n    map // For debugging\n\n  };\n  return cache;\n}\n\nvar Recoil_cacheWithValueEquality = cacheWithValueEquality;\n\n// Keep in mind the parameter needs to be serializable as a cahche key\n// using Recoil_stableStringify\n\n\n// Add a unique index to each selector in case the cache implementation allows\n// duplicate keys based on equivalent stringified parameters\nlet nextIndex = 0;\n/* eslint-disable no-redeclare */\n\n// Return a function that returns members of a family of selectors of the same type\n// E.g.,\n//\n// const s = selectorFamily(...);\n// s({a: 1}) => a selector\n// s({a: 2}) => a different selector\n//\n// By default, the selectors are distinguished by distinct values of the\n// parameter based on value equality, not reference equality.  This allows using\n// object literals or other equivalent objects at callsites to not create\n// duplicate cache entries.  This behavior may be overridden with the\n// cacheImplementationForParams option.\nfunction selectorFamily(options) {\n  var _options$cacheImpleme, _options$cacheImpleme2;\n\n  let selectorCache = (_options$cacheImpleme = (_options$cacheImpleme2 = options.cacheImplementationForParams_UNSTABLE) === null || _options$cacheImpleme2 === void 0 ? void 0 : _options$cacheImpleme2.call(options)) !== null && _options$cacheImpleme !== void 0 ? _options$cacheImpleme : Recoil_cacheWithValueEquality();\n  return params => {\n    var _stableStringify, _options$cacheImpleme3;\n\n    const cachedSelector = selectorCache.get(params);\n\n    if (cachedSelector != null) {\n      return cachedSelector;\n    }\n\n    const myKey = `${options.key}__selectorFamily/${(_stableStringify = Recoil_stableStringify(params, {\n      // It is possible to use functions in parameters if the user uses\n      // a cache with reference equality thanks to the incrementing index.\n      allowFunctions: true\n    })) !== null && _stableStringify !== void 0 ? _stableStringify : 'void'}/${nextIndex++}`; // Append index in case values serialize to the same key string\n\n    const myGet = callbacks => options.get(params)(callbacks);\n\n    const myCacheImplementation = (_options$cacheImpleme3 = options.cacheImplementation_UNSTABLE) === null || _options$cacheImpleme3 === void 0 ? void 0 : _options$cacheImpleme3.call(options);\n    let newSelector;\n\n    if (options.set != null) {\n      const set = options.set;\n\n      const mySet = (callbacks, newValue) => set(params)(callbacks, newValue);\n\n      newSelector = Recoil_selector({\n        key: myKey,\n        get: myGet,\n        set: mySet,\n        cacheImplementation_UNSTABLE: myCacheImplementation,\n        dangerouslyAllowMutability: options.dangerouslyAllowMutability\n      });\n    } else {\n      newSelector = Recoil_selector({\n        key: myKey,\n        get: myGet,\n        cacheImplementation_UNSTABLE: myCacheImplementation,\n        dangerouslyAllowMutability: options.dangerouslyAllowMutability\n      });\n    }\n\n    selectorCache = selectorCache.set(params, newSelector);\n    return newSelector;\n  };\n}\n/* eslint-enable no-redeclare */\n\n\nvar Recoil_selectorFamily = selectorFamily;\n\n// @fb-only: import type {ScopeRules} from './Recoil_ScopedAtom';\n\n\n\n\nconst {\n  DEFAULT_VALUE: DEFAULT_VALUE$5,\n  DefaultValue: DefaultValue$2\n} = Recoil_Node;\n\n\n\n\n\n // @fb-only: const {parameterizedScopedAtomLegacy} = require('./Recoil_ScopedAtom');\n\n\n\n\nfunction isSuperset(setA, setB) {\n  return Recoil_everySet(setB, b => setA.has(b));\n}\n\nconst pick = (object, chosenKeys) => Array.from(chosenKeys).reduce((obj, key) => ({ ...obj,\n  [key]: object[key]\n}), {});\n\nfunction getParameterizedValue_DEPRECATED(baseValue, parameter) {\n  // Allow simple atoms to be upgraded to atomFamilies\n  if (!(baseValue instanceof Recoil_ParameterizedAtomTaggedValue_DEPRECATED)) {\n    return baseValue;\n  } // Legacy ParameterizedAtomTaggedValue only supported object type parameters\n\n\n  if (typeof parameter !== 'object' || parameter == null || Array.isArray(parameter)) {\n    return DEFAULT_VALUE$5;\n  }\n\n  const entries = baseValue.value;\n  const parameterKeys = new Set(Object.keys(parameter));\n\n  for (const [entryParameterKeys, entryMap] of entries) {\n    if (isSuperset(parameterKeys, entryParameterKeys)) {\n      const contextOrSubcontext = parameterKeys.size === entryParameterKeys.size // if true they are equal\n      ? parameter : pick(parameter, entryParameterKeys);\n      const value = entryMap.get(Recoil_stableStringify(contextOrSubcontext));\n\n      if (value !== undefined) {\n        return value;\n      }\n    }\n  }\n\n  return DEFAULT_VALUE$5;\n}\n\nfunction mapPersistenceSettings_DEPRECATED(settings) {\n  if (settings == null) {\n    return undefined;\n  }\n\n  const { ...passthrough\n  } = settings;\n  return { ...passthrough,\n    validator: storedValue => {\n      if (storedValue instanceof Recoil_ParameterizedAtomTaggedValue_DEPRECATED) {\n        return new Recoil_ParameterizedAtomTaggedValue_DEPRECATED(storedValue.value.filter(([keys, map]) => keys instanceof Set && map instanceof Map).map(([keys, map]) => [keys, Array.from(map.entries()).reduce((acc, [k, v]) => {\n          const validatedValue = passthrough.validator(v, DEFAULT_VALUE$5);\n\n          if (validatedValue instanceof DefaultValue$2) {\n            return acc;\n          }\n\n          acc.set(k, validatedValue);\n          return acc;\n        }, new Map())]));\n      } else {\n        return passthrough.validator(storedValue, DEFAULT_VALUE$5);\n      }\n    }\n  };\n} // Process scopeRules to handle any entries which are functions taking parameters\n/*\nA function which returns an atom based on the input parameter.\n\nEach unique parameter returns a unique atom. E.g.,\n\n  const f = atomFamily(...);\n  f({a: 1}) => an atom\n  f({a: 2}) => a different atom\n\nThis allows components to persist local, private state using atoms.  Each\ninstance of the component may have a different key, which it uses as the\nparameter for a family of atoms; in this way, each component will have\nits own atom not shared by other instances.  These state keys may be composed\ninto children's state keys as well.\n*/\n\n\nfunction atomFamily(options) {\n  let atomCache = Recoil_cacheWithValueEquality(); // An atom to represent any legacy atoms that we can upgrade to an atomFamily\n\n  const legacyAtomOptions = {\n    key: options.key,\n    // Legacy atoms just used the plain key directly\n    default: DEFAULT_VALUE$5,\n    // TODO Drop support for ParameterizedAtomTaggedValue_DEPRECATED June 2020\n    persistence_UNSTABLE: mapPersistenceSettings_DEPRECATED(options.persistence_UNSTABLE)\n  };\n  let legacyAtom; // prettier-ignore\n  // @fb-only: if (\n  // @fb-only: options.scopeRules_APPEND_ONLY_READ_THE_DOCS\n  // @fb-only: ) {\n  // @fb-only: legacyAtom = parameterizedScopedAtomLegacy<\n  // @fb-only: StoredBaseValue_DEPRECATED<T> | DefaultValue,\n  // @fb-only: P,\n  // @fb-only: >({\n  // @fb-only: ...legacyAtomOptions,\n  // @fb-only: scopeRules_APPEND_ONLY_READ_THE_DOCS:\n  // @fb-only: options.scopeRules_APPEND_ONLY_READ_THE_DOCS,\n  // @fb-only: });\n  // @fb-only: } else {\n\n  legacyAtom = Recoil_atom(legacyAtomOptions); // @fb-only: }\n  // Selector to calculate the default value based on any persisted legacy atoms\n  // that were upgraded to a atomFamily\n\n  const atomFamilyDefault = Recoil_selectorFamily({\n    key: `${options.key}__atomFamily/Default`,\n    get: param => ({\n      get\n    }) => {\n      const legacyValue = get(typeof legacyAtom === 'function' ? legacyAtom(param) : legacyAtom);\n\n      if (!(legacyValue instanceof DefaultValue$2)) {\n        // Atom was upgraded from a non-parameterized atom\n        // or a legacy ParameterizedAtomTaggedValue\n        // TODO Drop support for ParameterizedAtomTaggedValue_DEPRECATED June 2020\n        const upgradedValue = getParameterizedValue_DEPRECATED(legacyValue, param);\n\n        if (!(upgradedValue instanceof DefaultValue$2)) {\n          return upgradedValue;\n        }\n      } // There's no legacy atom value, so use the user-specified default\n\n\n      return typeof options.default === 'function' ? // The default was parameterized\n      // Flow doesn't know that T isn't a function, so we need to case to any\n      options.default(param) // flowlint-line unclear-type:off\n      : // Default may be a static value, promise, or RecoilValue\n      options.default;\n    },\n    dangerouslyAllowMutability: options.dangerouslyAllowMutability\n  }); // Simple atomFamily implementation to cache individual atoms based\n  // on the parameter value equality.\n\n  return params => {\n    var _stableStringify;\n\n    const cachedAtom = atomCache.get(params);\n\n    if (cachedAtom != null) {\n      return cachedAtom;\n    }\n\n    const newAtom = Recoil_atom({\n      key: `${options.key}__${(_stableStringify = Recoil_stableStringify(params)) !== null && _stableStringify !== void 0 ? _stableStringify : 'void'}`,\n      default: atomFamilyDefault(params),\n      // prettier-ignore\n      // @fb-only: scopeRules_APPEND_ONLY_READ_THE_DOCS: mapScopeRules(\n      // @fb-only: options.scopeRules_APPEND_ONLY_READ_THE_DOCS,\n      // @fb-only: params,\n      // @fb-only: ),\n      persistence_UNSTABLE: options.persistence_UNSTABLE,\n      dangerouslyAllowMutability: options.dangerouslyAllowMutability\n    });\n    atomCache = atomCache.set(params, newAtom);\n    return newAtom;\n  };\n}\n\nvar Recoil_atomFamily = atomFamily;\n\n// flowlint-next-line unclear-type:off\n\n\nconst constantSelector = Recoil_selectorFamily({\n  key: '__constant',\n  get: constant => () => constant,\n  cacheImplementationForParams_UNSTABLE: Recoil_cacheWithReferenceEquality\n}); // Function that returns a selector which always produces the\n// same constant value.  It may be called multiple times with the\n// same value, based on reference equality, and will provide the\n// same selector.\n\nfunction constSelector(constant) {\n  return constantSelector(constant);\n}\n\nvar Recoil_constSelector = constSelector;\n\n// flowlint-next-line unclear-type:off\n\n\nconst throwingSelector = Recoil_selectorFamily({\n  key: '__error',\n  get: message => () => {\n    throw new Error(message);\n  },\n  cacheImplementationForParams_UNSTABLE: Recoil_cacheWithReferenceEquality\n}); // Function that returns a selector which always throws an error\n// with the provided message.\n\nfunction errorSelector(message) {\n  return throwingSelector(message);\n}\n\nvar Recoil_errorSelector = errorSelector;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Wraps another recoil value and prevents writing to it.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction readOnlySelector(atom) {\n  // flowlint-next-line unclear-type: off\n  return atom;\n}\n\nvar Recoil_readOnlySelector = readOnlySelector;\n\nconst {\n  loadableWithError: loadableWithError$2,\n  loadableWithPromise: loadableWithPromise$2,\n  loadableWithValue: loadableWithValue$3\n} = Recoil_Loadable;\n\n\n\n /////////////////\n//  TRUTH TABLE\n/////////////////\n// Dependencies        waitForNone         waitForAny        waitForAll\n//  [loading, loading]  [Promise, Promise]  Promise           Promise\n//  [value, loading]    [value, Promise]    [value, Promise]  Promise\n//  [value, value]      [value, value]      [value, value]    [value, value]\n//\n//  [error, loading]    [Error, Promise]    Promise           Error\n//  [error, error]      [Error, Error]      Error             Error\n//  [value, error]      [value, Error]      [value, Error]    Error\n// Issue parallel requests for all dependencies and return the current\n// status if they have results, have some error, or are still pending.\n\n\nfunction concurrentRequests(getRecoilValue, deps) {\n  const results = Array(deps.length).fill(undefined);\n  const exceptions = Array(deps.length).fill(undefined);\n\n  for (const [i, dep] of deps.entries()) {\n    try {\n      results[i] = getRecoilValue(dep);\n    } catch (e) {\n      // exceptions can either be Promises of pending results or real errors\n      exceptions[i] = e;\n    }\n  }\n\n  return [results, exceptions];\n}\n\nfunction isError(exp) {\n  return exp != null && !Recoil_isPromise(exp);\n}\n\nfunction unwrapDependencies(dependencies) {\n  return Array.isArray(dependencies) ? dependencies : Object.getOwnPropertyNames(dependencies).map(key => dependencies[key]);\n}\n\nfunction wrapResults(dependencies, results) {\n  return Array.isArray(dependencies) ? results : // Object.getOwnPropertyNames() has consistent key ordering with ES6\n  Object.getOwnPropertyNames(dependencies).reduce((out, key, idx) => ({ ...out,\n    [key]: results[idx]\n  }), {});\n}\n\nfunction wrapLoadables(dependencies, results, exceptions) {\n  const output = exceptions.map((exception, idx) => exception == null ? loadableWithValue$3(results[idx]) : Recoil_isPromise(exception) ? loadableWithPromise$2(exception) : loadableWithError$2(exception));\n  return wrapResults(dependencies, output);\n} // Selector that requests all dependencies in parallel and immediately returns\n// current results without waiting.\n\n\nconst waitForNone = Recoil_selectorFamily({\n  key: '__waitForNone',\n  get: dependencies => ({\n    get\n  }) => {\n    // Issue requests for all dependencies in parallel.\n    const deps = unwrapDependencies(dependencies);\n    const [results, exceptions] = concurrentRequests(get, deps); // Always return the current status of the results; never block.\n\n    return wrapLoadables(dependencies, results, exceptions);\n  }\n}); // Selector that requests all dependencies in parallel and waits for at least\n// one to be available before returning results.  It will only error if all\n// dependencies have errors.\n\nconst waitForAny = Recoil_selectorFamily({\n  key: '__waitForAny',\n  get: dependencies => ({\n    get\n  }) => {\n    // Issue requests for all dependencies in parallel.\n    // Exceptions can either be Promises of pending results or real errors\n    const deps = unwrapDependencies(dependencies);\n    const [results, exceptions] = concurrentRequests(get, deps); // If any results are available, return the current status\n\n    if (exceptions.some(exp => exp == null)) {\n      return wrapLoadables(dependencies, results, exceptions);\n    } // Since we are waiting for any results, only throw an error if all\n    // dependencies have an error.  Then, throw the first one.\n\n\n    if (exceptions.every(isError)) {\n      throw exceptions.find(isError);\n    }\n\n    {\n      throw new Promise((resolve, reject) => {\n        for (const [i, exp] of exceptions.entries()) {\n          if (Recoil_isPromise(exp)) {\n            exp.then(result => {\n              results[i] = result;\n              exceptions[i] = null;\n              resolve(wrapLoadables(dependencies, results, exceptions));\n            }).catch(error => {\n              exceptions[i] = error;\n\n              if (exceptions.every(isError)) {\n                reject(exceptions[0]);\n              }\n            });\n          }\n        }\n      });\n    }\n  }\n}); // Selector that requests all dependencies in parallel and waits for all to be\n// available before returning a value.  It will error if any dependencies error.\n\nconst waitForAll = Recoil_selectorFamily({\n  key: '__waitForAll',\n  get: dependencies => ({\n    get\n  }) => {\n    // Issue requests for all dependencies in parallel.\n    // Exceptions can either be Promises of pending results or real errors\n    const deps = unwrapDependencies(dependencies);\n    const [results, exceptions] = concurrentRequests(get, deps); // If all results are available, return the results\n\n    if (exceptions.every(exp => exp == null)) {\n      return wrapResults(dependencies, results);\n    } // If we have any errors, throw the first error\n\n\n    const error = exceptions.find(isError);\n\n    if (error != null) {\n      throw error;\n    }\n\n    {\n      throw Promise.all(exceptions).then(results => wrapResults(dependencies, results));\n    }\n  }\n});\nconst noWait = Recoil_selectorFamily({\n  key: '__noWait',\n  get: dependency => ({\n    get\n  }) => {\n    try {\n      return loadableWithValue$3(get(dependency));\n    } catch (exception) {\n      return Recoil_isPromise(exception) ? loadableWithPromise$2(exception) : loadableWithError$2(exception);\n    }\n  }\n});\nvar Recoil_WaitFor = {\n  waitForNone,\n  waitForAny,\n  waitForAll,\n  noWait\n};\n\nconst {\n  DefaultValue: DefaultValue$3\n} = Recoil_Node;\n\nconst {\n  RecoilRoot: RecoilRoot$1\n} = Recoil_RecoilRoot_react;\n\nconst {\n  isRecoilValue: isRecoilValue$4\n} = Recoil_RecoilValue$1;\n\nconst {\n  useGotoRecoilSnapshot: useGotoRecoilSnapshot$1,\n  useRecoilCallback: useRecoilCallback$1,\n  useRecoilSnapshot: useRecoilSnapshot$1,\n  useRecoilState: useRecoilState$1,\n  useRecoilStateLoadable: useRecoilStateLoadable$1,\n  useRecoilTransactionObserver: useRecoilTransactionObserver$1,\n  useRecoilValue: useRecoilValue$1,\n  useRecoilValueLoadable: useRecoilValueLoadable$1,\n  useResetRecoilState: useResetRecoilState$1,\n  useSetRecoilState: useSetRecoilState$1,\n  useSetUnvalidatedAtomValues: useSetUnvalidatedAtomValues$1,\n  useTransactionObservation_DEPRECATED: useTransactionObservation_DEPRECATED$1\n} = Recoil_Hooks;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst {\n  noWait: noWait$1,\n  waitForAll: waitForAll$1,\n  waitForAny: waitForAny$1,\n  waitForNone: waitForNone$1\n} = Recoil_WaitFor;\n\nvar Recoil_index = {\n  // Types\n  DefaultValue: DefaultValue$3,\n  // Components\n  RecoilRoot: RecoilRoot$1,\n  // RecoilValues\n  atom: Recoil_atom,\n  selector: Recoil_selector,\n  // Convenience RecoilValues\n  atomFamily: Recoil_atomFamily,\n  selectorFamily: Recoil_selectorFamily,\n  constSelector: Recoil_constSelector,\n  errorSelector: Recoil_errorSelector,\n  readOnlySelector: Recoil_readOnlySelector,\n  // Hooks that accept RecoilValues\n  useRecoilValue: useRecoilValue$1,\n  useRecoilValueLoadable: useRecoilValueLoadable$1,\n  useRecoilState: useRecoilState$1,\n  useRecoilStateLoadable: useRecoilStateLoadable$1,\n  useSetRecoilState: useSetRecoilState$1,\n  useResetRecoilState: useResetRecoilState$1,\n  // Hooks for asynchronous Recoil\n  useRecoilCallback: useRecoilCallback$1,\n  // Hooks for Snapshots\n  useGotoRecoilSnapshot: useGotoRecoilSnapshot$1,\n  useRecoilSnapshot: useRecoilSnapshot$1,\n  useRecoilTransactionObserver_UNSTABLE: useRecoilTransactionObserver$1,\n  useTransactionObservation_UNSTABLE: useTransactionObservation_DEPRECATED$1,\n  useSetUnvalidatedAtomValues_UNSTABLE: useSetUnvalidatedAtomValues$1,\n  // Concurrency Helpers\n  noWait: noWait$1,\n  waitForNone: waitForNone$1,\n  waitForAny: waitForAny$1,\n  waitForAll: waitForAll$1,\n  // Other functions\n  isRecoilValue: isRecoilValue$4\n};\nvar Recoil_index_1 = Recoil_index.DefaultValue;\nvar Recoil_index_2 = Recoil_index.RecoilRoot;\nvar Recoil_index_3 = Recoil_index.atom;\nvar Recoil_index_4 = Recoil_index.selector;\nvar Recoil_index_5 = Recoil_index.atomFamily;\nvar Recoil_index_6 = Recoil_index.selectorFamily;\nvar Recoil_index_7 = Recoil_index.constSelector;\nvar Recoil_index_8 = Recoil_index.errorSelector;\nvar Recoil_index_9 = Recoil_index.readOnlySelector;\nvar Recoil_index_10 = Recoil_index.useRecoilValue;\nvar Recoil_index_11 = Recoil_index.useRecoilValueLoadable;\nvar Recoil_index_12 = Recoil_index.useRecoilState;\nvar Recoil_index_13 = Recoil_index.useRecoilStateLoadable;\nvar Recoil_index_14 = Recoil_index.useSetRecoilState;\nvar Recoil_index_15 = Recoil_index.useResetRecoilState;\nvar Recoil_index_16 = Recoil_index.useRecoilCallback;\nvar Recoil_index_17 = Recoil_index.useGotoRecoilSnapshot;\nvar Recoil_index_18 = Recoil_index.useRecoilSnapshot;\nvar Recoil_index_19 = Recoil_index.useRecoilTransactionObserver_UNSTABLE;\nvar Recoil_index_20 = Recoil_index.useTransactionObservation_UNSTABLE;\nvar Recoil_index_21 = Recoil_index.useSetUnvalidatedAtomValues_UNSTABLE;\nvar Recoil_index_22 = Recoil_index.noWait;\nvar Recoil_index_23 = Recoil_index.waitForNone;\nvar Recoil_index_24 = Recoil_index.waitForAny;\nvar Recoil_index_25 = Recoil_index.waitForAll;\nvar Recoil_index_26 = Recoil_index.isRecoilValue;\n\nexports.DefaultValue = Recoil_index_1;\nexports.RecoilRoot = Recoil_index_2;\nexports.atom = Recoil_index_3;\nexports.atomFamily = Recoil_index_5;\nexports.constSelector = Recoil_index_7;\nexports.default = Recoil_index;\nexports.errorSelector = Recoil_index_8;\nexports.isRecoilValue = Recoil_index_26;\nexports.noWait = Recoil_index_22;\nexports.readOnlySelector = Recoil_index_9;\nexports.selector = Recoil_index_4;\nexports.selectorFamily = Recoil_index_6;\nexports.useGotoRecoilSnapshot = Recoil_index_17;\nexports.useRecoilCallback = Recoil_index_16;\nexports.useRecoilSnapshot = Recoil_index_18;\nexports.useRecoilState = Recoil_index_12;\nexports.useRecoilStateLoadable = Recoil_index_13;\nexports.useRecoilTransactionObserver_UNSTABLE = Recoil_index_19;\nexports.useRecoilValue = Recoil_index_10;\nexports.useRecoilValueLoadable = Recoil_index_11;\nexports.useResetRecoilState = Recoil_index_15;\nexports.useSetRecoilState = Recoil_index_14;\nexports.useSetUnvalidatedAtomValues_UNSTABLE = Recoil_index_21;\nexports.useTransactionObservation_UNSTABLE = Recoil_index_20;\nexports.waitForAll = Recoil_index_25;\nexports.waitForAny = Recoil_index_24;\nexports.waitForNone = Recoil_index_23;\n"]},"metadata":{},"sourceType":"script"}