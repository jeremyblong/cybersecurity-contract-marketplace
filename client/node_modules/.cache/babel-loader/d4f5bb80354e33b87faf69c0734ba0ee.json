{"ast":null,"code":"export function getCroppedImg(image, crop, mimetype) {\n  const canvas = document.createElement(\"canvas\");\n  const scaleX = image.naturalWidth / image.width;\n  const scaleY = image.naturalHeight / image.height;\n  canvas.width = crop.width;\n  canvas.height = crop.height;\n  const ctx = canvas.getContext(\"2d\"); // New lines to be added\n\n  const pixelRatio = window.devicePixelRatio;\n  canvas.width = crop.width * pixelRatio;\n  canvas.height = crop.height * pixelRatio;\n  ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n  ctx.imageSmoothingQuality = \"high\";\n  const img = new Image();\n\n  img.onload = function () {\n    console.log(\"loaded :) !\");\n  }; // ctx.drawImage(\n  //   image,\n  //   crop.x * scaleX,\n  //   crop.y * scaleY,\n  //   crop.width * scaleX,\n  //   crop.height * scaleY,\n  //   0,\n  //   0,\n  //   crop.width,\n  //   crop.height\n  // );\n  // // As Base64 string\n  // const base64Image = canvas.toDataURL(mimetype);\n  // return base64Image;\n\n} // export function getCroppedImg(image, crop, mimetype) {\n//   const canvas = document.createElement(\"canvas\");\n//   const scaleX = image.naturalWidth / image.width;\n//   const scaleY = image.naturalHeight / image.height;\n//   canvas.width = crop.width;\n//   canvas.height = crop.height;\n//   const ctx = canvas.getContext(\"2d\");\n//   // New lines to be added\n//   const pixelRatio = window.devicePixelRatio;\n//   canvas.width = crop.width * pixelRatio;\n//   canvas.height = crop.height * pixelRatio;\n//   ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n//   ctx.imageSmoothingQuality = \"high\";\n//   let img = new Image();\n//   const myResult = new Promise((resolve, reject) => {\n//     img.onload = function () {\n//       img.src = URL.createObjectURL(image);\n//       ctx.drawImage(\n//         img,\n//         crop.x * scaleX,\n//         crop.y * scaleY,\n//         crop.width * scaleX,\n//         crop.height * scaleY,\n//         0,\n//         0,\n//         crop.width,\n//         crop.height\n//       );\n//       resolve();\n//     }\n//   }).then((passedData) => {\n//     console.log(\"IMG :\", passedData);\n//     const base64Image = canvas.toDataURL(mimetype);\n//     return base64Image;\n//   })\n//   return myResult.then((dataaa) => {\n//     console.log(\"dataaa\", dataaa);\n//     return dataaa;\n//   });\n// }\n////////////////////////////////\n// export const getCroppedImg = (image, crop, mimetype) => {\n//   const canvas = document.createElement(\"canvas\");\n//   const scaleX = image.naturalWidth / image.width;\n//   const scaleY = image.naturalHeight / image.height;\n//   canvas.width = crop.width;\n//   canvas.height = crop.height;\n//   const ctx = canvas.getContext(\"2d\");\n//   // New lines to be added\n//   const pixelRatio = window.devicePixelRatio;\n//   canvas.width = crop.width * pixelRatio;\n//   canvas.height = crop.height * pixelRatio;\n//   ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n//   ctx.imageSmoothingQuality = \"high\";\n//   // ctx.drawImage(\n//   //   image,\n//   //   crop.x * scaleX,\n//   //   crop.y * scaleY,\n//   //   crop.width * scaleX,\n//   //   crop.height * scaleY,\n//   //   0,\n//   //   0,\n//   //   crop.width,\n//   //   crop.height\n//   // );\n//   // convert to base64\n//   // const base64Image = canvas.toDataURL(mimetype);\n//   // return base64Image;\n//   return new Promise((resolve, reject) => {\n//     canvas.toBlob(\n//       (blob) => {\n//         // blob.name = fileName;\n//         const img = new Image();\n//         img.onload = function() {\n//           console.log(\"onload ran!\");\n//           // ctx.drawImage(img, scaleX, scaleY);  \n//             image,\n//             crop.x * scaleX,\n//             crop.y * scaleY,\n//             crop.width * scaleX,\n//             crop.height * scaleY,\n//             0,\n//             0,\n//             crop.width,\n//             crop.height  \n//         }  \n//         img.src = URL.createObjectURL(image);\n//         // resolve(blob);\n//       },\n//       \"image/jpeg\",\n//       1\n//     );\n//   });\n// }","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/profile/employer/view/generalDetails/helpers/croppingBannerImage/getCroppedImage.js"],"names":["getCroppedImg","image","crop","mimetype","canvas","document","createElement","scaleX","naturalWidth","width","scaleY","naturalHeight","height","ctx","getContext","pixelRatio","window","devicePixelRatio","setTransform","imageSmoothingQuality","img","Image","onload","console","log"],"mappings":"AAAA,OAAO,SAASA,aAAT,CAAuBC,KAAvB,EAA8BC,IAA9B,EAAoCC,QAApC,EAA8C;AACnD,QAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACA,QAAMC,MAAM,GAAGN,KAAK,CAACO,YAAN,GAAqBP,KAAK,CAACQ,KAA1C;AACA,QAAMC,MAAM,GAAGT,KAAK,CAACU,aAAN,GAAsBV,KAAK,CAACW,MAA3C;AACAR,EAAAA,MAAM,CAACK,KAAP,GAAeP,IAAI,CAACO,KAApB;AACAL,EAAAA,MAAM,CAACQ,MAAP,GAAgBV,IAAI,CAACU,MAArB;AACA,QAAMC,GAAG,GAAGT,MAAM,CAACU,UAAP,CAAkB,IAAlB,CAAZ,CANmD,CAQnD;;AACA,QAAMC,UAAU,GAAGC,MAAM,CAACC,gBAA1B;AACAb,EAAAA,MAAM,CAACK,KAAP,GAAeP,IAAI,CAACO,KAAL,GAAaM,UAA5B;AACAX,EAAAA,MAAM,CAACQ,MAAP,GAAgBV,IAAI,CAACU,MAAL,GAAcG,UAA9B;AACAF,EAAAA,GAAG,CAACK,YAAJ,CAAiBH,UAAjB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmCA,UAAnC,EAA+C,CAA/C,EAAkD,CAAlD;AACAF,EAAAA,GAAG,CAACM,qBAAJ,GAA4B,MAA5B;AAEA,QAAMC,GAAG,GAAG,IAAIC,KAAJ,EAAZ;;AAEAD,EAAAA,GAAG,CAACE,MAAJ,GAAa,YAAW;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD,GAFD,CAjBmD,CAqBnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAED,C,CAGD;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["export function getCroppedImg(image, crop, mimetype) {\n  const canvas = document.createElement(\"canvas\");\n  const scaleX = image.naturalWidth / image.width;\n  const scaleY = image.naturalHeight / image.height;\n  canvas.width = crop.width;\n  canvas.height = crop.height;\n  const ctx = canvas.getContext(\"2d\");\n\n  // New lines to be added\n  const pixelRatio = window.devicePixelRatio;\n  canvas.width = crop.width * pixelRatio;\n  canvas.height = crop.height * pixelRatio;\n  ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n  ctx.imageSmoothingQuality = \"high\";\n\n  const img = new Image();\n\n  img.onload = function() {\n    console.log(\"loaded :) !\");\n  }\n\n  // ctx.drawImage(\n  //   image,\n  //   crop.x * scaleX,\n  //   crop.y * scaleY,\n  //   crop.width * scaleX,\n  //   crop.height * scaleY,\n  //   0,\n  //   0,\n  //   crop.width,\n  //   crop.height\n  // );\n\n  // // As Base64 string\n  // const base64Image = canvas.toDataURL(mimetype);\n\n  // return base64Image;\n\n}\n\n\n// export function getCroppedImg(image, crop, mimetype) {\n//   const canvas = document.createElement(\"canvas\");\n//   const scaleX = image.naturalWidth / image.width;\n//   const scaleY = image.naturalHeight / image.height;\n//   canvas.width = crop.width;\n//   canvas.height = crop.height;\n//   const ctx = canvas.getContext(\"2d\");\n\n//   // New lines to be added\n//   const pixelRatio = window.devicePixelRatio;\n//   canvas.width = crop.width * pixelRatio;\n//   canvas.height = crop.height * pixelRatio;\n//   ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n//   ctx.imageSmoothingQuality = \"high\";\n\n//   let img = new Image();\n\n//   const myResult = new Promise((resolve, reject) => {\n\n//     img.onload = function () {\n//       img.src = URL.createObjectURL(image);\n//       ctx.drawImage(\n//         img,\n//         crop.x * scaleX,\n//         crop.y * scaleY,\n//         crop.width * scaleX,\n//         crop.height * scaleY,\n//         0,\n//         0,\n//         crop.width,\n//         crop.height\n//       );\n//       resolve();\n//     }\n//   }).then((passedData) => {\n//     console.log(\"IMG :\", passedData);\n    \n//     const base64Image = canvas.toDataURL(mimetype);\n\n//     return base64Image;\n//   })\n\n//   return myResult.then((dataaa) => {\n//     console.log(\"dataaa\", dataaa);\n\n//     return dataaa;\n//   });\n// }\n\n\n\n////////////////////////////////\n\n// export const getCroppedImg = (image, crop, mimetype) => {\n//   const canvas = document.createElement(\"canvas\");\n//   const scaleX = image.naturalWidth / image.width;\n//   const scaleY = image.naturalHeight / image.height;\n//   canvas.width = crop.width;\n//   canvas.height = crop.height;\n//   const ctx = canvas.getContext(\"2d\");\n\n//   // New lines to be added\n//   const pixelRatio = window.devicePixelRatio;\n//   canvas.width = crop.width * pixelRatio;\n//   canvas.height = crop.height * pixelRatio;\n//   ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n//   ctx.imageSmoothingQuality = \"high\";\n\n//   // ctx.drawImage(\n//   //   image,\n//   //   crop.x * scaleX,\n//   //   crop.y * scaleY,\n//   //   crop.width * scaleX,\n//   //   crop.height * scaleY,\n//   //   0,\n//   //   0,\n//   //   crop.width,\n//   //   crop.height\n//   // );\n\n//   // convert to base64\n//   // const base64Image = canvas.toDataURL(mimetype);\n\n//   // return base64Image;\n\n//   return new Promise((resolve, reject) => {\n//     canvas.toBlob(\n//       (blob) => {\n//         // blob.name = fileName;\n\n//         const img = new Image();\n\n//         img.onload = function() {\n//           console.log(\"onload ran!\");\n//           // ctx.drawImage(img, scaleX, scaleY);  \n//             image,\n//             crop.x * scaleX,\n//             crop.y * scaleY,\n//             crop.width * scaleX,\n//             crop.height * scaleY,\n//             0,\n//             0,\n//             crop.width,\n//             crop.height  \n//         }  \n//         img.src = URL.createObjectURL(image);\n//         // resolve(blob);\n//       },\n//       \"image/jpeg\",\n//       1\n//     );\n//   });\n// }"]},"metadata":{},"sourceType":"module"}