{"ast":null,"code":"import React, { Component } from 'react';\nimport * as SendBird from \"sendbird\";\nimport { connect } from \"react-redux\";\nimport { saveSendbirdInitialData } from \"./redux/actions/messaging/initialization/initSBLogic.js\";\nimport _ from \"lodash\";\nconst sb = new SendBird({\n  appId: process.env.REACT_APP_SENDBIRD_APP_ID,\n  localCacheEnabled: true\n});\n\nclass MountingLogicRedux extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      profilePic: \"\"\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      saveSendbirdInitialData,\n      authenticated,\n      accountData,\n      SBData\n    } = this.props;\n\n    if (prevProps.SBData !== SBData) {\n      console.log(\"prevProps\", prevProps, prevState, SBData);\n      saveSendbirdInitialData(sb);\n    }\n  }\n\n  render() {\n    const {\n      authenticated,\n      accountData\n    } = this.props; // run other SENDBIRD Logic init\n\n    if (authenticated === true) {\n      console.log(\"validating - connecting user MESSAGING logic...\", sb);\n      sb.connect(accountData.uniqueId, (user, error) => {\n        if (error) {\n          // Handle error.\n          console.log(\"Messaging connection error... :\", error);\n        } // The user is connected to Sendbird server.\n\n\n        console.log(`The user - ${accountData.uniqueId} - is connected to Sendbird server`, user);\n        const reversed = accountData.profilePicsVideos.reverse();\n\n        for (let index = 0; index < reversed.length; index++) {\n          const item = reversed[index];\n\n          if (item.type.includes(\"image\")) {\n            this.setState({\n              profilePic: `${process.env.REACT_APP_ASSET_LINK}/${item.link}`\n            });\n            break;\n          }\n        } // change mounted state to prevent further renders (will revert back to FALSE upon page refresh)\n\n\n        sb.updateCurrentUserInfo(`${accountData.firstName} ${accountData.lastName}`, this.state.profilePic, (response, error) => {\n          if (error) {\n            // Handle error.\n            console.log(\"error while updating to lastest info!\", error);\n          }\n        });\n      });\n    }\n\n    return null;\n  }\n\n}\n\nconst mapStateToProps = state => {\n  console.log(\"Stateeeeeee\", state);\n  return {\n    authenticated: _.has(state.auth.data, \"accountType\") ? true : false,\n    accountData: state.auth.data,\n    SBData: state.sendbirdInitData.sendbirdInitData\n  };\n};\n\nexport default connect(mapStateToProps, {\n  saveSendbirdInitialData\n})(MountingLogicRedux);","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/mountingLogicRedux.js"],"names":["React","Component","SendBird","connect","saveSendbirdInitialData","_","sb","appId","process","env","REACT_APP_SENDBIRD_APP_ID","localCacheEnabled","MountingLogicRedux","constructor","props","state","profilePic","componentDidUpdate","prevProps","prevState","authenticated","accountData","SBData","console","log","render","uniqueId","user","error","reversed","profilePicsVideos","reverse","index","length","item","type","includes","setState","REACT_APP_ASSET_LINK","link","updateCurrentUserInfo","firstName","lastName","response","mapStateToProps","has","auth","data","sendbirdInitData"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as SendBird from \"sendbird\";\nimport { connect } from \"react-redux\";\nimport { saveSendbirdInitialData } from \"./redux/actions/messaging/initialization/initSBLogic.js\";\nimport _ from \"lodash\";\n\n\nconst sb = new SendBird({ appId: process.env.REACT_APP_SENDBIRD_APP_ID, localCacheEnabled: true });\n\nclass MountingLogicRedux extends Component {\nconstructor(props) {\n    super(props);\n\n    this.state = {\n        profilePic: \"\"\n    }\n}\n    componentDidUpdate(prevProps, prevState) {\n        const { saveSendbirdInitialData, authenticated, accountData, SBData } = this.props;\n\n        if (prevProps.SBData !== SBData) {\n            console.log(\"prevProps\", prevProps, prevState, SBData);\n\n            saveSendbirdInitialData(sb);\n        }\n    }\n    render () {\n        const { authenticated, accountData } = this.props;\n        // run other SENDBIRD Logic init\n        if (authenticated === true) {\n            console.log(\"validating - connecting user MESSAGING logic...\", sb);\n            \n            sb.connect(accountData.uniqueId, (user, error) => {\n                if (error) {\n                    // Handle error.\n                    console.log(\"Messaging connection error... :\", error);\n                }\n                // The user is connected to Sendbird server.\n                console.log(`The user - ${accountData.uniqueId} - is connected to Sendbird server`, user);\n\n                const reversed = accountData.profilePicsVideos.reverse();\n\n                for (let index = 0; index < reversed.length; index++) {\n                    const item = reversed[index];\n                    if (item.type.includes(\"image\")) {\n                        this.setState({\n                            profilePic: `${process.env.REACT_APP_ASSET_LINK}/${item.link}`\n                        })\n                        break;\n                    }\n                }\n                // change mounted state to prevent further renders (will revert back to FALSE upon page refresh)\n                sb.updateCurrentUserInfo(`${accountData.firstName} ${accountData.lastName}`, this.state.profilePic, (response, error) => {\n                    if (error) {\n                        // Handle error.\n                        console.log(\"error while updating to lastest info!\", error);\n                    }\n                });\n            });\n        }\n        return null;\n    }\n}\nconst mapStateToProps = (state) => {\n    console.log(\"Stateeeeeee\", state);\n    return {\n        authenticated: _.has(state.auth.data, \"accountType\") ? true : false,\n        accountData: state.auth.data,\n        SBData: state.sendbirdInitData.sendbirdInitData\n    }\n}\nexport default connect(mapStateToProps, { saveSendbirdInitialData })(MountingLogicRedux);"]},"metadata":{},"sourceType":"module"}