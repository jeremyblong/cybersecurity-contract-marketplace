{"ast":null,"code":"var _jsxFileName = \"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/src/components/dashboard/balanceRelated/topOffBal/topoffBalance.js\";\nimport React, { Fragment, useState, useEffect } from 'react';\nimport \"./styles.css\";\nimport { Container, Row, Col, Card, CardBody, CardHeader, CardFooter, Input, FormGroup, Form, Label, Button } from \"reactstrap\";\nimport Breadcrumb from '../../../../layout/breadcrumb';\nimport Slider from 'rc-slider';\nimport { connect } from \"react-redux\";\nimport Cards from 'react-credit-cards';\nimport Select from 'react-select';\nimport axios from \"axios\";\nimport { NotificationManager } from 'react-notifications';\nimport crypto from \"../../../../utils/crypto.js\";\nimport { confirmAlert } from 'react-confirm-alert';\nconst {\n  encryptString,\n  decryptString,\n  decryptObject,\n  encryptObject\n} = crypto;\n\nconst TopOffBalanceHelper = _ref => {\n  let {\n    userData\n  } = _ref;\n  const [valid, setValidness] = useState(false);\n  const [percentageToBePaid, setPercentageToBePaid] = useState(25);\n  const [cost, setCost] = useState(0);\n  const [previousCardOptions, setPreviousCardOptions] = useState([]);\n  const [selectedChunk, setSelectedChunk] = useState(\"\");\n  const [marks, setMarks] = useState({\n    0: {\n      style: {\n        color: \"blue\"\n      },\n      label: \"$0.00\"\n    },\n    10: {\n      style: {\n        color: \"blue\"\n      },\n      label: \"$125\"\n    },\n    20: {\n      style: {\n        color: \"blue\"\n      },\n      label: \"$250\"\n    },\n    30: {\n      style: {\n        color: \"blue\"\n      },\n      label: \"$375\"\n    },\n    40: {\n      style: {\n        color: \"blue\"\n      },\n      label: \"$500\"\n    },\n    50: {\n      style: {\n        color: \"blue\"\n      },\n      label: \"$625\"\n    },\n    60: {\n      style: {\n        color: \"blue\"\n      },\n      label: \"$750\"\n    },\n    70: {\n      style: {\n        color: \"blue\"\n      },\n      label: \"$875\"\n    },\n    80: {\n      style: {\n        color: \"blue\"\n      },\n      label: \"$1000\"\n    },\n    90: {\n      style: {\n        color: \"blue\"\n      },\n      label: \"$1125\"\n    },\n    100: {\n      style: {\n        color: \"blue\"\n      },\n      label: \"$1250\"\n    }\n  });\n  const [selectedPaymentCard, setSelectedCard] = useState(null);\n  const [cardInfo, setCardInfo] = useState({\n    cvc: \"\",\n    expiry: \"\",\n    focus: \"\",\n    name: \"\",\n    number: \"\",\n    cardType: \"\"\n  });\n\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setSelectedCard(null);\n    setCardInfo(prevState => {\n      return { ...prevState,\n        [name]: value\n      };\n    });\n  };\n\n  console.log(\"setSelectedCard\", selectedPaymentCard);\n\n  const handleSliderValueChange = percentage => {\n    console.log(\"handleSliderValueChange percentage\", percentage);\n    setPercentageToBePaid(percentage);\n  };\n\n  const onAfterChange = percentage => {\n    console.log(\"onAfterChange percentage\", percentage);\n    const totalCost = 1250;\n    const perc = parseFloat(percentage) / 100.0;\n    const converted = totalCost * perc;\n    setCost(converted);\n  };\n\n  const calculateCurrentSelectedCost = percentage => {\n    const totalCost = 1250;\n    const perc = parseFloat(percentage) / 100.0;\n    const converted = totalCost * perc;\n    return `$${converted.toFixed(0)} selected to be deposited into your account immediately!`;\n  };\n\n  useEffect(() => {\n    const config = {\n      params: {\n        id: userData.uniqueId,\n        accountType: userData.accountType\n      }\n    };\n    axios.get(`${process.env.REACT_APP_BASE_URL}/gather/cards/payment/methods/both/accounts`, config).then(res => {\n      if (res.data.message === \"Gathered employer payment cards!\") {\n        console.log(res.data);\n        const {\n          cards\n        } = res.data;\n        const convertedPaymentsArr = [];\n\n        if (typeof cards !== \"undefined\" && cards.length > 0) {\n          for (let index = 0; index < cards.length; index++) {\n            const method = cards[index];\n            const {\n              last4\n            } = method;\n            convertedPaymentsArr.push({\n              label: `**** **** **** ${last4}`,\n              value: method\n            });\n          }\n\n          setPreviousCardOptions(convertedPaymentsArr);\n        } else {\n          console.log(\"other ran!\");\n        }\n      } else {\n        console.log(\"err\", res.data);\n        NotificationManager.warning(\"Failed to fetch your current payment method's on file, please reload this page or contact support if this problem persists...\", \"Failed to load previous method's!\", 4750);\n      }\n    }).catch(err => {\n      console.log(err);\n      NotificationManager.warning(\"Failed to fetch your current payment method's on file, please reload this page or contact support if this problem persists...\", \"Failed to load previous method's!\", 4750);\n    });\n  }, []);\n\n  const handleCardSelectionChange = value => {\n    setSelectedCard(value);\n    setCardInfo({\n      cvc: \"\",\n      expiry: \"\",\n      focus: \"\",\n      name: \"\",\n      number: \"\",\n      cardType: \"\"\n    });\n  };\n\n  const calculateDisabled = () => {\n    const {\n      cvc,\n      expiry,\n      focus,\n      name,\n      number,\n      cardType\n    } = cardInfo;\n\n    if (selectedPaymentCard !== null || valid === true && typeof cvc !== \"undefined\" && cvc.length >= 3 && typeof expiry !== \"undefined\" && expiry.length >= 4 && typeof name !== \"undefined\" && name.length >= 8 && typeof number !== \"undefined\" && number.length >= 10) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  const handleSubmissionDepositFunds = () => {\n    console.log(\"handleSubmissionDepositFunds ran/running!\");\n    confirmAlert({\n      customUI: _ref2 => {\n        let {\n          onClose\n        } = _ref2;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"custom-ui\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"h1\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 21\n          }\n        }, \"Are you sure you'd like to make this deposit?!\"), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 21\n          }\n        }, \"You're about to deposit approx. $\", cost.toFixed(2), \" into your account which will charge the entered/selected card via the form on this page. Please enter the first 12 charactors of your selected card before proceeding to verify authenticity..\"), /*#__PURE__*/React.createElement(\"hr\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 21\n          }\n        }), /*#__PURE__*/React.createElement(FormGroup, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Label, {\n          htmlFor: \"exampleInputPassword2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 25\n          }\n        }, \"Enter the FIRST 12 (twelve) charactor's of your selected card to verify ownership..\"), /*#__PURE__*/React.createElement(Input, {\n          value: selectedChunk,\n          className: \"form-control\",\n          onChange: e => setSelectedChunk(e.target.value),\n          type: \"password\",\n          placeholder: \"Enter the first 12 digits of your selected card\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 25\n          }\n        })), /*#__PURE__*/React.createElement(\"hr\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 21\n          }\n        }), /*#__PURE__*/React.createElement(Button, {\n          disabled: selectedChunk.length >= 13 ? false : true,\n          className: \"btn-square-success\",\n          color: \"success\",\n          style: {\n            width: \"47.5%\"\n          },\n          onClick: () => {\n            submitLogic();\n            onClose();\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 21\n          }\n        }, \"Yes, Make Payment & Deposit Funds!\"), /*#__PURE__*/React.createElement(Button, {\n          className: \"btn-square-danger\",\n          color: \"danger\",\n          style: {\n            width: \"47.5%\"\n          },\n          onClick: () => {\n            onClose();\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 21\n          }\n        }, \"Yes, Cancel!\"));\n      }\n    });\n  };\n\n  const submitLogic = () => {\n    if (typeof cost !== \"undefined\" && cost !== 0) {\n      const config = {\n        id: userData.uniqueId,\n        accountType: userData.accountType,\n        existingCard: selectedPaymentCard !== null ? true : false,\n        cardInfo,\n        cost,\n        selectedPaymentCard: encryptObject(selectedPaymentCard)\n      };\n      axios.post(`${process.env.REACT_APP_BASE_URL}/deposit/funds/account/both/account/types`, config).then(res => {\n        if (res.data.message === \"Successfully deposited funds!\") {\n          console.log(res.data);\n          NotificationManager.success(\"Successfully deposited funds into your account and they are now ACTIVE and AVAILIABLE! Check your account bal to see the reflected/updated changes..\", \"Successfully deposited funds into account & charged card!\", 4750);\n        } else {\n          console.log(\"err\", res.data);\n          NotificationManager.warning(\"An unknown error has occurred while attempting to deposit funds into your account. This error could've originated from a failed payment, database errors or other misc errors. Contact support if the problem persists!\", \"Unknown error has occurred.\", 4750);\n        }\n      }).catch(err => {\n        console.log(err);\n        NotificationManager.warning(\"An unknown error has occurred while attempting to deposit funds into your account. This error could've originated from a failed payment, database errors or other misc errors. Contact support if the problem persists!\", \"Unknown error has occurred.\", 4750);\n      });\n    } else {\n      NotificationManager.info(\"You MUST select a value (number) amount so we know how much you'd like to deposit into your account, please select a value with the slider before proceeding...!\", \"Select a value/number via the slider before continuing!\", 4750);\n    }\n  };\n\n  console.log(\"Cardinfo\", cardInfo);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Breadcrumb, {\n    parent: \"Purchase 'In-App' Currency And/Or Deposit Fund's\",\n    title: \"Deposit funds into your account balance (can be withdrawn at later date)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    className: \"topoff-balance-card-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    className: \"b-l-secondary b-r-secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"title-deposit-funds\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 33\n    }\n  }, \"Deposit funds into your account and/or top-off your balance with more funding!\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 33\n    }\n  }, \"You can deposit fund's into your account to have a positive availiable balance to pay hacker's/contractors, employers, purchase profile boosts, purchase tokens, etc... These funds ARE retreivable and \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 253\n    }\n  }, \"CAN BE WITHDRAWN\"), \" at any point if you wish to clear your current/availiable account balance.\")), /*#__PURE__*/React.createElement(CardBody, {\n    className: \"b-l-info b-r-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"centered-both-ways\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    className: \"dotted-border-col-two-customized\",\n    sm: \"12\",\n    md: \"6\",\n    lg: \"6\",\n    xl: \"6\",\n    style: {\n      marginRight: \"17.5px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 45\n    }\n  }, \"Please select a value that you wish to deposit into your account. \", /*#__PURE__*/React.createElement(\"strong\", {\n    style: {\n      color: \"darkred\",\n      textDecorationLine: \"underline\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 115\n    }\n  }, \"drag the slider\"), \" to the appropriate point, select your payment method & make the desired purchase. You'll balance will be \", /*#__PURE__*/React.createElement(\"strong\", {\n    style: {\n      color: \"darkred\",\n      textDecorationLine: \"underline\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 315\n    }\n  }, \"immediately updated!\")), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 45\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"center-slider-adjustment-bar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 49\n    }\n  }, \"Please drag the marker to the appropriate position marking 'how much' you'd like to depsoit on this transaction..\"), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 49\n    }\n  }), /*#__PURE__*/React.createElement(Slider, {\n    value: percentageToBePaid,\n    startPoint: 0,\n    onAfterChange: onAfterChange,\n    onChange: handleSliderValueChange,\n    marks: marks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 49\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"centered-both-ways\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"current-selected-cost\",\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 53\n    }\n  }, calculateCurrentSelectedCost(percentageToBePaid))))), /*#__PURE__*/React.createElement(Col, {\n    className: \"dotted-border-col-two-customized\",\n    sm: \"12\",\n    md: \"6\",\n    lg: \"6\",\n    xl: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    style: {\n      paddingBottom: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 49\n    }\n  }, \"Select An Existing Registered Card\"), /*#__PURE__*/React.createElement(Select, {\n    value: selectedPaymentCard,\n    onChange: handleCardSelectionChange,\n    options: previousCardOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 49\n    }\n  })), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 45\n    }\n  }), /*#__PURE__*/React.createElement(Form, {\n    className: \"theme-form mega-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    className: \"form-control\",\n    type: \"text\",\n    name: \"name\",\n    value: cardInfo.name,\n    placeholder: \"Name (Full Name - First/Last)\",\n    onChange: e => handleInputChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 53\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    className: \"form-control\",\n    type: \"number\",\n    name: \"number\",\n    value: cardInfo.number,\n    placeholder: \"Enter your card number..\",\n    onChange: e => handleInputChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 53\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    onChange: e => {\n      const value = e.target.value;\n\n      if (value !== \"\") {\n        cardInfo.expiry = value + cardInfo.expiry.substring(2, 5);\n        setSelectedCard(null);\n        setCardInfo(prevState => {\n          return { ...prevState,\n            expiry: cardInfo.expiry\n          };\n        });\n      }\n    },\n    style: {\n      marginLeft: \"15px\"\n    },\n    className: \"form-control digits year-date-format\",\n    name: \"expireMM\",\n    id: \"expireMM\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 61\n    }\n  }, \"Select a month\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"01\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 61\n    }\n  }, \"January\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"02\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 61\n    }\n  }, \"February\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"03\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 61\n    }\n  }, \"March\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"04\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 61\n    }\n  }, \"April\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"05\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 61\n    }\n  }, \"May\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"06\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 61\n    }\n  }, \"June\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"07\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 61\n    }\n  }, \"July\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"08\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 61\n    }\n  }, \"August\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"09\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 61\n    }\n  }, \"September\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"10\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 61\n    }\n  }, \"October\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"11\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 61\n    }\n  }, \"November\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 61\n    }\n  }, \"December\")), /*#__PURE__*/React.createElement(\"select\", {\n    onChange: e => {\n      const value = e.target.value;\n\n      if (value !== \"\") {\n        cardInfo.expiry = cardInfo.expiry.substring(0, 2) + value;\n        setSelectedCard(null);\n        setCardInfo(prevState => {\n          return { ...prevState,\n            expiry: cardInfo.expiry\n          };\n        });\n      }\n    },\n    className: \"form-control digits year-date-format\",\n    name: \"expireYY\",\n    id: \"expireYY\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 61\n    }\n  }, \"Select a year\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"20\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 61\n    }\n  }, \"2020\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"21\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 61\n    }\n  }, \"2021\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"22\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 61\n    }\n  }, \"2022\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"23\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 61\n    }\n  }, \"2023\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"24\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 61\n    }\n  }, \"2024\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"25\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 61\n    }\n  }, \"2025\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"26\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 61\n    }\n  }, \"2026\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"27\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 61\n    }\n  }, \"2027\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"28\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 61\n    }\n  }, \"2028\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"29\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 61\n    }\n  }, \"2029\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"30\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 61\n    }\n  }, \"2030\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"31\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 61\n    }\n  }, \"2031\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"32\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 61\n    }\n  }, \"2032\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"33\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 61\n    }\n  }, \"2033\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"34\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 61\n    }\n  }, \"2034\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"35\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 61\n    }\n  }, \"2035\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"36\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 61\n    }\n  }, \"2036\")))), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    className: \"form-control\",\n    type: \"number\",\n    name: \"cvc\",\n    placeholder: \"CVC... (Security Code On Back)\",\n    value: cardInfo.cvc,\n    onChange: e => handleInputChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 53\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"centered-both-ways\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(Cards, {\n    callback: (type, isValid) => {\n      setCardInfo(prevState => {\n        return { ...prevState,\n          cardType: type.issuer\n        };\n      });\n      setValidness(isValid);\n    },\n    cvc: cardInfo.cvc,\n    expiry: cardInfo.expiry,\n    focused: cardInfo.focus,\n    name: cardInfo.name,\n    number: cardInfo.number,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 53\n    }\n  })))))), /*#__PURE__*/React.createElement(Row, {\n    style: {\n      marginTop: \"27.5px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    disabled: calculateDisabled(),\n    className: \"btn-square-info\",\n    color: \"info-2x\",\n    onClick: () => handleSubmissionDepositFunds(),\n    outline: true,\n    style: {\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 41\n    }\n  }, \"Submit & Purchase Account Credits & Top-Off Balance!\")))), /*#__PURE__*/React.createElement(CardFooter, {\n    className: \"b-l-secondary b-r-secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 33\n    }\n  }, \"An account balance allows for specific actions such as 'purchasing tokens', 'profile boosts' and other misc. actions. It is \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 177\n    }\n  }, \"recommended\"), \" that you keep a \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 222\n    }\n  }, \"minimum\"), \" of $125.00 in your account balance at any given time however this is NOT mandatory, just recommended.\")))))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    userData: state.auth.data\n  };\n};\n\nexport default connect(mapStateToProps, {})(TopOffBalanceHelper);","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/src/components/dashboard/balanceRelated/topOffBal/topoffBalance.js"],"names":["React","Fragment","useState","useEffect","Container","Row","Col","Card","CardBody","CardHeader","CardFooter","Input","FormGroup","Form","Label","Button","Breadcrumb","Slider","connect","Cards","Select","axios","NotificationManager","crypto","confirmAlert","encryptString","decryptString","decryptObject","encryptObject","TopOffBalanceHelper","userData","valid","setValidness","percentageToBePaid","setPercentageToBePaid","cost","setCost","previousCardOptions","setPreviousCardOptions","selectedChunk","setSelectedChunk","marks","setMarks","style","color","label","selectedPaymentCard","setSelectedCard","cardInfo","setCardInfo","cvc","expiry","focus","name","number","cardType","handleInputChange","e","value","target","prevState","console","log","handleSliderValueChange","percentage","onAfterChange","totalCost","perc","parseFloat","converted","calculateCurrentSelectedCost","toFixed","config","params","id","uniqueId","accountType","get","process","env","REACT_APP_BASE_URL","then","res","data","message","cards","convertedPaymentsArr","length","index","method","last4","push","warning","catch","err","handleCardSelectionChange","calculateDisabled","handleSubmissionDepositFunds","customUI","onClose","width","submitLogic","existingCard","post","success","info","marginRight","textDecorationLine","textAlign","paddingBottom","substring","marginLeft","type","isValid","issuer","marginTop","mapStateToProps","state","auth"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport \"./styles.css\";\nimport { Container, Row, Col, Card, CardBody, CardHeader, CardFooter, Input, FormGroup, Form, Label, Button } from \"reactstrap\";\nimport Breadcrumb from '../../../../layout/breadcrumb';\nimport Slider from 'rc-slider';\nimport { connect } from \"react-redux\";\nimport Cards from 'react-credit-cards';\nimport Select from 'react-select';\nimport axios from \"axios\";\nimport { NotificationManager } from 'react-notifications';\nimport crypto from \"../../../../utils/crypto.js\";\nimport { confirmAlert } from 'react-confirm-alert';\n\n\nconst { \n    encryptString,\n    decryptString,\n    decryptObject,\n    encryptObject \n} = crypto;\n\nconst TopOffBalanceHelper = ({ userData }) => {\n    const [ valid, setValidness ] = useState(false);\n    const [ percentageToBePaid, setPercentageToBePaid ] = useState(25);\n    const [ cost, setCost ] = useState(0);\n    const [ previousCardOptions, setPreviousCardOptions ] = useState([]);\n    const [ selectedChunk, setSelectedChunk ] = useState(\"\");\n    const [ marks, setMarks ] = useState({\n        0: { style: { color: \"blue\" }, label: \"$0.00\" },\n        10: { style: { color: \"blue\" }, label: \"$125\" },\n        20: { style: { color: \"blue\" }, label: \"$250\" },\n        30: { style: { color: \"blue\" }, label: \"$375\" },\n        40: { style: { color: \"blue\" }, label: \"$500\" },\n        50: { style: { color: \"blue\" }, label: \"$625\" },\n        60: { style: { color: \"blue\" }, label: \"$750\" },\n        70: { style: { color: \"blue\" }, label: \"$875\" },\n        80: { style: { color: \"blue\" }, label: \"$1000\" },\n        90: { style: { color: \"blue\" }, label: \"$1125\" },\n        100: { style: { color: \"blue\" }, label: \"$1250\" }\n    });\n    const [ selectedPaymentCard, setSelectedCard ] = useState(null);\n    const [ cardInfo, setCardInfo ] = useState({\n        cvc: \"\",\n        expiry: \"\",\n        focus: \"\",\n        name: \"\",\n        number: \"\",\n        cardType: \"\"\n    })\n\n    const handleInputChange = (e) => {\n        const { name, value } = e.target;\n\n        setSelectedCard(null);\n        \n        setCardInfo(prevState => {\n            return {\n                ...prevState,\n                [name]: value\n            }\n        })\n    }\n\n    console.log(\"setSelectedCard\", selectedPaymentCard);\n\n    const handleSliderValueChange = (percentage) => {\n        console.log(\"handleSliderValueChange percentage\", percentage);\n\n        setPercentageToBePaid(percentage);\n    }\n    const onAfterChange = (percentage) => {\n        console.log(\"onAfterChange percentage\", percentage);\n\n        const totalCost = 1250;\n        const perc = parseFloat(percentage) / 100.0;\n        const converted = totalCost * perc;\n        setCost(converted);\n    }\n    const calculateCurrentSelectedCost = (percentage) => {\n        const totalCost = 1250;\n        const perc = parseFloat(percentage) / 100.0;\n        const converted = totalCost * perc;\n        return `$${converted.toFixed(0)} selected to be deposited into your account immediately!`;\n    }\n\n\n    useEffect(() => {\n        const config = {\n            params: {\n                id: userData.uniqueId,\n                accountType: userData.accountType\n            }\n        }\n        axios.get(`${process.env.REACT_APP_BASE_URL}/gather/cards/payment/methods/both/accounts`, config).then((res) => {\n            if (res.data.message === \"Gathered employer payment cards!\") {\n\n                console.log(res.data);\n\n                const { cards } = res.data;\n\n                const convertedPaymentsArr = [];\n\n                if (typeof cards !== \"undefined\" && cards.length > 0) {\n                    for (let index = 0; index < cards.length; index++) {\n                        const method = cards[index];\n    \n                        const { last4 } = method;\n                        \n                        convertedPaymentsArr.push({ label: `**** **** **** ${last4}`, value: method })\n                    }\n    \n                    setPreviousCardOptions(convertedPaymentsArr);\n                } else {\n                    console.log(\"other ran!\");\n                }\n\n            } else {\n                console.log(\"err\", res.data);\n                \n                NotificationManager.warning(\"Failed to fetch your current payment method's on file, please reload this page or contact support if this problem persists...\", \"Failed to load previous method's!\", 4750);\n            }\n        }).catch((err) => {\n            console.log(err);\n\n            NotificationManager.warning(\"Failed to fetch your current payment method's on file, please reload this page or contact support if this problem persists...\", \"Failed to load previous method's!\", 4750);\n        })\n    }, [])\n\n    const handleCardSelectionChange = (value) => {\n\n        setSelectedCard(value);\n\n        setCardInfo({\n            cvc: \"\",\n            expiry: \"\",\n            focus: \"\",\n            name: \"\",\n            number: \"\",\n            cardType: \"\"\n        })\n    }\n\n    const calculateDisabled = () => {\n        const { cvc, expiry, focus, name, number, cardType } = cardInfo;\n\n        if ((selectedPaymentCard !== null) || (valid === true && (typeof cvc !== \"undefined\" && cvc.length >= 3) && (typeof expiry !== \"undefined\" && expiry.length >= 4) && (typeof name !== \"undefined\" && name.length >= 8) && (typeof number !== \"undefined\" && number.length >= 10))) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n    const handleSubmissionDepositFunds = () => {\n        console.log(\"handleSubmissionDepositFunds ran/running!\");\n\n        confirmAlert({\n            customUI: ({ onClose }) => {\n              return (\n                <div className='custom-ui'>\n                    <h1>Are you sure you'd like to make this deposit?!</h1>\n                    <p>You're about to deposit approx. ${cost.toFixed(2)} into your account which will charge the entered/selected card via the form on this page. Please enter the first 12 charactors of your selected card before proceeding to verify authenticity..</p>\n                    <hr />\n                    <FormGroup>\n                        <Label htmlFor=\"exampleInputPassword2\">Enter the FIRST 12 (twelve) charactor's of your selected card to verify ownership..</Label>\n                        <Input value={selectedChunk} className=\"form-control\" onChange={(e) => setSelectedChunk(e.target.value)} type=\"password\" placeholder=\"Enter the first 12 digits of your selected card\" />\n                    </FormGroup>\n                    <hr />\n                    <Button disabled={selectedChunk.length >= 13 ? false : true} className='btn-square-success' color={\"success\"} style={{ width: \"47.5%\" }} onClick={() => {\n                        submitLogic();\n                        onClose();\n                    }}>Yes, Make Payment & Deposit Funds!</Button>\n                    <Button className='btn-square-danger' color={\"danger\"} style={{ width: \"47.5%\" }}\n                        onClick={() => {\n                            onClose();\n                        }}\n                    >\n                        Yes, Cancel!\n                    </Button>\n                </div>\n              );\n            }\n        });\n    }\n\n    const submitLogic = () => {\n        if (typeof cost !== \"undefined\" && cost !== 0) {\n            const config = {\n                id: userData.uniqueId,\n                accountType: userData.accountType,\n                existingCard: selectedPaymentCard !== null ? true : false,\n                cardInfo,\n                cost,\n                selectedPaymentCard: encryptObject(selectedPaymentCard)\n            }\n            axios.post(`${process.env.REACT_APP_BASE_URL}/deposit/funds/account/both/account/types`, config).then((res) => {\n                if (res.data.message === \"Successfully deposited funds!\") {\n    \n                    console.log(res.data);\n    \n                    NotificationManager.success(\"Successfully deposited funds into your account and they are now ACTIVE and AVAILIABLE! Check your account bal to see the reflected/updated changes..\", \"Successfully deposited funds into account & charged card!\", 4750);\n    \n                } else {\n                    console.log(\"err\", res.data);\n                    \n                    NotificationManager.warning(\"An unknown error has occurred while attempting to deposit funds into your account. This error could've originated from a failed payment, database errors or other misc errors. Contact support if the problem persists!\", \"Unknown error has occurred.\", 4750);\n                }\n            }).catch((err) => {\n                console.log(err);\n    \n                NotificationManager.warning(\"An unknown error has occurred while attempting to deposit funds into your account. This error could've originated from a failed payment, database errors or other misc errors. Contact support if the problem persists!\", \"Unknown error has occurred.\", 4750);\n            })\n        } else {\n            NotificationManager.info(\"You MUST select a value (number) amount so we know how much you'd like to deposit into your account, please select a value with the slider before proceeding...!\", \"Select a value/number via the slider before continuing!\", 4750);\n        }\n    }\n    console.log(\"Cardinfo\", cardInfo);\n\n    return (\n        <Fragment>\n            <Breadcrumb parent=\"Purchase 'In-App' Currency And/Or Deposit Fund's\" title=\"Deposit funds into your account balance (can be withdrawn at later date)\" />\n            <Container fluid={true}>\n                <Row>\n                    <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                        <Card className={\"topoff-balance-card-wrapper\"}>\n                            <CardHeader className={\"b-l-secondary b-r-secondary\"}>\n                                <h3 className='title-deposit-funds'>Deposit funds into your account and/or top-off your balance with more funding!</h3>\n                                <p className='lead'>You can deposit fund's into your account to have a positive availiable balance to pay hacker's/contractors, employers, purchase profile boosts, purchase tokens, etc... These funds ARE retreivable and <strong>CAN BE WITHDRAWN</strong> at any point if you wish to clear your current/availiable account balance.</p>\n                            </CardHeader>\n                            <CardBody className='b-l-info b-r-info'>\n                                <Row>\n                                    <div className='centered-both-ways'>\n                                        <Col className='dotted-border-col-two-customized' sm=\"12\" md=\"6\" lg=\"6\" xl=\"6\" style={{ marginRight: \"17.5px\" }}>\n                                            <h3>Please select a value that you wish to deposit into your account. <strong style={{ color: \"darkred\", textDecorationLine: \"underline\" }}>drag the slider</strong> to the appropriate point, select your payment method & make the desired purchase. You'll balance will be <strong style={{ color: \"darkred\", textDecorationLine: \"underline\" }}>immediately updated!</strong></h3>\n                                            <hr />\n                                            <div className='center-slider-adjustment-bar'>\n                                                <p className='lead'>Please drag the marker to the appropriate position marking 'how much' you'd like to depsoit on this transaction..</p>\n                                                <hr />\n                                                <Slider value={percentageToBePaid} startPoint={0} onAfterChange={onAfterChange} onChange={handleSliderValueChange} marks={marks} />\n                                                <div className='centered-both-ways'>\n                                                    <h3 className='current-selected-cost' style={{ textAlign: \"center\" }}>{calculateCurrentSelectedCost(percentageToBePaid)}</h3>\n                                                </div>\n                                            </div>\n                                        </Col>\n                                        <Col className='dotted-border-col-two-customized' sm=\"12\" md=\"6\" lg=\"6\" xl=\"6\">\n                                            <Row style={{ paddingBottom: \"10px\" }}>\n                                                <Label>Select An Existing Registered Card</Label>\n                                                <Select\n                                                    value={selectedPaymentCard}\n                                                    onChange={handleCardSelectionChange}\n                                                    options={previousCardOptions}\n                                                />\n                                            </Row>\n                                            <hr />\n                                            <Form className=\"theme-form mega-form\">\n                                                <FormGroup>\n                                                    <Input\n                                                        className=\"form-control\"\n                                                        type=\"text\"\n                                                        name=\"name\"\n                                                        value={cardInfo.name}\n                                                        placeholder=\"Name (Full Name - First/Last)\"\n                                                        onChange={(e) => handleInputChange(e)}\n                                                    />\n                                                </FormGroup>\n                                                <FormGroup>\n                                                    <Input\n                                                        className=\"form-control\"\n                                                        type=\"number\"\n                                                        name=\"number\"\n                                                        value={cardInfo.number}\n                                                        placeholder=\"Enter your card number..\"\n                                                        onChange={(e) => handleInputChange(e)}\n                                                    />\n                                                </FormGroup>\n                                                <FormGroup>\n                                                    <Row>\n                                                        <select onChange={(e) => {\n                                                            const value = e.target.value;\n\n                                                            if (value !== \"\") {\n                                                        \n                                                                cardInfo.expiry = value + cardInfo.expiry.substring(2, 5);\n\n                                                                setSelectedCard(null);\n\n                                                                setCardInfo(prevState => {\n                                                                    return {\n                                                                        ...prevState,\n                                                                        expiry: cardInfo.expiry\n                                                                    }\n                                                                })\n                                                            }\n                                                        }} style={{ marginLeft: \"15px\" }} className=\"form-control digits year-date-format\" name='expireMM' id='expireMM'>\n                                                            <option value=''>Select a month</option>\n                                                            <option value='01'>January</option>\n                                                            <option value='02'>February</option>\n                                                            <option value='03'>March</option>\n                                                            <option value='04'>April</option>\n                                                            <option value='05'>May</option>\n                                                            <option value='06'>June</option>\n                                                            <option value='07'>July</option>\n                                                            <option value='08'>August</option>\n                                                            <option value='09'>September</option>\n                                                            <option value='10'>October</option>\n                                                            <option value='11'>November</option>\n                                                            <option value='12'>December</option>\n                                                        </select> \n                                                        <select onChange={(e) => {\n                                                            const value = e.target.value;\n\n                                                            if (value !== \"\") {\n                                                                \n                                                                cardInfo.expiry = cardInfo.expiry.substring(0, 2) + value;\n\n                                                                setSelectedCard(null);\n\n                                                                setCardInfo(prevState => {\n                                                                    return {\n                                                                        ...prevState,\n                                                                        expiry: cardInfo.expiry\n                                                                    }\n                                                                })\n                                                            }\n                                                        }} className=\"form-control digits year-date-format\" name='expireYY' id='expireYY'>\n                                                            <option value=''>Select a year</option>\n                                                            <option value='20'>2020</option>\n                                                            <option value='21'>2021</option>\n                                                            <option value='22'>2022</option>\n                                                            <option value='23'>2023</option>\n                                                            <option value='24'>2024</option>\n                                                            <option value='25'>2025</option>\n                                                            <option value='26'>2026</option>\n                                                            <option value='27'>2027</option>\n                                                            <option value='28'>2028</option>\n                                                            <option value='29'>2029</option>\n                                                            <option value='30'>2030</option>\n                                                            <option value='31'>2031</option>\n                                                            <option value='32'>2032</option>\n                                                            <option value='33'>2033</option>\n                                                            <option value='34'>2034</option>\n                                                            <option value='35'>2035</option>\n                                                            <option value='36'>2036</option>\n                                                        </select> \n                                                    </Row>\n                                                </FormGroup>\n                                                <FormGroup>\n                                                    <Input\n                                                        className=\"form-control\"\n                                                        type=\"number\"\n                                                        name=\"cvc\"\n                                                        placeholder=\"CVC... (Security Code On Back)\"\n                                                        value={cardInfo.cvc}\n                                                        onChange={(e) => handleInputChange(e)}\n                                                    />\n                                                </FormGroup>\n                                                <div className='centered-both-ways'>\n                                                    <Cards\n                                                        callback={(type, isValid) => {\n                                                            setCardInfo(prevState => {\n                                                                return {\n                                                                    ...prevState,\n                                                                    cardType: type.issuer\n                                                                }\n                                                            })\n                                                            setValidness(isValid);\n                                                        }}\n                                                        cvc={cardInfo.cvc}\n                                                        expiry={cardInfo.expiry}\n                                                        focused={cardInfo.focus}\n                                                        name={cardInfo.name}\n                                                        number={cardInfo.number}\n                                                    />\n                                                </div>\n                                            </Form>\n                                        </Col>\n                                    </div>\n                                </Row>\n                                <Row style={{ marginTop: \"27.5px\" }}>\n                                    <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                                        <Button disabled={calculateDisabled()} className={\"btn-square-info\"} color={\"info-2x\"} onClick={() => handleSubmissionDepositFunds()} outline style={{ width: \"100%\" }}>Submit & Purchase Account Credits & Top-Off Balance!</Button>\n                                    </Col>\n                                </Row>\n                            </CardBody>\n                            <CardFooter className='b-l-secondary b-r-secondary'>\n                                <p className='lead'>An account balance allows for specific actions such as 'purchasing tokens', 'profile boosts' and other misc. actions. It is <strong>recommended</strong> that you keep a <strong>minimum</strong> of $125.00 in your account balance at any given time however this is NOT mandatory, just recommended.</p>\n                            </CardFooter>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n        </Fragment>\n    );\n}\nconst mapStateToProps = (state) => {\n    return {\n        userData: state.auth.data\n    }\n}\nexport default connect(mapStateToProps, { })(TopOffBalanceHelper);"]},"metadata":{},"sourceType":"module"}