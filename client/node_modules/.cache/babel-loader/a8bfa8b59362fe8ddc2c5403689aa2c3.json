{"ast":null,"code":"var _jsxFileName = \"/home/kali/Documents/cybersecurity/client/src/components/dashboard/learning/educationalCoursesSeminars/createCourse/helpers/pages/pageTwo/helpers/miscFunctions.js\";\nimport React, { Fragment } from \"react\";\nimport { Button } from 'reactstrap';\nimport axios from \"axios\";\n\nconst handleSubmit = runSubmit => {\n  console.log(\"submitted!\", currentFileSelectedUpload, fileMetaData); // if ((!_.has(previouslySavedSoftwareData, \"uploadedPublicFiles\")) || (previouslySavedSoftwareData.uploadedPublicFiles.length <= 10)) {\n  //     const data = new FormData();\n  //     data.append(\"file\", currentFileSelectedUpload);\n  //     data.append(\"meta\", fileMetaData);\n  //     const config = {\n  //         onUploadProgress: (progressEvent) => {\n  //             let percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n  //             setProgress(percentCompleted);\n  //         },\n  //         headers: {\n  //             'Content-Type': 'multipart/form-data'\n  //         }\n  //     };\n  //     axios.post(`${process.env.REACT_APP_BASE_URL}/upload/misc/file/softare/listing/sale`, data, config).then((res) => {\n  //         if (res.data.message === \"Successfully uploaded file!\") {\n  //             console.log(res.data);\n  //             const { file } = res.data;\n  //             saveSoftwareListingInfo({\n  //                 ...previouslySavedSoftwareData,\n  //                 uploadedPublicFiles: _.has(previouslySavedSoftwareData, \"uploadedPublicFiles\") ? [...previouslySavedSoftwareData.uploadedPublicFiles, file] : [file]\n  //             })\n  //             NotificationManager.success(`We've successfully uploaded your file! Please proceed filling out your information or add more files.`, 'Successfully uploaded file!', 4500);\n  //             setMetaFileData(null);\n  //             setFileReadyStatus(false);\n  //             setCurrentUploadFileStatus(null);\n  //             runSubmit();\n  //         } else {\n  //             console.log(\"Err\", res.data);\n  //         }\n  //     }).catch((err) => {\n  //         console.log(err);\n  //     })\n  // } else {\n  //     // here!\n  //     NotificationManager.error(`You're only allowed to upload 10 (TEN) files TOTAL. If you'd like to upload different files - remove/delete a previously uploaded file.`, \"Too many uploads!\", 4500);\n  // }\n};\n\nconst renderCustomButtonDropzone = (data, setMetaFileData, currentFileSelectedUpload) => {\n  const {\n    meta\n  } = data.files[0];\n\n  if (currentFileSelectedUpload === null) {\n    return null;\n  } else {\n    if (fileReady === true) {\n      return /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        style: {\n          marginTop: \"25px\"\n        },\n        onClick: e => {\n          e.preventDefault(); // file meta data for next action\n\n          setMetaFileData(meta); // set file status as ready or prepared.\n\n          setFileReadyStatus(false);\n          const runSubmit = data.onSubmit;\n          handleSubmit(runSubmit);\n        },\n        className: \"btn-air-secondary\",\n        color: \"secondary\",\n        size: \"md\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }\n      }, \"Submit & Upload New File!\"));\n    } else {\n      return /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        style: {\n          marginTop: \"25px\"\n        },\n        onClick: () => {\n          NotificationManager.warning(`File is NOT ready to upload yet! Please wait for the preparation steps to complete before submitting.`, 'Still preparing!', 4500);\n        },\n        className: \"btn-air-light\",\n        color: \"light\",\n        size: \"md\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }\n      }, \"Submit & Upload New File!\"));\n    }\n  }\n};\n\nexport default {\n  renderCustomButtonDropzone,\n  handleSubmit\n};","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/learning/educationalCoursesSeminars/createCourse/helpers/pages/pageTwo/helpers/miscFunctions.js"],"names":["React","Fragment","Button","axios","handleSubmit","runSubmit","console","log","currentFileSelectedUpload","fileMetaData","renderCustomButtonDropzone","data","setMetaFileData","meta","files","fileReady","marginTop","e","preventDefault","setFileReadyStatus","onSubmit","NotificationManager","warning"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,MAAMC,YAAY,GAAIC,SAAD,IAAe;AAEhCC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BC,yBAA1B,EAAqDC,YAArD,EAFgC,CAIhC;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CAjDD;;AAmDA,MAAMC,0BAA0B,GAAG,CAACC,IAAD,EAAOC,eAAP,EAAwBJ,yBAAxB,KAAsD;AAErF,QAAM;AAAEK,IAAAA;AAAF,MAAWF,IAAI,CAACG,KAAL,CAAW,CAAX,CAAjB;;AAEA,MAAIN,yBAAyB,KAAK,IAAlC,EAAwC;AACpC,WAAO,IAAP;AACH,GAFD,MAEO;AACH,QAAIO,SAAS,KAAK,IAAlB,EAAwB;AACpB,0BACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAAf;AAAsC,QAAA,OAAO,EAAGC,CAAD,IAAO;AAClDA,UAAAA,CAAC,CAACC,cAAF,GADkD,CAElD;;AACAN,UAAAA,eAAe,CAACC,IAAD,CAAf,CAHkD,CAIlD;;AACAM,UAAAA,kBAAkB,CAAC,KAAD,CAAlB;AAEA,gBAAMd,SAAS,GAAGM,IAAI,CAACS,QAAvB;AAEAhB,UAAAA,YAAY,CAACC,SAAD,CAAZ;AACH,SAVD;AAUG,QAAA,SAAS,EAAC,mBAVb;AAUiC,QAAA,KAAK,EAAC,WAVvC;AAUmD,QAAA,IAAI,EAAC,IAVxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADJ,CADJ;AAeH,KAhBD,MAgBO;AACH,0BACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAE;AAAEW,UAAAA,SAAS,EAAE;AAAb,SAAf;AAAsC,QAAA,OAAO,EAAE,MAAM;AACjDK,UAAAA,mBAAmB,CAACC,OAApB,CAA6B,uGAA7B,EAAqI,kBAArI,EAAyJ,IAAzJ;AACH,SAFD;AAEG,QAAA,SAAS,EAAC,eAFb;AAE6B,QAAA,KAAK,EAAC,OAFnC;AAE2C,QAAA,IAAI,EAAC,IAFhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADJ,CADJ;AAOH;AACJ;AACJ,CAjCD;;AAkCA,eAAe;AACXZ,EAAAA,0BADW;AAEXN,EAAAA;AAFW,CAAf","sourcesContent":["import React, { Fragment } from \"react\";\nimport { Button } from 'reactstrap';\nimport axios from \"axios\";\n\n\nconst handleSubmit = (runSubmit) => {\n\n    console.log(\"submitted!\", currentFileSelectedUpload, fileMetaData);\n\n    // if ((!_.has(previouslySavedSoftwareData, \"uploadedPublicFiles\")) || (previouslySavedSoftwareData.uploadedPublicFiles.length <= 10)) {\n    //     const data = new FormData();\n\n    //     data.append(\"file\", currentFileSelectedUpload);\n    //     data.append(\"meta\", fileMetaData);\n\n    //     const config = {\n    //         onUploadProgress: (progressEvent) => {\n    //             let percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n\n    //             setProgress(percentCompleted);\n    //         },\n    //         headers: {\n    //             'Content-Type': 'multipart/form-data'\n    //         }\n    //     };\n\n    //     axios.post(`${process.env.REACT_APP_BASE_URL}/upload/misc/file/softare/listing/sale`, data, config).then((res) => {\n    //         if (res.data.message === \"Successfully uploaded file!\") {\n    //             console.log(res.data);\n\n    //             const { file } = res.data;\n\n    //             saveSoftwareListingInfo({\n    //                 ...previouslySavedSoftwareData,\n    //                 uploadedPublicFiles: _.has(previouslySavedSoftwareData, \"uploadedPublicFiles\") ? [...previouslySavedSoftwareData.uploadedPublicFiles, file] : [file]\n    //             })\n\n    //             NotificationManager.success(`We've successfully uploaded your file! Please proceed filling out your information or add more files.`, 'Successfully uploaded file!', 4500);\n\n    //             setMetaFileData(null);\n    //             setFileReadyStatus(false);\n    //             setCurrentUploadFileStatus(null);\n\n    //             runSubmit();\n    //         } else {\n    //             console.log(\"Err\", res.data);\n    //         }\n    //     }).catch((err) => {\n    //         console.log(err);\n    //     })\n    // } else {\n    //     // here!\n    //     NotificationManager.error(`You're only allowed to upload 10 (TEN) files TOTAL. If you'd like to upload different files - remove/delete a previously uploaded file.`, \"Too many uploads!\", 4500);\n    // }\n};\n\nconst renderCustomButtonDropzone = (data, setMetaFileData, currentFileSelectedUpload) => {\n\n    const { meta } = data.files[0];\n\n    if (currentFileSelectedUpload === null) {\n        return null;\n    } else {\n        if (fileReady === true) {\n            return (\n                <Fragment>\n                    <Button style={{ marginTop: \"25px\" }} onClick={(e) => {\n                        e.preventDefault();\n                        // file meta data for next action\n                        setMetaFileData(meta);\n                        // set file status as ready or prepared.\n                        setFileReadyStatus(false);\n\n                        const runSubmit = data.onSubmit;\n\n                        handleSubmit(runSubmit);\n                    }} className=\"btn-air-secondary\" color=\"secondary\" size=\"md\">Submit & Upload New File!</Button>\n                </Fragment>\n            );\n        } else {\n            return (\n                <Fragment>\n                    <Button style={{ marginTop: \"25px\" }} onClick={() => {\n                        NotificationManager.warning(`File is NOT ready to upload yet! Please wait for the preparation steps to complete before submitting.`, 'Still preparing!', 4500);\n                    }} className=\"btn-air-light\" color=\"light\" size=\"md\">Submit & Upload New File!</Button>\n                </Fragment>\n            );\n        }\n    }\n}\nexport default {\n    renderCustomButtonDropzone,\n    handleSubmit\n};"]},"metadata":{},"sourceType":"module"}