{"ast":null,"code":"var _jsxFileName = \"/home/kali/Documents/cybersecurity/client/src/components/dashboard/learning/educationalCoursesSeminars/createCourse/helpers/pages/pageThree/index.js\";\nimport React, { Fragment, useState, useRef, useEffect } from \"react\";\nimport \"./styles.css\";\nimport { connect } from \"react-redux\";\nimport helpers from \"./helpers/helperFunctions/helpers.js\";\nimport { Button, Row, Col, Card, CardBody, CardHeader, FormGroup, Label, Input, Form, Progress, Container } from 'reactstrap';\nimport { updateCourseInformationData } from \"../../../../../../../../redux/actions/courses/createNewCourse/index.js\";\nimport _ from \"lodash\";\nimport uuid from \"react-uuid\";\nimport moment from \"moment\";\nimport Select from \"react-select\";\nimport { useForm, Controller } from 'react-hook-form';\nimport reactHookHelpers from \"./helpers/helperFunctions/hookFormHelpers.js\";\nimport options from \"./helpers/helperFunctions/options.js\";\nimport Skeleton, { SkeletonTheme } from 'react-loading-skeleton';\nimport Dropzone from 'react-dropzone-uploader';\nconst {\n  lanuageOptions,\n  experienceLevelOptions,\n  languageList,\n  hoursInLengthOptions\n} = options; // react-hook-form imports/helpers\n\nconst subtitleChecks = reactHookHelpers().subtitleChecks;\nconst languageSpokenChecks = reactHookHelpers().languageSpokenChecks;\nconst skillLevelChecks = reactHookHelpers().skillLevelChecks;\nconst primaryLanguageChecks = reactHookHelpers().primaryLanguageChecks;\nconst hoursOfCourseContentChecks = reactHookHelpers().hoursOfCourseContentChecks;\nconst courseWelcomeMessageChecks = reactHookHelpers().courseWelcomeMessageChecks;\nconst completionMessageChecks = reactHookHelpers().completionMessageChecks;\nconst {\n  renderPreviewOfFile,\n  imageChangeAndConversion,\n  onSubmitHelper,\n  handleSubmit,\n  CustomInputHelper,\n  renderCustomButtonDropzone,\n  calculateFileType\n} = helpers; // actual component\n\nconst CreateNewCoursePageThree = _ref => {\n  let {\n    userData,\n    courseData,\n    overallProgress,\n    setOverallProgress,\n    setProgress\n  } = _ref;\n  const [languageArrayNew, setLanguageArray] = useState([]); // refs & such\n\n  const dropzoneRef = useRef(null); // start of state logic...\n\n  const [fileReady, setFileReadyStatus] = useState(false);\n  const [currentFileSelectedUpload, setCurrentUploadFileStatus] = useState(null);\n  const [fileMetaData, setMetaFileData] = useState(null);\n  const [changeOptions, setChangeOptions] = useState(null);\n  const [filePathData, setCurrentFilePathData] = useState(null);\n  const languageSpokenRef = useRef(null);\n  const primaryLanguageRef = useRef(null);\n  const skillLevelRef = useRef(null); // redux form logic\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    resetField,\n    unregister,\n    getValues,\n    array,\n    setValue,\n    setError,\n    clearErrors,\n    formState: {\n      errors\n    }\n  } = useForm({\n    mode: \"onTouched\",\n    reValidateMode: \"onBlur\"\n  });\n  const currentValues = getValues();\n  useEffect(() => {\n    const languageArrayNew = [];\n\n    for (let index = 0; index < languageList.length; index++) {\n      const language = languageList[index];\n      languageArrayNew.push({\n        label: language.name,\n        value: language.name,\n        completeData: language\n      });\n\n      if (languageList.length - 1 === index) {\n        setLanguageArray(languageArrayNew);\n      }\n    }\n  }, []);\n\n  const onSubmit = (data, e) => {\n    console.log(\"onSubmit ran...\", data, e);\n  };\n\n  const errorsSubmit = (e, errors) => {\n    console.log(\"errorsSubmit\", e, errors);\n  };\n\n  console.log(\"current VALUES:\", currentValues);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"centered-horizontally-course\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"position-above-bar-percentage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 21\n    }\n  }, overallProgress, \"% Complete\")), /*#__PURE__*/React.createElement(Progress, {\n    className: \"course-creation-progress-bar\",\n    animated: true,\n    color: \"info\",\n    value: overallProgress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit(onSubmit, (e, errors) => {\n      return errorsSubmit(e, errors);\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"course-custom-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 49\n    }\n  }, \"More fine-grain specific details about your listing. Please fill out each of the following fields to the best of your ability & be as specific/detailed as possible. We will collect things such as difficulty level, language, etc...\"))), /*#__PURE__*/React.createElement(Row, {\n    style: {\n      marginTop: \"17.5px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    className: \"specifics-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    className: \"b-l-primary card-header-customized-specifics\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 53\n    }\n  }, \"More required detailed information related to core listing\"), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      marginTop: \"7.5px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 53\n    }\n  }, \"You will need to \", /*#__PURE__*/React.createElement(\"strong\", {\n    style: {\n      textDecorationLine: \"underline\",\n      color: \"#f73164\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 104\n    }\n  }, \"complete\"), \" the following \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 206\n    }\n  }, \"required\"), \" information to give potential student's more of an idea of what they will be purchasing regarding certain fine details...\")), /*#__PURE__*/React.createElement(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12 mb-3\",\n    lg: \"12 mb-3\",\n    xl: \"12 mb-3\",\n    md: \"12 mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 61\n    }\n  }, subtitleChecks.label), /*#__PURE__*/React.createElement(Input, Object.assign({}, subtitleChecks.check(setError, register), {\n    onChange: e => subtitleChecks.onChange(e, setValue),\n    value: currentValues.subtitle,\n    className: \"form-control\",\n    name: subtitleChecks.name,\n    type: subtitleChecks.type,\n    placeholder: subtitleChecks.placeholder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 61\n    }\n  })), errors.subtitle ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"span-tooltip\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 80\n    }\n  }, errors.subtitle.message) : null)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: \"6 mb-3\",\n    sm: \"12 mb-3\",\n    lg: \"6 mb-3\",\n    xl: \"6 mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 61\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 65\n    }\n  }, skillLevelChecks.label), /*#__PURE__*/React.createElement(Controller, Object.assign({\n    control: control,\n    name: skillLevelChecks.name\n  }, skillLevelChecks.check(setError, register, clearErrors), {\n    render: _ref2 => {\n      let {\n        field\n      } = _ref2;\n      return /*#__PURE__*/React.createElement(Select, Object.assign({}, field, {\n        ref: skillLevelRef,\n        autoBlur: true,\n        placeholder: skillLevelChecks.placeholder,\n        defaultValue: null,\n        onMenuClose: () => {\n          skillLevelRef.current.blur();\n        },\n        value: currentValues.skillLevel,\n        onChange: selectedOption => skillLevelChecks.onChange(selectedOption, setValue, clearErrors),\n        options: experienceLevelOptions,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 73\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 65\n    }\n  })), errors.skillLevel ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"span-tooltip\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 86\n    }\n  }, errors.skillLevel.message) : null)), /*#__PURE__*/React.createElement(Col, {\n    md: \"6 mb-3\",\n    sm: \"12 mb-3\",\n    lg: \"6 mb-3\",\n    xl: \"6 mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 61\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 65\n    }\n  }, languageSpokenChecks.label), /*#__PURE__*/React.createElement(Controller, Object.assign({\n    control: control,\n    name: languageSpokenChecks.name\n  }, languageSpokenChecks.check(setError, register, clearErrors), {\n    render: _ref3 => {\n      let {\n        field\n      } = _ref3;\n      return /*#__PURE__*/React.createElement(Select, Object.assign({}, field, {\n        ref: languageSpokenRef,\n        autoBlur: true,\n        placeholder: languageSpokenChecks.placeholder,\n        defaultValue: null,\n        onMenuClose: () => {\n          languageSpokenRef.current.blur();\n        },\n        value: currentValues.languageSpoken,\n        onChange: selectedOption => languageSpokenChecks.onChange(selectedOption, setValue, clearErrors),\n        options: lanuageOptions,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 73\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 65\n    }\n  })), errors.languageSpoken ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"span-tooltip\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 90\n    }\n  }, errors.languageSpoken.message) : null))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: \"5 mb-3\",\n    sm: \"12 mb-3\",\n    lg: \"5 mb-3\",\n    xl: \"5 mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 61\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 65\n    }\n  }, primaryLanguageChecks.label), /*#__PURE__*/React.createElement(Controller, Object.assign({\n    control: control,\n    name: primaryLanguageChecks.name\n  }, primaryLanguageChecks.check(setError, register, clearErrors), {\n    render: _ref4 => {\n      let {\n        field\n      } = _ref4;\n      return /*#__PURE__*/React.createElement(Select, Object.assign({}, field, {\n        ref: primaryLanguageRef,\n        autoBlur: true,\n        placeholder: primaryLanguageChecks.placeholder,\n        defaultValue: null,\n        onMenuClose: () => {\n          primaryLanguageRef.current.blur();\n        },\n        value: currentValues.primaryLanguageUsed,\n        onChange: selectedOption => primaryLanguageChecks.onChange(selectedOption, setValue, clearErrors),\n        options: languageArrayNew,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 73\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 65\n    }\n  })), errors.primaryLanguageUsed ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"span-tooltip\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 95\n    }\n  }, errors.primaryLanguageUsed.message) : null)), /*#__PURE__*/React.createElement(Col, {\n    md: \"7 mb-3\",\n    sm: \"12 mb-3\",\n    lg: \"7 mb-3\",\n    xl: \"7 mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 61\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 65\n    }\n  }, hoursOfCourseContentChecks.label), /*#__PURE__*/React.createElement(Controller, Object.assign({\n    control: control,\n    name: hoursOfCourseContentChecks.name\n  }, hoursOfCourseContentChecks.check(setError, register, clearErrors), {\n    render: _ref5 => {\n      let {\n        field\n      } = _ref5;\n      return /*#__PURE__*/React.createElement(Select, Object.assign({\n        className: \"controlled-select-course\"\n      }, field, {\n        ref: primaryLanguageRef,\n        autoBlur: true,\n        placeholder: hoursOfCourseContentChecks.placeholder,\n        defaultValue: null,\n        onMenuClose: () => {\n          primaryLanguageRef.current.blur();\n        },\n        value: currentValues.lengthInHours,\n        onChange: selectedOption => hoursOfCourseContentChecks.onChange(selectedOption, setValue, clearErrors),\n        options: hoursInLengthOptions,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 73\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 65\n    }\n  })), errors.lengthInHours ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"span-tooltip\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 89\n    }\n  }, errors.lengthInHours.message) : null))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12 mb-3\",\n    lg: \"12 mb-3\",\n    xl: \"12 mb-3\",\n    md: \"12 mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 61\n    }\n  }, courseWelcomeMessageChecks.label), /*#__PURE__*/React.createElement(Input, Object.assign({}, courseWelcomeMessageChecks.check(setError, register), {\n    onChange: e => courseWelcomeMessageChecks.onChange(e, setValue),\n    value: currentValues.welcomeMessage,\n    className: \"form-control\",\n    name: courseWelcomeMessageChecks.name,\n    rows: 8,\n    type: courseWelcomeMessageChecks.type,\n    placeholder: courseWelcomeMessageChecks.placeholder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 61\n    }\n  })), errors.welcomeMessage ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"span-tooltip\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 86\n    }\n  }, errors.welcomeMessage.message) : null)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12 mb-3\",\n    lg: \"12 mb-3\",\n    xl: \"12 mb-3\",\n    md: \"12 mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 61\n    }\n  }, completionMessageChecks.label), /*#__PURE__*/React.createElement(Input, Object.assign({}, completionMessageChecks.check(setError, register), {\n    onChange: e => completionMessageChecks.onChange(e, setValue),\n    value: currentValues.completionMessage,\n    className: \"form-control\",\n    name: completionMessageChecks.name,\n    rows: 8,\n    type: completionMessageChecks.type,\n    placeholder: completionMessageChecks.placeholder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 61\n    }\n  })), errors.completionMessage ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"span-tooltip\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 89\n    }\n  }, errors.completionMessage.message) : null)), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 53\n    }\n  })))))))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    className: \"specifics-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    className: \"b-l-primary card-header-customized-specifics\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 45\n    }\n  }, \"Upload a \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 58\n    }\n  }, \"PROMOTIONAL/DEMO\"), \" video depicting what's being sold/provided\"), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      marginTop: \"7.5px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 45\n    }\n  }, \"You will now need to upload a \", /*#__PURE__*/React.createElement(\"strong\", {\n    style: {\n      textDecorationLine: \"underline\",\n      color: \"#f73164\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 109\n    }\n  }, \"promotional video\"), \" or \", /*#__PURE__*/React.createElement(\"strong\", {\n    style: {\n      textDecorationLine: \"underline\",\n      color: \"#f73164\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 209\n    }\n  }, \"demo/preview\"), \" of what your course entials after being purchased/bought. You \", /*#__PURE__*/React.createElement(\"strong\", {\n    style: {\n      textDecorationLine: \"underline\",\n      color: \"#f73164\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 363\n    }\n  }, \"should\"), \" give an \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 457\n    }\n  }, \"accurate\"), \" idea of what's being offered for sale with this video...\")), /*#__PURE__*/React.createElement(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12 mb-3\",\n    lg: \"12 mb-3\",\n    xl: \"12 mb-3\",\n    md: \"12 mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 53\n    }\n  }, subtitleChecks.label), /*#__PURE__*/React.createElement(Input, Object.assign({}, subtitleChecks.check(setError, register), {\n    onChange: e => subtitleChecks.onChange(e, setValue),\n    value: currentValues.subtitle,\n    className: \"form-control\",\n    name: subtitleChecks.name,\n    type: subtitleChecks.type,\n    placeholder: subtitleChecks.placeholder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 53\n    }\n  })), errors.subtitle ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"span-tooltip\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 72\n    }\n  }, errors.subtitle.message) : null)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dz-message needsclick\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(Dropzone, {\n    ref: dropzoneRef,\n    PreviewComponent: data => renderPreviewOfFile(data, fileReady, filePathData),\n    maxFiles: 1,\n    autoUpload: true,\n    onChangeStatus: functions => {\n      setChangeOptions(functions);\n    },\n    submitButtonDisabled: false,\n    InputComponent: (accept, onFiles) => CustomInputHelper(accept, onFiles, setCurrentFilePathData, setCurrentUploadFileStatus, setFileReadyStatus),\n    onSubmit: onSubmitHelper,\n    SubmitButtonComponent: (data, e) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"absolutely-position-submit-btn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 65\n        }\n      }, renderCustomButtonDropzone(data, e, currentFileSelectedUpload, setMetaFileData, setFileReadyStatus, fileMetaData));\n    },\n    multiple: false,\n    canCancel: false,\n    styles: {\n      dropzone: {\n        height: 325\n      },\n      dropzoneActive: {\n        borderColor: 'green'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 53\n    }\n  })), fileReady === true ? /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 71\n    }\n  }, /*#__PURE__*/React.createElement(\"hr\", {\n    className: \"secondary-hr\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 53\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"centered-both-ways\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    style: {\n      marginTop: \"25px\"\n    },\n    onClick: e => {\n      setMetaFileData(null);\n      setFileReadyStatus(false);\n      setCurrentUploadFileStatus(null);\n      changeOptions.remove();\n    },\n    className: \"btn-air-danger cancel-button-upload\",\n    color: \"danger\",\n    size: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 57\n    }\n  }, \"Cancel Current/Pending Upload\"))) : null), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 45\n    }\n  }))))))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    style: {\n      width: \"100%\"\n    },\n    outline: true,\n    className: \"btn-square-info\",\n    type: \"submit\",\n    color: \"info-2x\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 37\n    }\n  }, \"Submit form & proceed w/rest of logic\"))))))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    userData: state.auth.data,\n    courseData: _.has(state.courseData, \"courseData\") ? state.courseData.courseData : []\n  };\n};\n\nexport default connect(mapStateToProps, {\n  updateCourseInformationData\n})(CreateNewCoursePageThree);","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/learning/educationalCoursesSeminars/createCourse/helpers/pages/pageThree/index.js"],"names":["React","Fragment","useState","useRef","useEffect","connect","helpers","Button","Row","Col","Card","CardBody","CardHeader","FormGroup","Label","Input","Form","Progress","Container","updateCourseInformationData","_","uuid","moment","Select","useForm","Controller","reactHookHelpers","options","Skeleton","SkeletonTheme","Dropzone","lanuageOptions","experienceLevelOptions","languageList","hoursInLengthOptions","subtitleChecks","languageSpokenChecks","skillLevelChecks","primaryLanguageChecks","hoursOfCourseContentChecks","courseWelcomeMessageChecks","completionMessageChecks","renderPreviewOfFile","imageChangeAndConversion","onSubmitHelper","handleSubmit","CustomInputHelper","renderCustomButtonDropzone","calculateFileType","CreateNewCoursePageThree","userData","courseData","overallProgress","setOverallProgress","setProgress","languageArrayNew","setLanguageArray","dropzoneRef","fileReady","setFileReadyStatus","currentFileSelectedUpload","setCurrentUploadFileStatus","fileMetaData","setMetaFileData","changeOptions","setChangeOptions","filePathData","setCurrentFilePathData","languageSpokenRef","primaryLanguageRef","skillLevelRef","register","control","resetField","unregister","getValues","array","setValue","setError","clearErrors","formState","errors","mode","reValidateMode","currentValues","index","length","language","push","label","name","value","completeData","onSubmit","data","e","console","log","errorsSubmit","marginTop","textDecorationLine","color","check","onChange","subtitle","type","placeholder","message","field","current","blur","skillLevel","selectedOption","languageSpoken","primaryLanguageUsed","lengthInHours","welcomeMessage","completionMessage","functions","accept","onFiles","dropzone","height","dropzoneActive","borderColor","remove","width","mapStateToProps","state","auth","has"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useRef, useEffect } from \"react\";\nimport \"./styles.css\";\nimport { connect } from \"react-redux\";\nimport helpers from \"./helpers/helperFunctions/helpers.js\";\nimport { Button, Row, Col, Card, CardBody, CardHeader, FormGroup, Label, Input, Form, Progress, Container } from 'reactstrap';\nimport { updateCourseInformationData } from \"../../../../../../../../redux/actions/courses/createNewCourse/index.js\";\nimport _ from \"lodash\";\nimport uuid from \"react-uuid\";\nimport moment from \"moment\";\nimport Select from \"react-select\";\nimport { useForm, Controller } from 'react-hook-form';\nimport reactHookHelpers from \"./helpers/helperFunctions/hookFormHelpers.js\";\nimport options from \"./helpers/helperFunctions/options.js\";\nimport Skeleton, { SkeletonTheme } from 'react-loading-skeleton';\nimport Dropzone from 'react-dropzone-uploader';\n\n\nconst { lanuageOptions, experienceLevelOptions, languageList, hoursInLengthOptions } = options;\n\n// react-hook-form imports/helpers\nconst subtitleChecks = reactHookHelpers().subtitleChecks;\nconst languageSpokenChecks = reactHookHelpers().languageSpokenChecks;\nconst skillLevelChecks = reactHookHelpers().skillLevelChecks;\nconst primaryLanguageChecks = reactHookHelpers().primaryLanguageChecks;\nconst hoursOfCourseContentChecks = reactHookHelpers().hoursOfCourseContentChecks;\nconst courseWelcomeMessageChecks = reactHookHelpers().courseWelcomeMessageChecks;\nconst completionMessageChecks = reactHookHelpers().completionMessageChecks;\n\nconst {\n    renderPreviewOfFile,\n    imageChangeAndConversion,\n    onSubmitHelper,\n    handleSubmit,\n    CustomInputHelper,\n    renderCustomButtonDropzone,\n    calculateFileType\n} = helpers;\n\n// actual component\nconst CreateNewCoursePageThree = ({ userData, courseData, overallProgress, setOverallProgress, setProgress }) => {\n\n    const [ languageArrayNew, setLanguageArray ] = useState([]);\n    // refs & such\n    const dropzoneRef = useRef(null);\n    // start of state logic...\n    const [ fileReady, setFileReadyStatus ] = useState(false);\n    const [ currentFileSelectedUpload, setCurrentUploadFileStatus ] = useState(null);\n    const [ fileMetaData, setMetaFileData ] = useState(null);\n    const [ changeOptions, setChangeOptions ] = useState(null);\n    const [ filePathData, setCurrentFilePathData ] = useState(null);\n\n    const languageSpokenRef = useRef(null);\n    const primaryLanguageRef = useRef(null);\n    const skillLevelRef = useRef(null);\n    // redux form logic\n    const { register, handleSubmit, control, resetField, unregister, getValues, array, setValue, setError, clearErrors, formState: { errors }} = useForm({\n        mode: \"onTouched\",\n        reValidateMode: \"onBlur\"\n    });\n\n    const currentValues = getValues();\n\n    useEffect(() => {\n\n        const languageArrayNew = [];\n      \n        for (let index = 0; index < languageList.length; index++) {\n            const language = languageList[index];\n            languageArrayNew.push({ label: language.name, value: language.name, completeData: language });\n\n            if ((languageList.length - 1) === index) {\n                setLanguageArray(languageArrayNew);\n            }\n        }\n    }, [])\n    const onSubmit = (data, e) => {\n        console.log(\"onSubmit ran...\", data, e);\n    }\n    const errorsSubmit = (e, errors) => {\n        console.log(\"errorsSubmit\", e, errors);\n    }\n    console.log(\"current VALUES:\", currentValues);\n    return (\n        <Fragment>\n            <div className={\"centered-horizontally-course\"}>\n                <div className={\"position-above-bar-percentage\"}>\n                    <h1>{overallProgress}% Complete</h1>\n                </div>\n                <Progress className={\"course-creation-progress-bar\"} animated color=\"info\" value={overallProgress} />\n            </div>\n            <Container fluid={true}>\n                <Form onSubmit={handleSubmit(onSubmit, (e, errors) => {\n                    return errorsSubmit(e, errors);\n                })}>\n                    <Row>\n                        <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                                <Card>\n                                    <CardBody>\n                                        <Row>\n                                            <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                                                <h4 className={\"course-custom-title\"}>More fine-grain specific details about your listing. Please fill out each of the following fields to the best of your ability & be as specific/detailed as possible. We will collect things such as difficulty level, language, etc...</h4>\n                                            </Col>\n                                        </Row>\n                                        <Row style={{ marginTop: \"17.5px\" }}>\n                                            <Card className={\"specifics-card\"}>\n                                                <CardHeader className=\"b-l-primary card-header-customized-specifics\">\n                                                    <h4>More required detailed information related to core listing</h4>\n                                                    <p style={{ marginTop: \"7.5px\" }}>You will need to <strong style={{ textDecorationLine: \"underline\", color: \"#f73164\" }}>complete</strong> the following <strong>required</strong> information to give potential student's more of an idea of what they will be purchasing regarding certain fine details...</p>\n                                                </CardHeader>\n                                                <CardBody>\n                                                    <div className=\"form-row\">\n                                                        <Col sm=\"12 mb-3\" lg=\"12 mb-3\" xl=\"12 mb-3\" md=\"12 mb-3\">\n                                                            <Label>{subtitleChecks.label}</Label>\n                                                            <Input {...subtitleChecks.check(setError, register)} onChange={(e) => subtitleChecks.onChange(e, setValue)} value={currentValues.subtitle} className=\"form-control\" name={subtitleChecks.name} type={subtitleChecks.type} placeholder={subtitleChecks.placeholder} />\n                                                            {errors.subtitle ? <span className=\"span-tooltip\">{errors.subtitle.message}</span> : null}\n                                                        </Col>\n                                                    </div>\n                                                    <div className=\"form-row\">\n                                                        <Col md=\"6 mb-3\" sm=\"12 mb-3\" lg=\"6 mb-3\" xl=\"6 mb-3\">\n                                                            <FormGroup>\n                                                                <Label>{skillLevelChecks.label}</Label>\n                                                                <Controller\n                                                                    control={control}\n                                                                    name={skillLevelChecks.name}\n                                                                    {...skillLevelChecks.check(setError, register, clearErrors)}\n                                                                    render={({ field }) => (\n                                                                        <Select\n                                                                            {...field}\n                                                                            ref={skillLevelRef}\n                                                                            autoBlur={true}\n                                                                            placeholder={skillLevelChecks.placeholder}\n                                                                            defaultValue={null}\n                                                                            onMenuClose={() => {\n                                                                                skillLevelRef.current.blur();\n                                                                            }}\n                                                                            value={currentValues.skillLevel}\n                                                                            onChange={(selectedOption) => skillLevelChecks.onChange(selectedOption, setValue, clearErrors)}\n                                                                            options={experienceLevelOptions}\n                                                                        />\n                                                                    )}\n                                                                />\n                                                                {errors.skillLevel ? <span className=\"span-tooltip\">{errors.skillLevel.message}</span> : null}\n                                                            </FormGroup>\n                                                        </Col>\n                                                        <Col md=\"6 mb-3\" sm=\"12 mb-3\" lg=\"6 mb-3\" xl=\"6 mb-3\">\n                                                            <FormGroup>\n                                                                <Label>{languageSpokenChecks.label}</Label>\n                                                                <Controller\n                                                                    control={control}\n                                                                    name={languageSpokenChecks.name}\n                                                                    {...languageSpokenChecks.check(setError, register, clearErrors)}\n                                                                    render={({ field }) => (\n                                                                        <Select\n                                                                            {...field}\n                                                                            ref={languageSpokenRef}\n                                                                            autoBlur={true}\n                                                                            placeholder={languageSpokenChecks.placeholder}\n                                                                            defaultValue={null}\n                                                                            onMenuClose={() => {\n                                                                                languageSpokenRef.current.blur();\n                                                                            }}\n                                                                            value={currentValues.languageSpoken}\n                                                                            onChange={(selectedOption) => languageSpokenChecks.onChange(selectedOption, setValue, clearErrors)}\n                                                                            options={lanuageOptions}\n                                                                        />\n                                                                    )}\n                                                                />\n                                                                {errors.languageSpoken ? <span className=\"span-tooltip\">{errors.languageSpoken.message}</span> : null}\n                                                            </FormGroup>\n                                                        </Col>\n                                                    </div>\n                                                    <div className=\"form-row\">\n                                                        <Col md=\"5 mb-3\" sm=\"12 mb-3\" lg=\"5 mb-3\" xl=\"5 mb-3\">\n                                                            <FormGroup>\n                                                                <Label>{primaryLanguageChecks.label}</Label>\n                                                                <Controller\n                                                                    control={control}\n                                                                    name={primaryLanguageChecks.name}\n                                                                    {...primaryLanguageChecks.check(setError, register, clearErrors)}\n                                                                    render={({ field }) => (\n                                                                        <Select\n                                                                            {...field}\n                                                                            ref={primaryLanguageRef}\n                                                                            autoBlur={true}\n                                                                            placeholder={primaryLanguageChecks.placeholder}\n                                                                            defaultValue={null}\n                                                                            onMenuClose={() => {\n                                                                                primaryLanguageRef.current.blur();\n                                                                            }}\n                                                                            value={currentValues.primaryLanguageUsed}\n                                                                            onChange={(selectedOption) => primaryLanguageChecks.onChange(selectedOption, setValue, clearErrors)}\n                                                                            options={languageArrayNew}\n                                                                        />\n                                                                    )}\n                                                                />\n                                                                {errors.primaryLanguageUsed ? <span className=\"span-tooltip\">{errors.primaryLanguageUsed.message}</span> : null}\n                                                            </FormGroup>\n                                                        </Col>\n                                                        <Col md=\"7 mb-3\" sm=\"12 mb-3\" lg=\"7 mb-3\" xl=\"7 mb-3\">\n                                                            <FormGroup>\n                                                                <Label>{hoursOfCourseContentChecks.label}</Label>\n                                                                <Controller\n                                                                    control={control}\n                                                                    name={hoursOfCourseContentChecks.name}\n                                                                    {...hoursOfCourseContentChecks.check(setError, register, clearErrors)}\n                                                                    render={({ field }) => (\n                                                                        <Select\n                                                                            className={\"controlled-select-course\"}\n                                                                            {...field}\n                                                                            ref={primaryLanguageRef}\n                                                                            autoBlur={true}\n                                                                            placeholder={hoursOfCourseContentChecks.placeholder}\n                                                                            defaultValue={null}\n                                                                            onMenuClose={() => {\n                                                                                primaryLanguageRef.current.blur();\n                                                                            }}\n                                                                            value={currentValues.lengthInHours}\n                                                                            onChange={(selectedOption) => hoursOfCourseContentChecks.onChange(selectedOption, setValue, clearErrors)}\n                                                                            options={hoursInLengthOptions}\n                                                                        />\n                                                                    )}\n                                                                />\n                                                                {errors.lengthInHours ? <span className=\"span-tooltip\">{errors.lengthInHours.message}</span> : null}\n                                                            </FormGroup>\n                                                        </Col>\n                                                    </div>\n                                                    <div className=\"form-row\">\n                                                        <Col sm=\"12 mb-3\" lg=\"12 mb-3\" xl=\"12 mb-3\" md=\"12 mb-3\">\n                                                            <Label>{courseWelcomeMessageChecks.label}</Label>\n                                                            <Input {...courseWelcomeMessageChecks.check(setError, register)} onChange={(e) => courseWelcomeMessageChecks.onChange(e, setValue)} value={currentValues.welcomeMessage} className=\"form-control\" name={courseWelcomeMessageChecks.name} rows={8} type={courseWelcomeMessageChecks.type} placeholder={courseWelcomeMessageChecks.placeholder} />\n                                                            {errors.welcomeMessage ? <span className=\"span-tooltip\">{errors.welcomeMessage.message}</span> : null}\n                                                        </Col>\n                                                    </div>\n                                                    <div className=\"form-row\">\n                                                        <Col sm=\"12 mb-3\" lg=\"12 mb-3\" xl=\"12 mb-3\" md=\"12 mb-3\">\n                                                            <Label>{completionMessageChecks.label}</Label>\n                                                            <Input {...completionMessageChecks.check(setError, register)} onChange={(e) => completionMessageChecks.onChange(e, setValue)} value={currentValues.completionMessage} className=\"form-control\" name={completionMessageChecks.name} rows={8} type={completionMessageChecks.type} placeholder={completionMessageChecks.placeholder} />\n                                                            {errors.completionMessage ? <span className=\"span-tooltip\">{errors.completionMessage.message}</span> : null}\n                                                        </Col>\n                                                    </div>\n                                                    <hr />\n                                                </CardBody>\n                                            </Card>\n                                        </Row>\n                                    </CardBody>\n                                </Card>\n                            </Col>\n                        </Row>\n                    <Row>\n                        <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                            <Card>\n                                <CardBody>\n                                    <Card className={\"specifics-card\"}>\n                                        <CardHeader className=\"b-l-primary card-header-customized-specifics\">\n                                            <h4>Upload a <strong>PROMOTIONAL/DEMO</strong> video depicting what's being sold/provided</h4>\n                                            <p style={{ marginTop: \"7.5px\" }}>You will now need to upload a <strong style={{ textDecorationLine: \"underline\", color: \"#f73164\" }}>promotional video</strong> or <strong style={{ textDecorationLine: \"underline\", color: \"#f73164\" }}>demo/preview</strong> of what your course entials after being purchased/bought. You <strong style={{ textDecorationLine: \"underline\", color: \"#f73164\" }}>should</strong> give an <strong>accurate</strong> idea of what's being offered for sale with this video...</p>\n                                        </CardHeader>\n                                        <CardBody>\n                                            <div className=\"form-row\">\n                                                <Col sm=\"12 mb-3\" lg=\"12 mb-3\" xl=\"12 mb-3\" md=\"12 mb-3\">\n                                                    <Label>{subtitleChecks.label}</Label>\n                                                    <Input {...subtitleChecks.check(setError, register)} onChange={(e) => subtitleChecks.onChange(e, setValue)} value={currentValues.subtitle} className=\"form-control\" name={subtitleChecks.name} type={subtitleChecks.type} placeholder={subtitleChecks.placeholder} />\n                                                    {errors.subtitle ? <span className=\"span-tooltip\">{errors.subtitle.message}</span> : null}\n                                                </Col>\n                                            </div>\n                                            <div className=\"form-row\">\n                                                <div className=\"dz-message needsclick\">\n                                                    <Dropzone\n                                                        ref={dropzoneRef}\n                                                        PreviewComponent={(data) => renderPreviewOfFile(data, fileReady, filePathData)}\n                                                        maxFiles={1}\n                                                        autoUpload={true}\n                                                        onChangeStatus={(functions) => {\n                                                            setChangeOptions(functions);\n                                                        }}\n                                                        submitButtonDisabled={false}\n                                                        InputComponent={(accept, onFiles) => CustomInputHelper(accept, onFiles, setCurrentFilePathData, setCurrentUploadFileStatus, setFileReadyStatus)}\n                                                        onSubmit={onSubmitHelper}\n                                                        SubmitButtonComponent={(data, e) => {\n                                                            return (\n                                                                <div className=\"absolutely-position-submit-btn\">\n                                                                    {renderCustomButtonDropzone(data, e, currentFileSelectedUpload, setMetaFileData, setFileReadyStatus, fileMetaData)}\n                                                                </div>\n                                                            );\n                                                        }}\n                                                        multiple={false}\n                                                        canCancel={false}\n                                                        styles={{\n                                                            dropzone: { height: 325 },\n                                                            dropzoneActive: { borderColor: 'green' },\n                                                        }}\n                                                    />\n                                                </div>\n                                                {fileReady === true ? <Fragment>\n                                                    <hr className=\"secondary-hr\" />\n                                                    <div className=\"centered-both-ways\">\n                                                        <Button style={{ marginTop: \"25px\" }} onClick={(e) => {\n                                                            setMetaFileData(null);\n                                                            setFileReadyStatus(false);\n                                                            setCurrentUploadFileStatus(null);\n\n                                                            changeOptions.remove();\n                                                        }} className=\"btn-air-danger cancel-button-upload\" color=\"danger\" size=\"md\">Cancel Current/Pending Upload</Button>\n                                                    </div>\n                                                </Fragment> : null}\n                                            </div>\n                                            <hr />\n                                        </CardBody>\n                                    </Card>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                            <Card>\n                                <CardBody>\n                                    <Button style={{ width: \"100%\" }} outline className={\"btn-square-info\"} type={\"submit\"} color=\"info-2x\">{\"Submit form & proceed w/rest of logic\"}</Button>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    </Row>\n                </Form>\n            </Container>\n        </Fragment>\n    );\n}\nconst mapStateToProps = (state) => {\n    return {\n        userData: state.auth.data,\n        courseData: _.has(state.courseData, \"courseData\") ? state.courseData.courseData : []    \n    }\n}\nexport default connect(mapStateToProps, { updateCourseInformationData })(CreateNewCoursePageThree);"]},"metadata":{},"sourceType":"module"}