{"ast":null,"code":"import React from \"react\";\nimport { NotificationManager } from 'react-notifications'; // functions with export ability to slim down main component (pageThreeMain.js)..\n\nexport const calculateWhetherURLIsLegit = data => {\n  console.log(\"data calculateWhetherURLIsLegit : \", data);\n\n  const isValidHttpUrl = string => {\n    let url;\n\n    try {\n      url = new URL(string);\n    } catch (_) {\n      return false;\n    }\n\n    return url.protocol === \"http:\" || url.protocol === \"https:\";\n  };\n\n  NotificationManager.success(\"It fuckin' worked!\", \"YAY!\", 45000); // if (isValidHttpUrl(data)) {\n  //     return true;\n  // } else {\n  //     return \"You *must* enter a valid URL consisting of either https:// OR http:// along with .net/com/etc...\";\n  // };\n};","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/softwareHardwareExchanges/software/createListing/multiStepPages/pageThree/helpers/mainFunctions.js"],"names":["React","NotificationManager","calculateWhetherURLIsLegit","data","console","log","isValidHttpUrl","string","url","URL","_","protocol","success"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,mBAAT,QAAoC,qBAApC,C,CAGA;;AACA,OAAO,MAAMC,0BAA0B,GAAIC,IAAD,IAAU;AAChDC,EAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ,EAAkDF,IAAlD;;AAEA,QAAMG,cAAc,GAAIC,MAAD,IAAY;AAC/B,QAAIC,GAAJ;;AAEA,QAAI;AACFA,MAAAA,GAAG,GAAG,IAAIC,GAAJ,CAAQF,MAAR,CAAN;AACD,KAFD,CAEE,OAAOG,CAAP,EAAU;AACV,aAAO,KAAP;AACD;;AAED,WAAOF,GAAG,CAACG,QAAJ,KAAiB,OAAjB,IAA4BH,GAAG,CAACG,QAAJ,KAAiB,QAApD;AACH,GAVD;;AAYAV,EAAAA,mBAAmB,CAACW,OAApB,CAA4B,oBAA5B,EAAkD,MAAlD,EAA0D,KAA1D,EAfgD,CAgBhD;AACA;AACA;AACA;AACA;AACH,CArBM","sourcesContent":["import React from \"react\";\nimport { NotificationManager } from 'react-notifications';\n\n\n// functions with export ability to slim down main component (pageThreeMain.js)..\nexport const calculateWhetherURLIsLegit = (data) => {\n    console.log(\"data calculateWhetherURLIsLegit : \", data);\n    \n    const isValidHttpUrl = (string) => {\n        let url;\n        \n        try {\n          url = new URL(string);\n        } catch (_) {\n          return false;  \n        }\n      \n        return url.protocol === \"http:\" || url.protocol === \"https:\";\n    }\n    \n    NotificationManager.success(\"It fuckin' worked!\", \"YAY!\", 45000);\n    // if (isValidHttpUrl(data)) {\n    //     return true;\n    // } else {\n    //     return \"You *must* enter a valid URL consisting of either https:// OR http:// along with .net/com/etc...\";\n    // };\n}"]},"metadata":{},"sourceType":"module"}