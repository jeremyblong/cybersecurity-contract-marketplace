{"ast":null,"code":"var _jsxFileName = \"/home/kali/Documents/cybersecurity/client/src/components/dashboard/opportunities/employers/applyToListingHacker/applyAsHacker.js\";\nimport React, { Fragment, useState, useEffect } from 'react';\nimport \"./styles.css\";\nimport Breadcrumb from '../../../../../layout/breadcrumb';\nimport { Container, Row, Col, Card, CardBody, Button, CardHeader, ListGroupItem, ListGroup, FormGroup, Label, Input, InputGroupAddon, Form, InputGroup, InputGroupText } from 'reactstrap';\nimport helpers from \"./helpers/miscFunctions.js\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment\";\nimport { shiftCoreStyles } from \"../../../../../redux/actions/universal/index.js\";\nimport { disableBodyScroll, clearAllBodyScrollLocks } from 'body-scroll-lock';\nimport axios from 'axios';\nimport _ from \"lodash\";\nimport { Link, withRouter, useParams } from \"react-router-dom\";\nimport Select from 'react-select';\nimport { DateRangePicker } from 'react-date-range';\nconst {\n  TimelineHelper,\n  SheetPaneSubmittingDataHelper,\n  HelperRadioButtons\n} = helpers;\n\nconst ApplyAsHackerEmployerListingHelper = _ref => {\n  let {\n    userData,\n    shiftCoreStyles,\n    location\n  } = _ref;\n  // get URL ID from string\n  const {\n    id\n  } = useParams(); // initialize state items...\n\n  const [alreadyAdded, setAlreadyAddedState] = useState(null);\n  const [disabledDays, setDisabledDaysState] = useState([]);\n  const [physicalOrDigitalHackOptions, setPhysicalOrDigitalHackOptionsState] = useState([]);\n  const [sheetIsOpen, setSheetOpenState] = useState(false);\n  const [currentUserData, setCurrentUserData] = useState(null);\n  const [ready, setReadyGlobal] = useState(false);\n  const [listingReady, setListingReady] = useState(false);\n  const [listingData, setListingData] = useState(null);\n  const [dateRanges, setDateRanges] = useState(null);\n  const [datesReady, setDatesReady] = useState(false);\n\n  const handleDateSelection = ranges => {\n    // setDateRanges(ranges);\n    console.log(\"ranges\", ranges);\n  }; // deconstruct redux-state items...\n\n\n  const {\n    username,\n    firstName,\n    lastName,\n    registrationDate,\n    completedJobs\n  } = userData; // component mounted.\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    const globalConfig = {\n      config: {\n        params: {\n          uniqueId: userData.uniqueId\n        }\n      },\n      configuration: {\n        params: {\n          listingId: id\n        }\n      }\n    }; // fetch user information\n\n    axios.get(`${process.env.REACT_APP_BASE_URL}/gather/listing/all/info`, globalConfig.configuration).then(res => {\n      if (res.data.message === \"Successfully gathered listing information!\") {\n        console.log(res.data); // deconstruct listing data/obj\n\n        const {\n          listing\n        } = res.data; // update selected date ranges\n        // set listing data\n\n        setListingData(listing); // new promise to delay response\n\n        new Promise((resolve, reject) => {\n          // create new date array\n          const newDateArray = []; // start & end dates array's\n\n          const endDateArray = [];\n          const startDateArray = []; // update selected date ranges\n\n          const selected = listing.testingDatesHackers; // loop & prepare listing data related to dates\n\n          for (let index = 0; index < selected.length; index++) {\n            const el = selected[index];\n            newDateArray.push({\n              startDate: new Date(el.startDate),\n              endDate: new Date(el.endDate),\n              key: 'selection'\n            });\n            let convertedStartDate = new Date(el.startDate).getDate() + '/' + (new Date(el.startDate).getMonth() + 1) + '/' + new Date(el.startDate).getFullYear();\n            let convertedEndDate = new Date(el.endDate).getDate() + '/' + (new Date(el.endDate).getMonth() + 1) + '/' + new Date(el.endDate).getFullYear();\n            startDateArray.push(convertedStartDate);\n            endDateArray.push(convertedEndDate); // check when last element is TRUE and end looping array\n\n            if (selected.length - 1 === index) {\n              resolve({\n                newDateArray,\n                startDateArray,\n                endDateArray\n              });\n            }\n          }\n        }).then(values => {\n          const {\n            startDateArray,\n            endDateArray,\n            newDateArray\n          } = values;\n          console.log(startDateArray, endDateArray); // min & max dates\n\n          const maxDate = new Date(Math.max.apply(null, endDateArray));\n          const minDate = new Date(Math.min.apply(null, startDateArray));\n          const disabledDays = [];\n\n          const checkIfSameDay = (array, value) => {\n            return array.map((dateee, index) => {\n              console.log(\"dateee\", dateee);\n            });\n          };\n\n          if (minDate < new Date()) {\n            console.log(\"new Date() is actually MOST RECENT!\"); // use new Date() instead!\n\n            for (let d = new Date(); d <= new Date(new Date().setDate(d.getDate() + 1)); d.setDate(d.getDate() + 1)) {\n              let convertedStartDate = new Date(el.startDate).getDate() + '/' + (new Date(el.startDate).getMonth() + 1) + '/' + new Date(el.startDate).getFullYear();\n              let convertedEndDate = new Date(el.endDate).getDate() + '/' + (new Date(el.endDate).getMonth() + 1) + '/' + new Date(el.endDate).getFullYear();\n\n              if (startDateArray.includes()) {\n                disabledDays.push(new Date(d));\n              }\n\n              console.log(\"new Date(d) === maxDate\", new Date(d), new Date(maxDate)); // check IF END\n\n              if (new Date(d).toDateString() === new Date(maxDate).toDateString()) {\n                // end reached!\n                // set disabled days array\n                setDisabledDaysState(disabledDays); // set SELECTED/PREVIOUSLY-PICKED days state\n\n                setDateRanges(newDateArray); // display content finally!\n\n                setDatesReady(true);\n              }\n            }\n          } else {\n            console.log(\"minDate is actually MOST RECENT!\"); // use minDate instead!\n            // use new Date() instead!\n\n            for (let d = minDate; d <= new Date(new Date().setDate(d.getDate() + 1)); d.setDate(d.getDate() + 1)) {\n              if (checkIfSameDay(startDateArray, new Date(d))) {\n                disabledDays.push(new Date(d));\n              }\n\n              console.log(\"new Date(d) === maxDate\", new Date(d), new Date(maxDate)); // check IF END\n\n              if (new Date(d).toDateString() === new Date(maxDate).toDateString()) {\n                // end reached!\n                // set disabled days array\n                setDisabledDaysState(disabledDays); // set SELECTED/PREVIOUSLY-PICKED days state\n\n                setDateRanges(newDateArray); // display content finally!\n\n                setDatesReady(true);\n              }\n            }\n          }\n\n          console.log(\"maxDate\", maxDate);\n          console.log(\"minDate\", minDate);\n        }); // update physicalOrDigitalHackOptions options \n\n        switch (listing.typeOfHack.value) {\n          case \"physical-hack\":\n            setPhysicalOrDigitalHackOptionsState([{\n              label: \"BOTH (Digital/Physical hack's) Hack Type's\",\n              value: \"both-assets\",\n              isDisabled: true\n            }, {\n              label: \"Digital/Internet-Hack ONLY\",\n              value: \"digital-internet-hack\",\n              isDisabled: true\n            }, {\n              label: \"Physical-Hack ONLY\",\n              value: \"physical-hack\"\n            }]);\n            break;\n\n          case \"\":\n            setPhysicalOrDigitalHackOptionsState([{\n              label: \"BOTH (Digital/Physical hack's) Hack Type's\",\n              value: \"both-assets\",\n              isDisabled: true\n            }, {\n              label: \"Digital/Internet-Hack ONLY\",\n              value: \"digital-internet-hack\"\n            }, {\n              isDisabled: true,\n              label: \"Physical-Hack ONLY\",\n              value: \"physical-hack\"\n            }]);\n            break;\n\n          case \"\":\n            setPhysicalOrDigitalHackOptionsState([{\n              label: \"BOTH (Digital/Physical hack's) Hack Type's\",\n              value: \"both-assets\"\n            }, {\n              isDisabled: true,\n              label: \"Digital/Internet-Hack ONLY\",\n              value: \"digital-internet-hack\"\n            }, {\n              isDisabled: true,\n              label: \"Physical-Hack ONLY\",\n              value: \"physical-hack\"\n            }]);\n            break;\n\n          default:\n            break;\n        } // set listing data READY\n\n\n        setListingReady(true);\n      } else {\n        // log error from DB request\n        console.log('err', res.data);\n      }\n    }).catch(err => {\n      // log error from DB request\n      console.log(err);\n    }); // gather core anonymous user information\n\n    axios.get(`${process.env.REACT_APP_BASE_URL}/gather/core/anonymous/user/data`, globalConfig.config).then(res => {\n      if (res.data.message === \"Successfully gathered core user information!\") {\n        console.log(res.data);\n        const {\n          user\n        } = res.data;\n        setCurrentUserData(user);\n        setReadyGlobal(true);\n      } else {\n        console.log('err', res.data);\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []); // render custom sentence instead of DRY repeating\n\n  const renderSentence = (actual, type, val) => {\n    // run conditionals to figure out what to display to user and what to mark as \"incomplete\"\n    if (ready === true && currentUserData !== null) {\n      // ready to display\n      if (currentUserData.hasOwnProperty(actual)) {\n        // return proper/desired \"right\" filled out data\n        return /*#__PURE__*/React.createElement(\"p\", {\n          className: \"mb-1 listitem-sub-text-custom-custom\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 24\n          }\n        }, \"Your \", type, \" \", /*#__PURE__*/React.createElement(\"strong\", {\n          style: currentUserData.hasOwnProperty(actual) ? {\n            color: \"#dc3545\",\n            fontSize: \"1.005rem\",\n            fontWeight: 500\n          } : {\n            color: \"#a927f9\",\n            fontSize: \"1.005rem\",\n            fontWeight: 500\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 90\n          }\n        }, val), \" will be submitted to the employer...\");\n      } else {\n        // throw error warning user\n        return /*#__PURE__*/React.createElement(\"p\", {\n          className: \"mb-1 listitem-sub-text-custom-custom override-red\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 24\n          }\n        }, \"You have NOT filled out the required field of \", /*#__PURE__*/React.createElement(\"em\", {\n          style: {\n            textDecorationLine: \"underline\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 137\n          }\n        }, type), \", therefore you will be unable to apply to this listing! If you'd like to apply to this listing, go to \", /*#__PURE__*/React.createElement(Link, {\n          to: \"/profile/settings/edit\",\n          className: \"linky\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 299\n          }\n        }, \"your profile settings page\"), \" and edit the appropriate sections, then come back and try again!\");\n      }\n    } else {\n      // return loading \"data\"\n      return /*#__PURE__*/React.createElement(\"p\", {\n        className: \"mb-1 listitem-sub-text-custom-custom\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 20\n        }\n      }, \"Still loading your data/content...!\");\n    }\n  }; // view more fields in PANE\n\n\n  const viewRemainderOfIncludedFields = alreadyIncludedArray => {\n    console.log(\"alreadyIncludedArray arr... : \", alreadyIncludedArray); // already shown items *(HIGHLIGHT)*\n\n    setAlreadyAddedState(alreadyIncludedArray); // shift \"lock\" styles to prevent scrolling and clicking\n\n    shiftCoreStyles(true); // open modal - change modal state to OPEN\n\n    setSheetOpenState(true); // set delay to allow load\n\n    setTimeout(() => {\n      // select outter body classname to pause/freeze\n      const target = document.querySelector(\".enact-nonclick\"); // DISABLE body scroll entirely\n\n      disableBodyScroll(target);\n    }, 500);\n  };\n\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n  };\n\n  const dayInMilli = 86400000;\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SheetPaneSubmittingDataHelper, {\n    ready: ready,\n    shiftCoreStyles: shiftCoreStyles,\n    alreadyAdded: alreadyAdded,\n    currentUserData: currentUserData,\n    clearAllBodyScrollLocks: clearAllBodyScrollLocks,\n    userData: userData,\n    sheetIsOpen: sheetIsOpen,\n    setSheetOpenState: setSheetOpenState,\n    renderSentence: renderSentence,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Breadcrumb, {\n    passedClassname: \"custom-breadcrumb-class\",\n    parent: `Apply & Work To Earn ${process.env.REACT_APP_CRYPTO_TOKEN_NAME} to cashout for REAL ($$$-USD)`,\n    title: \"Review job requirements & details + apply to position/listing!\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    className: \"container-default\",\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"customized-row-apply\",\n    style: {\n      paddingTop: \"25px \"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    className: \"custom-card-inner customized-top-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    className: \"b-l-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 33\n    }\n  }, \"Type of hack (physical location or digital asset)\"), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      paddingTop: \"7.5px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 33\n    }\n  }, \"This is the \", /*#__PURE__*/React.createElement(\"em\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 80\n    }\n  }, \"TYPE\"), \" of hack this \", /*#__PURE__*/React.createElement(\"em\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 107\n    }\n  }, \"specific listing\"), \" requires from its participants. These selected options have absolutely \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 204\n    }\n  }, \"NO LIENENCY\"), \" and any disregard to platform rules will result in \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 284\n    }\n  }, \"IMMEDIATE PERMENANT BANNING\"))), /*#__PURE__*/React.createElement(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(HelperRadioButtons, {\n    listingReady: listingReady,\n    listingData: listingData,\n    id: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 33\n    }\n  }))))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"6\",\n    lg: \"6\",\n    xl: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    className: \"custom-card-inner custom-card-inner-customized\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    className: \"b-l-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 33\n    }\n  }, \"Type Of Data That'll Be Automatically Submitted\"), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 33\n    }\n  }, \"This is the data/information that'll be automatically submitted to the employer to give them a better idea of who/what you are and to hopefully personalize the experience a bit more...\")), /*#__PURE__*/React.createElement(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(ListGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(ListGroupItem, {\n    className: \"list-group-item-action flex-column align-items-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex w-100 justify-content-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    className: \"mb-1 listitem-header-custom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 41\n    }\n  }, \"Username\"), /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 102\n    }\n  }, \"Will be submitted to employer\")), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 41\n    }\n  }), renderSentence(\"username\", \"Username\", username)), /*#__PURE__*/React.createElement(ListGroupItem, {\n    className: \"list-group-item-action flex-column align-items-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex w-100 justify-content-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    className: \"mb-1 listitem-header-custom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 41\n    }\n  }, \"First Name & Last Name (Together)\"), /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 127\n    }\n  }, \"Will be submitted to employer\")), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 41\n    }\n  }), renderSentence(\"fullName\", \"Full Name\", `${firstName} ${lastName}`)), /*#__PURE__*/React.createElement(ListGroupItem, {\n    className: \"list-group-item-action flex-column align-items-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex w-100 justify-content-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    className: \"mb-1 listitem-header-custom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 41\n    }\n  }, \"Completed Job Count\"), /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 113\n    }\n  }, \"Will be submitted to employer\")), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 41\n    }\n  }), renderSentence(\"registrationDate\", \"Registration date of\", moment(registrationDate).fromNow())), /*#__PURE__*/React.createElement(ListGroupItem, {\n    className: \"list-group-item-action flex-column align-items-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex w-100 justify-content-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    className: \"mb-1 listitem-header-custom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 41\n    }\n  }, \"Created Account (from ago...)\"), /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 123\n    }\n  }, \"Will be submitted to employer\")), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 41\n    }\n  }), renderSentence(\"completedJobs\", \"Completed Job Count\", completedJobs)), /*#__PURE__*/React.createElement(ListGroupItem, {\n    className: \"list-group-item-action flex-column align-items-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    style: {\n      width: \"100%\"\n    },\n    className: \"btn-square btn-air-info\",\n    onClick: () => {\n      // View ALL included fields...\n      viewRemainderOfIncludedFields([\"username\", \"fullName\", \"registrationDate\", \"completedJobs\"]);\n    },\n    outline: true,\n    color: \"info-2x\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 41\n    }\n  }, \"View all included fields (including above mentioned)\")))))), /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"6\",\n    lg: \"6\",\n    xl: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    className: \"custom-card-inner custom-card-inner-customized\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    className: \"b-l-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 37\n    }\n  }, \"REQUIRED\"), \" data to be completed/filled-out\")), /*#__PURE__*/React.createElement(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    className: \" m-form__group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 41\n    }\n  }, \"Message To Employer\"), /*#__PURE__*/React.createElement(InputGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(InputGroupAddon, {\n    addonType: \"prepend\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(InputGroupText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 82\n    }\n  }, \"@\")), /*#__PURE__*/React.createElement(Input, {\n    className: \"form-control\",\n    type: \"text\",\n    placeholder: \"Email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 45\n    }\n  }))), datesReady === true ? /*#__PURE__*/React.createElement(DateRangePicker, {\n    ranges: dateRanges,\n    onChange: handleDateSelection // onPreviewChange={(value1, value2) => {\n    //     console.log(value1, value2);\n    // }}\n    ,\n    minDate: new Date(),\n    initialFocusedRange: obj => {\n      console.log(\"obj\", obj);\n    } // go back MAX 2 WEEKS and start from there\n    // minDate={new Date(new Date.getTime() - (dayInMilli * 14))}\n    ,\n    disabledDates: disabledDays,\n    scroll: {\n      enabled: true\n    },\n    direction: \"horizontal\" // showMonthAndYearPickers={true}\n    ,\n    rangeColors: [\"#f73164\", \"#a927f9\", \"#f73164\", \"#a927f9\", \"#f73164\", \"#a927f9\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 60\n    }\n  }) : null, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 41\n    }\n  }, \"Account Type (Digital/Physical-hack type)\"), /*#__PURE__*/React.createElement(Select, {\n    placeholder: \"Select your desired hack type (of enabled options)\",\n    value: null,\n    onChange: selectedOption => {},\n    options: physicalOrDigitalHackOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 41\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 41\n    }\n  }, \"Messge To Employer\"), /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"Enter your 'custom' message to the employer...\",\n    onChange: handleInputChange,\n    name: \"message-to-employer\",\n    type: \"textarea\",\n    className: \"form-control input-air-primary\",\n    rows: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 41\n    }\n  }))))))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(TimelineHelper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 25\n    }\n  })))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    userData: state.auth.data\n  };\n};\n\nexport default connect(mapStateToProps, {\n  shiftCoreStyles\n})(withRouter(ApplyAsHackerEmployerListingHelper));","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/opportunities/employers/applyToListingHacker/applyAsHacker.js"],"names":["React","Fragment","useState","useEffect","Breadcrumb","Container","Row","Col","Card","CardBody","Button","CardHeader","ListGroupItem","ListGroup","FormGroup","Label","Input","InputGroupAddon","Form","InputGroup","InputGroupText","helpers","connect","moment","shiftCoreStyles","disableBodyScroll","clearAllBodyScrollLocks","axios","_","Link","withRouter","useParams","Select","DateRangePicker","TimelineHelper","SheetPaneSubmittingDataHelper","HelperRadioButtons","ApplyAsHackerEmployerListingHelper","userData","location","id","alreadyAdded","setAlreadyAddedState","disabledDays","setDisabledDaysState","physicalOrDigitalHackOptions","setPhysicalOrDigitalHackOptionsState","sheetIsOpen","setSheetOpenState","currentUserData","setCurrentUserData","ready","setReadyGlobal","listingReady","setListingReady","listingData","setListingData","dateRanges","setDateRanges","datesReady","setDatesReady","handleDateSelection","ranges","console","log","username","firstName","lastName","registrationDate","completedJobs","window","scrollTo","globalConfig","config","params","uniqueId","configuration","listingId","get","process","env","REACT_APP_BASE_URL","then","res","data","message","listing","Promise","resolve","reject","newDateArray","endDateArray","startDateArray","selected","testingDatesHackers","index","length","el","push","startDate","Date","endDate","key","convertedStartDate","getDate","getMonth","getFullYear","convertedEndDate","values","maxDate","Math","max","apply","minDate","min","checkIfSameDay","array","value","map","dateee","d","setDate","includes","toDateString","typeOfHack","label","isDisabled","catch","err","user","renderSentence","actual","type","val","hasOwnProperty","color","fontSize","fontWeight","textDecorationLine","viewRemainderOfIncludedFields","alreadyIncludedArray","setTimeout","target","document","querySelector","handleInputChange","e","name","dayInMilli","REACT_APP_CRYPTO_TOKEN_NAME","paddingTop","fromNow","width","obj","enabled","selectedOption","mapStateToProps","state","auth"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport \"./styles.css\";\nimport Breadcrumb from '../../../../../layout/breadcrumb';\nimport { Container, Row, Col, Card, CardBody, Button, CardHeader, ListGroupItem, ListGroup, FormGroup, Label, Input, InputGroupAddon, Form, InputGroup, InputGroupText } from 'reactstrap';\nimport helpers from \"./helpers/miscFunctions.js\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment\";\nimport { shiftCoreStyles } from \"../../../../../redux/actions/universal/index.js\";\nimport { disableBodyScroll, clearAllBodyScrollLocks } from 'body-scroll-lock';\nimport axios from 'axios';\nimport _ from \"lodash\";\nimport { Link, withRouter, useParams } from \"react-router-dom\";\nimport Select from 'react-select';\nimport { DateRangePicker } from 'react-date-range';\n\nconst { TimelineHelper, SheetPaneSubmittingDataHelper, HelperRadioButtons } = helpers;\n\n\nconst ApplyAsHackerEmployerListingHelper = ({ userData, shiftCoreStyles, location }) => {\n\n    // get URL ID from string\n    const { id } = useParams();\n    // initialize state items...\n    const [ alreadyAdded, setAlreadyAddedState ] = useState(null);\n    const [ disabledDays, setDisabledDaysState ] = useState([]);\n    const [ physicalOrDigitalHackOptions, setPhysicalOrDigitalHackOptionsState ] = useState([]);\n    const [ sheetIsOpen, setSheetOpenState ] = useState(false);\n    const [ currentUserData, setCurrentUserData ] = useState(null);\n    const [ ready, setReadyGlobal ] = useState(false);\n    const [ listingReady, setListingReady ] = useState(false);\n    const [ listingData, setListingData ] = useState(null);\n    const [ dateRanges, setDateRanges ] = useState(null);\n    const [ datesReady, setDatesReady ] = useState(false);\n    \n    const handleDateSelection = (ranges) => {\n        // setDateRanges(ranges);\n        console.log(\"ranges\", ranges);\n    }\n    // deconstruct redux-state items...\n    const { username, firstName, lastName, registrationDate, completedJobs } = userData;\n\n    // component mounted.\n    useEffect(() => {\n        window.scrollTo(0, 0);\n\n        const globalConfig = {\n            config: {\n                params: {\n                    uniqueId: userData.uniqueId\n                }\n            },\n            configuration: {\n                params: {\n                    listingId: id\n                }\n            }\n        }\n        // fetch user information\n        axios.get(`${process.env.REACT_APP_BASE_URL}/gather/listing/all/info`, globalConfig.configuration).then((res) => {\n            if (res.data.message === \"Successfully gathered listing information!\") {\n                console.log(res.data);\n                // deconstruct listing data/obj\n                const { listing } = res.data;\n                // update selected date ranges\n\n                // set listing data\n                setListingData(listing);\n                // new promise to delay response\n                    new Promise((resolve, reject) => {\n                        // create new date array\n                        const newDateArray = [];\n                        // start & end dates array's\n                        const endDateArray = [];\n                        const startDateArray = [];\n                        // update selected date ranges\n                        const selected = listing.testingDatesHackers;\n                        // loop & prepare listing data related to dates\n                        for (let index = 0; index < selected.length; index++) {\n                            const el = selected[index];\n                            newDateArray.push({\n                                startDate: new Date(el.startDate),\n                                endDate: new Date(el.endDate),\n                                key: 'selection',\n                            });\n                            let convertedStartDate = (new Date(el.startDate).getDate()) + '/' + (new Date(el.startDate).getMonth() + 1) + '/' + (new Date(el.startDate).getFullYear());\n                            let convertedEndDate = (new Date(el.endDate).getDate()) + '/' + (new Date(el.endDate).getMonth() + 1) + '/' + (new Date(el.endDate)).getFullYear();\n                            startDateArray.push(convertedStartDate);\n                            endDateArray.push(convertedEndDate);\n                            // check when last element is TRUE and end looping array\n                            if ((selected.length - 1) === index) {\n                                resolve({ newDateArray, startDateArray, endDateArray });\n                            }\n                        }\n                    }).then((values) => {\n\n                        const { startDateArray, endDateArray, newDateArray } = values;\n\n                        console.log(startDateArray, endDateArray)\n                        // min & max dates\n                        const maxDate = new Date(Math.max.apply(null, endDateArray));\n                        const minDate = new Date(Math.min.apply(null, startDateArray));\n                        const disabledDays = [];\n\n                        const checkIfSameDay = (array, value) => {\n                            return array.map((dateee, index) => {\n                                console.log(\"dateee\", dateee);\n                            })\n                        }\n\n                        if (minDate < new Date()) {\n                            console.log(\"new Date() is actually MOST RECENT!\")\n                            // use new Date() instead!\n                            for (let d = new Date(); d <= new Date(new Date().setDate(d.getDate() + 1)); d.setDate(d.getDate() + 1)) {\n                                let convertedStartDate = (new Date(el.startDate).getDate()) + '/' + (new Date(el.startDate).getMonth() + 1) + '/' + (new Date(el.startDate).getFullYear());\n                                let convertedEndDate = (new Date(el.endDate).getDate()) + '/' + (new Date(el.endDate).getMonth() + 1) + '/' + (new Date(el.endDate)).getFullYear();\n\n                                if (startDateArray.includes()) {\n                                    disabledDays.push(new Date(d));\n                                }\n                                console.log(\"new Date(d) === maxDate\", new Date(d), new Date(maxDate));\n                                // check IF END\n                                if (new Date(d).toDateString() === new Date(maxDate).toDateString()) {\n                                    // end reached!\n                                    // set disabled days array\n                                    setDisabledDaysState(disabledDays);\n                                    // set SELECTED/PREVIOUSLY-PICKED days state\n                                    setDateRanges(newDateArray);\n                                    // display content finally!\n                                    setDatesReady(true);\n                                }\n                            }\n                        } else {\n                            console.log(\"minDate is actually MOST RECENT!\")\n                            // use minDate instead!\n                            // use new Date() instead!\n                            for (let d = minDate; d <= new Date(new Date().setDate(d.getDate() + 1)); d.setDate(d.getDate() + 1)) {\n                                if (checkIfSameDay(startDateArray, new Date(d))) {\n                                    disabledDays.push(new Date(d));\n                                }\n                                console.log(\"new Date(d) === maxDate\", new Date(d), new Date(maxDate));\n                                // check IF END\n                                if (new Date(d).toDateString() === new Date(maxDate).toDateString()) {\n                                    // end reached!\n                                    // set disabled days array\n                                    setDisabledDaysState(disabledDays);\n                                    // set SELECTED/PREVIOUSLY-PICKED days state\n                                    setDateRanges(newDateArray);\n                                    // display content finally!\n                                    setDatesReady(true);\n                                }\n                            }\n                        }\n\n                        console.log(\"maxDate\", maxDate);\n                        console.log(\"minDate\", minDate);\n                    })\n                // update physicalOrDigitalHackOptions options \n                switch (listing.typeOfHack.value) {\n                    case \"physical-hack\":\n                        setPhysicalOrDigitalHackOptionsState([{ label: \"BOTH (Digital/Physical hack's) Hack Type's\", value: \"both-assets\", isDisabled: true }, { label: \"Digital/Internet-Hack ONLY\", value: \"digital-internet-hack\", isDisabled: true }, { label: \"Physical-Hack ONLY\", value: \"physical-hack\" }]);\n                        break;\n                    case \"\":\n                        setPhysicalOrDigitalHackOptionsState([{ label: \"BOTH (Digital/Physical hack's) Hack Type's\", value: \"both-assets\", isDisabled: true }, { label: \"Digital/Internet-Hack ONLY\", value: \"digital-internet-hack\" }, { isDisabled: true, label: \"Physical-Hack ONLY\", value: \"physical-hack\" }]);\n                        break;\n                    case \"\":\n                        setPhysicalOrDigitalHackOptionsState([{ label: \"BOTH (Digital/Physical hack's) Hack Type's\", value: \"both-assets\" }, { isDisabled: true, label: \"Digital/Internet-Hack ONLY\", value: \"digital-internet-hack\" }, { isDisabled: true, label: \"Physical-Hack ONLY\", value: \"physical-hack\" }]);\n                        break;\n                    default:\n                        break;\n                }\n                // set listing data READY\n                setListingReady(true);\n            } else {\n                // log error from DB request\n                console.log('err', res.data);\n            }\n        }).catch((err) => {\n            // log error from DB request\n            console.log(err);\n        })\n        // gather core anonymous user information\n        axios.get(`${process.env.REACT_APP_BASE_URL}/gather/core/anonymous/user/data`, globalConfig.config).then((res) => {\n            if (res.data.message === \"Successfully gathered core user information!\") {\n                console.log(res.data);\n\n                const { user } = res.data;\n\n                setCurrentUserData(user);\n                setReadyGlobal(true);\n            } else {\n                console.log('err', res.data);\n            }\n        }).catch((err) => {\n            console.log(err);\n        })\n    }, [])\n    \n    // render custom sentence instead of DRY repeating\n    const renderSentence = (actual, type, val) => {\n        // run conditionals to figure out what to display to user and what to mark as \"incomplete\"\n        if (ready === true && currentUserData !== null) {\n            // ready to display\n            if (currentUserData.hasOwnProperty(actual)) {\n                // return proper/desired \"right\" filled out data\n                return <p className={\"mb-1 listitem-sub-text-custom-custom\"}>Your {type} <strong style={currentUserData.hasOwnProperty(actual) ? { color: \"#dc3545\", fontSize: \"1.005rem\", fontWeight: 500 } : { color: \"#a927f9\", fontSize: \"1.005rem\", fontWeight: 500 }}>{val}</strong> will be submitted to the employer...</p>;\n            } else {\n                // throw error warning user\n                return <p className={\"mb-1 listitem-sub-text-custom-custom override-red\"}>You have NOT filled out the required field of <em style={{ textDecorationLine: \"underline\" }}>{type}</em>, therefore you will be unable to apply to this listing! If you'd like to apply to this listing, go to <Link to={\"/profile/settings/edit\"} className=\"linky\">your profile settings page</Link> and edit the appropriate sections, then come back and try again!</p>;\n            }\n        } else {\n            // return loading \"data\"\n            return <p className={\"mb-1 listitem-sub-text-custom-custom\"}>Still loading your data/content...!</p>;\n        }\n    }\n    // view more fields in PANE\n    const viewRemainderOfIncludedFields = (alreadyIncludedArray) => {\n        console.log(\"alreadyIncludedArray arr... : \", alreadyIncludedArray);\n\n        // already shown items *(HIGHLIGHT)*\n        setAlreadyAddedState(alreadyIncludedArray);\n        // shift \"lock\" styles to prevent scrolling and clicking\n        shiftCoreStyles(true);\n        // open modal - change modal state to OPEN\n        setSheetOpenState(true);\n        // set delay to allow load\n        setTimeout(() => {\n            // select outter body classname to pause/freeze\n            const target = document.querySelector(\".enact-nonclick\");\n            // DISABLE body scroll entirely\n            disableBodyScroll(target);\n        },  500);\n    }\n    const handleInputChange = (e) => {\n        const { name, value } = e.target;\n    }\n    const dayInMilli = 86400000;    \n    return (\n        <Fragment>\n            <SheetPaneSubmittingDataHelper ready={ready} shiftCoreStyles={shiftCoreStyles} alreadyAdded={alreadyAdded} currentUserData={currentUserData} clearAllBodyScrollLocks={clearAllBodyScrollLocks} userData={userData} sheetIsOpen={sheetIsOpen} setSheetOpenState={setSheetOpenState} renderSentence={renderSentence} />\n            <Breadcrumb passedClassname={\"custom-breadcrumb-class\"} parent={`Apply & Work To Earn ${process.env.REACT_APP_CRYPTO_TOKEN_NAME} to cashout for REAL ($$$-USD)`} title={\"Review job requirements & details + apply to position/listing!\"} />\n            <Container className=\"container-default\" fluid={true}>\n                <Row className=\"customized-row-apply\" style={{ paddingTop: \"25px \" }}>\n                    <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                        <Card className=\"custom-card-inner customized-top-card\">\n                            <CardHeader className=\"b-l-primary\">\n                                <h5>Type of hack (physical location or digital asset)</h5>\n                                <p style={{ paddingTop: \"7.5px\" }}>This is the <em>TYPE</em> of hack this <em>specific listing</em> requires from its participants. These selected options have absolutely <strong>NO LIENENCY</strong> and any disregard to platform rules will result in <strong>IMMEDIATE PERMENANT BANNING</strong></p>\n                            </CardHeader>\n                            <CardBody>\n                                <HelperRadioButtons listingReady={listingReady} listingData={listingData} id={id} />\n                            </CardBody>\n                        </Card>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col sm=\"12\" md=\"6\" lg=\"6\" xl=\"6\">\n                        <Card className=\"custom-card-inner custom-card-inner-customized\">\n                            <CardHeader className=\"b-l-info\">\n                                <h5>Type Of Data That'll Be Automatically Submitted</h5>\n                                <hr />\n                                <p>This is the data/information that'll be automatically submitted to the employer to give them a better idea of who/what you are and to hopefully personalize the experience a bit more...</p>\n                            </CardHeader>\n                            <CardBody>\n                                <ListGroup>\n                                    <ListGroupItem className=\"list-group-item-action flex-column align-items-start\" >\n                                        <div className=\"d-flex w-100 justify-content-between\">\n                                        <h5 className=\"mb-1 listitem-header-custom\">{\"Username\"}</h5><small>{\"Will be submitted to employer\"}</small>\n                                        </div>\n                                        <hr />\n                                        {renderSentence(\"username\", \"Username\", username)}\n                                    </ListGroupItem>\n                                    <ListGroupItem className=\"list-group-item-action flex-column align-items-start\" >\n                                        <div className=\"d-flex w-100 justify-content-between\">\n                                        <h5 className=\"mb-1 listitem-header-custom\">{\"First Name & Last Name (Together)\"}</h5><small>{\"Will be submitted to employer\"}</small>\n                                        </div>\n                                        <hr />\n                                        {renderSentence(\"fullName\", \"Full Name\", `${firstName} ${lastName}`)}\n                                    </ListGroupItem>\n                                    <ListGroupItem className=\"list-group-item-action flex-column align-items-start\" >\n                                        <div className=\"d-flex w-100 justify-content-between\">\n                                        <h5 className=\"mb-1 listitem-header-custom\">{\"Completed Job Count\"}</h5><small>{\"Will be submitted to employer\"}</small>\n                                        </div>\n                                        <hr />\n                                        {renderSentence(\"registrationDate\", \"Registration date of\", moment(registrationDate).fromNow())}\n                                    </ListGroupItem>\n                                    <ListGroupItem className=\"list-group-item-action flex-column align-items-start\" >\n                                        <div className=\"d-flex w-100 justify-content-between\">\n                                        <h5 className=\"mb-1 listitem-header-custom\">{\"Created Account (from ago...)\"}</h5><small>{\"Will be submitted to employer\"}</small>\n                                        </div>\n                                        <hr />\n                                        {renderSentence(\"completedJobs\", \"Completed Job Count\", completedJobs)}\n                                    </ListGroupItem>\n                                    <ListGroupItem className=\"list-group-item-action flex-column align-items-start\" >\n                                        <Button style={{ width: \"100%\" }} className={\"btn-square btn-air-info\"} onClick={() => {\n                                            // View ALL included fields...\n                                            viewRemainderOfIncludedFields([\"username\", \"fullName\", \"registrationDate\", \"completedJobs\"]);\n                                        }} outline color=\"info-2x\">View all included fields (including above mentioned)</Button>\n                                    </ListGroupItem>\n                                </ListGroup>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                    <Col sm=\"12\" md=\"6\" lg=\"6\" xl=\"6\">\n                        <Card className=\"custom-card-inner custom-card-inner-customized\">\n                            <CardHeader className=\"b-l-info\">\n                                <h5><strong>REQUIRED</strong> data to be completed/filled-out</h5>\n                            </CardHeader>\n                            <CardBody>\n                                <Form>\n                                    <FormGroup className=\" m-form__group\">\n                                        <Label>Message To Employer</Label>\n                                        <InputGroup>\n                                            <InputGroupAddon addonType=\"prepend\"><InputGroupText>{\"@\"}</InputGroupText></InputGroupAddon>\n                                            <Input className=\"form-control\" type=\"text\" placeholder=\"Email\"/>\n                                        </InputGroup>\n                                    </FormGroup>\n                                    {datesReady === true ? <DateRangePicker\n                                        ranges={dateRanges}\n                                        onChange={handleDateSelection}\n                                        // onPreviewChange={(value1, value2) => {\n                                        //     console.log(value1, value2);\n                                        // }}\n                                        minDate={new Date()}\n                                        initialFocusedRange={(obj) => {\n                                            console.log(\"obj\", obj);\n                                        }}\n                                        // go back MAX 2 WEEKS and start from there\n                                        // minDate={new Date(new Date.getTime() - (dayInMilli * 14))}\n                                        disabledDates={disabledDays}\n                                        scroll={{ enabled: true }}\n                                        direction={\"horizontal\"}\n                                        // showMonthAndYearPickers={true}\n                                        rangeColors={[\"#f73164\", \"#a927f9\", \"#f73164\", \"#a927f9\", \"#f73164\", \"#a927f9\"]}\n                                    /> : null}\n                                    <FormGroup>\n                                        <Label>Account Type (Digital/Physical-hack type)</Label>\n                                        <Select\n                                            placeholder={\"Select your desired hack type (of enabled options)\"}\n                                            value={null}\n                                            onChange={(selectedOption) => {\n\n                                            }}\n                                            options={physicalOrDigitalHackOptions}\n                                        />\n                                    </FormGroup>\n                                    <FormGroup>\n                                        <Label>Messge To Employer</Label>\n                                        <Input placeholder={\"Enter your 'custom' message to the employer...\"} onChange={handleInputChange} name={\"message-to-employer\"} type=\"textarea\" className=\"form-control input-air-primary\" rows={\"4\"} />\n                                    </FormGroup>\n                                </Form>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                        <TimelineHelper />\n                    </Col>\n                </Row>\n            </Container>\n        </Fragment>\n    )\n}\nconst mapStateToProps = (state) => {\n    return {\n        userData: state.auth.data\n    }\n}\nexport default connect(mapStateToProps, { shiftCoreStyles })(withRouter(ApplyAsHackerEmployerListingHelper));\n"]},"metadata":{},"sourceType":"module"}