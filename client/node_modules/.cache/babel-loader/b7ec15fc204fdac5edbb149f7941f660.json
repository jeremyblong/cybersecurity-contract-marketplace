{"ast":null,"code":"import React,{useState,useEffect,Fragment}from'react';import Breadcrumb from'../../../../layout/breadcrumb';import{Container,Row,Col,Card,CardBody,Media,Form,FormGroup,Input,Label,InputGroup,InputGroupAddon,Button,TabPane,TabContent}from'reactstrap';import two from'../../../../assets/images/user/2.png';import errorImg from'../../../../assets/images/search-not-found.png';import{Picker}from'emoji-mart';import{Active,ChataApp_p1,ChataApp_p2,Following,Follower,MarkJecno,Send}from'../../../../constant';import{connect}from\"react-redux\";import{useHistory}from\"react-router-dom\";import\"./styles.css\";import helpers from\"./helpers/mainHelperFunctions.js\";import typingIndicator from\"../../../../assets/gifs/typing-white.gif\";const{handleCheckGroupType,handleListItemClickPrivateChannel,renderOnlineStatus,renderNicknamePrivateGroup,renderNickname,renderStatus,renderLastProfilePicMainUser,handleMessagePressPrivateConvos,onKeyPressPublicSubmitted,onKeyPressPrivateSubmitted,RenderMessagListActualMessages}=helpers;const MessagingMainHelper=_ref=>{let{SBData,userData}=_ref;const channelHandler=new SBData.ChannelHandler();const history=useHistory();const allMembers=[];const chats=[];const selectedUser=[];const currentUser=[];const[searchKeyword,setSearchKeyword]=useState('');const[messageInput,setMessageInput]=useState('');const[showEmojiPicker,setShowEmojiPicker]=useState(false);const[menuToggle,setMenuToggle]=useState(false);const[activeTab,setActiveTab]=useState('1');const[openGroupChannels,setOpenGroupState]=useState([]);const[messageList,setMessageListState]=useState([]);const[channel,setChannelState]=useState(null);const[activelyTyping,setTypingStatusState]=useState(false);const[pictureChat,setPictureChatState]=useState(null);const[popover,setPopoverState]=useState({});const[groupType,setGroupType]=useState({groupType:\"Private Convo's\",checked:false});const[privateGroupChannels,setPrivateGroupChannels]=useState([]);useEffect(()=>{// set profile picture (prevent constant re-render's)\nsetPictureChatState(renderLastProfilePicMainUser(userData));// OPEN CHANNELS\nconst openChannelListQuery=SBData.OpenChannel.createOpenChannelListQuery();openChannelListQuery.includeEmpty=true;openChannelListQuery.memberStateFilter='all';// 'all', 'joined_only', 'invited_only', 'invited_by_friend', and 'invited_by_non_friend'\nopenChannelListQuery.order='latest_last_message';// 'chronological', 'latest_last_message', 'channel_name_alphabetical', and 'metadata_value_alphabetical'\nopenChannelListQuery.limit=20;// The value of pagination limit could be set up to 100.\n// CLOSED/PRIVATE CHANNELS\nconst closedPrivateChannelListQuery=SBData.GroupChannel.createMyGroupChannelListQuery();closedPrivateChannelListQuery.includeEmpty=true;closedPrivateChannelListQuery.memberStateFilter='all';// 'all', 'joined_only', 'invited_only', 'invited_by_friend', and 'invited_by_non_friend'\nclosedPrivateChannelListQuery.order='latest_last_message';// 'chronological', 'latest_last_message', 'channel_name_alphabetical', and 'metadata_value_alphabetical'\nclosedPrivateChannelListQuery.limit=20;// The value of pagination limit could be set up to 100.\nif(openChannelListQuery.hasNext){openChannelListQuery.next((groupChannels,error)=>{if(error){// Handle error.\nconsole.log(\"openChannelListQuery gather groups errror :\",error);}else{console.log(\"looping...?\",groupChannels);setOpenGroupState(groupChannels);// loop through channels\ngroupChannels.forEach(channel=>{// looping over channels\nconsole.log(\"channel...:\",channel);});}});}if(closedPrivateChannelListQuery.hasNext){closedPrivateChannelListQuery.next((groupChannels,error)=>{if(error){// Handle error.\nconsole.log(\"GROUP CHANNELS FETCH ERROR... :\",error);}else{console.log(\"GATHERED group channels (private msging) : \",groupChannels);setPrivateGroupChannels(groupChannels);// groupChannels.forEach(channel => {\n// });\n}});}},[]);const dynamicImage=image=>{// return images(`./${image}`);\n};const toggleEmojiPicker=()=>{setShowEmojiPicker(!showEmojiPicker);};const addEmoji=emoji=>{const text=\"\".concat(messageInput).concat(emoji.native);setShowEmojiPicker(false);setMessageInput(text);};const changeChatClick=(e,selectedUserId)=>{handleSearchKeyword('');};const handleSearchKeyword=keyword=>{console.log(\"searching for keyword...\",keyword);};const handleMessageChange=message=>{setMessageInput(message);};const handleMessagePressPublicConversations=e=>{if(e.key===\"Enter\"||e===\"send\"){//     const params = new SBData.UserMessageParams();\n//     params.message = messageInput;\n//     params.customType = \"group\";\n//     params.data = {\n//         type: \"custom-object-data\"\n//     };\n//     params.mentionType = 'users';  // Either 'users' or 'channel'\n//     params.mentionedUserIds = [userData.uniqueId, null]; // Or mentionedUsers = Array<User>;\n//     // params.metaArrays = [  // A pair of key-value\n//     //     new sendBirds.me.MessageMetaArray('itemType', ['tablet']),\n//     //     new sendBirds.me.MessageMetaArray('quality', ['best', 'good'])\n//     // ];\n//     params.translationTargetLanguages = [\"en\"]; // French and German\n//     params.pushNotificationDeliveryOption = 'default'; // Either 'default' or 'suppress'\n//     channel.sendUserMessage(params, (userMessage, error) => {\n//         if (error) {\n//             // Handle error.\n//             console.log(\"sending msg error... :\", error);\n//         } else {\n//             const messageId = userMessage.messageId;\n//             console.log(\"mess-age...:\", messageId, userMessage);\n//         }\n//     });\n}};const chatMenuToggle=()=>{// setMenuToggle(!menuToggle)\n};const handleListItemClick=item=>{console.log(\"handleListItemClick clicked\",item);SBData.OpenChannel.getChannel(item.url,(openChannel,error)=>{if(error){// Handle error.\nconsole.log(\"getChannel error: \",error);}else{const params=new SBData.MessageListParams();// create param's for message log/chat\nparams.prevResultSize=25;params.nextResultSize=25;params.isInclusive=true;params.reverse=true;params.replyType=\"all\";params.includeThreadInfo=true;params.includeParentMessageInfo=true;// create timestamp\nconst TIMESTAMP=Date.now();console.log(\"openChannel\",openChannel);setChannelState(openChannel);// Pass the params as an argument to the `getMessagesByTimestamp()` method.\nopenChannel.getMessagesByTimestamp(TIMESTAMP,params,(messages,error)=>{if(error){// Handle error.\nconsole.log(\"error getMessagesByTimestamp :\",error);}else{console.log(\"messages\",messages);setMessageListState(messages);}});}});};const renderConversationPeopleList=()=>{if(groupType.groupType===\"Private Convo's\"){// private conversation's mapped\nif(privateGroupChannels.length>0){return/*#__PURE__*/React.createElement(\"ul\",{className:\"list\"},privateGroupChannels.map((item,i)=>{return/*#__PURE__*/React.createElement(\"li\",{onClick:()=>handleListItemClickPrivateChannel(item,SBData,setChannelState,setMessageListState),className:\"clearfix \".concat(true?'active add-hover-message-convo':'add-hover-message-convo'),key:i},/*#__PURE__*/React.createElement(\"img\",{src:item.coverUrl,className:\"rounded-circle user-image\",alt:\"\"}),/*#__PURE__*/React.createElement(\"div\",{className:\"status-circle \".concat(renderOnlineStatus(item,userData))}),/*#__PURE__*/React.createElement(\"div\",{className:\"about\"},/*#__PURE__*/React.createElement(\"div\",{className:\"name\"},renderNicknamePrivateGroup(item,userData)),/*#__PURE__*/React.createElement(\"div\",{className:\"status\"},item.name.slice(0,25),item.name.length>25?\"...\":\"\")));}));}else{return/*#__PURE__*/React.createElement(Media,{className:\"img-fluid m-auto\",src:errorImg,alt:\"\"});}}else{// public/everyone conversation's mapped\nif(openGroupChannels.length>0){return/*#__PURE__*/React.createElement(\"ul\",{className:\"list\"},openGroupChannels.map((item,i)=>{return/*#__PURE__*/React.createElement(\"li\",{onClick:()=>handleListItemClick(item),className:\"clearfix \".concat(true?'active add-hover-message-convo':'add-hover-message-convo'),key:i},/*#__PURE__*/React.createElement(\"img\",{src:item.coverUrl,className:\"rounded-circle user-image\",alt:\"\"}),/*#__PURE__*/React.createElement(\"div\",{className:\"status-circle \".concat(renderStatus(item,userData)?'online':'offline')}),/*#__PURE__*/React.createElement(\"div\",{className:\"about\"},/*#__PURE__*/React.createElement(\"div\",{className:\"name\"},renderNickname(item,userData)),/*#__PURE__*/React.createElement(\"div\",{className:\"status\"},item.name.slice(0,25),item.name.length>25?\"...\":\"\")));}));}else{return/*#__PURE__*/React.createElement(Media,{className:\"img-fluid m-auto\",src:errorImg,alt:\"\"});}}};const renderChatMessagingChangesConditionally=()=>{channelHandler.onMessageReceived=(channelRecieved,message)=>{console.log(\"message recieved~! : \",channelRecieved,message);if(channel!==null&&channelRecieved.url===channel.url){setMessageListState(prevState=>{return[message,...prevState];});}};channelHandler.onTypingStatusUpdated=(groupChannel,typing)=>{console.log(\"typing initiated...\");if(channel!==null&&channel.url===groupChannel.url){// change 'show typing indicator' status to TRUE\nsetTypingStatusState(true);setTimeout(()=>{setTypingStatusState(false);},5000);}};SBData.addChannelHandler(userData.uniqueId,channelHandler);};const addNewMessageCallback=newMessage=>{setMessageListState(prevState=>{return[newMessage,...prevState];});};const mainInputBlurred=e=>{console.log(\"blurred input!\");if(channel!==null){console.log(\"end typing...\");channel.endTyping();}};const handleTypingState=e=>{if(e.key===\"Enter\"){if(channel!==null){console.log(\"STOP typing...\");channel.stopTyping();}else{console.log(\"stop typing - channel doesnt exist.\");}}else{if(channel!==null){console.log(\"start typing...\");channel.startTyping();}else{console.log(\"start typing - channel doesnt exist.\");}}};return allMembers&&chats&&selectedUser?/*#__PURE__*/React.createElement(Fragment,null,/*#__PURE__*/React.createElement(Breadcrumb,{parent:\"Messaging\",title:\"Private/Group Messaging\"}),/*#__PURE__*/React.createElement(Container,{fluid:true},renderChatMessagingChangesConditionally(),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{sm:\"12\",className:\"call-chat-sidebar\"},/*#__PURE__*/React.createElement(Card,{className:\"add-shadow-chat-card\"},/*#__PURE__*/React.createElement(CardBody,{className:\"chat-body\"},/*#__PURE__*/React.createElement(\"div\",{className:\"chat-box\"},/*#__PURE__*/React.createElement(\"div\",{className:\"chat-left-aside\"},/*#__PURE__*/React.createElement(\"div\",{className:\"media\"},/*#__PURE__*/React.createElement(Media,{src:pictureChat,className:\"rounded-circle user-image\",alt:\"\"}),/*#__PURE__*/React.createElement(\"div\",{className:\"about custom-msg-about\"},/*#__PURE__*/React.createElement(\"div\",{className:\"name f-w-600\"},\"\".concat(userData.firstName,\" \").concat(userData.lastName)),/*#__PURE__*/React.createElement(\"div\",{className:\"status custom-chat-row\"},userData.accountType===\"hackers\"?\"hacker\":\"employer\",/*#__PURE__*/React.createElement(\"div\",{className:\"checkbox checkbox-success checkbox-custom-group-change\"},/*#__PURE__*/React.createElement(Input,{checked:groupType.checked,onChange:e=>handleCheckGroupType(e,setGroupType,setMessageListState,setChannelState),id:\"checkbox-primary\",type:\"checkbox\",defaultChecked:true}),/*#__PURE__*/React.createElement(Label,{for:\"checkbox-primary\"},/*#__PURE__*/React.createElement(\"strong\",{style:{textDecorationLine:\"underline\"}},groupType.checked===true?\"Public\":\"Private\"),\" Convo's\"))))),/*#__PURE__*/React.createElement(\"div\",{className:\"people-list\"},/*#__PURE__*/React.createElement(\"div\",{className:\"search\"},/*#__PURE__*/React.createElement(Form,{className:\"theme-form\"},/*#__PURE__*/React.createElement(FormGroup,{className:\"form-group\"},/*#__PURE__*/React.createElement(Input,{className:\"form-control\",type:\"text\",placeholder:\"search\",defaultValue:searchKeyword,onChange:e=>handleSearchKeyword(e.target.value)}),/*#__PURE__*/React.createElement(\"i\",{className:\"fa fa-search\"})))),renderConversationPeopleList())))))),/*#__PURE__*/React.createElement(Col,{className:\"call-chat-body\"},/*#__PURE__*/React.createElement(Card,{className:\"add-shadow-chat-card\"},/*#__PURE__*/React.createElement(CardBody,{className:\"p-0\"},/*#__PURE__*/React.createElement(Row,{className:\"chat-box\"},/*#__PURE__*/React.createElement(Col,{className:\"pr-0 chat-right-aside\"},/*#__PURE__*/React.createElement(\"div\",{className:\"chat\"},/*#__PURE__*/React.createElement(\"div\",{className:\"chat-header clearfix\"},/*#__PURE__*/React.createElement(Media,{src:dynamicImage(selectedUser.thumb),className:\"rounded-circle\",alt:\"\"}),/*#__PURE__*/React.createElement(\"div\",{className:\"about\"},/*#__PURE__*/React.createElement(\"div\",{className:\"name\"},selectedUser.name),/*#__PURE__*/React.createElement(\"div\",{className:\"status digits\"},selectedUser.online?'online':selectedUser.lastSeenDate)),/*#__PURE__*/React.createElement(\"ul\",{className:\"list-inline float-left float-sm-right chat-menu-icons\"},/*#__PURE__*/React.createElement(\"li\",{className:\"list-inline-item\"},/*#__PURE__*/React.createElement(\"a\",{href:null},/*#__PURE__*/React.createElement(\"i\",{className:\"icon-search\"}))),/*#__PURE__*/React.createElement(\"li\",{className:\"list-inline-item\"},/*#__PURE__*/React.createElement(\"a\",{href:null},/*#__PURE__*/React.createElement(\"i\",{className:\"icon-clip\"}))),/*#__PURE__*/React.createElement(\"li\",{className:\"list-inline-item\"},/*#__PURE__*/React.createElement(\"a\",{href:null},/*#__PURE__*/React.createElement(\"i\",{className:\"icon-headphone-alt\"}))),/*#__PURE__*/React.createElement(\"li\",{className:\"list-inline-item\"},/*#__PURE__*/React.createElement(\"a\",{href:null},/*#__PURE__*/React.createElement(\"i\",{className:\"icon-video-camera\"}))),/*#__PURE__*/React.createElement(\"li\",{className:\"list-inline-item toogle-bar\",onClick:()=>chatMenuToggle()},/*#__PURE__*/React.createElement(\"a\",{href:null},/*#__PURE__*/React.createElement(\"i\",{className:\"icon-menu\"}))))),/*#__PURE__*/React.createElement(\"div\",{className:\"chat-history chat-msg-box custom-scrollbar\"},messageList.length>0?/*#__PURE__*/React.createElement(\"p\",{className:\"subject-title\"},\"Subject/Title: \",channel.data):null,/*#__PURE__*/React.createElement(RenderMessagListActualMessages,{messageList:messageList,channel:channel,userData:userData})),/*#__PURE__*/React.createElement(\"div\",{className:\"chat-message clearfix\"},/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(\"div\",{className:\"mb-2\"},showEmojiPicker?/*#__PURE__*/React.createElement(Picker,{set:\"apple\",emojiSize:30,onSelect:addEmoji}):null),/*#__PURE__*/React.createElement(Col,{xl:\"12\",className:\"d-flex\"},/*#__PURE__*/React.createElement(\"div\",{className:\"smiley-box bg-primary\"},/*#__PURE__*/React.createElement(\"div\",{className:\"picker\",onClick:()=>toggleEmojiPicker()},/*#__PURE__*/React.createElement(Media,{src:require('../../../../assets/images/smiley.png'),alt:\"\"}))),/*#__PURE__*/React.createElement(InputGroup,{className:\"text-box\"},/*#__PURE__*/React.createElement(Input,{type:\"text\",className:\"form-control input-txt-bx\",placeholder:\"Type a message......\",value:messageInput,onBlur:e=>mainInputBlurred(e),onKeyPress:e=>{handleTypingState(e);// conditional check to see which function to run (GROUP/1v1 messaging conversation)\nif(groupType.groupType===\"Private Convo's\"){onKeyPressPrivateSubmitted(e);}else{onKeyPressPublicSubmitted(e);}},onChange:e=>handleMessageChange(e.target.value)}),/*#__PURE__*/React.createElement(InputGroupAddon,{addonType:\"append\"},/*#__PURE__*/React.createElement(Button,{color:\"primary\",onClick:()=>{if(groupType.groupType===\"Private Convo's\"){handleMessagePressPrivateConvos(messageInput,channel,SBData,setMessageInput,addNewMessageCallback);}else{handleMessagePressPublicConversations('send');}}},Send))))))),activelyTyping===true?/*#__PURE__*/React.createElement(\"div\",{className:\"typing-indicator-wrapper\"},/*#__PURE__*/React.createElement(\"img\",{src:typingIndicator,className:\"typing-animation\"})):null),/*#__PURE__*/React.createElement(Col,{className:\"pl-0 chat-menu \".concat(menuToggle?'show':'')},/*#__PURE__*/React.createElement(TabContent,{activeTab:activeTab},/*#__PURE__*/React.createElement(TabPane,{tabId:\"1\"}),/*#__PURE__*/React.createElement(TabPane,{tabId:\"2\"},/*#__PURE__*/React.createElement(\"div\",{className:\"people-list\"},/*#__PURE__*/React.createElement(\"div\",{className:\"search\"},/*#__PURE__*/React.createElement(Form,{className:\"theme-form\"},/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(Input,{className:\"form-control\",type:\"text\",placeholder:\"Write Status...\"}),/*#__PURE__*/React.createElement(\"i\",{className:\"fa fa-pencil\"}))))),/*#__PURE__*/React.createElement(\"div\",{className:\"status\"},/*#__PURE__*/React.createElement(\"p\",{className:\"font-dark\"},Active),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(\"p\",null,ChataApp_p1,/*#__PURE__*/React.createElement(\"i\",{className:\"icofont icofont-emo-heart-eyes font-danger f-20\"}),/*#__PURE__*/React.createElement(\"i\",{className:\"icofont icofont-emo-heart-eyes font-danger f-20 m-l-5\"})),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(\"p\",null,ChataApp_p2,/*#__PURE__*/React.createElement(\"i\",{className:\"icofont icofont-emo-rolling-eyes font-success f-20\"})))),/*#__PURE__*/React.createElement(TabPane,{tabId:\"3\"},/*#__PURE__*/React.createElement(\"div\",{className:\"user-profile\"},/*#__PURE__*/React.createElement(\"div\",{className:\"image\"},/*#__PURE__*/React.createElement(\"div\",{className:\"avatar text-center\"},/*#__PURE__*/React.createElement(Media,{body:true,alt:\"\",src:two})),/*#__PURE__*/React.createElement(\"div\",{className:\"icon-wrapper\"},/*#__PURE__*/React.createElement(\"i\",{className:\"icofont icofont-pencil-alt-5\"}))),/*#__PURE__*/React.createElement(\"div\",{className:\"user-content text-center\"},/*#__PURE__*/React.createElement(\"h5\",{className:\"text-uppercase\"},MarkJecno),/*#__PURE__*/React.createElement(\"div\",{className:\"social-media\"},/*#__PURE__*/React.createElement(\"ul\",{className:\"list-inline\"},/*#__PURE__*/React.createElement(\"li\",{className:\"list-inline-item\"},/*#__PURE__*/React.createElement(\"a\",{href:null},/*#__PURE__*/React.createElement(\"i\",{className:\"fa fa-facebook\"}))),/*#__PURE__*/React.createElement(\"li\",{className:\"list-inline-item\"},/*#__PURE__*/React.createElement(\"a\",{href:null},/*#__PURE__*/React.createElement(\"i\",{className:\"fa fa-google-plus\"}))),/*#__PURE__*/React.createElement(\"li\",{className:\"list-inline-item\"},/*#__PURE__*/React.createElement(\"a\",{href:null},/*#__PURE__*/React.createElement(\"i\",{className:\"fa fa-twitter\"}))),/*#__PURE__*/React.createElement(\"li\",{className:\"list-inline-item\"},/*#__PURE__*/React.createElement(\"a\",{href:null},/*#__PURE__*/React.createElement(\"i\",{className:\"fa fa-instagram\"}))),/*#__PURE__*/React.createElement(\"li\",{className:\"list-inline-item\"},/*#__PURE__*/React.createElement(\"a\",{href:null},/*#__PURE__*/React.createElement(\"i\",{className:\"fa fa-rss\"}))))),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(\"div\",{className:\"follow text-center\"},/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{className:\"border-right\"},/*#__PURE__*/React.createElement(\"span\",null,Following),/*#__PURE__*/React.createElement(\"div\",{className:\"follow-num\"},\"236k\")),/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(\"span\",null,Follower),/*#__PURE__*/React.createElement(\"div\",{className:\"follow-num\"},\"3691k\")))),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(\"div\",{className:\"text-center digits\"},/*#__PURE__*/React.createElement(\"p\",{className:\"mb-0\"},\"Mark.jecno23@gmail.com\"),/*#__PURE__*/React.createElement(\"p\",{className:\"mb-0\"},\"+91 365 - 658 - 1236\"),/*#__PURE__*/React.createElement(\"p\",{className:\"mb-0\"},\"Fax: 123-4560\")))))))))))),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{sm:\"12\",md:\"12\",lg:\"12\",xl:\"12\"},/*#__PURE__*/React.createElement(Card,{className:\"shadowy-card-videos\"},/*#__PURE__*/React.createElement(CardBody,null,/*#__PURE__*/React.createElement(\"h4\",{className:\"redirect-helper\"},\"Redirect to manage your pending & active video calling requests?\"),/*#__PURE__*/React.createElement(\"p\",{className:\"lead\"},\"By clicking the button below, you will be redirected to the appropriate page where you'll be able to manage and initialize \",/*#__PURE__*/React.createElement(\"strong\",null,\"LIVE VIDEO CALLING\"),\" & much more! Check it out..\"),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(Button,{className:\"btn-square-info\",color:\"info-2x\",outline:true,style:{width:\"100%\"},onClick:()=>{history.push(\"/view/pending/video/calling\");}},\"Video Calling/Chat Related Action's\"))))))):/*#__PURE__*/React.createElement(\"div\",{className:\"loading\"});};const mapStateToProps=state=>{return{SBData:state.sendbirdInitData.sendbirdInitData,userData:state.auth.data};};export default connect(mapStateToProps,{})(MessagingMainHelper);","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/src/components/dashboard/messaging/main/messagingMain.js"],"names":["React","useState","useEffect","Fragment","Breadcrumb","Container","Row","Col","Card","CardBody","Media","Form","FormGroup","Input","Label","InputGroup","InputGroupAddon","Button","TabPane","TabContent","two","errorImg","Picker","Active","ChataApp_p1","ChataApp_p2","Following","Follower","MarkJecno","Send","connect","useHistory","helpers","typingIndicator","handleCheckGroupType","handleListItemClickPrivateChannel","renderOnlineStatus","renderNicknamePrivateGroup","renderNickname","renderStatus","renderLastProfilePicMainUser","handleMessagePressPrivateConvos","onKeyPressPublicSubmitted","onKeyPressPrivateSubmitted","RenderMessagListActualMessages","MessagingMainHelper","SBData","userData","channelHandler","ChannelHandler","history","allMembers","chats","selectedUser","currentUser","searchKeyword","setSearchKeyword","messageInput","setMessageInput","showEmojiPicker","setShowEmojiPicker","menuToggle","setMenuToggle","activeTab","setActiveTab","openGroupChannels","setOpenGroupState","messageList","setMessageListState","channel","setChannelState","activelyTyping","setTypingStatusState","pictureChat","setPictureChatState","popover","setPopoverState","groupType","setGroupType","checked","privateGroupChannels","setPrivateGroupChannels","openChannelListQuery","OpenChannel","createOpenChannelListQuery","includeEmpty","memberStateFilter","order","limit","closedPrivateChannelListQuery","GroupChannel","createMyGroupChannelListQuery","hasNext","next","groupChannels","error","console","log","forEach","dynamicImage","image","toggleEmojiPicker","addEmoji","emoji","text","native","changeChatClick","e","selectedUserId","handleSearchKeyword","keyword","handleMessageChange","message","handleMessagePressPublicConversations","key","chatMenuToggle","handleListItemClick","item","getChannel","url","openChannel","params","MessageListParams","prevResultSize","nextResultSize","isInclusive","reverse","replyType","includeThreadInfo","includeParentMessageInfo","TIMESTAMP","Date","now","getMessagesByTimestamp","messages","renderConversationPeopleList","length","map","i","coverUrl","name","slice","renderChatMessagingChangesConditionally","onMessageReceived","channelRecieved","prevState","onTypingStatusUpdated","groupChannel","typing","setTimeout","addChannelHandler","uniqueId","addNewMessageCallback","newMessage","mainInputBlurred","endTyping","handleTypingState","stopTyping","startTyping","firstName","lastName","accountType","textDecorationLine","target","value","thumb","online","lastSeenDate","data","require","width","push","mapStateToProps","state","sendbirdInitData","auth"],"mappings":"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","sourcesContent":["import React,{useState,useEffect, Fragment} from 'react';\nimport Breadcrumb from '../../../../layout/breadcrumb'\nimport { Container, Row, Col, Card, CardBody, Media, Form, FormGroup, Input, Label, InputGroup, InputGroupAddon, Button, TabPane, TabContent } from 'reactstrap'\nimport two from '../../../../assets/images/user/2.png';\nimport errorImg from '../../../../assets/images/search-not-found.png';\nimport {Picker} from 'emoji-mart'\nimport { Active, ChataApp_p1, ChataApp_p2, Following, Follower, MarkJecno, Send } from '../../../../constant';\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./styles.css\";\nimport helpers from \"./helpers/mainHelperFunctions.js\";\nimport typingIndicator from \"../../../../assets/gifs/typing-white.gif\";\n\nconst { \n    handleCheckGroupType,\n    handleListItemClickPrivateChannel,\n    renderOnlineStatus,\n    renderNicknamePrivateGroup,\n    renderNickname,\n    renderStatus,\n    renderLastProfilePicMainUser,\n    handleMessagePressPrivateConvos,\n    onKeyPressPublicSubmitted,\n    onKeyPressPrivateSubmitted,\n    RenderMessagListActualMessages\n} = helpers;\n\nconst MessagingMainHelper = ({ SBData, userData }) =>  {\n\n    const channelHandler = new SBData.ChannelHandler();\n\n    const history = useHistory();\n\n    const allMembers = [];\n    const chats = [];\n    const selectedUser = [];\n    const currentUser = [];\n    const [ searchKeyword, setSearchKeyword ] = useState('');\n    const [ messageInput, setMessageInput ] = useState('');\n    const [ showEmojiPicker,setShowEmojiPicker ] = useState(false)\n    const [ menuToggle, setMenuToggle ] = useState(false);\n    const [ activeTab, setActiveTab ] = useState('1');\n    const [ openGroupChannels, setOpenGroupState ] = useState([]);\n    const [ messageList, setMessageListState ] = useState([]);\n    const [ channel, setChannelState ] = useState(null);\n    const [ activelyTyping, setTypingStatusState ] = useState(false);\n    const [ pictureChat, setPictureChatState ] = useState(null);\n    const [ popover, setPopoverState ] = useState({});\n    const [ groupType, setGroupType ] = useState({\n        groupType: \"Private Convo's\",\n        checked: false\n    });\n    const [ privateGroupChannels, setPrivateGroupChannels ] = useState([]);\n\n    useEffect(() => {\n        // set profile picture (prevent constant re-render's)\n        setPictureChatState(renderLastProfilePicMainUser(userData));\n        // OPEN CHANNELS\n        const openChannelListQuery = SBData.OpenChannel.createOpenChannelListQuery();\n        openChannelListQuery.includeEmpty = true;\n        openChannelListQuery.memberStateFilter = 'all';    // 'all', 'joined_only', 'invited_only', 'invited_by_friend', and 'invited_by_non_friend'\n        openChannelListQuery.order = 'latest_last_message';    // 'chronological', 'latest_last_message', 'channel_name_alphabetical', and 'metadata_value_alphabetical'\n        openChannelListQuery.limit = 20;   // The value of pagination limit could be set up to 100.\n        // CLOSED/PRIVATE CHANNELS\n        const closedPrivateChannelListQuery = SBData.GroupChannel.createMyGroupChannelListQuery();\n        closedPrivateChannelListQuery.includeEmpty = true;\n        closedPrivateChannelListQuery.memberStateFilter = 'all';    // 'all', 'joined_only', 'invited_only', 'invited_by_friend', and 'invited_by_non_friend'\n        closedPrivateChannelListQuery.order = 'latest_last_message';    // 'chronological', 'latest_last_message', 'channel_name_alphabetical', and 'metadata_value_alphabetical'\n        closedPrivateChannelListQuery.limit = 20;   // The value of pagination limit could be set up to 100.\n\n        if (openChannelListQuery.hasNext) {\n            openChannelListQuery.next((groupChannels, error) => {\n                if (error) {\n                    // Handle error.\n                    console.log(\"openChannelListQuery gather groups errror :\", error);\n                } else {\n                    console.log(\"looping...?\", groupChannels);\n\n                    setOpenGroupState(groupChannels);\n                    // loop through channels\n                    groupChannels.forEach(channel => {\n                        // looping over channels\n                        console.log(\"channel...:\", channel);\n                    });\n                }\n            });\n        } \n        if (closedPrivateChannelListQuery.hasNext) {\n            closedPrivateChannelListQuery.next((groupChannels, error) => {\n                if (error) {\n                    // Handle error.\n                    console.log(\"GROUP CHANNELS FETCH ERROR... :\", error);\n                } else {\n\n                    console.log(\"GATHERED group channels (private msging) : \", groupChannels);\n\n                    setPrivateGroupChannels(groupChannels);\n\n                    // groupChannels.forEach(channel => {\n\n                    // });\n                }\n            });\n        }\n    }, []);\n    \n    const dynamicImage = (image) => {\n        // return images(`./${image}`);\n    }\n    \n    const toggleEmojiPicker = () => {\n        setShowEmojiPicker(!showEmojiPicker);\n    }\n  \n    const addEmoji = (emoji) =>  {\n        const text = `${messageInput}${emoji.native}`;\n        setShowEmojiPicker(false);\n        setMessageInput(text)\n    }\n\n    const changeChatClick = (e, selectedUserId) => {\n        handleSearchKeyword('');\n    }\n\n    const handleSearchKeyword = (keyword) => {\n        console.log(\"searching for keyword...\", keyword);\n    }\n\n    const handleMessageChange = (message) => {\n        setMessageInput(message)\n    }\n\n    const handleMessagePressPublicConversations = (e) => {\n        if (e.key === \"Enter\" || e === \"send\") {\n        //     const params = new SBData.UserMessageParams();\n\n        //     params.message = messageInput;\n        //     params.customType = \"group\";\n        //     params.data = {\n        //         type: \"custom-object-data\"\n        //     };\n        //     params.mentionType = 'users';  // Either 'users' or 'channel'\n        //     params.mentionedUserIds = [userData.uniqueId, null]; // Or mentionedUsers = Array<User>;\n        //     // params.metaArrays = [  // A pair of key-value\n        //     //     new sendBirds.me.MessageMetaArray('itemType', ['tablet']),\n        //     //     new sendBirds.me.MessageMetaArray('quality', ['best', 'good'])\n        //     // ];\n        //     params.translationTargetLanguages = [\"en\"]; // French and German\n        //     params.pushNotificationDeliveryOption = 'default'; // Either 'default' or 'suppress'\n            \n        //     channel.sendUserMessage(params, (userMessage, error) => {\n        //         if (error) {\n        //             // Handle error.\n        //             console.log(\"sending msg error... :\", error);\n        //         } else {\n        //             const messageId = userMessage.messageId;\n\n        //             console.log(\"mess-age...:\", messageId, userMessage);\n        //         }\n        //     });\n        }\n    }\n\n    const chatMenuToggle = () => {\n        // setMenuToggle(!menuToggle)\n    }\n\n    const handleListItemClick = (item) => {\n        console.log(\"handleListItemClick clicked\", item);\n\n        SBData.OpenChannel.getChannel(item.url, (openChannel, error) => {\n            if (error) {\n                // Handle error.\n                console.log(\"getChannel error: \", error);\n            } else {\n                const params = new SBData.MessageListParams();\n                // create param's for message log/chat\n                params.prevResultSize = 25;\n                params.nextResultSize = 25;\n                params.isInclusive = true;\n                params.reverse = true;\n                params.replyType = \"all\";\n                params.includeThreadInfo = true;\n                params.includeParentMessageInfo = true;\n                // create timestamp\n                const TIMESTAMP = Date.now();\n\n                console.log(\"openChannel\", openChannel);\n\n                setChannelState(openChannel);\n\n                // Pass the params as an argument to the `getMessagesByTimestamp()` method.\n                openChannel.getMessagesByTimestamp(TIMESTAMP, params, (messages, error) => {\n                    if (error) {\n                        // Handle error.\n                        console.log(\"error getMessagesByTimestamp :\", error);\n                    } else {\n                        console.log(\"messages\", messages);\n\n                        setMessageListState(messages);\n                    }\n                });\n            }\n        });\n    }\n    const renderConversationPeopleList = () => {\n        if (groupType.groupType === \"Private Convo's\") {\n            // private conversation's mapped\n            if (privateGroupChannels.length > 0) {\n                return (\n                    <ul className=\"list\">\n                        {privateGroupChannels.map((item, i) => {\n                            return (\n                                <li onClick={() => handleListItemClickPrivateChannel(item, SBData, setChannelState, setMessageListState)} className={`clearfix ${true ? 'active add-hover-message-convo' : 'add-hover-message-convo'}`}\n                                    key={i}>\n                                    <img src={item.coverUrl} className=\"rounded-circle user-image\" alt=\"\" />\n                                    <div className={`status-circle ${renderOnlineStatus(item, userData)}`}></div>\n                                    <div className=\"about\">\n                                    <div className=\"name\">{renderNicknamePrivateGroup(item, userData)}</div>\n                                        <div className=\"status\">\n                                            {item.name.slice(0, 25)}{item.name.length > 25 ? \"...\" : \"\"}\n                                        </div>\n                                    </div>\n                                </li>);\n                        })\n                        }\n                    </ul>\n                );\n            } else {\n                return <Media className=\"img-fluid m-auto\" src={errorImg} alt=\"\"/>;\n            }\n        } else {\n            // public/everyone conversation's mapped\n            if (openGroupChannels.length > 0) {\n                return (\n                    <ul className=\"list\">\n                        {openGroupChannels.map((item, i) => {\n                            return (\n                                <li onClick={() => handleListItemClick(item)} className={`clearfix ${true ? 'active add-hover-message-convo' : 'add-hover-message-convo'}`}\n                                    key={i}>\n                                    <img src={item.coverUrl} className=\"rounded-circle user-image\" alt=\"\" />\n                                    <div className={`status-circle ${renderStatus(item, userData) ? 'online' : 'offline'}`}></div>\n                                    <div className=\"about\">\n                                    <div className=\"name\">{renderNickname(item, userData)}</div>\n                                        <div className=\"status\">\n                                            {item.name.slice(0, 25)}{item.name.length > 25 ? \"...\" : \"\"}\n                                        </div>\n                                    </div>\n                                </li>);\n                        })\n                        }\n                    </ul>\n                );\n            } else {\n                return <Media className=\"img-fluid m-auto\" src={errorImg} alt=\"\"/>;\n            }\n        }\n    }\n    const renderChatMessagingChangesConditionally = () => {\n        channelHandler.onMessageReceived = (channelRecieved, message) => {\n            console.log(\"message recieved~! : \", channelRecieved, message);\n\n            if (channel !== null && channelRecieved.url === channel.url) {\n                setMessageListState(prevState => {\n                    return [message, ...prevState]\n                })\n            } \n        };\n        channelHandler.onTypingStatusUpdated = (groupChannel, typing) => {\n            console.log(\"typing initiated...\")\n            if (channel !== null && channel.url === groupChannel.url) {\n                // change 'show typing indicator' status to TRUE\n                setTypingStatusState(true);\n\n                setTimeout(() => {\n                    setTypingStatusState(false);\n                }, 5000);   \n            } \n        };\n\n        SBData.addChannelHandler(userData.uniqueId, channelHandler);\n    }\n    const addNewMessageCallback = (newMessage) => {\n        setMessageListState(prevState => {\n            return [newMessage, ...prevState]\n        })\n    }\n    const mainInputBlurred = (e) => {\n        console.log(\"blurred input!\");\n\n        if (channel !== null) {\n            console.log(\"end typing...\");\n\n            channel.endTyping();\n        }\n    }\n    const handleTypingState = (e) => {\n        if (e.key === \"Enter\") {\n\n            if (channel !== null) {\n                console.log(\"STOP typing...\");\n                \n                channel.stopTyping();\n            } else {\n                console.log(\"stop typing - channel doesnt exist.\")\n            }\n        } else {\n\n            if (channel !== null) {\n                console.log(\"start typing...\");\n                \n                channel.startTyping();\n            } else {\n                console.log(\"start typing - channel doesnt exist.\")\n            }\n        }\n    }\n    return (\n        (allMembers && chats && selectedUser) ?\n        <Fragment>\n        <Breadcrumb parent=\"Messaging\" title=\"Private/Group Messaging\"/>\n        <Container fluid={true}>\n            {renderChatMessagingChangesConditionally()}\n            <Row>\n              <Col sm=\"12\" className=\"call-chat-sidebar\">\n                <Card className={\"add-shadow-chat-card\"}>\n                  <CardBody className=\"chat-body\">\n                    <div className=\"chat-box\">\n                      <div className=\"chat-left-aside\">\n                        <div className=\"media\">\n                        <Media  src={pictureChat} className=\"rounded-circle user-image\" alt=\"\" />\n                        <div className=\"about custom-msg-about\">\n                            <div className=\"name f-w-600\">{`${userData.firstName} ${userData.lastName}`}</div>\n                            <div className=\"status custom-chat-row\">\n                                {userData.accountType === \"hackers\" ? \"hacker\" : \"employer\"}\n                                <div className=\"checkbox checkbox-success checkbox-custom-group-change\">\n                                    <Input checked={groupType.checked} onChange={(e) => handleCheckGroupType(e, setGroupType, setMessageListState, setChannelState)} id=\"checkbox-primary\" type=\"checkbox\" defaultChecked/>\n                                    <Label for=\"checkbox-primary\"><strong style={{ textDecorationLine: \"underline\" }}>{groupType.checked === true ? \"Public\" : \"Private\"}</strong> Convo's</Label>\n                                </div>\n                            </div>\n                        </div>\n                        </div>\n                        <div className=\"people-list\">\n                          <div className=\"search\">\n                            <Form className=\"theme-form\">\n                              <FormGroup className=\"form-group\">\n                              <Input\n                                    className=\"form-control\"\n                                    type=\"text\"\n                                    placeholder=\"search\"\n                                    defaultValue={searchKeyword}\n                                    onChange={(e) => handleSearchKeyword(e.target.value)}\n                                />\n                                <i className=\"fa fa-search\"></i>\n                              </FormGroup>\n                            </Form>\n                          </div>\n                          {renderConversationPeopleList()}\n                        </div>\n                      </div>\n                    </div>\n                  </CardBody>\n                </Card>\n              </Col>\n              <Col className=\"call-chat-body\">\n                <Card className={\"add-shadow-chat-card\"}>\n                  <CardBody className=\"p-0\">\n                    <Row className=\"chat-box\">\n                      <Col className=\"pr-0 chat-right-aside\">\n                        <div className=\"chat\">\n                         <div className=\"chat-header clearfix\">\n                            <Media src={dynamicImage(selectedUser.thumb)} className=\"rounded-circle\" alt=\"\" />\n                            <div className=\"about\">\n                                <div className=\"name\">\n                                    {selectedUser.name}\n                                </div>\n                                <div className=\"status digits\" >\n                                    {selectedUser.online ? 'online' : selectedUser.lastSeenDate}\n                                </div>\n                            </div>\n                            <ul className=\"list-inline float-left float-sm-right chat-menu-icons\">\n                                <li className=\"list-inline-item\"><a href={null}><i className=\"icon-search\"></i></a></li>\n                                <li className=\"list-inline-item\"><a href={null}><i className=\"icon-clip\"></i></a></li>\n                                <li className=\"list-inline-item\"><a href={null}><i className=\"icon-headphone-alt\"></i></a></li>\n                                <li className=\"list-inline-item\"><a href={null}><i className=\"icon-video-camera\"></i></a></li>\n                                <li className=\"list-inline-item toogle-bar\" onClick={() => chatMenuToggle()}><a href={null}><i className=\"icon-menu\"></i></a></li>\n                            </ul>\n                        </div>\n                        <div className=\"chat-history chat-msg-box custom-scrollbar\">\n                            {messageList.length > 0 ? <p className=\"subject-title\">Subject/Title: {channel.data}</p> : null}\n                            <RenderMessagListActualMessages messageList={messageList} channel={channel} userData={userData} />\n                        </div>\n                        <div className=\"chat-message clearfix\">\n                            <Row>\n                            <div className=\"mb-2\">\n                            {showEmojiPicker ? (\n                                    <Picker set=\"apple\" emojiSize={30} onSelect={addEmoji} />\n                             ) : null}\n                             </div>\n                              <Col xl=\"12\" className=\"d-flex\">\n                                <div className=\"smiley-box bg-primary\">\n                                \n                                    <div className=\"picker\" onClick={() => toggleEmojiPicker()}>\n                                    <Media src={require('../../../../assets/images/smiley.png')}  alt=\"\"/>\n                                    </div>\n\n                                </div>\n                                <InputGroup className=\"text-box\">\n                                    <Input\n                                        type=\"text\"\n                                        className=\"form-control input-txt-bx\"\n                                        placeholder=\"Type a message......\"\n                                        value={messageInput}\n                                        onBlur={(e) => mainInputBlurred(e)}\n                                        onKeyPress={(e) => {\n                                            handleTypingState(e);\n                                            // conditional check to see which function to run (GROUP/1v1 messaging conversation)\n                                            if (groupType.groupType === \"Private Convo's\") {\n                                                onKeyPressPrivateSubmitted(e);\n                                            } else {\n                                                onKeyPressPublicSubmitted(e);\n                                            }\n                                        }}\n                                        onChange={(e) => handleMessageChange(e.target.value)}\n                                    />\n                                    <InputGroupAddon addonType=\"append\">\n                                        <Button color=\"primary\" onClick={() => {\n                                            if (groupType.groupType === \"Private Convo's\") {\n                                                handleMessagePressPrivateConvos(messageInput, channel, SBData, setMessageInput, addNewMessageCallback);\n                                            } else {\n                                                handleMessagePressPublicConversations('send')\n                                            }\n                                        }} >{Send}</Button>\n                                    </InputGroupAddon>\n                                </InputGroup>\n                              </Col>\n                            </Row>\n                          </div>\n                        </div>\n                        {activelyTyping === true ? <div className={\"typing-indicator-wrapper\"}>\n                            <img src={typingIndicator} className={\"typing-animation\"} />\n                        </div> : null}\n                      </Col>\n                      <Col className={`pl-0 chat-menu ${menuToggle ? 'show' : ''}`}>\n                            {/* <Nav tabs className=\"nav  border-tab nav-primary\">\n                                <NavItem  id=\"myTab\" role=\"tablist\">\n                                    <NavLink tag=\"a\" href={null} className={activeTab === '1' ? 'active' : ''} onClick={() => setActiveTab('1')}>\n                                        {CALL}\n                                    </NavLink>\n                                </NavItem>\n                                <NavItem  id=\"myTab\" role=\"tablist\">\n                                    <NavLink tag=\"a\" href={null} className={activeTab === '2' ? 'active' : ''} onClick={() => setActiveTab('2')}>\n                                        {STATUS}\n                                    </NavLink>\n                                </NavItem>\n                                <NavItem  id=\"myTab\" role=\"tablist\">\n                                    <NavLink tag=\"a\" href={null} className={activeTab === '3' ? 'active' : ''} onClick={() => setActiveTab('3')}>\n                                        {PROFILE}\n                                    </NavLink>\n                                </NavItem>\n                            </Nav> */}\n                            <TabContent activeTab={activeTab}>\n                                <TabPane tabId=\"1\">\n                                    {/* <div className=\"people-list\">\n                                        <ul className=\"list digits custom-scrollbar\">\n                                            <li className=\"clearfix\"><Media className=\"rounded-circle user-image\" src={four} alt=\"\" />\n                                                <div className=\"about\">\n                                                    <div className=\"name\">{EricaHughes}</div>\n                                                    <div className=\"status\"><i className=\"fa fa-share font-success\"></i>  {\"5 May, 4:40 PM\"}</div>\n                                                </div>\n                                            </li>\n                                            <li className=\"clearfix\"><Media className=\"rounded-circle user-image mt-0\" src={one} alt=\"\" />\n                                                <div className=\"about\">\n                                                    <div className=\"name\">{VincentPorter}\n                                                        <div className=\"status\">\n                                                        <i className=\"fa fa-reply font-danger\"></i>  {\"5 May, 5:30 PM\"}\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </li>\n                                            {allMembers.filter(x => x.id !== currentUser.id).map((member, i) =>\n                                                <li className=\"clearfix\" key={i} onClick={(e) => changeChatClick(e, member.id)}>\n                                                    <Media src={dynamicImage(member.thumb)} className=\"rounded-circle user-image\" alt=\"\" />\n                                                    <div className=\"about\">\n                                                        <div className=\"name\">{member.name}</div>\n                                                        <div className=\"status\">\n                                                            {member.reply}\n                                                            {member.status}\n                                                        </div>\n                                                    </div>\n                                                </li>\n                                            )}\n                                        </ul>\n                                    </div> */}\n                                </TabPane>\n                                <TabPane tabId=\"2\">\n                                    <div className=\"people-list\">\n                                        <div className=\"search\">\n                                            <Form className=\"theme-form\">\n                                                <FormGroup>\n                                                    <Input className=\"form-control\" type=\"text\" placeholder=\"Write Status...\" /><i className=\"fa fa-pencil\"></i>\n                                                </FormGroup>\n                                            </Form>\n                                        </div>\n                                    </div>\n                                    <div className=\"status\">\n                                        <p className=\"font-dark\">{Active}</p>\n                                        <hr />\n                                        <p>\n                                            {ChataApp_p1}\n                                            <i className=\"icofont icofont-emo-heart-eyes font-danger f-20\"></i>\n                                            <i className=\"icofont icofont-emo-heart-eyes font-danger f-20 m-l-5\"></i>\n                                        </p>\n                                        <hr />\n                                        <p>{ChataApp_p2}<i className=\"icofont icofont-emo-rolling-eyes font-success f-20\"></i></p>\n                                    </div>\n                                </TabPane>\n                                <TabPane tabId=\"3\">\n                                    <div className=\"user-profile\">\n                                        <div className=\"image\">\n                                            <div className=\"avatar text-center\"><Media body alt=\"\" src={two} /></div>\n                                            <div className=\"icon-wrapper\"><i className=\"icofont icofont-pencil-alt-5\"></i></div>\n                                        </div>\n                                        <div className=\"user-content text-center\">\n                                            <h5 className=\"text-uppercase\">{MarkJecno}</h5>\n                                            <div className=\"social-media\">\n                                                <ul className=\"list-inline\">\n                                                    <li className=\"list-inline-item\"><a href={null}><i className=\"fa fa-facebook\"></i></a></li>\n                                                    <li className=\"list-inline-item\"><a href={null}><i className=\"fa fa-google-plus\"></i></a></li>\n                                                    <li className=\"list-inline-item\"><a href={null}><i className=\"fa fa-twitter\"></i></a></li>\n                                                    <li className=\"list-inline-item\"><a href={null}><i className=\"fa fa-instagram\"></i></a></li>\n                                                    <li className=\"list-inline-item\"><a href={null}><i className=\"fa fa-rss\"></i></a></li>\n                                                </ul>\n                                            </div>\n                                            <hr />\n                                            <div className=\"follow text-center\">\n                                                <Row>\n                                                    <Col className=\"border-right\"><span>{Following}</span>\n                                                        <div className=\"follow-num\">{\"236k\"}</div>\n                                                    </Col>\n                                                    <Col><span>{Follower}</span>\n                                                        <div className=\"follow-num\">{\"3691k\"}</div>\n                                                    </Col>\n                                                </Row>\n                                            </div>\n                                            <hr />\n                                            <div className=\"text-center digits\">\n                                                <p className=\"mb-0\">{\"Mark.jecno23@gmail.com\"}</p>\n                                                <p className=\"mb-0\">{\"+91 365 - 658 - 1236\"}</p>\n                                                <p className=\"mb-0\">{\"Fax: 123-4560\"}</p>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </TabPane>\n                            </TabContent>\n                        </Col>\n                    </Row>\n                  </CardBody>\n                </Card>\n              </Col>\n            </Row>\n            <Row>\n                <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                    <Card className='shadowy-card-videos'>\n                        <CardBody>\n                            <h4 className='redirect-helper'>Redirect to manage your pending & active video calling requests?</h4>\n                            <p className='lead'>By clicking the button below, you will be redirected to the appropriate page where you'll be able to manage and initialize <strong>LIVE VIDEO CALLING</strong> & much more! Check it out..</p>\n                            <hr />\n                            <Button className='btn-square-info' color='info-2x' outline style={{ width: \"100%\" }} onClick={() => {\n                                history.push(\"/view/pending/video/calling\");\n                            }}>Video Calling/Chat Related Action's</Button>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n          </Container>\n        </Fragment>\n        : \n        <div className=\"loading\"></div>\n    );\n}\nconst mapStateToProps = (state) => {\n    return {\n        SBData: state.sendbirdInitData.sendbirdInitData,\n        userData: state.auth.data\n    }\n}\nexport default connect(mapStateToProps, { })(MessagingMainHelper);"]},"metadata":{},"sourceType":"module"}