{"ast":null,"code":"var _jsxFileName = \"/home/kali/Documents/cybersecurity/client/src/components/dashboard/opportunities/employers/createListing/create/createEmployerListing.js\";\nimport React, { Fragment, useEffect, useState } from 'react';\nimport Breadcrumb from '../../../../../../layout/breadcrumb';\nimport one from '../../../../../../assets/images/job-search/1.jpg';\nimport { Container, Row, Col, Card, CardBody, Media, Button, Form, FormGroup, Label, Input, InputGroup, InputGroupAddon, ListGroup, ListGroupItem, InputGroupText, Popover, PopoverBody, PopoverHeader } from 'reactstrap';\nimport Select from 'react-select';\nimport uuid from \"react-uuid\";\nimport _ from \"lodash\";\nimport { MultiSelect } from \"react-multi-select-component\";\nimport CreateHashtagsListingComponent from \"./helpers/hashtags/createHashtagsListing.js\";\nimport LocationSearchInput from \"./helpers/location/searchAddress.js\";\nimport { XCircle } from \"react-feather\";\nimport \"./styles.css\";\nimport SimpleMDE from \"react-simplemde-editor\";\nimport { DateRangePicker, Calendar } from 'react-date-range';\nimport Dropzone from 'react-dropzone-uploader';\nimport { connect } from \"react-redux\";\nimport { saveListingData } from \"../../../../../../redux/actions/employer/listings/listingData.js\";\nimport { experienceOptions, desiredSkillsOptions, rankOptions, maxNumberOfHackersOptions, tokensApplyOptions, disclosureOptions, physicalOptions, visibilityOptions } from \"./helpers/options/selectionOptions.js\";\nimport { NotificationManager } from 'react-notifications';\nimport axios from \"axios\";\nimport LoadingBar from 'react-top-loading-bar';\nimport { useHistory } from \"react-router-dom\";\nimport { addDays } from 'date-fns';\n\nconst CreateJobListingMainHelper = props => {\n  const history = useHistory();\n  const [assetArray, setAssetArray] = useState([]);\n  const [data, setData] = useState({});\n  const [requiredRankToApply, setRequiredRankToApply] = useState(null);\n  const [experienceAndCost, setExperienceAndCost] = useState(null);\n  const [desiredSkills, setDesiredSkills] = useState([]);\n  const [content, setContent] = useState(\"\");\n  const [maxNumberOfApplicants, setMaxNumberOfApplicants] = useState(null);\n  const [popoverOpen, setPopoverOpen] = useState(false);\n  const [tokensRequiredToApply, setTokensRequiredToApply] = useState(null);\n  const [disclosureVisibility, setDisclosureVisibility] = useState(null);\n  const [typeOfHack, setTypeOfHack] = useState(null);\n  const [rules, setRules] = useState(\"\");\n  const [outOfScope, setOutOfScope] = useState(\"\");\n  const [progress, setProgress] = useState(0);\n  const [selectionRange, setSelectionRange] = useState(new Date());\n  const [count, setCount] = useState(0);\n  const [availiableHackerDates, handleHackerDates] = useState([{\n    startDate: new Date(),\n    endDate: new Date(),\n    key: 'selection'\n  }]);\n  const [listingVisibility, setListingVisibility] = useState(null);\n  useEffect(() => {\n    const {\n      assetArray,\n      typeOfHack,\n      testingDatesHackers,\n      rulesOfEngagement,\n      publicCompanyName,\n      outOfScopeVulnerabilities,\n      listingDescription,\n      requiredRankToApply,\n      experienceAndCost,\n      desiredSkills,\n      maxNumberOfApplicants,\n      disclosureVisibility,\n      tokensRequiredToApply,\n      listingVisibility,\n      estimatedCompletionDate\n    } = props.previousData; // update state according to redux memory...\n\n    setAssetArray(typeof assetArray !== \"undefined\" && assetArray.length > 0 ? assetArray : []);\n    setTypeOfHack(typeof typeOfHack !== \"undefined\" ? typeOfHack : null);\n    setRules(typeof rulesOfEngagement !== \"undefined\" ? rulesOfEngagement : \"\");\n    setData(typeof publicCompanyName !== \"undefined\" ? prevState => {\n      return { ...prevState,\n        publicCompanyName\n      };\n    } : {});\n    setOutOfScope(typeof outOfScopeVulnerabilities !== \"undefined\" ? outOfScopeVulnerabilities : \"\");\n    setContent(typeof listingDescription !== \"undefined\" ? listingDescription : \"\");\n    setMaxNumberOfApplicants(typeof maxNumberOfApplicants !== \"undefined\" ? maxNumberOfApplicants : null);\n    setRequiredRankToApply(typeof requiredRankToApply !== \"undefined\" ? requiredRankToApply : null);\n    setExperienceAndCost(typeof experienceAndCost !== \"undefined\" ? experienceAndCost : null);\n    setDesiredSkills(typeof desiredSkills !== \"undefined\" ? desiredSkills : []);\n    setDisclosureVisibility(typeof disclosureVisibility !== \"undefined\" ? disclosureVisibility : null);\n    setTokensRequiredToApply(typeof tokensRequiredToApply !== \"undefined\" ? tokensRequiredToApply : null);\n    setListingVisibility(typeof listingVisibility !== \"undefined\" ? listingVisibility : null);\n    props.saveListingData({ ...props.previousData,\n      testingDatesHackers: []\n    });\n  }, []);\n\n  const onChangeDescription = value => {\n    setContent(value);\n    props.saveListingData({ ...props.previousData,\n      listingDescription: value\n    });\n  };\n\n  const handleChangeInput = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setData(prevState => {\n      return { ...prevState,\n        [name]: value\n      };\n    });\n    props.saveListingData({ ...props.previousData,\n      [name]: value\n    });\n  };\n\n  const handleAssetAddition = e => {\n    e.preventDefault(); // assetName\n\n    setAssetArray(prevState => {\n      props.saveListingData({ ...props.previousData,\n        assetArray: [...prevState, {\n          id: uuid(),\n          name: data.assetName\n        }]\n      });\n      return [...prevState, {\n        id: uuid(),\n        name: data.assetName\n      }];\n    });\n    setData(prevState => {\n      return { ...prevState,\n        assetName: \"\"\n      };\n    });\n  };\n\n  const changeBountyPrices = (e, rewardLevel, asset) => {\n    const {\n      value\n    } = e.target;\n    setAssetArray(prevState => {\n      props.saveListingData({ ...props.previousData,\n        assetArray: prevState.map((item, i) => {\n          if (item.id === asset.id) {\n            return { ...item,\n              [rewardLevel]: Number(value)\n            };\n          } else {\n            return item;\n          }\n        })\n      });\n      return prevState.map((item, i) => {\n        if (item.id === asset.id) {\n          return { ...item,\n            [rewardLevel]: Number(value)\n          };\n        } else {\n          return item;\n        }\n      });\n    });\n  };\n\n  const renderBusinessLocationPortion = () => {\n    if (_.has(props.previousData, \"typeOfHack\") && typeOfHack !== null && typeOfHack.value === \"physical-hack\") {\n      return /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"h6\", {\n        className: \"mb-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }\n      }, \"Location - Physical Hacking (Only Provided To \", /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 88\n        }\n      }, \"SELECTED/HIRED\"), \" Applicants)\"), /*#__PURE__*/React.createElement(Form, {\n        className: \"theme-form\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        sm: \"12\",\n        lg: \"12\",\n        md: \"12\",\n        xl: \"12\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Label, {\n        htmlFor: \"exampleFormControlInput1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 37\n        }\n      }, \"Enter your company business address (the address that your hackers will be testing at):\", /*#__PURE__*/React.createElement(\"span\", {\n        className: \"font-danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 166\n        }\n      }, \"*\")), /*#__PURE__*/React.createElement(LocationSearchInput, {\n        props: props,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 37\n        }\n      }))))));\n    }\n  };\n\n  const renderPhysicalHackingDates = () => {\n    if (_.has(props.previousData, \"typeOfHack\") && typeOfHack !== null && typeOfHack.value === \"physical-hack\") {\n      return /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Label, {\n        htmlFor: \"exampleFormControlInput1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }\n      }, \"Dates Availiable To Hackers To Test Physical Assets:\", /*#__PURE__*/React.createElement(\"span\", {\n        className: \"font-danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 115\n        }\n      }, \"*\")), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 21\n        }\n      }, \"These are the days that will be available to the \", /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 73\n        }\n      }, \"hired/selected\"), \" hacker canidates to choose from when deciding which days they will attempt to infiltrate your company. This is only relevant for \", /*#__PURE__*/React.createElement(\"strong\", {\n        style: {\n          color: \"blue\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 234\n        }\n      }, \"PHYSICAL\"), \" hacking requirements.\"), /*#__PURE__*/React.createElement(\"p\", {\n        style: {\n          paddingBottom: \"20px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(DateRangePicker, {\n        minDate: new Date(),\n        showSelectionPreview: true,\n        moveRangeOnFirstSelection: true,\n        ranges: availiableHackerDates,\n        onChange: handleDatesSelectable,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 21\n        }\n      }));\n    }\n  };\n\n  const handleDeadlineSelect = date => {\n    if (new Date(date) > new Date()) {\n      setSelectionRange(date);\n      props.saveListingData({ ...props.previousData,\n        estimatedCompletionDate: date\n      });\n    } else {\n      NotificationManager.warning(`You must select a date that is current or beyond today's current date.`, \"Pick a valid date!\", 3500);\n    }\n  };\n\n  console.log(\"availiableHackerDates\", availiableHackerDates);\n\n  const handleDatesSelectable = ranges => {\n    console.log(\"ranges\", ranges.selection);\n\n    if (new Date(ranges.selection.startDate) > new Date()) {\n      if (count === 0) {\n        handleHackerDates(prevState => {\n          console.log(\"ran.\", prevState);\n          props.saveListingData({ ...props.previousData,\n            testingDatesHackers: [ranges.selection]\n          });\n          return [ranges.selection];\n        });\n        setCount(count + 1);\n      } else {\n        handleHackerDates(prevState => {\n          console.log(\"ran.\", prevState);\n          props.saveListingData({ ...props.previousData,\n            testingDatesHackers: [...prevState, ranges.selection]\n          });\n          return [...prevState, ranges.selection];\n        });\n        setCount(count + 1);\n      }\n    } else {\n      NotificationManager.warning(`You must select a date that is current or beyond today's current date.`, \"Pick a valid date!\", 3500);\n    }\n\n    ;\n  };\n\n  const getUploadParams = _ref => {\n    let {\n      meta\n    } = _ref;\n    return {\n      url: 'https://httpbin.org/post'\n    };\n  };\n\n  const handleChangeStatus = (_ref2, status) => {\n    let {\n      meta,\n      file\n    } = _ref2;\n    console.log(status, meta, file);\n\n    if (status === \"done\") {\n      const data = new FormData();\n      data.append(\"file\", file);\n      data.append(\"meta\", meta);\n      const config = {\n        onUploadProgress: function (progressEvent) {\n          let percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n          console.log(\"percentCompleted\", percentCompleted);\n          setProgress(percentCompleted);\n        },\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      };\n      axios.post(`${process.env.REACT_APP_BASE_URL}/upload/file/upon/selection/employer/listing`, data, config).then(res => {\n        if (res.data.message === \"Successfully uploaded content!\") {\n          console.log(res.data);\n          const {\n            file,\n            generatedID\n          } = res.data;\n\n          if (typeof props.previousData.uploadedFiles !== \"undefined\" && props.previousData.uploadedFiles.length > 0) {\n            props.saveListingData({ ...props.previousData,\n              uploadedFiles: [...props.previousData.uploadedFiles, { ...file,\n                onlineID: generatedID\n              }]\n            });\n          } else {\n            props.saveListingData({ ...props.previousData,\n              uploadedFiles: [{ ...file,\n                onlineID: generatedID\n              }]\n            });\n          }\n\n          NotificationManager.success(`We've successfully uploaded your file! Please proceed filling out your information or add more files.`, 'Successfully uploaded file!', 4500);\n        } else {\n          console.log(\"err\", res.data);\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  };\n\n  const handleListingSubmission = e => {\n    e.preventDefault();\n    const {\n      assetArray,\n      typeOfHack,\n      testingDatesHackers,\n      rulesOfEngagement,\n      publicCompanyName,\n      outOfScopeVulnerabilities,\n      listingDescription,\n      hashtags,\n      businessAddress,\n      requiredRankToApply,\n      experienceAndCost,\n      desiredSkills,\n      maxNumberOfApplicants,\n      disclosureVisibility,\n      tokensRequiredToApply,\n      listingVisibility,\n      estimatedCompletionDate\n    } = props.previousData;\n\n    if (typeof typeOfHack !== \"undefined\") {\n      if (typeOfHack.value === \"physical-hack\") {\n        if (Object.keys(props.previousData).length >= 17) {\n          for (const key in props.previousData) {\n            const el = props.previousData[key];\n            console.log(\"physical - \", key, el);\n\n            switch (key) {\n              case \"\":\n                break;\n\n              default:\n                break;\n            }\n          }\n        } else {\n          NotificationManager.error(\"You MUST complete every required field before proceeding to the next page!\", \"Complete all fields!\", 4500);\n        }\n      } else {\n        if (Object.keys(props.previousData).length >= 15) {\n          for (const key in props.previousData) {\n            const el = props.previousData[key];\n            console.log(\"digital - \", key, el);\n\n            switch (key) {\n              case \"\":\n                break;\n\n              default:\n                break;\n            }\n          }\n        } else {\n          NotificationManager.error(\"You MUST complete every required field before proceeding to the next page!\", \"Complete all fields!\", 4500);\n        }\n      }\n    } else {\n      NotificationManager.error(\"You must choose a hack type - physical OR digital but you must choose.\", \"Choose Hack Type!\", 4500);\n    } // if ((typeof assetArray !== \"undefined\" && assetArray.length > 0) && (typeOfHack !== null) && (typeof rulesOfEngagement !== \"undefined\" && rulesOfEngagement.length > 0) && (typeof publicCompanyName !== \"undefined\" && publicCompanyName.length > 0) && (typeof outOfScopeVulnerabilities !== \"undefined\" && outOfScopeVulnerabilities.length > 0) && (typeof listingDescription !== \"undefined\" && listingDescription.length > 0) && (typeof hashtags !== \"undefined\" && hashtags.length > 0) && (typeof requiredRankToApply !== \"undefined\" && _.has(props.previousData, \"requiredRankToApply\") && Object.keys(requiredRankToApply).length > 0) && (typeof experienceAndCost !== \"undefined\" && _.has(props.previousData, \"experienceAndCost\") && Object.keys(experienceAndCost).length > 0) && (typeof desiredSkills !== \"undefined\" && desiredSkills.length > 0) && (typeof maxNumberOfApplicants !== \"undefined\" && _.has(props.previousData, \"maxNumberOfApplicants\") && Object.keys(maxNumberOfApplicants).length > 0) && (typeof disclosureVisibility !== \"undefined\" && _.has(props.previousData, \"disclosureVisibility\") && Object.keys(disclosureVisibility).length > 0) && (typeof tokensRequiredToApply !== \"undefined\" && _.has(props.previousData, \"tokensRequiredToApply\") && Object.keys(tokensRequiredToApply).length > 0) && (typeof listingVisibility !== \"undefined\" && _.has(props.previousData, \"listingVisibility\") && Object.keys(listingVisibility).length > 0) && (typeof estimatedCompletionDate !== \"undefined\" && _.has(props.previousData, \"estimatedCompletionDate\") && Object.keys(estimatedCompletionDate).length > 0)) {\n    // } else if () {\n    // }\n    // if ((typeof assetArray !== \"undefined\" && assetArray.length > 0) && (typeOfHack !== null) && (typeof rulesOfEngagement !== \"undefined\" && rulesOfEngagement.length > 0) && (typeof publicCompanyName !== \"undefined\" && publicCompanyName.length > 0) && (typeof outOfScopeVulnerabilities !== \"undefined\" && outOfScopeVulnerabilities.length > 0) && (typeof listingDescription !== \"undefined\" && listingDescription.length > 0) && (typeof hashtags !== \"undefined\" && hashtags.length > 0) && (typeof requiredRankToApply !== \"undefined\" && _.has(props.previousData, \"requiredRankToApply\") && Object.keys(requiredRankToApply).length > 0) && (typeof experienceAndCost !== \"undefined\" && _.has(props.previousData, \"experienceAndCost\") && Object.keys(experienceAndCost).length > 0) && (typeof desiredSkills !== \"undefined\" && desiredSkills.length > 0) && (typeof maxNumberOfApplicants !== \"undefined\" && _.has(props.previousData, \"maxNumberOfApplicants\") && Object.keys(maxNumberOfApplicants).length > 0) && (typeof disclosureVisibility !== \"undefined\" && _.has(props.previousData, \"disclosureVisibility\") && Object.keys(disclosureVisibility).length > 0) && (typeof tokensRequiredToApply !== \"undefined\" && _.has(props.previousData, \"tokensRequiredToApply\") && Object.keys(tokensRequiredToApply).length > 0) && (typeof listingVisibility !== \"undefined\" && _.has(props.previousData, \"listingVisibility\") && Object.keys(listingVisibility).length > 0) && (typeof estimatedCompletionDate !== \"undefined\" && _.has(props.previousData, \"estimatedCompletionDate\") && Object.keys(estimatedCompletionDate).length > 0)) {\n    //     // check if physical location\n    //     if ((typeof typeOfHack !== \"undefined\" && _.has(props.previousData, \"typeOfHack\") && typeOfHack.value === \"physical-hack\")) {\n    //         if ((typeof testingDatesHackers !== \"undefined\" && testingDatesHackers.length > 0) && (typeof businessAddress !== \"undefined\" && _.has(props.previousData, \"businessAddress\") && Object.keys(businessAddress).length > 0)) {\n    //             // location data is properly filled out.\n    //             const jobData = {\n    //                 assetArray, \n    //                 typeOfHack, \n    //                 testingDatesHackers, \n    //                 rulesOfEngagement, \n    //                 publicCompanyName, \n    //                 outOfScopeVulnerabilities, \n    //                 listingDescription, \n    //                 hashtags, \n    //                 businessAddress, \n    //                 requiredRankToApply, \n    //                 experienceAndCost, \n    //                 desiredSkills, \n    //                 maxNumberOfApplicants, \n    //                 disclosureVisibility, \n    //                 tokensRequiredToApply, \n    //                 listingVisibility, \n    //                 estimatedCompletionDate,\n    //                 physicalLocation: true \n    //             };\n    //             history.push(\"/review/employer/listing/data/payment\", { jobData });\n    //         } else {\n    //             NotificationManager.warning(`You have selected a 'physical' hack requiring approved hackers to know your address yet both 'testing dates' and 'business address' fields are incomplete.`, \"Testing dates & address are INCOMPLETE!\", 4500);\n    //         }\n    //     } else {\n    //         const jobData = {\n    //             assetArray, \n    //             typeOfHack, \n    //             testingDatesHackers: null, \n    //             rulesOfEngagement, \n    //             publicCompanyName, \n    //             outOfScopeVulnerabilities, \n    //             listingDescription, \n    //             hashtags, \n    //             businessAddress: null, \n    //             requiredRankToApply, \n    //             experienceAndCost, \n    //             desiredSkills, \n    //             maxNumberOfApplicants, \n    //             disclosureVisibility, \n    //             tokensRequiredToApply, \n    //             listingVisibility, \n    //             estimatedCompletionDate,\n    //             physicalLocation: false\n    //         };\n    //         history.push(\"/review/employer/listing/data/payment\", { jobData });\n    //     }\n    // } else {\n    //     // need to complete more fields!\n    // NotificationManager.error(`You MUST complete ALL of the required fields (marked with red asterisk) - review your edits and make sure everything is filled out.`, \"INCOMPLETE FORM/INPUTS!\", 4500);\n    // }\n\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Breadcrumb, {\n    parent: \"Create Listing\",\n    title: \"Create a public employer listing\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(LoadingBar, {\n    color: \"#f11946\",\n    progress: progress,\n    onLoaderFinished: () => setProgress(0),\n    className: \"loadingBarRaise\",\n    containerClassName: \"loadingBarRaise\",\n    height: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xl: \"12 xl-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"job-search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(CardBody, {\n    className: \"pb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Media, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"img-40 img-fluid m-r-20\",\n    src: one,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 41\n    }\n  }), /*#__PURE__*/React.createElement(Media, {\n    body: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"f-w-600\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"#\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 49\n    }\n  }, \"Create an employer listing\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"pull-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 49\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 45\n    }\n  }, \"Create a listing requesting for your company to be hacked (this will be public visible information to our database of hackers)\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"job-description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 41\n    }\n  }, \"General Details\"), /*#__PURE__*/React.createElement(Form, {\n    className: \"theme-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: \"6\",\n    lg: \"6\",\n    sm: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"exampleFormControlInput1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 57\n    }\n  }, \"Public Company Name:\", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"font-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 119\n    }\n  }, \"*\")), /*#__PURE__*/React.createElement(Input, {\n    value: data.publicCompanyName,\n    onChange: handleChangeInput,\n    className: \"form-control\",\n    id: \"exampleFormControlInput1\",\n    name: \"publicCompanyName\",\n    type: \"text\",\n    placeholder: \"Enter your company's publically known name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 57\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    md: \"6\",\n    lg: \"6\",\n    sm: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"exampleFormControlInput1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 57\n    }\n  }, \"Preferred Rank/Level Required To Apply:\", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"font-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 138\n    }\n  }, \"*\")), /*#__PURE__*/React.createElement(Select, {\n    value: requiredRankToApply,\n    onChange: value => {\n      setRequiredRankToApply(value);\n      props.saveListingData({ ...props.previousData,\n        requiredRankToApply: value\n      });\n    },\n    options: rankOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 57\n    }\n  })))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"exampleFormControlInput3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 57\n    }\n  }, \"Experience Rewarded To Winner + Cost To Post:\", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"font-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 144\n    }\n  }, \"*\")), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      paddingTop: \"7px\",\n      paddingBottom: \"7px\"\n    },\n    className: \"text-left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 57\n    }\n  }, \"Experience is rewarded to the hacker winner. Hackers level up their accounts with XP points and can redeem the XP for cash ($-USD) after reaching certain ranks/levels. Having a \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 311\n    }\n  }, \"higher\"), \" XP reward will incentivize hackers to pick your company over others - however it \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 416\n    }\n  }, \"costs more\"), \".\"), /*#__PURE__*/React.createElement(Select, {\n    value: experienceAndCost,\n    onChange: value => {\n      setExperienceAndCost(value);\n      props.saveListingData({ ...props.previousData,\n        experienceAndCost: value\n      });\n    },\n    options: experienceOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 57\n    }\n  })))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"exampleFormControlpassword\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 57\n    }\n  }, \"Required/Desired Skills From Hackers:\", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"font-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 138\n    }\n  }, \"*\")), /*#__PURE__*/React.createElement(MultiSelect, {\n    options: desiredSkillsOptions,\n    value: desiredSkills,\n    onChange: value => {\n      setDesiredSkills(value);\n      props.saveListingData({ ...props.previousData,\n        desiredSkills: value\n      });\n    },\n    labelledBy: \"Select\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 57\n    }\n  })))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 530,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 532,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"exampleFormControlpassword1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 57\n    }\n  }, \"HashTags/Tags (Hackers will use these to find your listing):\", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"font-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 162\n    }\n  }, \"*\")), /*#__PURE__*/React.createElement(CreateHashtagsListingComponent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 534,\n      columnNumber: 57\n    }\n  })))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 538,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 539,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-form-label pt-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 540,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 540,\n      columnNumber: 90\n    }\n  }, \"MAX\"), \" Number Of Required Hackers:\"), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 541,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    value: maxNumberOfApplicants,\n    onChange: value => {\n      setMaxNumberOfApplicants(value);\n      props.saveListingData({ ...props.previousData,\n        maxNumberOfApplicants: value\n      });\n    },\n    options: maxNumberOfHackersOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 542,\n      columnNumber: 57\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    sm: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 556,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    onMouseEnter: () => {\n      setPopoverOpen(true);\n    },\n    id: \"PopoverID\",\n    className: \"col-form-label pt-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 557,\n      columnNumber: 53\n    }\n  }, \"Amount Of Tokens Required To Apply (hover for info):\"), /*#__PURE__*/React.createElement(Popover, {\n    placement: \"top\",\n    isOpen: popoverOpen,\n    target: \"PopoverID\",\n    toggle: () => {\n      setPopoverOpen(!popoverOpen);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 560,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(PopoverHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 568,\n      columnNumber: 57\n    }\n  }, \"Tokens are required from hackers to apply to this job\"), /*#__PURE__*/React.createElement(PopoverBody, {\n    onMouseLeave: () => {\n      setPopoverOpen(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 569,\n      columnNumber: 57\n    }\n  }, \"Hackers purchase tokens in which they then use to apply to your listing(s). These are \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 572,\n      columnNumber: 147\n    }\n  }, \"REQUIRED\"), \" to apply to listings so please choose the amount you charge proportionally to the work required from your company and the reward given to successful hackers.\")), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 575,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    value: tokensRequiredToApply,\n    onChange: value => {\n      setTokensRequiredToApply(value);\n      props.saveListingData({ ...props.previousData,\n        tokensRequiredToApply: value\n      });\n    },\n    options: tokensApplyOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 576,\n      columnNumber: 57\n    }\n  })))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 591,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"6\",\n    lg: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 592,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 593,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"exampleFormControlInput4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 594,\n      columnNumber: 57\n    }\n  }, \"Public Or Private Vulnerability Disclosures (Upon Successful Hack):\"), /*#__PURE__*/React.createElement(Select, {\n    value: disclosureVisibility,\n    onChange: value => {\n      setDisclosureVisibility(value);\n      props.saveListingData({ ...props.previousData,\n        disclosureVisibility: value\n      });\n    },\n    options: disclosureOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 595,\n      columnNumber: 57\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"6\",\n    lg: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 609,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 610,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"exampleFormControlInput4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 611,\n      columnNumber: 57\n    }\n  }, \"Type Of Hack Required (Physical/in-person \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 611,\n      columnNumber: 141\n    }\n  }, \"OR\"), \" digital/online assets):\"), /*#__PURE__*/React.createElement(Select, {\n    value: typeOfHack,\n    onChange: value => {\n      setTypeOfHack(value);\n      props.saveListingData({ ...props.previousData,\n        typeOfHack: value\n      });\n    },\n    options: physicalOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 612,\n      columnNumber: 57\n    }\n  }))))), /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 628,\n      columnNumber: 41\n    }\n  }, \"Timespan & Timeline Information + Visibility Type\"), /*#__PURE__*/React.createElement(Form, {\n    className: \"theme-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 629,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 630,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: \"6\",\n    lg: \"6\",\n    xl: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 631,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12 xl-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 632,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 633,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"exampleFormControlInput1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 634,\n      columnNumber: 61\n    }\n  }, \"Visibility Type (Who Can See Your Listing Or Apply Once Live):\", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"font-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 634,\n      columnNumber: 165\n    }\n  }, \"*\")), /*#__PURE__*/React.createElement(Select, {\n    value: listingVisibility,\n    onChange: value => {\n      setListingVisibility(value);\n      props.saveListingData({ ...props.previousData,\n        listingVisibility: value\n      });\n    },\n    options: visibilityOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 635,\n      columnNumber: 61\n    }\n  })), renderPhysicalHackingDates())), /*#__PURE__*/React.createElement(Col, {\n    md: \"12\",\n    lg: \"12\",\n    xl: \"6 xl-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 651,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 652,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"exampleFormControlInput1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 653,\n      columnNumber: 57\n    }\n  }, \"Estimated/Expected Day Of Completion (Must Be Successfully Hacked By This Day For Full Payment):\", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"font-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 653,\n      columnNumber: 195\n    }\n  }, \"*\")), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      paddingBottom: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 654,\n      columnNumber: 57\n    }\n  }, \"These are the days in which you expect the hired hackers/contractors to have \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 654,\n      columnNumber: 171\n    }\n  }, \"successfully\"), \" completed any hacks or attacks (digital or physical) against your company. Disclosures will occurr shortly after whichever days are selected and any further testing or reporting shall proceed at that point.\"), /*#__PURE__*/React.createElement(Calendar, {\n    minDate: new Date(),\n    date: _.has(props.previousData, \"estimatedCompletionDate\") ? new Date(props.previousData.estimatedCompletionDate) : new Date(),\n    onChange: handleDeadlineSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 655,\n      columnNumber: 57\n    }\n  }))))), renderBusinessLocationPortion(), /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 665,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 665,\n      columnNumber: 62\n    }\n  }, \"DIGITAL\"), \" Assets & Payment/Reward Information - Digital Scope\"), /*#__PURE__*/React.createElement(Form, {\n    className: \"theme-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 666,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 667,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xl: \"12 xl-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 668,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 669,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"exampleFormControlInput7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 670,\n      columnNumber: 57\n    }\n  }, \"Asset Endpoint Or URL:\", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"font-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 670,\n      columnNumber: 121\n    }\n  }, \"*\")), /*#__PURE__*/React.createElement(InputGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 671,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    onChange: handleChangeInput,\n    value: data.assetName,\n    className: \"form-control\",\n    id: \"exampleFormControlInput7\",\n    name: \"assetName\",\n    type: \"text\",\n    placeholder: \"Eg.'s - api.yourcompany.com OR https://www.yourcompanywebsite.com\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 672,\n      columnNumber: 61\n    }\n  }), /*#__PURE__*/React.createElement(InputGroupAddon, {\n    addonType: \"append\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 673,\n      columnNumber: 61\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: handleAssetAddition,\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 673,\n      columnNumber: 97\n    }\n  }, \"Add Asset\"))))), /*#__PURE__*/React.createElement(ListGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 677,\n      columnNumber: 49\n    }\n  }, typeof assetArray !== \"undefined\" && assetArray.length > 0 ? assetArray.map((asset, index) => {\n    return /*#__PURE__*/React.createElement(ListGroupItem, {\n      key: index,\n      className: \"list-group-item flex-column align-items-start\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      style: {\n        paddingBottom: \"12px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(ListGroupItem, {\n      active: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682,\n        columnNumber: 65\n      }\n    }, asset.name, /*#__PURE__*/React.createElement(\"div\", {\n      onClick: () => {\n        setAssetArray(prevState => {\n          props.saveListingData({ ...props.previousData,\n            assetArray: prevState.filter((item, index) => {\n              if (item.id !== asset.id) {\n                return item;\n              }\n            })\n          });\n          return prevState.filter((item, index) => {\n            if (item.id !== asset.id) {\n              return item;\n            }\n          });\n        });\n      },\n      id: \"float-right-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682,\n        columnNumber: 99\n      }\n    }, /*#__PURE__*/React.createElement(XCircle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698,\n        columnNumber: 90\n      }\n    })))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 700,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      lg: \"3\",\n      sm: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 701,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 702,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 703,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: \"#ffc800\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 703,\n        columnNumber: 80\n      }\n    }, \"Low\"), \" Severity Bounty Reward\"), /*#__PURE__*/React.createElement(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 704,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      onChange: e => {\n        changeBountyPrices(e, \"lowSeverity\", asset);\n      },\n      value: asset.lowSeverity,\n      className: \"form-control\",\n      type: \"text\",\n      placeholder: \"Average Cash($) Reward Price\",\n      \"aria-label\": \"Average Cash($) Reward Price\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 705,\n        columnNumber: 73\n      }\n    })))), /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      lg: \"3\",\n      sm: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 711,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 712,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 713,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: \"#ed3824\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 713,\n        columnNumber: 80\n      }\n    }, \"Medium\"), \" Severity Bounty Reward\"), /*#__PURE__*/React.createElement(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 714,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      onChange: e => {\n        changeBountyPrices(e, \"mediumSeverity\", asset);\n      },\n      value: asset.mediumSeverity,\n      className: \"form-control\",\n      type: \"text\",\n      placeholder: \"Average Cash($) Reward Price\",\n      \"aria-label\": \"Average Cash($) Reward Price\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 715,\n        columnNumber: 73\n      }\n    })))), /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      lg: \"3\",\n      sm: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 721,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 722,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 723,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: \"#8f0091\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 723,\n        columnNumber: 80\n      }\n    }, \"High\"), \" Severity Bounty Reward\"), /*#__PURE__*/React.createElement(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 724,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      onChange: e => {\n        changeBountyPrices(e, \"highSeverity\", asset);\n      },\n      value: asset.highSeverity,\n      className: \"form-control\",\n      type: \"text\",\n      placeholder: \"Average Cash($) Reward Price\",\n      \"aria-label\": \"Average Cash($) Reward Price\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 725,\n        columnNumber: 73\n      }\n    })))), /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      lg: \"3\",\n      sm: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 731,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 732,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 733,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: \"#b30211\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 733,\n        columnNumber: 80\n      }\n    }, \"Critical\"), \" Severity Bounty Reward\"), /*#__PURE__*/React.createElement(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 734,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      onChange: e => {\n        changeBountyPrices(e, \"criticalSeverity\", asset);\n      },\n      value: asset.criticalSeverity,\n      className: \"form-control\",\n      type: \"text\",\n      placeholder: \"Average Cash($) Reward Price\",\n      \"aria-label\": \"Average Cash($) Reward Price\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 735,\n        columnNumber: 73\n      }\n    }))))));\n  }) : null))), /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 748,\n      columnNumber: 41\n    }\n  }, \"Upload Any Supporting Documents/Files\"), /*#__PURE__*/React.createElement(Form, {\n    className: \"theme-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 749,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 750,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 751,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 752,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    className: \"col-form-label pt-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 753,\n      columnNumber: 57\n    }\n  }, \"Upload File(s):\", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"font-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 753,\n      columnNumber: 111\n    }\n  }, \"*\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dz-message needsclick\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 754,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(Dropzone, {\n    getUploadParams: getUploadParams,\n    onChangeStatus: handleChangeStatus,\n    maxFiles: 5,\n    multiple: false,\n    canCancel: false,\n    inputContent: \"Drop A File(s)\",\n    styles: {\n      dropzone: {\n        height: 225\n      },\n      dropzoneActive: {\n        borderColor: 'green'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 755,\n      columnNumber: 61\n    }\n  })))))), /*#__PURE__*/React.createElement(ListGroup, {\n    style: {\n      paddingBottom: \"25px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 772,\n      columnNumber: 41\n    }\n  }, typeof props.previousData.uploadedFiles !== \"undefined\" && props.previousData.uploadedFiles.length > 0 ? props.previousData.uploadedFiles.map((file, index) => {\n    return /*#__PURE__*/React.createElement(ListGroupItem, {\n      className: \"d-flex justify-content-between align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 775,\n        columnNumber: 53\n      }\n    }, file.name, /*#__PURE__*/React.createElement(\"span\", {\n      onClick: () => {\n        props.saveListingData({ ...props.previousData,\n          uploadedFiles: props.previousData.uploadedFiles.filter((item, indxxx) => {\n            if (item.id !== file.id) {\n              return item;\n            }\n          })\n        });\n      },\n      className: \"badge badge-primary counter digits hover-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 775,\n        columnNumber: 141\n      }\n    }, \"Remove file from uploads\"));\n  }) : null), /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"mb-0\",\n    style: {\n      paddingBottom: \"15px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 788,\n      columnNumber: 41\n    }\n  }, \"Listing Description/Information\"), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      paddingBottom: \"25px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 789,\n      columnNumber: 41\n    }\n  }, \"Include as detailed of a description as you possibly can so our hackers will know what they're being asked to attempt/hack. This can be \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 789,\n      columnNumber: 214\n    }\n  }, \"general\"), \" information as well as any other information that you'd like to include. Strong/detailed listing descriptions generally always have higher response/application rates compared to minimal detail listings.\"), /*#__PURE__*/React.createElement(SimpleMDE, {\n    id: \"editor_container\",\n    onChange: onChangeDescription,\n    value: content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 790,\n      columnNumber: 41\n    }\n  }), /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"mb-0\",\n    style: {\n      paddingBottom: \"15px\",\n      paddingTop: \"25px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 795,\n      columnNumber: 41\n    }\n  }, \"Program/Listing Rules & Conditions Of Engagement\"), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      paddingBottom: \"25px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 796,\n      columnNumber: 41\n    }\n  }, \"Please include an \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 796,\n      columnNumber: 96\n    }\n  }, \"exhaustive list\"), \" of specific \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 796,\n      columnNumber: 141\n    }\n  }, \"RULES\"), \" our hackers should follow and abide by while applying allowed hacks to avoid \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 796,\n      columnNumber: 241\n    }\n  }, \"termination or suspension\"), \" from our platform for misuse (referring to our hackers). We stand by our rules and proceedures so please be as detailed and clear as possible while outlines what you expect from potential hacker candiates and the conditions in place once hired.\"), /*#__PURE__*/React.createElement(SimpleMDE, {\n    id: \"editor_container\",\n    onChange: value => {\n      setRules(value);\n      props.saveListingData({ ...props.previousData,\n        rulesOfEngagement: value\n      });\n    },\n    value: rules,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 797,\n      columnNumber: 41\n    }\n  }), /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"mb-0\",\n    style: {\n      paddingBottom: \"15px\",\n      paddingTop: \"25px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 809,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 809,\n      columnNumber: 116\n    }\n  }, \"OUT OF SCOPE\"), \" Vulnerabilities & Boundaries\"), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      paddingBottom: \"25px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 810,\n      columnNumber: 41\n    }\n  }, \"Please include an exhaustive list of which vulnerabilities are \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 810,\n      columnNumber: 141\n    }\n  }, \"NOT\"), \" included as acceptable reports as well as anything you would like our hackers to \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 810,\n      columnNumber: 243\n    }\n  }, \"abstain\"), \" from testing or tampering with such as texting accounts, unauthenticated tests, etc... \", /*#__PURE__*/React.createElement(\"em\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 810,\n      columnNumber: 355\n    }\n  }, \"BE AS SPECIFIC AS POSSIBLE.\")), /*#__PURE__*/React.createElement(SimpleMDE, {\n    id: \"editor_container_two\",\n    onChange: value => {\n      setOutOfScope(value);\n      props.saveListingData({ ...props.previousData,\n        outOfScopeVulnerabilities: value\n      });\n    },\n    value: outOfScope,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 811,\n      columnNumber: 41\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 825,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    style: {\n      width: \"100%\"\n    },\n    onClick: handleListingSubmission,\n    color: \"primary mr-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 826,\n      columnNumber: 37\n    }\n  }, \"Submit & Continue To Payment/Confirmation Page\"))))))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    previousData: _.has(state.listingData, \"listingData\") ? state.listingData.listingData : {}\n  };\n};\n\nexport default connect(mapStateToProps, {\n  saveListingData\n})(CreateJobListingMainHelper);","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/opportunities/employers/createListing/create/createEmployerListing.js"],"names":["React","Fragment","useEffect","useState","Breadcrumb","one","Container","Row","Col","Card","CardBody","Media","Button","Form","FormGroup","Label","Input","InputGroup","InputGroupAddon","ListGroup","ListGroupItem","InputGroupText","Popover","PopoverBody","PopoverHeader","Select","uuid","_","MultiSelect","CreateHashtagsListingComponent","LocationSearchInput","XCircle","SimpleMDE","DateRangePicker","Calendar","Dropzone","connect","saveListingData","experienceOptions","desiredSkillsOptions","rankOptions","maxNumberOfHackersOptions","tokensApplyOptions","disclosureOptions","physicalOptions","visibilityOptions","NotificationManager","axios","LoadingBar","useHistory","addDays","CreateJobListingMainHelper","props","history","assetArray","setAssetArray","data","setData","requiredRankToApply","setRequiredRankToApply","experienceAndCost","setExperienceAndCost","desiredSkills","setDesiredSkills","content","setContent","maxNumberOfApplicants","setMaxNumberOfApplicants","popoverOpen","setPopoverOpen","tokensRequiredToApply","setTokensRequiredToApply","disclosureVisibility","setDisclosureVisibility","typeOfHack","setTypeOfHack","rules","setRules","outOfScope","setOutOfScope","progress","setProgress","selectionRange","setSelectionRange","Date","count","setCount","availiableHackerDates","handleHackerDates","startDate","endDate","key","listingVisibility","setListingVisibility","testingDatesHackers","rulesOfEngagement","publicCompanyName","outOfScopeVulnerabilities","listingDescription","estimatedCompletionDate","previousData","length","prevState","onChangeDescription","value","handleChangeInput","e","name","target","handleAssetAddition","preventDefault","id","assetName","changeBountyPrices","rewardLevel","asset","map","item","i","Number","renderBusinessLocationPortion","has","renderPhysicalHackingDates","color","paddingBottom","handleDatesSelectable","handleDeadlineSelect","date","warning","console","log","ranges","selection","getUploadParams","meta","url","handleChangeStatus","status","file","FormData","append","config","onUploadProgress","progressEvent","percentCompleted","Math","round","loaded","total","headers","post","process","env","REACT_APP_BASE_URL","then","res","message","generatedID","uploadedFiles","onlineID","success","catch","err","handleListingSubmission","hashtags","businessAddress","Object","keys","el","error","paddingTop","index","filter","lowSeverity","mediumSeverity","highSeverity","criticalSeverity","dropzone","height","dropzoneActive","borderColor","indxxx","width","mapStateToProps","state","listingData"],"mappings":"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","sourcesContent":["import React, {Fragment, useEffect, useState} from 'react';\nimport Breadcrumb from '../../../../../../layout/breadcrumb';\nimport one from '../../../../../../assets/images/job-search/1.jpg';\nimport {Container,Row,Col,Card,CardBody,Media,Button,Form,FormGroup,Label,Input,InputGroup,InputGroupAddon,ListGroup,ListGroupItem,InputGroupText,Popover,PopoverBody,PopoverHeader} from 'reactstrap';\nimport Select from 'react-select';\nimport uuid from \"react-uuid\";\nimport _ from \"lodash\";\nimport { MultiSelect } from \"react-multi-select-component\";\nimport CreateHashtagsListingComponent from \"./helpers/hashtags/createHashtagsListing.js\";\nimport LocationSearchInput from \"./helpers/location/searchAddress.js\";\nimport { XCircle } from \"react-feather\";\nimport \"./styles.css\";\nimport SimpleMDE from \"react-simplemde-editor\";\nimport { DateRangePicker, Calendar } from 'react-date-range';\nimport Dropzone from 'react-dropzone-uploader';\nimport { connect } from \"react-redux\";\nimport { saveListingData } from \"../../../../../../redux/actions/employer/listings/listingData.js\";\nimport {\n    experienceOptions,\n    desiredSkillsOptions,\n    rankOptions,\n    maxNumberOfHackersOptions,\n    tokensApplyOptions,\n    disclosureOptions,\n    physicalOptions,\n    visibilityOptions\n} from \"./helpers/options/selectionOptions.js\";\nimport { NotificationManager } from 'react-notifications';\nimport axios from \"axios\";\nimport LoadingBar from 'react-top-loading-bar';\nimport { useHistory } from \"react-router-dom\";\nimport { addDays } from 'date-fns';\n\n\nconst CreateJobListingMainHelper = (props) => {\n\n    const history = useHistory();\n\n    const [ assetArray, setAssetArray ] = useState([]);\n    const [ data, setData ] = useState({});\n    const [ requiredRankToApply, setRequiredRankToApply ] = useState(null);\n    const [ experienceAndCost, setExperienceAndCost ] = useState(null);\n    const [ desiredSkills, setDesiredSkills ] = useState([]);\n    const [ content,setContent ] = useState(\"\");\n    const [ maxNumberOfApplicants, setMaxNumberOfApplicants ] = useState(null);\n    const [ popoverOpen, setPopoverOpen ] = useState(false);\n    const [ tokensRequiredToApply, setTokensRequiredToApply ] = useState(null);\n    const [ disclosureVisibility, setDisclosureVisibility ] = useState(null);\n    const [ typeOfHack, setTypeOfHack ] = useState(null);\n    const [ rules, setRules ] = useState(\"\");\n    const [ outOfScope, setOutOfScope ] = useState(\"\");\n    const [ progress, setProgress ] = useState(0);\n    const [ selectionRange, setSelectionRange ] = useState(new Date());\n    const [ count, setCount ] = useState(0);\n    const [ availiableHackerDates, handleHackerDates ] = useState([{\n        startDate: new Date(),\n        endDate: new Date(),\n        key: 'selection'\n    }]);\n    const [ listingVisibility, setListingVisibility ] = useState(null);\n\n    useEffect(() => {\n        const { assetArray, typeOfHack, testingDatesHackers, rulesOfEngagement, publicCompanyName, outOfScopeVulnerabilities, listingDescription, requiredRankToApply, experienceAndCost, desiredSkills, maxNumberOfApplicants, disclosureVisibility, tokensRequiredToApply, listingVisibility, estimatedCompletionDate } = props.previousData;\n\n        // update state according to redux memory...\n\n        setAssetArray(typeof assetArray !== \"undefined\" && assetArray.length > 0 ? assetArray : []);\n        setTypeOfHack(typeof typeOfHack !== \"undefined\" ? typeOfHack : null);\n        setRules(typeof rulesOfEngagement !== \"undefined\" ? rulesOfEngagement : \"\");\n        setData(typeof publicCompanyName !== \"undefined\" ? prevState => {\n            return {\n                ...prevState,\n                publicCompanyName\n            }\n        } : {});\n        setOutOfScope(typeof outOfScopeVulnerabilities !== \"undefined\" ? outOfScopeVulnerabilities : \"\");\n        setContent(typeof listingDescription !== \"undefined\" ? listingDescription : \"\");\n        setMaxNumberOfApplicants(typeof maxNumberOfApplicants !== \"undefined\" ? maxNumberOfApplicants : null);\n        setRequiredRankToApply(typeof requiredRankToApply !== \"undefined\" ? requiredRankToApply : null);\n        setExperienceAndCost(typeof experienceAndCost !== \"undefined\" ? experienceAndCost : null);\n        setDesiredSkills(typeof desiredSkills !== \"undefined\" ? desiredSkills : []);\n        setDisclosureVisibility(typeof disclosureVisibility !== \"undefined\" ? disclosureVisibility : null);\n        setTokensRequiredToApply(typeof tokensRequiredToApply !== \"undefined\" ? tokensRequiredToApply : null);\n        setListingVisibility(typeof listingVisibility !== \"undefined\" ? listingVisibility : null);\n\n        props.saveListingData({\n            ...props.previousData,\n            testingDatesHackers: []\n        })\n    }, [])\n\n    const onChangeDescription = (value) => {\n\n        setContent(value);\n\n        props.saveListingData({\n            ...props.previousData,\n            listingDescription: value\n        })\n    }\n    const handleChangeInput = (e) => {\n        const { name, value } = e.target;\n\n        setData(prevState => {\n            return {\n                ...prevState,\n                [name]: value\n            }\n        })\n\n        props.saveListingData({\n            ...props.previousData,\n            [name]: value\n        })\n    }\n    const handleAssetAddition = (e) => {\n        e.preventDefault();\n        // assetName\n\n        setAssetArray(prevState => {\n            props.saveListingData({\n                ...props.previousData,\n                assetArray: [...prevState, {\n                    id: uuid(),\n                    name: data.assetName\n                }]\n            })\n            return [...prevState, {\n                id: uuid(),\n                name: data.assetName\n            }]\n        });\n        setData(prevState => {\n            return {\n                ...prevState,\n                assetName: \"\"\n            }\n        })\n    }\n    const changeBountyPrices = (e, rewardLevel, asset) => {\n        const { value } = e.target;\n\n        setAssetArray(prevState => {\n            props.saveListingData({\n                ...props.previousData,\n                assetArray: prevState.map((item, i) => {\n                    if (item.id === asset.id) {\n                        return {\n                            ...item,\n                            [rewardLevel]: Number(value)\n                        }\n                    } else {\n                        return item;\n                    }\n                })\n            })\n            return prevState.map((item, i) => {\n                if (item.id === asset.id) {\n                    return {\n                        ...item,\n                        [rewardLevel]: Number(value)\n                    }\n                } else {\n                    return item;\n                }\n            });\n        });\n    }\n    const renderBusinessLocationPortion = () => {\n        if (_.has(props.previousData, \"typeOfHack\") && typeOfHack !== null && typeOfHack.value === \"physical-hack\") {\n            return (\n                <Fragment>\n                    <h6 className=\"mb-0\">Location - Physical Hacking (Only Provided To <strong>SELECTED/HIRED</strong> Applicants)</h6>\n                    <Form className=\"theme-form\">\n                        <Row>\n                            <Col sm=\"12\" lg=\"12\" md=\"12\" xl=\"12\">\n                                <FormGroup>\n                                    <Label htmlFor=\"exampleFormControlInput1\">Enter your company business address (the address that your hackers will be testing at):<span className=\"font-danger\">*</span></Label>\n                                    <LocationSearchInput props={props} />\n                                </FormGroup>\n                            </Col>\n                        </Row>\n                    </Form>\n                </Fragment>\n            );\n        }\n    }\n    const renderPhysicalHackingDates = () => {\n        if (_.has(props.previousData, \"typeOfHack\") && typeOfHack !== null && typeOfHack.value === \"physical-hack\") {\n            return (\n                <Fragment>\n                    <Label htmlFor=\"exampleFormControlInput1\">Dates Availiable To Hackers To Test Physical Assets:<span className=\"font-danger\">*</span></Label>\n                    <p>These are the days that will be available to the <strong>hired/selected</strong> hacker canidates to choose from when deciding which days they will attempt to infiltrate your company. This is only relevant for <strong style={{ color: \"blue\" }}>PHYSICAL</strong> hacking requirements.</p>\n                    <p style={{ paddingBottom: \"20px\" }}></p>\n                    <DateRangePicker\n                        minDate={new Date()}\n                        showSelectionPreview={true}\n                        moveRangeOnFirstSelection={true}\n                        ranges={availiableHackerDates}\n                        onChange={handleDatesSelectable}\n                    />\n                </Fragment>\n            );\n        }\n    }\n    const handleDeadlineSelect = (date) => {\n\n        if (new Date(date) > new Date()) {\n            setSelectionRange(date);\n\n            props.saveListingData({\n                ...props.previousData,\n                estimatedCompletionDate: date\n            });\n        } else {\n            NotificationManager.warning(`You must select a date that is current or beyond today's current date.`, \"Pick a valid date!\", 3500);\n        }\n    }\n    console.log(\"availiableHackerDates\", availiableHackerDates);\n    const handleDatesSelectable = (ranges) => {\n        console.log(\"ranges\", ranges.selection);\n\n        if (new Date(ranges.selection.startDate) > new Date()) {\n            if (count === 0) {\n                handleHackerDates(prevState => {\n\n                    console.log(\"ran.\", prevState);\n        \n                    props.saveListingData({\n                        ...props.previousData,\n                        testingDatesHackers: [ranges.selection]\n                    });\n                    return [ranges.selection];\n                });\n                setCount(count + 1);\n            } else {\n                handleHackerDates(prevState => {\n\n                    console.log(\"ran.\", prevState);\n        \n                    props.saveListingData({\n                        ...props.previousData,\n                        testingDatesHackers: [...prevState, ranges.selection]\n                    });\n                    return [...prevState, ranges.selection];\n                });\n                setCount(count + 1);\n            }\n        } else {\n            NotificationManager.warning(`You must select a date that is current or beyond today's current date.`, \"Pick a valid date!\", 3500);\n        };\n    }\n    const getUploadParams = ({ meta }) => { \n        return { \n            url: 'https://httpbin.org/post' \n        } \n    };\n\n    const handleChangeStatus = ({ meta, file }, status) => { \n        console.log(status, meta, file);\n\n        if (status === \"done\") {\n            const data = new FormData();\n    \n            data.append(\"file\", file);\n            data.append(\"meta\", meta);\n\n            const config = {\n                onUploadProgress: function(progressEvent) {\n                    let percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n\n                    console.log(\"percentCompleted\", percentCompleted);\n\n                    setProgress(percentCompleted);\n                },\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                }\n            };\n\n            axios.post(`${process.env.REACT_APP_BASE_URL}/upload/file/upon/selection/employer/listing`, data, config).then((res) => {\n                if (res.data.message === \"Successfully uploaded content!\") {\n                    console.log(res.data);\n\n                    const { file, generatedID } = res.data;\n\n                    if (typeof props.previousData.uploadedFiles !== \"undefined\" && props.previousData.uploadedFiles.length > 0) {\n                        props.saveListingData({\n                            ...props.previousData,\n                            uploadedFiles: [...props.previousData.uploadedFiles, {\n                                ...file,\n                                onlineID: generatedID\n                            }]\n                        });\n                    } else {\n                        props.saveListingData({\n                            ...props.previousData,\n                            uploadedFiles: [{\n                                ...file,\n                                onlineID: generatedID\n                            }]\n                        });\n                    }\n\n                    NotificationManager.success(`We've successfully uploaded your file! Please proceed filling out your information or add more files.`, 'Successfully uploaded file!', 4500);\n                } else {\n                    console.log(\"err\", res.data);\n                }\n            }).catch((err) => {\n                console.log(err);\n            })\n        }\n    };\n    const handleListingSubmission = (e) => {\n\n        e.preventDefault();\n\n        const { assetArray, typeOfHack, testingDatesHackers, rulesOfEngagement, publicCompanyName, outOfScopeVulnerabilities, listingDescription, hashtags, businessAddress, requiredRankToApply, experienceAndCost, desiredSkills, maxNumberOfApplicants, disclosureVisibility, tokensRequiredToApply, listingVisibility, estimatedCompletionDate } = props.previousData;\n\n        if (typeof typeOfHack !== \"undefined\") {\n            if (typeOfHack.value === \"physical-hack\") {\n                if (Object.keys(props.previousData).length >= 17) {\n                    for (const key in props.previousData) {\n                        const el = props.previousData[key];\n\n                        console.log(\"physical - \", key, el);\n            \n                        switch (key) {\n                            case \"\":\n                                \n                                break;\n                        \n                            default:\n                                break;\n                        }\n                    }\n                } else {\n                    NotificationManager.error(\"You MUST complete every required field before proceeding to the next page!\", \"Complete all fields!\", 4500);\n                }\n            } else {\n                if (Object.keys(props.previousData).length >= 15) {\n                    for (const key in props.previousData) {\n                        const el = props.previousData[key];\n\n                        console.log(\"digital - \", key, el);\n            \n                        switch (key) {\n                            case \"\":\n                                \n                                break;\n                        \n                            default:\n                                break;\n                        }\n                    }\n                } else {\n                    NotificationManager.error(\"You MUST complete every required field before proceeding to the next page!\", \"Complete all fields!\", 4500);\n                }\n            }\n        } else {\n            NotificationManager.error(\"You must choose a hack type - physical OR digital but you must choose.\", \"Choose Hack Type!\", 4500);\n        }\n\n        // if ((typeof assetArray !== \"undefined\" && assetArray.length > 0) && (typeOfHack !== null) && (typeof rulesOfEngagement !== \"undefined\" && rulesOfEngagement.length > 0) && (typeof publicCompanyName !== \"undefined\" && publicCompanyName.length > 0) && (typeof outOfScopeVulnerabilities !== \"undefined\" && outOfScopeVulnerabilities.length > 0) && (typeof listingDescription !== \"undefined\" && listingDescription.length > 0) && (typeof hashtags !== \"undefined\" && hashtags.length > 0) && (typeof requiredRankToApply !== \"undefined\" && _.has(props.previousData, \"requiredRankToApply\") && Object.keys(requiredRankToApply).length > 0) && (typeof experienceAndCost !== \"undefined\" && _.has(props.previousData, \"experienceAndCost\") && Object.keys(experienceAndCost).length > 0) && (typeof desiredSkills !== \"undefined\" && desiredSkills.length > 0) && (typeof maxNumberOfApplicants !== \"undefined\" && _.has(props.previousData, \"maxNumberOfApplicants\") && Object.keys(maxNumberOfApplicants).length > 0) && (typeof disclosureVisibility !== \"undefined\" && _.has(props.previousData, \"disclosureVisibility\") && Object.keys(disclosureVisibility).length > 0) && (typeof tokensRequiredToApply !== \"undefined\" && _.has(props.previousData, \"tokensRequiredToApply\") && Object.keys(tokensRequiredToApply).length > 0) && (typeof listingVisibility !== \"undefined\" && _.has(props.previousData, \"listingVisibility\") && Object.keys(listingVisibility).length > 0) && (typeof estimatedCompletionDate !== \"undefined\" && _.has(props.previousData, \"estimatedCompletionDate\") && Object.keys(estimatedCompletionDate).length > 0)) {\n            \n        // } else if () {\n\n        // }\n\n        // if ((typeof assetArray !== \"undefined\" && assetArray.length > 0) && (typeOfHack !== null) && (typeof rulesOfEngagement !== \"undefined\" && rulesOfEngagement.length > 0) && (typeof publicCompanyName !== \"undefined\" && publicCompanyName.length > 0) && (typeof outOfScopeVulnerabilities !== \"undefined\" && outOfScopeVulnerabilities.length > 0) && (typeof listingDescription !== \"undefined\" && listingDescription.length > 0) && (typeof hashtags !== \"undefined\" && hashtags.length > 0) && (typeof requiredRankToApply !== \"undefined\" && _.has(props.previousData, \"requiredRankToApply\") && Object.keys(requiredRankToApply).length > 0) && (typeof experienceAndCost !== \"undefined\" && _.has(props.previousData, \"experienceAndCost\") && Object.keys(experienceAndCost).length > 0) && (typeof desiredSkills !== \"undefined\" && desiredSkills.length > 0) && (typeof maxNumberOfApplicants !== \"undefined\" && _.has(props.previousData, \"maxNumberOfApplicants\") && Object.keys(maxNumberOfApplicants).length > 0) && (typeof disclosureVisibility !== \"undefined\" && _.has(props.previousData, \"disclosureVisibility\") && Object.keys(disclosureVisibility).length > 0) && (typeof tokensRequiredToApply !== \"undefined\" && _.has(props.previousData, \"tokensRequiredToApply\") && Object.keys(tokensRequiredToApply).length > 0) && (typeof listingVisibility !== \"undefined\" && _.has(props.previousData, \"listingVisibility\") && Object.keys(listingVisibility).length > 0) && (typeof estimatedCompletionDate !== \"undefined\" && _.has(props.previousData, \"estimatedCompletionDate\") && Object.keys(estimatedCompletionDate).length > 0)) {\n        //     // check if physical location\n        //     if ((typeof typeOfHack !== \"undefined\" && _.has(props.previousData, \"typeOfHack\") && typeOfHack.value === \"physical-hack\")) {\n        //         if ((typeof testingDatesHackers !== \"undefined\" && testingDatesHackers.length > 0) && (typeof businessAddress !== \"undefined\" && _.has(props.previousData, \"businessAddress\") && Object.keys(businessAddress).length > 0)) {\n        //             // location data is properly filled out.\n        //             const jobData = {\n        //                 assetArray, \n        //                 typeOfHack, \n        //                 testingDatesHackers, \n        //                 rulesOfEngagement, \n        //                 publicCompanyName, \n        //                 outOfScopeVulnerabilities, \n        //                 listingDescription, \n        //                 hashtags, \n        //                 businessAddress, \n        //                 requiredRankToApply, \n        //                 experienceAndCost, \n        //                 desiredSkills, \n        //                 maxNumberOfApplicants, \n        //                 disclosureVisibility, \n        //                 tokensRequiredToApply, \n        //                 listingVisibility, \n        //                 estimatedCompletionDate,\n        //                 physicalLocation: true \n        //             };\n        //             history.push(\"/review/employer/listing/data/payment\", { jobData });\n        //         } else {\n        //             NotificationManager.warning(`You have selected a 'physical' hack requiring approved hackers to know your address yet both 'testing dates' and 'business address' fields are incomplete.`, \"Testing dates & address are INCOMPLETE!\", 4500);\n        //         }\n        //     } else {\n        //         const jobData = {\n        //             assetArray, \n        //             typeOfHack, \n        //             testingDatesHackers: null, \n        //             rulesOfEngagement, \n        //             publicCompanyName, \n        //             outOfScopeVulnerabilities, \n        //             listingDescription, \n        //             hashtags, \n        //             businessAddress: null, \n        //             requiredRankToApply, \n        //             experienceAndCost, \n        //             desiredSkills, \n        //             maxNumberOfApplicants, \n        //             disclosureVisibility, \n        //             tokensRequiredToApply, \n        //             listingVisibility, \n        //             estimatedCompletionDate,\n        //             physicalLocation: false\n        //         };\n        //         history.push(\"/review/employer/listing/data/payment\", { jobData });\n        //     }\n        // } else {\n        //     // need to complete more fields!\n            // NotificationManager.error(`You MUST complete ALL of the required fields (marked with red asterisk) - review your edits and make sure everything is filled out.`, \"INCOMPLETE FORM/INPUTS!\", 4500);\n        // }\n    }\n    return (\n        <Fragment>\n            <Breadcrumb parent=\"Create Listing\" title=\"Create a public employer listing\"/>\n            <LoadingBar\n                color='#f11946'\n                progress={progress}\n                onLoaderFinished={() => setProgress(0)}\n                className=\"loadingBarRaise\"\n                containerClassName=\"loadingBarRaise\"\n                height={5}\n            />\n            <Container fluid={true}>\n                <Row>\n                    {/* <JobFilter /> */}\n                    <Col xl=\"12 xl-100\">\n                        <Card>\n                            <div className=\"job-search\">\n                                <CardBody className=\"pb-0\">\n                                    <Media>\n                                        <img className=\"img-40 img-fluid m-r-20\" src={one} alt=\"\" />\n                                        <Media body>\n                                            <h6 className=\"f-w-600\">\n                                                <a href=\"#\">Create an employer listing</a>\n                                                <span className=\"pull-right\">\n                                                {/* <Button color=\"primary\">\n                                                    <span>\n                                                        <i className=\"fa fa-check text-white\">\n                                                        </i>\n                                                    </span>{\"Save this job\"}\n                                                </Button> */}\n                                                </span>\n                                            </h6>\n                                            <p>Create a listing requesting for your company to be hacked (this will be public visible information to our database of hackers)</p>\n                                        </Media>\n                                    </Media>\n                                    <div className=\"job-description\">\n                                        <h6 className=\"mb-0\">General Details</h6>\n                                        <Form className=\"theme-form\">\n                                            <Row>\n                                                <Col md=\"6\" lg=\"6\" sm=\"12\">\n                                                    <FormGroup>\n                                                        <Label htmlFor=\"exampleFormControlInput1\">Public Company Name:<span className=\"font-danger\">*</span></Label>\n                                                        <Input value={data.publicCompanyName} onChange={handleChangeInput} className=\"form-control\" id=\"exampleFormControlInput1\" name=\"publicCompanyName\" type=\"text\" placeholder=\"Enter your company's publically known name\" />\n                                                    </FormGroup>\n                                                </Col>\n                                                <Col md=\"6\" lg=\"6\" sm=\"12\">\n                                                    <FormGroup>\n                                                        <Label htmlFor=\"exampleFormControlInput1\">Preferred Rank/Level Required To Apply:<span className=\"font-danger\">*</span></Label>\n                                                        <Select\n                                                            value={requiredRankToApply}\n                                                            onChange={(value) => {\n                                                                setRequiredRankToApply(value);\n\n                                                                props.saveListingData({\n                                                                    ...props.previousData,\n                                                                    requiredRankToApply: value\n                                                                })\n                                                            }}\n                                                            options={rankOptions}\n                                                        />\n                                                    </FormGroup>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col>\n                                                    <FormGroup>\n                                                        <Label htmlFor=\"exampleFormControlInput3\">Experience Rewarded To Winner + Cost To Post:<span className=\"font-danger\">*</span></Label>\n                                                        <p style={{ paddingTop: \"7px\", paddingBottom: \"7px\" }} className=\"text-left\">Experience is rewarded to the hacker winner. Hackers level up their accounts with XP points and can redeem the XP for cash ($-USD) after reaching certain ranks/levels. Having a <strong>higher</strong> XP reward will incentivize hackers to pick your company over others - however it <strong>costs more</strong>.</p>\n                                                        <Select\n                                                            value={experienceAndCost}\n                                                            onChange={(value) => {\n                                                                setExperienceAndCost(value);\n\n                                                                props.saveListingData({\n                                                                    ...props.previousData,\n                                                                    experienceAndCost: value\n                                                                })\n                                                            }}\n                                                            options={experienceOptions}\n                                                        />\n                                                    </FormGroup>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col>\n                                                    <FormGroup>\n                                                        <Label htmlFor=\"exampleFormControlpassword\">Required/Desired Skills From Hackers:<span className=\"font-danger\">*</span></Label>\n                                                        <MultiSelect\n                                                            options={desiredSkillsOptions}\n                                                            value={desiredSkills}\n                                                            onChange={(value) => {\n                                                                setDesiredSkills(value);\n\n                                                                props.saveListingData({\n                                                                    ...props.previousData,\n                                                                    desiredSkills: value\n                                                                })\n                                                            }}\n                                                            labelledBy=\"Select\"\n                                                        />\n                                                    </FormGroup>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col>\n                                                    <FormGroup>\n                                                        <Label htmlFor=\"exampleFormControlpassword1\">HashTags/Tags (Hackers will use these to find your listing):<span className=\"font-danger\">*</span></Label>\n                                                        <CreateHashtagsListingComponent />\n                                                    </FormGroup>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col sm=\"6\">\n                                                    <div className=\"col-form-label pt-0\"><strong>MAX</strong> Number Of Required Hackers:</div>\n                                                    <FormGroup>\n                                                        <Select\n                                                            value={maxNumberOfApplicants}\n                                                            onChange={(value) => {\n                                                                setMaxNumberOfApplicants(value);\n\n                                                                props.saveListingData({\n                                                                    ...props.previousData,\n                                                                    maxNumberOfApplicants: value\n                                                                })\n                                                            }}\n                                                            options={maxNumberOfHackersOptions}\n                                                        />\n                                                    </FormGroup>\n                                                </Col>\n                                                <Col sm=\"6\">\n                                                    <div onMouseEnter={() => {\n                                                        setPopoverOpen(true);\n                                                    }} id=\"PopoverID\" className=\"col-form-label pt-0\">Amount Of Tokens Required To Apply (hover for info):</div>\n                                                    <Popover\n                                                        placement={\"top\"}\n                                                        isOpen={popoverOpen}\n                                                        target={\"PopoverID\"}\n                                                        toggle={() => {\n                                                            setPopoverOpen(!popoverOpen);\n                                                        }}\n                                                    >\n                                                        <PopoverHeader>Tokens are required from hackers to apply to this job</PopoverHeader>\n                                                        <PopoverBody onMouseLeave={() => {\n                                                            setPopoverOpen(false);\n                                                        }}>\n                                                            Hackers purchase tokens in which they then use to apply to your listing(s). These are <strong>REQUIRED</strong> to apply to listings so please choose the amount you charge proportionally to the work required from your company and the reward given to successful hackers.\n                                                        </PopoverBody>\n                                                    </Popover>\n                                                    <FormGroup>\n                                                        <Select\n                                                            value={tokensRequiredToApply}\n                                                            onChange={(value) => {\n                                                                setTokensRequiredToApply(value);\n\n                                                                props.saveListingData({\n                                                                    ...props.previousData,\n                                                                    tokensRequiredToApply: value\n                                                                })\n                                                            }}\n                                                            options={tokensApplyOptions}\n                                                        />\n                                                    </FormGroup>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col sm=\"12\" md=\"6\" lg=\"6\">\n                                                    <FormGroup>\n                                                        <Label htmlFor=\"exampleFormControlInput4\">Public Or Private Vulnerability Disclosures (Upon Successful Hack):</Label>\n                                                        <Select\n                                                            value={disclosureVisibility}\n                                                            onChange={(value) => {\n                                                                setDisclosureVisibility(value);\n\n                                                                props.saveListingData({\n                                                                    ...props.previousData,\n                                                                    disclosureVisibility: value\n                                                                })\n                                                            }}\n                                                            options={disclosureOptions}\n                                                        />\n                                                    </FormGroup>\n                                                </Col>\n                                                <Col sm=\"12\" md=\"6\" lg=\"6\">\n                                                    <FormGroup>\n                                                        <Label htmlFor=\"exampleFormControlInput4\">Type Of Hack Required (Physical/in-person <strong>OR</strong> digital/online assets):</Label>\n                                                        <Select\n                                                            value={typeOfHack}\n                                                            onChange={(value) => {\n                                                                setTypeOfHack(value);\n\n                                                                props.saveListingData({\n                                                                    ...props.previousData,\n                                                                    typeOfHack: value\n                                                                })\n                                                            }}\n                                                            options={physicalOptions}\n                                                        />\n                                                    </FormGroup>\n                                                </Col>\n                                            </Row>\n                                        </Form>\n                                        <h6 className=\"mb-0\">Timespan & Timeline Information + Visibility Type</h6>\n                                        <Form className=\"theme-form\">\n                                            <Row>\n                                                <Col md=\"6\" lg=\"6\" xl=\"6\">\n                                                    <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12 xl-100\">\n                                                        <FormGroup>\n                                                            <Label htmlFor=\"exampleFormControlInput1\">Visibility Type (Who Can See Your Listing Or Apply Once Live):<span className=\"font-danger\">*</span></Label>\n                                                            <Select\n                                                                value={listingVisibility}\n                                                                onChange={(value) => {\n                                                                    setListingVisibility(value);\n\n                                                                    props.saveListingData({\n                                                                        ...props.previousData,\n                                                                        listingVisibility: value\n                                                                    })\n                                                                }}\n                                                                options={visibilityOptions}\n                                                            />\n                                                        </FormGroup>\n                                                        {renderPhysicalHackingDates()}\n                                                    </Col>\n                                                </Col>\n                                                <Col md=\"12\" lg=\"12\" xl=\"6 xl-100\">\n                                                    <FormGroup>\n                                                        <Label htmlFor=\"exampleFormControlInput1\">Estimated/Expected Day Of Completion (Must Be Successfully Hacked By This Day For Full Payment):<span className=\"font-danger\">*</span></Label>\n                                                        <p style={{ paddingBottom: \"20px\" }}>These are the days in which you expect the hired hackers/contractors to have <strong>successfully</strong> completed any hacks or attacks (digital or physical) against your company. Disclosures will occurr shortly after whichever days are selected and any further testing or reporting shall proceed at that point.</p>\n                                                        <Calendar \n                                                            minDate={new Date()}\n                                                            date={_.has(props.previousData, \"estimatedCompletionDate\") ? new Date(props.previousData.estimatedCompletionDate) : new Date()}\n                                                            onChange={handleDeadlineSelect}\n                                                        />\n                                                    </FormGroup>\n                                                </Col>\n                                            </Row>\n                                        </Form>\n                                        {renderBusinessLocationPortion()}\n                                        <h6 className=\"mb-0\"><strong>DIGITAL</strong> Assets & Payment/Reward Information - Digital Scope</h6>\n                                        <Form className=\"theme-form\">\n                                            <Row>\n                                                <Col xl=\"12 xl-100\">\n                                                    <FormGroup>\n                                                        <Label htmlFor=\"exampleFormControlInput7\">Asset Endpoint Or URL:<span className=\"font-danger\">*</span></Label>\n                                                        <InputGroup>\n                                                            <Input onChange={handleChangeInput} value={data.assetName} className=\"form-control\" id=\"exampleFormControlInput7\" name=\"assetName\" type=\"text\" placeholder=\"Eg.'s - api.yourcompany.com OR https://www.yourcompanywebsite.com\" />\n                                                            <InputGroupAddon addonType=\"append\"><Button onClick={handleAssetAddition} color=\"secondary\">Add Asset</Button></InputGroupAddon>\n                                                        </InputGroup>\n                                                    </FormGroup>\n                                                </Col>\n                                                <ListGroup>\n                                                {typeof assetArray !== \"undefined\" && assetArray.length > 0 ? assetArray.map((asset, index) => {\n                                                    return (\n                                                        <ListGroupItem key={index} className=\"list-group-item flex-column align-items-start\">\n                                                            <Row style={{ paddingBottom: \"12px\" }}>\n                                                                <ListGroupItem active>{asset.name}<div onClick={() => {\n                                                                    setAssetArray(prevState => {\n                                                                        props.saveListingData({\n                                                                            ...props.previousData,\n                                                                            assetArray: prevState.filter((item, index) => {\n                                                                                if (item.id !== asset.id) {\n                                                                                    return item;\n                                                                                }\n                                                                            })\n                                                                        }) \n                                                                        return prevState.filter((item, index) => {\n                                                                            if (item.id !== asset.id) {\n                                                                                return item;\n                                                                            }\n                                                                        });\n                                                                    });  \n                                                                }} id=\"float-right-icon\"><XCircle /></div></ListGroupItem>\n                                                            </Row>\n                                                            <Row>\n                                                                <Col md=\"3\" lg=\"3\" sm=\"6\">\n                                                                    <FormGroup>\n                                                                        <Label><span style={{ color: \"#ffc800\" }}>Low</span> Severity Bounty Reward</Label>\n                                                                        <InputGroup>\n                                                                        <Input onChange={(e) => {\n                                                                            changeBountyPrices(e, \"lowSeverity\", asset);\n                                                                        }} value={asset.lowSeverity} className=\"form-control\" type=\"text\" placeholder=\"Average Cash($) Reward Price\" aria-label=\"Average Cash($) Reward Price\"/>\n                                                                        </InputGroup>\n                                                                    </FormGroup>\n                                                                </Col>\n                                                                <Col md=\"3\" lg=\"3\" sm=\"6\">\n                                                                    <FormGroup>\n                                                                        <Label><span style={{ color: \"#ed3824\" }}>Medium</span> Severity Bounty Reward</Label>\n                                                                        <InputGroup>\n                                                                        <Input onChange={(e) => {\n                                                                            changeBountyPrices(e, \"mediumSeverity\", asset);\n                                                                        }} value={asset.mediumSeverity} className=\"form-control\" type=\"text\" placeholder=\"Average Cash($) Reward Price\" aria-label=\"Average Cash($) Reward Price\"/>\n                                                                        </InputGroup>\n                                                                    </FormGroup>\n                                                                </Col>\n                                                                <Col md=\"3\" lg=\"3\" sm=\"6\">\n                                                                    <FormGroup>\n                                                                        <Label><span style={{ color: \"#8f0091\" }}>High</span> Severity Bounty Reward</Label>\n                                                                        <InputGroup>\n                                                                        <Input onChange={(e) => {\n                                                                            changeBountyPrices(e, \"highSeverity\", asset);\n                                                                        }} value={asset.highSeverity} className=\"form-control\" type=\"text\" placeholder=\"Average Cash($) Reward Price\" aria-label=\"Average Cash($) Reward Price\"/>\n                                                                        </InputGroup>\n                                                                    </FormGroup>\n                                                                </Col>\n                                                                <Col md=\"3\" lg=\"3\" sm=\"6\">\n                                                                    <FormGroup>\n                                                                        <Label><span style={{ color: \"#b30211\" }}>Critical</span> Severity Bounty Reward</Label>\n                                                                        <InputGroup>\n                                                                        <Input onChange={(e) => {\n                                                                            changeBountyPrices(e, \"criticalSeverity\", asset);\n                                                                        }} value={asset.criticalSeverity} className=\"form-control\" type=\"text\" placeholder=\"Average Cash($) Reward Price\" aria-label=\"Average Cash($) Reward Price\"/>\n                                                                        </InputGroup>\n                                                                    </FormGroup>\n                                                                </Col>\n                                                            </Row>\n                                                        </ListGroupItem>\n                                                    );\n                                                }) : null}\n                                                </ListGroup>\n                                            </Row>\n                                        </Form>\n                                        <h6 className=\"mb-0\">Upload Any Supporting Documents/Files</h6>\n                                        <Form className=\"theme-form\">\n                                            <Row>\n                                                <Col>\n                                                    <FormGroup>\n                                                        <Label className=\"col-form-label pt-0\">Upload File(s):<span className=\"font-danger\">*</span></Label>\n                                                        <div className=\"dz-message needsclick\">\n                                                            <Dropzone\n                                                                getUploadParams={getUploadParams}\n                                                                onChangeStatus={handleChangeStatus}\n                                                                maxFiles={5}\n                                                                multiple={false}\n                                                                canCancel={false}\n                                                                inputContent=\"Drop A File(s)\"\n                                                                styles={{\n                                                                    dropzone: { height: 225 },\n                                                                    dropzoneActive: { borderColor: 'green' },\n                                                                }}\n                                                            />\n                                                        </div>\n                                                    </FormGroup>\n                                                </Col>\n                                            </Row>\n                                        </Form>\n                                        <ListGroup style={{ paddingBottom: \"25px\" }}>\n                                            {typeof props.previousData.uploadedFiles !== \"undefined\" && props.previousData.uploadedFiles.length > 0 ? props.previousData.uploadedFiles.map((file, index) => {\n                                                return (\n                                                    <ListGroupItem className=\"d-flex justify-content-between align-items-center\">{file.name}<span onClick={() => {\n                                                        props.saveListingData({\n                                                            ...props.previousData,\n                                                            uploadedFiles: props.previousData.uploadedFiles.filter((item, indxxx) => {\n                                                                if (item.id !== file.id) {\n                                                                    return item;\n                                                                }\n                                                            })\n                                                        });\n                                                    }} className=\"badge badge-primary counter digits hover-text\">Remove file from uploads</span></ListGroupItem>\n                                                );\n                                            }) : null}\n                                        </ListGroup>\n                                        <h6 className=\"mb-0\" style={{ paddingBottom: \"15px\" }}>Listing Description/Information</h6>\n                                        <p style={{ paddingBottom: \"25px\" }}>Include as detailed of a description as you possibly can so our hackers will know what they're being asked to attempt/hack. This can be <strong>general</strong> information as well as any other information that you'd like to include. Strong/detailed listing descriptions generally always have higher response/application rates compared to minimal detail listings.</p>\n                                        <SimpleMDE\n                                            id=\"editor_container\"\n                                            onChange={onChangeDescription}\n                                            value={content}\n                                        />\n                                        <h6 className=\"mb-0\" style={{ paddingBottom: \"15px\", paddingTop: \"25px\" }}>Program/Listing Rules & Conditions Of Engagement</h6>\n                                        <p style={{ paddingBottom: \"25px\" }}>Please include an <strong>exhaustive list</strong> of specific <strong>RULES</strong> our hackers should follow and abide by while applying allowed hacks to avoid <strong>termination or suspension</strong> from our platform for misuse (referring to our hackers). We stand by our rules and proceedures so please be as detailed and clear as possible while outlines what you expect from potential hacker candiates and the conditions in place once hired.</p>\n                                        <SimpleMDE\n                                            id=\"editor_container\"\n                                            onChange={(value) => {\n                                                setRules(value);\n\n                                                props.saveListingData({\n                                                    ...props.previousData,\n                                                    rulesOfEngagement: value\n                                                })\n                                            }}\n                                            value={rules}\n                                        />\n                                        <h6 className=\"mb-0\" style={{ paddingBottom: \"15px\", paddingTop: \"25px\" }}><strong>OUT OF SCOPE</strong> Vulnerabilities & Boundaries</h6>\n                                        <p style={{ paddingBottom: \"25px\" }}>Please include an exhaustive list of which vulnerabilities are <strong>NOT</strong> included as acceptable reports as well as anything you would like our hackers to <strong>abstain</strong> from testing or tampering with such as texting accounts, unauthenticated tests, etc... <em>BE AS SPECIFIC AS POSSIBLE.</em></p>\n                                        <SimpleMDE\n                                            id=\"editor_container_two\"\n                                            onChange={(value) => {\n                                                setOutOfScope(value);\n\n                                                props.saveListingData({\n                                                    ...props.previousData,\n                                                    outOfScopeVulnerabilities: value\n                                                })\n                                            }}\n                                            value={outOfScope}\n                                        />\n                                    </div>\n                                </CardBody>\n                                <div className=\"card-footer\">\n                                    <Button style={{ width: \"100%\" }} onClick={handleListingSubmission} color=\"primary mr-1\">Submit & Continue To Payment/Confirmation Page</Button>\n                                </div>\n                            </div>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n        </Fragment>\n    );\n};\nconst mapStateToProps = (state) => {\n    return {\n        previousData: _.has(state.listingData, \"listingData\") ? state.listingData.listingData : {}\n    }\n}\nexport default connect(mapStateToProps, { saveListingData })(CreateJobListingMainHelper);"]},"metadata":{},"sourceType":"module"}