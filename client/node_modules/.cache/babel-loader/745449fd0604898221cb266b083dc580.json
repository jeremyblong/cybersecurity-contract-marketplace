{"ast":null,"code":"// helpers logic related to mainly to redux-hook-form\nconst HookCourseCreationHelpers = () => {\n  const subtitleChecks = {\n    check: (setError, register) => {\n      return { ...register(\"subtitle\", {\n          required: {\n            value: true,\n            message: \"You MUST enter AT least 25 characters to 160 characters\"\n          },\n          minLength: {\n            value: 25,\n            message: \"You must enter AT Least 25 characters\"\n          },\n          maxLength: {\n            value: 160,\n            message: \"You may ONLY enter 160 characters or less\"\n          }\n        })\n      };\n    },\n    onChange: (e, setValue) => {\n      const value = e.target.value;\n      setValue(\"subtitle\", value, {\n        shouldValidate: true\n      });\n    },\n    name: \"subtitle\",\n    placeholder: \"Enter a course 'Sub-Title' for your course...\",\n    type: \"text\",\n    label: \"Enter a course 'Sub-Title' for your course (this will be displayed right under your main description...)\"\n  };\n  const languageSpokenChecks = {\n    check: (setError, register, clearErrors) => {\n      return { ...register(\"languageSpoken\", {\n          required: {\n            value: true,\n            message: \"You MUST select a 'Language' option before proceeding forward\"\n          },\n          onBlur: e => {\n            // current value from this input\n            const value = e.target.value; // timeout to delay for state change(s)\n\n            setTimeout(() => {\n              // clear error after proper selection\n              if (typeof value !== \"undefined\" && Object.keys(value).length > 0) {\n                clearErrors(\"languageSpoken\");\n              } else {\n                // set error as nothing was selected (blank 'click-off' selection of selector)\n                setError(\"languageSpoken\", {\n                  type: \"manual\",\n                  message: \"You MUST select a 'Language' option before proceeding forward\"\n                });\n              }\n            }, 50);\n          }\n        })\n      };\n    },\n    onChange: (selectedOption, setValue, clearErrors) => {\n      setValue(\"languageSpoken\", selectedOption, {\n        shouldValidate: false\n      });\n      setTimeout(() => {\n        clearErrors(\"languageSpoken\");\n      }, 75);\n    },\n    name: \"languageSpoken\",\n    placeholder: \"Select a 'Language' type...\",\n    label: \"Select what language your course is spoken/taught with/in\"\n  };\n  const skillLevelChecks = {\n    check: (setError, register, clearErrors) => {\n      return { ...register(\"skillLevel\", {\n          required: {\n            value: true,\n            message: \"You MUST select a 'Skill-Level' option before proceeding forward\"\n          },\n          onBlur: e => {\n            // current value from this input\n            const value = e.target.value; // timeout to delay for state change(s)\n\n            setTimeout(() => {\n              // clear error after proper selection\n              if (typeof value !== \"undefined\" && Object.keys(value).length > 0) {\n                clearErrors(\"skillLevel\");\n              } else {\n                // set error as nothing was selected (blank 'click-off' selection of selector)\n                setError(\"skillLevel\", {\n                  type: \"manual\",\n                  message: \"You MUST select a 'Skill-Level' option before proceeding forward\"\n                });\n              }\n            }, 50);\n          }\n        })\n      };\n    },\n    onChange: (selectedOption, setValue, clearErrors) => {\n      setValue(\"skillLevel\", selectedOption, {\n        shouldValidate: false\n      });\n      setTimeout(() => {\n        clearErrors(\"skillLevel\");\n      }, 75);\n    },\n    name: \"skillLevel\",\n    placeholder: \"Select a 'Skill Level'...\",\n    label: \"Select what 'Skill Level' your course require's\"\n  };\n  return {\n    subtitleChecks,\n    languageSpokenChecks,\n    skillLevelChecks\n  };\n};\n\nexport default HookCourseCreationHelpers;","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/learning/educationalCoursesSeminars/createCourse/helpers/pages/pageThree/helpers/helperFunctions/hookFormHelpers.js"],"names":["HookCourseCreationHelpers","subtitleChecks","check","setError","register","required","value","message","minLength","maxLength","onChange","e","setValue","target","shouldValidate","name","placeholder","type","label","languageSpokenChecks","clearErrors","onBlur","setTimeout","Object","keys","length","selectedOption","skillLevelChecks"],"mappings":"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","sourcesContent":["// helpers logic related to mainly to redux-hook-form\nconst HookCourseCreationHelpers = () => {\n    \n    const subtitleChecks = {\n        check: (setError, register) => {\n            return (\n                {...register(\"subtitle\", { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 25 characters to 160 characters\"\n                }, minLength: {\n                    value: 25,\n                    message: \"You must enter AT Least 25 characters\"\n                }, maxLength: {\n                    value: 160,\n                    message: \"You may ONLY enter 160 characters or less\"\n                }})}\n            )\n        },\n        onChange: (e, setValue) => {\n            const value = e.target.value;\n\n            setValue(\"subtitle\", value, { shouldValidate: true });\n        },\n        name: \"subtitle\",\n        placeholder: \"Enter a course 'Sub-Title' for your course...\",\n        type: \"text\",\n        label: \"Enter a course 'Sub-Title' for your course (this will be displayed right under your main description...)\"\n    };\n    const languageSpokenChecks = {\n        check: (setError, register, clearErrors) => {\n            return (\n                {...register(\"languageSpoken\", { required: {\n                    value: true,\n                    message: \"You MUST select a 'Language' option before proceeding forward\"\n                }, onBlur: (e) => {\n                    // current value from this input\n                    const value = e.target.value;\n                    // timeout to delay for state change(s)\n                    setTimeout(() => {\n                        // clear error after proper selection\n                        if ((typeof value !== \"undefined\") && (Object.keys(value).length > 0)) {\n                            clearErrors(\"languageSpoken\");\n                        } else {\n                            // set error as nothing was selected (blank 'click-off' selection of selector)\n                            setError(\"languageSpoken\", {\n                                type: \"manual\",\n                                message: \"You MUST select a 'Language' option before proceeding forward\",\n                            });\n                        }\n                    }, 50);\n                }})}\n            )\n        },\n        onChange: (selectedOption, setValue, clearErrors) => {\n            setValue(\"languageSpoken\", selectedOption, { shouldValidate: false });\n\n            setTimeout(() => {\n                clearErrors(\"languageSpoken\");\n            }, 75)\n        },\n        name: \"languageSpoken\",\n        placeholder: \"Select a 'Language' type...\",\n        label: \"Select what language your course is spoken/taught with/in\"\n    };\n    const skillLevelChecks = {\n        check: (setError, register, clearErrors) => {\n            return (\n                {...register(\"skillLevel\", { required: {\n                    value: true,\n                    message: \"You MUST select a 'Skill-Level' option before proceeding forward\"\n                }, onBlur: (e) => {\n                    // current value from this input\n                    const value = e.target.value;\n                    // timeout to delay for state change(s)\n                    setTimeout(() => {\n                        // clear error after proper selection\n                        if ((typeof value !== \"undefined\") && (Object.keys(value).length > 0)) {\n                            clearErrors(\"skillLevel\");\n                        } else {\n                            // set error as nothing was selected (blank 'click-off' selection of selector)\n                            setError(\"skillLevel\", {\n                                type: \"manual\",\n                                message: \"You MUST select a 'Skill-Level' option before proceeding forward\",\n                            });\n                        }\n                    }, 50);\n                }})}\n            )\n        },\n        onChange: (selectedOption, setValue, clearErrors) => {\n            \n            setValue(\"skillLevel\", selectedOption, { shouldValidate: false });\n\n            setTimeout(() => {\n                clearErrors(\"skillLevel\");\n            }, 75)\n        },\n        name: \"skillLevel\",\n        placeholder: \"Select a 'Skill Level'...\",\n        label: \"Select what 'Skill Level' your course require's\"\n    };\n\n    return {\n        subtitleChecks,\n        languageSpokenChecks,\n        skillLevelChecks\n    }\n}\n\n\nexport default HookCourseCreationHelpers;"]},"metadata":{},"sourceType":"module"}