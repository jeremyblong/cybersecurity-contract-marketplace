{"ast":null,"code":"import React,{Fragment,useState,useEffect,useRef}from'react';import Breadcrumb from'../../../../../layout/breadcrumb';import{Container,Row,Col,Card,Button,Media,CardBody,Form,FormGroup,Input,InputGroup,InputGroupAddon,Nav,NavItem,NavLink,TabPane,TabContent}from'reactstrap';import BottomContainerHelper from'./helpers/bottomContainer/container.js';import{useHistory,withRouter}from'react-router-dom';import{connect}from\"react-redux\";import start_conversion from'../../../../../assets/images/start-conversion.jpg';import{Picker}from'emoji-mart';import{Send}from'../../../../../constant';import uuid from'react-uuid';import moment from'moment';import ReactHlsPlayer from'react-hls-player';import Skeleton,{SkeletonTheme}from'react-loading-skeleton';import{NotificationManager}from\"react-notifications\";import\"./styles.css\";import axios from\"axios\";import messagingHelpers from\"./helpers/displayMessages/displayMessages.js\";import _ from\"lodash\";import typingIndicator from\"../../../../../assets/gifs/typing-white.gif\";const{RenderMessagListStreaming}=messagingHelpers;const renderProfilePictureOrVideo=arr=>{// last image will be rendered\nconst reversed=arr.reverse();for(let index=0;index<reversed.length;index++){const item=reversed[index];if(item.type.includes(\"image\")){return/*#__PURE__*/React.createElement(Media,{src:\"\".concat(process.env.REACT_APP_ASSET_LINK,\"/\").concat(item.link),className:\"rounded-circle\",alt:\"\"});}};};const RenderLiveStreamPlayer=React.memo(_ref=>{let{videoUrl}=_ref;console.log(\"videoUrl\",videoUrl);useEffect(()=>{return false;},[]);return/*#__PURE__*/React.createElement(Fragment,null,/*#__PURE__*/React.createElement(Card,{style:{height:\"100%\"},className:\"ribbon-wrapper\"},/*#__PURE__*/React.createElement(CardBody,{className:\"ribbon-wrapped-streaming-card\"},/*#__PURE__*/React.createElement(\"div\",{className:\"ribbon ribbon-clip ribbon-info\"},\"LIVE FEED!\"),videoUrl!==null?/*#__PURE__*/React.createElement(ReactHlsPlayer,{className:\"custom-streaming-player\",src:videoUrl,autoPlay:true,controls:true,width:\"100%\",height:\"95%\"}):/*#__PURE__*/React.createElement(SkeletonTheme,{baseColor:\"#d4d4d4\",highlightColor:\"#8f8f8f\"},/*#__PURE__*/React.createElement(\"p\",null,/*#__PURE__*/React.createElement(Skeleton,{containerClassName:\"stretch-bars\",count:30}))))));});const ViewIndividualLiveStreamHelper=_ref2=>{let{location,information,SBData}=_ref2;// create history obj for redirects\nconst history=useHistory();const[state,setState]=useState({nav1:null,nav2:null});const[userCount,setUserCount]=useState(0);const[streamData,setStreamData]=useState(null);// eslint-disable-next-line\nconst generated=uuid();// chat begin\nconst allMembers=[];const chats=[];const selectedUser={image:require(\"../../../../../assets/images/placeholder.png\"),online:false,id:generated,name:\"Jeremy Blong\",image:require(\"../../../../../assets/images/placeholder.png\"),lastSeenDate:moment().format(\"MM/DD/YYYY hh:mm:ss a\")};const currentUser={id:generated};const[messageInput,setMessageInput]=useState('');const[showEmojiPicker,setShowEmojiPicker]=useState(false);const[menuToggle,setMenuToggle]=useState(false);const[videoUrl,setVideoUrlState]=useState(null);const[userData,setUserData]=useState(null);const[channel,setChannelData]=useState(null);const[userList,setUserListState]=useState([]);const[messages,setMessagesState]=useState([]);// chat end\nconst slider1=useRef();const slider2=useRef();useEffect(()=>()=>{console.log(\"Unmounted....\");const CHANNEL_URL=location.state.stream.channelUrl;SBData.OpenChannel.getChannel(CHANNEL_URL,(openChannel,error)=>{if(error){// Handle error.\nconsole.log(\"error getting channel to LEAVE group...:\",error);}else{openChannel.exit((response,error)=>{if(error){// Handle error.\nconsole.log(\"Error EXITING stream (attempting to exit) ...: \",error);}else{console.log(\"EXIT channel SUCCESS!\",response);}});}});},[]);useEffect(()=>{if(_.has(location.state,\"stream\")&&typeof location.state.stream!==\"undefined\"){setVideoUrlState(\"https://stream.mux.com/\".concat(location.state.stream.playback_id,\".m3u8\"));setStreamData(location.state.stream);const configuration={params:{uniqueId:information.uniqueId}};axios.get(\"\".concat(process.env.REACT_APP_BASE_URL,\"/gather/core/anonymous/user/data\"),configuration).then(res=>{if(res.data.message===\"Successfully gathered core user information!\"){console.log(res.data);const{user}=res.data;const CHANNEL_URL=location.state.stream.channelUrl;SBData.OpenChannel.getChannel(CHANNEL_URL,(openChannel,error)=>{if(error){// Handle error.\nconsole.log(\"error GETTING channel...:\",error);}const listQuery=openChannel.createPreviousMessageListQuery();listQuery.limit=100;listQuery.reverse=true;listQuery.customType=\"public\";// Retrieving previous messages.\nlistQuery.load((messageList,error)=>{if(error){// Handle error.\nconsole.log(\"error gathering old messages...:\",error);}else{setMessagesState(messageList);}});// Call the instance method of the result object in the \"openChannel\" parameter of the callback function.\nopenChannel.enter((response,error)=>{if(error){// Handle error.\nconsole.log(\"error entering channel...:\",error);}else{console.log(\"successfully entered channel...\",response);setChannelData(openChannel);setUserData(user);}});});}else{console.log(\"Err\",res.data);NotificationManager.error(\"Error while gathering user data for this listing - some data will NOT be complete...\",\"Could NOT gather user!\",5000);}}).catch(err=>{console.log(err);NotificationManager.error(\"Error while gathering user data for this listing - some data will NOT be complete...\",\"Could NOT gather user!\",5000);});setState({nav1:slider1.current,nav2:slider2.current});}else{history.push(\"/view/all/live/streams/general\");}},[]);const toggleEmojiPicker=()=>{setShowEmojiPicker(!showEmojiPicker);};const addEmoji=emoji=>{const text=\"\".concat(messageInput).concat(emoji.native);setShowEmojiPicker(false);setMessageInput(text);};const handleMessageChange=message=>{setMessageInput(message);};const renderSendbirdLiveCommands=()=>{const channelHandler=new SBData.ChannelHandler();channelHandler.onUserEntered=(openChannel,user)=>{console.log(\"onUserEntered entered\",openChannel,user);// update current count...\nsetUserCount(openChannel.participantCount);// update current user list...\nsetUserListState(prevState=>{return[...prevState,user];});};channelHandler.onUserExited=(openChannel,user)=>{console.log(\"onUserExited exited\",openChannel,user);// update current count...\nsetUserCount(openChannel.participantCount);// update current user list...\nsetUserListState(prevState=>{return prevState.filter((item,idx)=>{if(item.userId!==user.userId){return true;}});});};channelHandler.onMessageReceived=(channelRecieved,message)=>{console.log(\"message recieved~! : \",channelRecieved,message);if(channel!==null&&channelRecieved.url===channel.url){setMessagesState(prevState=>{return[message,...prevState];});}};if(_.has(location.state,\"stream\")){const CHANNEL_URL=location.state.stream.channelUrl;SBData.addChannelHandler(CHANNEL_URL,channelHandler);}};const handleMessagePress=e=>{if(e.key===\"Enter\"||e===\"send\"){}};const chatMenuToggle=()=>{setMenuToggle(!menuToggle);};const handleOpenMessageSend=()=>{const params=new SBData.UserMessageParams();params.message=messageInput;params.translationTargetLanguages=['en'];// French and German\nparams.pushNotificationDeliveryOption='default';// Either 'default' or 'suppress'\nchannel.sendUserMessage(params,(userMessage,error)=>{if(error){// Handle error.\nconsole.log(\"error sending message...:\",error);}else{const messageId=userMessage.messageId;console.log(\"successfully sent msg!\",messageId,userMessage);setMessagesState(prevState=>{return[userMessage,...prevState];});setMessageInput(\"\");}});};console.log(\"userData\",userData);return/*#__PURE__*/React.createElement(Fragment,null,/*#__PURE__*/React.createElement(Breadcrumb,{parent:\"Live Streaming\",title:\"Individual Live Stream (Currently LIVE)\"}),/*#__PURE__*/React.createElement(Container,{fluid:true},renderSendbirdLiveCommands(),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(Row,{className:\"product-page-main\"},/*#__PURE__*/React.createElement(Col,{sm:\"12\",md:\"12\",lg:\"7\",xl:\"7\"},/*#__PURE__*/React.createElement(RenderLiveStreamPlayer,{videoUrl:videoUrl})),/*#__PURE__*/React.createElement(Col,{sm:\"12\",md:\"12\",lg:\"5\",xl:\"5 xl-100\"},/*#__PURE__*/React.createElement(Card,{className:\"streaming-chat-card-wrapper\"},userData!==null?/*#__PURE__*/React.createElement(CardBody,{className:\"streaming-chat-card-body p-0\"},/*#__PURE__*/React.createElement(Row,{className:\"chat-box\"},/*#__PURE__*/React.createElement(Col,{className:\"pr-0 chat-right-aside\"},/*#__PURE__*/React.createElement(\"div\",{className:\"chat\"},/*#__PURE__*/React.createElement(\"div\",{className:\"chat-header clearfix\"},renderProfilePictureOrVideo(_.has(userData,\"profilePicsVideos\")&&userData.profilePicsVideos.length>0?userData.profilePicsVideos:/*#__PURE__*/React.createElement(Media,{src:\"../../../../../assets/images/placeholder.png\",className:\"rounded-circle\",alt:\"\"})),/*#__PURE__*/React.createElement(\"div\",{className:\"about\"},/*#__PURE__*/React.createElement(\"div\",{className:\"name\"},\"Streamed by \",/*#__PURE__*/React.createElement(\"strong\",{style:{textDecorationLine:\"underline\"}},\"\".concat(userData.firstName,\" \").concat(userData.lastName))),/*#__PURE__*/React.createElement(\"div\",{className:\"status digits\"},true?'online':selectedUser.lastSeenDate,\" w/\",/*#__PURE__*/React.createElement(\"strong\",{style:{color:\"blue\",textDecorationLine:\"underline\"}},userCount),\" Current Viewer's\")),/*#__PURE__*/React.createElement(\"ul\",{className:\"list-inline float-left float-sm-right chat-menu-icons\"},/*#__PURE__*/React.createElement(\"li\",{className:\"list-inline-item\"},/*#__PURE__*/React.createElement(\"a\",{href:null},/*#__PURE__*/React.createElement(\"i\",{className:\"icon-search\"}))),/*#__PURE__*/React.createElement(\"li\",{className:\"list-inline-item\"},/*#__PURE__*/React.createElement(\"a\",{href:null},/*#__PURE__*/React.createElement(\"i\",{className:\"icon-clip\"}))),/*#__PURE__*/React.createElement(\"li\",{className:\"list-inline-item\"},/*#__PURE__*/React.createElement(\"a\",{href:null},/*#__PURE__*/React.createElement(\"i\",{className:\"icon-headphone-alt\"}))),/*#__PURE__*/React.createElement(\"li\",{className:\"list-inline-item\"},/*#__PURE__*/React.createElement(\"a\",{href:null},/*#__PURE__*/React.createElement(\"i\",{className:\"icon-video-camera\"}))),/*#__PURE__*/React.createElement(\"li\",{className:\"list-inline-item toogle-bar\",onClick:()=>chatMenuToggle()},/*#__PURE__*/React.createElement(\"a\",{href:null},/*#__PURE__*/React.createElement(\"i\",{className:\"icon-menu\"}))))),/*#__PURE__*/React.createElement(\"div\",{className:\"chat-history chat-msg-box custom-scrollbar\"},/*#__PURE__*/React.createElement(RenderMessagListStreaming,{userData:information,messageList:messages,channel:channel,userData:userData})),/*#__PURE__*/React.createElement(\"div\",{className:\"chat-message clearfix\"},/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(\"div\",{className:\"mb-2\"},showEmojiPicker?/*#__PURE__*/React.createElement(Picker,{set:\"apple\",emojiSize:30,onSelect:addEmoji}):null),/*#__PURE__*/React.createElement(Col,{xl:\"12\",className:\"d-flex\"},/*#__PURE__*/React.createElement(\"div\",{className:\"smiley-box bg-primary\"},/*#__PURE__*/React.createElement(\"div\",{className:\"picker\",onClick:()=>toggleEmojiPicker()},/*#__PURE__*/React.createElement(Media,{src:require('../../../../../assets/images/smiley.png'),alt:\"\"}))),/*#__PURE__*/React.createElement(InputGroup,{className:\"text-box\"},/*#__PURE__*/React.createElement(Input,{type:\"text\",className:\"form-control input-txt-bx\",placeholder:\"Type a message......\",value:messageInput,onKeyPress:e=>{handleMessagePress(e);},onChange:e=>handleMessageChange(e.target.value)}),/*#__PURE__*/React.createElement(InputGroupAddon,{addonType:\"append\"},/*#__PURE__*/React.createElement(Button,{color:\"primary\",onClick:()=>handleOpenMessageSend()},Send)))))))))):null)))),/*#__PURE__*/React.createElement(BottomContainerHelper,{channel:channel,userData:userData,streamData:streamData})))));};const mapStateToProps=state=>{return{information:state.auth.data,SBData:state.sendbirdInitData.sendbirdInitData};};export default connect(mapStateToProps,{})(withRouter(ViewIndividualLiveStreamHelper));","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/src/components/dashboard/streamingLiveHacks/ViewLiveStreams/individualStream/viewIndividualStream.js"],"names":["React","Fragment","useState","useEffect","useRef","Breadcrumb","Container","Row","Col","Card","Button","Media","CardBody","Form","FormGroup","Input","InputGroup","InputGroupAddon","Nav","NavItem","NavLink","TabPane","TabContent","BottomContainerHelper","useHistory","withRouter","connect","start_conversion","Picker","Send","uuid","moment","ReactHlsPlayer","Skeleton","SkeletonTheme","NotificationManager","axios","messagingHelpers","_","typingIndicator","RenderMessagListStreaming","renderProfilePictureOrVideo","arr","reversed","reverse","index","length","item","type","includes","process","env","REACT_APP_ASSET_LINK","link","RenderLiveStreamPlayer","memo","videoUrl","console","log","height","ViewIndividualLiveStreamHelper","location","information","SBData","history","state","setState","nav1","nav2","userCount","setUserCount","streamData","setStreamData","generated","allMembers","chats","selectedUser","image","require","online","id","name","lastSeenDate","format","currentUser","messageInput","setMessageInput","showEmojiPicker","setShowEmojiPicker","menuToggle","setMenuToggle","setVideoUrlState","userData","setUserData","channel","setChannelData","userList","setUserListState","messages","setMessagesState","slider1","slider2","CHANNEL_URL","stream","channelUrl","OpenChannel","getChannel","openChannel","error","exit","response","has","playback_id","configuration","params","uniqueId","get","REACT_APP_BASE_URL","then","res","data","message","user","listQuery","createPreviousMessageListQuery","limit","customType","load","messageList","enter","catch","err","current","push","toggleEmojiPicker","addEmoji","emoji","text","native","handleMessageChange","renderSendbirdLiveCommands","channelHandler","ChannelHandler","onUserEntered","participantCount","prevState","onUserExited","filter","idx","userId","onMessageReceived","channelRecieved","url","addChannelHandler","handleMessagePress","e","key","chatMenuToggle","handleOpenMessageSend","UserMessageParams","translationTargetLanguages","pushNotificationDeliveryOption","sendUserMessage","userMessage","messageId","profilePicsVideos","textDecorationLine","firstName","lastName","color","target","value","mapStateToProps","auth","sendbirdInitData"],"mappings":"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","sourcesContent":["import React,{ Fragment, useState, useEffect, useRef } from 'react';\nimport Breadcrumb from '../../../../../layout/breadcrumb'\nimport { Container, Row, Col, Card, Button, Media, CardBody, Form, FormGroup, Input, InputGroup, InputGroupAddon, Nav, NavItem, NavLink, TabPane, TabContent } from 'reactstrap';\nimport BottomContainerHelper from './helpers/bottomContainer/container.js';\nimport { useHistory, withRouter } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport start_conversion from '../../../../../assets/images/start-conversion.jpg';\nimport { Picker } from 'emoji-mart'\nimport { Send } from '../../../../../constant';\nimport uuid from 'react-uuid';\nimport moment from 'moment';\nimport ReactHlsPlayer from 'react-hls-player';\nimport Skeleton, { SkeletonTheme } from 'react-loading-skeleton';\nimport { NotificationManager } from \"react-notifications\";\nimport \"./styles.css\";\nimport axios from \"axios\";\nimport messagingHelpers from \"./helpers/displayMessages/displayMessages.js\";\nimport _ from \"lodash\";\nimport typingIndicator from \"../../../../../assets/gifs/typing-white.gif\";\n\n\nconst { RenderMessagListStreaming } = messagingHelpers;\n\nconst renderProfilePictureOrVideo = (arr) => {\n    // last image will be rendered\n    const reversed = arr.reverse();\n\n    for (let index = 0; index < reversed.length; index++) {\n        const item = reversed[index];\n        if (item.type.includes(\"image\")) {\n            return <Media src={`${process.env.REACT_APP_ASSET_LINK}/${item.link}`} className=\"rounded-circle\" alt=\"\" />;\n        }\n    };\n}\nconst RenderLiveStreamPlayer = React.memo(({ videoUrl }) => {\n    console.log(\"videoUrl\", videoUrl);\n    useEffect(() => {\n      return false;\n    }, [])\n    return (\n        <Fragment>\n            <Card style={{ height: \"100%\" }} className=\"ribbon-wrapper\">\n                <CardBody className={\"ribbon-wrapped-streaming-card\"}>\n                    <div className=\"ribbon ribbon-clip ribbon-info\">LIVE FEED!</div>\n                    {videoUrl !== null ? <ReactHlsPlayer \n                        className={\"custom-streaming-player\"}\n                        src={videoUrl}\n                        autoPlay={true}\n                        controls={true}\n                        width=\"100%\"\n                        height=\"95%\"\n                    /> : <SkeletonTheme baseColor=\"#d4d4d4\" highlightColor=\"#8f8f8f\">\n                        <p>\n                            <Skeleton containerClassName={\"stretch-bars\"} count={30} />\n                        </p>\n                    </SkeletonTheme>}\n                </CardBody>\n            </Card>\n        </Fragment>\n    );\n});\n\nconst  ViewIndividualLiveStreamHelper = ({ location, information, SBData })  => {\n    // create history obj for redirects\n    const history = useHistory();\n    const [ state, setState ] = useState({ nav1: null, nav2: null });\n    const [ userCount, setUserCount ] = useState(0);\n    const [ streamData, setStreamData ] = useState(null);\n    // eslint-disable-next-line\n    const generated = uuid();\n    // chat begin\n    const allMembers = [];\n    const chats = [];\n    const selectedUser = {\n        image: require(\"../../../../../assets/images/placeholder.png\"),\n        online: false,\n        id: generated,\n        name: \"Jeremy Blong\",\n        image: require(\"../../../../../assets/images/placeholder.png\"),\n        lastSeenDate: moment().format(\"MM/DD/YYYY hh:mm:ss a\")\n    };\n    const currentUser = {\n        id: generated\n    };\n    const [ messageInput, setMessageInput ] = useState('');\n    const [ showEmojiPicker, setShowEmojiPicker ] = useState(false)\n    const [ menuToggle, setMenuToggle ] = useState(false);\n    const [ videoUrl, setVideoUrlState ] = useState(null);\n    const [ userData, setUserData ] = useState(null);\n    const [ channel, setChannelData ] = useState(null);\n    const [ userList, setUserListState ] = useState([]);\n    const [ messages, setMessagesState ] = useState([]);\n    // chat end\n    const slider1 = useRef();\n    const slider2 = useRef();\n\n    useEffect(() => () => {\n        console.log(\"Unmounted....\");\n\n        const CHANNEL_URL = location.state.stream.channelUrl;\n\n        SBData.OpenChannel.getChannel(CHANNEL_URL, (openChannel, error) => {\n            if (error) {\n                // Handle error.\n                console.log(\"error getting channel to LEAVE group...:\", error);\n            } else {\n                openChannel.exit((response, error) => {\n                    if (error) {\n                        // Handle error.\n                        console.log(\"Error EXITING stream (attempting to exit) ...: \", error);\n                    } else {\n                        console.log(\"EXIT channel SUCCESS!\", response);\n                    }\n                });\n            }\n        });\n    }, []);\n\n    useEffect(() => {\n\n        if (_.has(location.state, \"stream\") && typeof location.state.stream !== \"undefined\") {\n            setVideoUrlState(`https://stream.mux.com/${location.state.stream.playback_id}.m3u8`);\n            setStreamData(location.state.stream);\n\n            const configuration = {\n                params: {\n                    uniqueId: information.uniqueId\n                }\n            }\n\n            axios.get(`${process.env.REACT_APP_BASE_URL}/gather/core/anonymous/user/data`, configuration).then((res) => {\n                if (res.data.message === \"Successfully gathered core user information!\") {\n                    console.log(res.data);\n\n                    const { user } = res.data;\n\n                    const CHANNEL_URL = location.state.stream.channelUrl;\n\n                    SBData.OpenChannel.getChannel(CHANNEL_URL, (openChannel, error) => {\n                        if (error) {\n                            // Handle error.\n                            console.log(\"error GETTING channel...:\", error);\n                        }\n\n                        const listQuery = openChannel.createPreviousMessageListQuery();\n                        listQuery.limit = 100;\n                        listQuery.reverse = true;\n                        listQuery.customType = \"public\";\n\n                        // Retrieving previous messages.\n                        listQuery.load((messageList, error) => {\n                            if (error) {\n                                // Handle error.\n                                console.log(\"error gathering old messages...:\", error);\n                            } else {\n                                setMessagesState(messageList);\n                            }\n                        });\n                    \n                        // Call the instance method of the result object in the \"openChannel\" parameter of the callback function.\n                        openChannel.enter((response, error) => {\n                            if (error) {\n                                // Handle error.\n                                console.log(\"error entering channel...:\", error);\n                            } else {\n                                console.log(\"successfully entered channel...\", response);\n\n                                setChannelData(openChannel);\n\n                                setUserData(user);\n                            }\n                        });\n                    });\n                } else {\n                    console.log(\"Err\", res.data);\n\n                    NotificationManager.error(\"Error while gathering user data for this listing - some data will NOT be complete...\", \"Could NOT gather user!\", 5000);\n                }\n            }).catch((err) => {\n                console.log(err);\n\n                NotificationManager.error(\"Error while gathering user data for this listing - some data will NOT be complete...\", \"Could NOT gather user!\", 5000);\n            })\n\n            setState({\n                nav1: slider1.current,\n                nav2: slider2.current\n            });\n        } else {\n            history.push(\"/view/all/live/streams/general\")\n        }\n      } , []);\n\n    const toggleEmojiPicker = () => {\n        setShowEmojiPicker(!showEmojiPicker);\n    }\n  \n    const addEmoji = (emoji) =>  {\n        const text = `${messageInput}${emoji.native}`;\n        setShowEmojiPicker(false);\n        setMessageInput(text)\n    }\n\n    const handleMessageChange = (message) => {\n        setMessageInput(message)\n    }\n    const renderSendbirdLiveCommands = () => {\n        const channelHandler = new SBData.ChannelHandler();\n\n        channelHandler.onUserEntered = (openChannel, user) => {\n            console.log(\"onUserEntered entered\", openChannel, user);\n            // update current count...\n            setUserCount(openChannel.participantCount);\n             // update current user list...\n            setUserListState(prevState => {\n                return [...prevState, user];\n            });\n        };\n        channelHandler.onUserExited = (openChannel, user) => {\n            console.log(\"onUserExited exited\", openChannel, user);\n            // update current count...\n            setUserCount(openChannel.participantCount);\n            // update current user list...\n            setUserListState(prevState => {\n                return prevState.filter((item, idx) => {\n                    if (item.userId !== user.userId) {\n                        return true;\n                    }\n                })\n            });\n        };\n        channelHandler.onMessageReceived = (channelRecieved, message) => {\n            console.log(\"message recieved~! : \", channelRecieved, message);\n\n            if (channel !== null && channelRecieved.url === channel.url) {\n                setMessagesState(prevState => {\n                    return [message, ...prevState]\n                })\n            } \n        };\n        if (_.has(location.state, \"stream\")) {\n            const CHANNEL_URL = location.state.stream.channelUrl;\n\n            SBData.addChannelHandler(CHANNEL_URL, channelHandler);\n        }\n    }\n    const handleMessagePress = (e) => {\n        if (e.key === \"Enter\" || e === \"send\") {\n\n        }\n    }\n    const chatMenuToggle = () => {\n        setMenuToggle(!menuToggle)\n    }\n    const handleOpenMessageSend = () => {\n        const params = new SBData.UserMessageParams();\n\n        params.message = messageInput;\n        params.translationTargetLanguages = ['en'];   // French and German\n        params.pushNotificationDeliveryOption = 'default';  // Either 'default' or 'suppress'\n\n        channel.sendUserMessage(params, (userMessage, error) => {\n            if (error) {\n                // Handle error.\n                console.log(\"error sending message...:\", error);\n            } else {\n                const messageId = userMessage.messageId;\n\n                console.log(\"successfully sent msg!\", messageId, userMessage);\n\n                setMessagesState(prevState => {\n                    return [userMessage, ...prevState]\n                })\n                setMessageInput(\"\");\n            }\n        });\n    }\n    console.log(\"userData\", userData);\n    return (\n        <Fragment>\n            <Breadcrumb parent=\"Live Streaming\" title=\"Individual Live Stream (Currently LIVE)\"/>\n            <Container fluid={true}>\n                {renderSendbirdLiveCommands()}\n                <Row>\n                    <Col>\n                    <Card>\n                        <Row className=\"product-page-main\">\n                            <Col sm=\"12\" md=\"12\" lg=\"7\" xl=\"7\">\n                                <RenderLiveStreamPlayer videoUrl={videoUrl} />\n                            </Col>\n                            <Col sm=\"12\" md=\"12\" lg=\"5\" xl=\"5 xl-100\">\n                                <Card className={\"streaming-chat-card-wrapper\"}>\n                                    {userData !== null ? <CardBody className={\"streaming-chat-card-body p-0\"}>\n                                        <Row className=\"chat-box\">\n                                        <Col className=\"pr-0 chat-right-aside\">\n                                            <div className=\"chat\">\n                                            <div className=\"chat-header clearfix\">\n                                                {renderProfilePictureOrVideo(_.has(userData, \"profilePicsVideos\") && userData.profilePicsVideos.length > 0 ? userData.profilePicsVideos : <Media src={\"../../../../../assets/images/placeholder.png\"} className=\"rounded-circle\" alt=\"\" />)}\n                                                <div className=\"about\">\n                                                    <div className=\"name\">\n                                                        Streamed by <strong style={{ textDecorationLine: \"underline\" }}>{`${userData.firstName} ${userData.lastName}`}</strong>\n                                                    </div>\n                                                    <div className=\"status digits\" >\n                                                        {true ? 'online' : selectedUser.lastSeenDate} w/<strong style={{ color: \"blue\", textDecorationLine: \"underline\" }}>{userCount}</strong> Current Viewer's\n                                                    </div>\n                                                </div>\n                                                <ul className=\"list-inline float-left float-sm-right chat-menu-icons\">\n                                                    <li className=\"list-inline-item\"><a href={null}><i className=\"icon-search\"></i></a></li>\n                                                    <li className=\"list-inline-item\"><a href={null}><i className=\"icon-clip\"></i></a></li>\n                                                    <li className=\"list-inline-item\"><a href={null}><i className=\"icon-headphone-alt\"></i></a></li>\n                                                    <li className=\"list-inline-item\"><a href={null}><i className=\"icon-video-camera\"></i></a></li>\n                                                    <li className=\"list-inline-item toogle-bar\" onClick={() => chatMenuToggle()}><a href={null}><i className=\"icon-menu\"></i></a></li>\n                                                </ul>\n                                            </div>\n                                            <div className=\"chat-history chat-msg-box custom-scrollbar\" >\n                                                <RenderMessagListStreaming userData={information} messageList={messages} channel={channel} userData={userData} />\n                                            </div>\n                                            <div className=\"chat-message clearfix\">\n                                                <Row>\n                                                <div className=\"mb-2\">\n                                                {showEmojiPicker ? (\n                                                        <Picker set=\"apple\" emojiSize={30} onSelect={addEmoji} />\n                                                ) : null}\n                                                </div>\n                                                <Col xl=\"12\" className=\"d-flex\">\n                                                    <div className=\"smiley-box bg-primary\">\n                                                    \n                                                        <div className=\"picker\" onClick={() => toggleEmojiPicker()}>\n                                                        <Media src={require('../../../../../assets/images/smiley.png')}  alt=\"\"/>\n                                                        </div>\n\n                                                    </div>\n                                                    <InputGroup className=\"text-box\">\n                                                        <Input\n                                                            type=\"text\"\n                                                            className=\"form-control input-txt-bx\"\n                                                            placeholder=\"Type a message......\"\n                                                            value={messageInput}\n                                                            onKeyPress={(e) => {\n                                                                handleMessagePress(e)\n                                                            }}\n                                                            onChange={(e) => handleMessageChange(e.target.value)}\n                                                        />\n                                                        <InputGroupAddon addonType=\"append\">\n                                                            <Button color=\"primary\" onClick={() => handleOpenMessageSend()} >{Send}</Button>\n                                                        </InputGroupAddon>\n                                                    </InputGroup>\n                                                </Col>\n                                                </Row>\n                                            </div>\n                                            </div>\n                                            {/* {typingStatus === true ? <div className={\"typing-indicator-wrapper\"}>\n                                                <img src={typingIndicator} className={\"typing-animation\"} />\n                                            </div> : null} */}\n                                        </Col>\n                                    </Row>\n                                </CardBody> : null}\n                            </Card>\n                        </Col>\n                    </Row>\n                </Card>\n                <BottomContainerHelper channel={channel} userData={userData} streamData={streamData} /></Col>\n                </Row>\n            </Container>\n        </Fragment>\n    );\n}\nconst mapStateToProps = (state) => {\n    return {\n        information: state.auth.data,\n        SBData: state.sendbirdInitData.sendbirdInitData\n    }\n}\nexport default connect(mapStateToProps, {  })(withRouter(ViewIndividualLiveStreamHelper));\n"]},"metadata":{},"sourceType":"module"}