{"ast":null,"code":"var _jsxFileName = \"/home/kali/Documents/cybersecurity/client/src/components/dashboard/softwareHardwareExchanges/software/createListing/multiStepPages/pageOne/pageOneMain.js\";\nimport React, { useEffect, useState, Fragment } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { Col, Button, Form, Label, Input, FormGroup, InputGroup, InputGroupAddon, InputGroupText } from 'reactstrap';\nimport { LastName, State, City, Zip, SubmitForm } from '../../../../../../../constant';\nimport \"./styles.css\";\nimport Select from 'react-select';\nconst categoryOptions = [{\n  value: 'chocolate',\n  label: 'Chocolate'\n}, {\n  value: 'strawberry',\n  label: 'Strawberry'\n}, {\n  value: 'vanilla',\n  label: 'Vanilla'\n}];\n\nconst PageOneMainHelper = props => {\n  const {\n    register,\n    watch,\n    handleSubmit,\n    control,\n    formState: {\n      errors\n    }\n  } = useForm();\n  const watchCategorySelector = watch(\"category\", false);\n  const [validateClass, setValidateClass] = useState(false);\n  const [data, setData] = useState({});\n\n  const onSubmit = (e, data) => {\n    e.preventDefault();\n\n    if (data !== '') {\n      alert('You submitted the form and stuff!');\n    } else {\n      errors.showMessages();\n    }\n  };\n\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setData(prevState => {\n      return { ...prevState,\n        [name]: value\n      };\n    });\n  };\n\n  console.log(\"data\", data);\n  useEffect(() => {\n    const subscription = watch((value, _ref) => {\n      let {\n        name,\n        type\n      } = _ref;\n      return console.log(value, name, type);\n    });\n    console.log(\"subscription\", subscription); // return () => subscription.unsubscribe();\n  }, []);\n  console.log(\"form - watchCategorySelector : \", watchCategorySelector);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    className: `needs-validation tooltip-validation ${validateClass ? 'validateClass' : ''}`,\n    noValidate: \"\",\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: \"6 mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 21\n    }\n  }, \"Listing Title (Be As Specific As Possible)\"), /*#__PURE__*/React.createElement(Input, Object.assign({\n    className: \"form-control\",\n    name: \"listingTitle\",\n    type: \"text\",\n    placeholder: \"Listing title\"\n  }, register(\"listingTitle\", {\n    required: true\n  }), {\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }\n  }, errors.listingTitle && 'Listing title is required'), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"valid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 21\n    }\n  }, \"Looks good!\")), /*#__PURE__*/React.createElement(Col, {\n    md: \"6 mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 21\n    }\n  }, LastName), /*#__PURE__*/React.createElement(Controller, Object.assign({\n    control: control,\n    name: \"category\"\n  }, register(\"category\", {\n    required: true\n  }), {\n    render: _ref2 => {\n      let {\n        field\n      } = _ref2;\n      return /*#__PURE__*/React.createElement(Select, Object.assign({}, field, {\n        value: data.selectedOption,\n        onChange: selectedOption => {\n          setData(prevState => {\n            return { ...prevState,\n              category: selectedOption\n            };\n          });\n        },\n        options: categoryOptions,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 29\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 21\n    }\n  })), watchCategorySelector ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"span-tooltip\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 46\n    }\n  }, errors.category && 'Category is required') : null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"valid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 21\n    }\n  }, \"Looks good!\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: \"6 mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 21\n    }\n  }, City), /*#__PURE__*/React.createElement(Input, Object.assign({\n    className: \"form-control\",\n    name: \"city\",\n    type: \"text\",\n    placeholder: \"City\"\n  }, register(\"testing\", {\n    required: true\n  }), {\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 21\n    }\n  }, errors.city && 'Please provide a valid city'), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 21\n    }\n  }, \"Please provide a valid city.\")), /*#__PURE__*/React.createElement(Col, {\n    md: \"3 mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 21\n    }\n  }, State), /*#__PURE__*/React.createElement(Input, Object.assign({\n    className: \"form-control\",\n    name: \"state\",\n    type: \"text\",\n    placeholder: \"State\"\n  }, register(\"testing\", {\n    required: true\n  }), {\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 21\n    }\n  }, errors.state && 'Please provide a valid state.'), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 21\n    }\n  }, \"Please provide a valid state.\")), /*#__PURE__*/React.createElement(Col, {\n    md: \"3 mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 21\n    }\n  }, Zip), /*#__PURE__*/React.createElement(Input, Object.assign({\n    className: \"form-control\",\n    name: \"zip\",\n    type: \"text\",\n    placeholder: \"Zip\"\n  }, register(\"testing\", {\n    required: true\n  }), {\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 21\n    }\n  }, errors.zip && 'Please provide a valid zip.'), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 21\n    }\n  }, \"Please provide a valid zip.\"))), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-check\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"checkbox p-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    className: \"form-check-input\",\n    id: \"invalidCheck3\",\n    type: \"checkbox\",\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Label, {\n    className: \"form-check-label\",\n    htmlFor: \"invalidCheck3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 21\n    }\n  }, \"Agree to terms and conditions\")))), /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    type: \"submit\",\n    onClick: () => setValidateClass(!validateClass),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }\n  }, SubmitForm)));\n};\n\nexport default PageOneMainHelper;","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/softwareHardwareExchanges/software/createListing/multiStepPages/pageOne/pageOneMain.js"],"names":["React","useEffect","useState","Fragment","useForm","Controller","Col","Button","Form","Label","Input","FormGroup","InputGroup","InputGroupAddon","InputGroupText","LastName","State","City","Zip","SubmitForm","Select","categoryOptions","value","label","PageOneMainHelper","props","register","watch","handleSubmit","control","formState","errors","watchCategorySelector","validateClass","setValidateClass","data","setData","onSubmit","e","preventDefault","alert","showMessages","handleInputChange","name","target","prevState","console","log","subscription","type","required","listingTitle","field","selectedOption","category","city","state","zip"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, Fragment} from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { Col,Button,Form,Label,Input,FormGroup,InputGroup,InputGroupAddon,InputGroupText } from 'reactstrap';\nimport { LastName,State,City,Zip,SubmitForm } from '../../../../../../../constant';\nimport \"./styles.css\";\nimport Select from 'react-select';\n\n\nconst categoryOptions = [\n    { value: 'chocolate', label: 'Chocolate' },\n    { value: 'strawberry', label: 'Strawberry' },\n    { value: 'vanilla', label: 'Vanilla' },\n];\n  \n\nconst PageOneMainHelper = (props) => {\n\n    const { register, watch, handleSubmit, control, formState: { errors }} = useForm();\n    const watchCategorySelector = watch(\"category\", false);\n    const [validateClass , setValidateClass] = useState(false);\n    const [ data, setData ] = useState({});\n\n\n    const onSubmit = (e, data) => {\n\n        e.preventDefault();\n\n        if (data !== '') {\n            alert('You submitted the form and stuff!');\n        } else {\n            errors.showMessages();\n        }\n    };\n    const handleInputChange = (e) => {\n        const { name, value } = e.target;\n\n        setData(prevState => {\n            return {\n                ...prevState,\n                [name]: value\n            }\n        });\n    };\n    console.log(\"data\", data);\n\n    useEffect(() => {\n        const subscription = watch((value, { name, type }) => console.log(value, name, type));\n\n        console.log(\"subscription\", subscription);\n        \n        // return () => subscription.unsubscribe();\n    }, [])\n\n    console.log(\"form - watchCategorySelector : \", watchCategorySelector);\n    return (\n        <div>\n            <Form className={`needs-validation tooltip-validation ${validateClass ? 'validateClass' : ''}`} noValidate=\"\" onSubmit={handleSubmit(onSubmit)}>\n                <div className=\"form-row\">\n                <Col md=\"6 mb-3\">\n                    <Label>Listing Title (Be As Specific As Possible)</Label>\n                    <Input className=\"form-control\" name=\"listingTitle\" type=\"text\" placeholder=\"Listing title\" {...register((\"listingTitle\"), { required: true })} onChange={handleInputChange} />\n                    <span>{errors.listingTitle && 'Listing title is required'}</span>\n                    <div className=\"valid-feedback\">{\"Looks good!\"}</div>\n                </Col>\n                <Col md=\"6 mb-3\">\n                    <Label>{LastName}</Label>\n                    {/* <Controller\n                        as={<Select\n                            value={data.selectedOption}\n                            onChange={(selectedOption) => {\n                                setData(prevState => {\n                                    return {\n                                        ...prevState,\n                                        category: selectedOption\n                                    }\n                                })\n                            }}\n                            options={categoryOptions}\n                            {...register((\"category\"), { required: true })}\n                        />}\n                        name=\"category\"\n                        // onChange={(inputValue) => changeValue(inputValue.value)}\n                        control={control}\n                        {...register((\"category\"), { required: true })}\n                    /> */}\n                    <Controller\n                        control={control}\n                        name=\"category\"\n                        {...register((\"category\"), { required: true })}\n                        render={({ field }) => (\n                            <Select\n                                {...field}\n                                value={data.selectedOption}\n                                onChange={(selectedOption) => {\n                                    setData(prevState => {\n                                        return {\n                                            ...prevState,\n                                            category: selectedOption\n                                        }\n                                    })\n                                }}\n                                options={categoryOptions}\n                            />\n                        )}\n                    />\n                    {watchCategorySelector ? <span className=\"span-tooltip\">{errors.category && 'Category is required'}</span> : null}\n                    <div className=\"valid-feedback\">{\"Looks good!\"}</div>\n                </Col>\n                {/* <Col md=\"4 mb-3\">\n                    <Label>{Username}</Label>\n                    <InputGroup>\n                    <InputGroupAddon addonType=\"prepend\">\n                        <InputGroupText >{\"@\"}</InputGroupText>\n                        </InputGroupAddon>\n                    <Input className=\"form-control\"  name=\"userName\" type=\"text\" placeholder=\"Username\" aria-describedby=\"inputGroupPrepend\" {...register((\"testing\"), { required: true })} />\n                    <span>{errors.lastName && 'User name is required'}</span>\n                    <div className=\"invalid-feedback\">{\"Please choose a username.\"}</div>\n                    </InputGroup>\n                </Col> */}\n                </div>\n                <div className=\"form-row\">\n                <Col md=\"6 mb-3\">\n                    <Label>{City}</Label>\n                    <Input className=\"form-control\"  name=\"city\" type=\"text\" placeholder=\"City\" {...register((\"testing\"), { required: true })} onChange={handleInputChange} />\n                    <span>{errors.city && 'Please provide a valid city'}</span>\n                    <div className=\"invalid-feedback\">{\"Please provide a valid city.\"}</div>\n                </Col>\n                <Col md=\"3 mb-3\">\n                    <Label>{State}</Label>\n                    <Input className=\"form-control\"  name=\"state\" type=\"text\" placeholder=\"State\" {...register((\"testing\"), { required: true })} onChange={handleInputChange} />\n                    <span>{errors.state && 'Please provide a valid state.'}</span>\n                    <div className=\"invalid-feedback\">{\"Please provide a valid state.\"}</div>\n                </Col>\n                <Col md=\"3 mb-3\">\n                    <Label>{Zip}</Label>\n                    <Input className=\"form-control\"  name=\"zip\" type=\"text\" placeholder=\"Zip\" {...register((\"testing\"), { required: true })} onChange={handleInputChange} />\n                    <span>{errors.zip && 'Please provide a valid zip.'}</span>\n                    <div className=\"invalid-feedback\">{\"Please provide a valid zip.\"}</div>\n                </Col>\n                </div>\n                <FormGroup>\n                <div className=\"form-check\">\n                    <div className=\"checkbox p-0\">\n                    <Input className=\"form-check-input\" id=\"invalidCheck3\" type=\"checkbox\" onChange={handleInputChange} />\n                    <Label className=\"form-check-label\" htmlFor=\"invalidCheck3\">{\"Agree to terms and conditions\"}</Label>\n                    </div>\n                </div>\n                </FormGroup>\n                <Button color=\"primary\"  type=\"submit\" onClick={() => setValidateClass(!validateClass)}>{SubmitForm}</Button>\n            </Form>\n        </div>\n    );\n}\n\nexport default PageOneMainHelper;\n"]},"metadata":{},"sourceType":"module"}