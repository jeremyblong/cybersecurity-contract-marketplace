{"ast":null,"code":"import React,{Component}from'react';import*as SendBird from\"sendbird\";import{connect}from\"react-redux\";import{saveSendbirdInitialData}from\"./redux/actions/messaging/initialization/initSBLogic.js\";import _ from\"lodash\";const returnSendbirdObj=signedIn=>{return new SendBird({appId:process.env.REACT_APP_SENDBIRD_APP_ID,localCacheEnabled:signedIn});};class MountingLogicRedux extends Component{constructor(props){super(props);this.renderOnceUpdateProfileSendbirdInfo=()=>{// deconstruct\nconst{authenticated,accountData,SBData,saveSendbirdInitialData}=this.props;// reverse array to get MOST recent array item\nif(typeof accountData.profilePicsVideos!==\"undefined\"&&accountData.profilePicsVideos.length>0){const reversed=accountData.profilePicsVideos.reverse();console.log(\"SBData\",SBData);if(SBData!==null&&SBData.currentUser!==null){for(let index=0;index<reversed.length;index++){const item=reversed[index];// check if image\nif(item.type.includes(\"image\")){// create SB (sendbird) core-obj-data\nconst sb=returnSendbirdObj(authenticated);// data to be given to sendbird\nconst fullName=\"\".concat(accountData.firstName,\" \").concat(accountData.lastName);const profilePicture=\"\".concat(process.env.REACT_APP_ASSET_LINK,\"/\").concat(item.link);// update profile information - SENDBIRD related...\nsb.updateCurrentUserInfo(fullName,profilePicture,(response,error)=>{if(error){// Handle error.\nconsole.log(\"error while updating to lastest info!\",error);}else{console.log(\"SUCCESSFULLY updated profile sendbird information!\",response);}});break;}else{if(reversed.length-1===index){// create SB (sendbird) core-obj-data\nconst sb=returnSendbirdObj(authenticated);// data to be given to sendbird\nconst fullName=\"\".concat(accountData.firstName,\" \").concat(accountData.lastName);const profilePicture=\"\".concat(process.env.REACT_APP_PLACEHOLDER_IMAGE);// update profile information - SENDBIRD related...\nsb.updateCurrentUserInfo(fullName,profilePicture,(response,error)=>{if(error){// Handle error.\nconsole.log(\"error while updating to lastest info!\",error);}else{console.log(\"SUCCESSFULLY updated profile sendbird information!\",response);}});// looped thru array of images/videos and couldnt find a picture file\n}}}}else{saveSendbirdInitialData(returnSendbirdObj(true));}}else{console.log(\"SBData\",SBData);if(SBData!==null&&SBData.currentUser!==null){// create SB (sendbird) core-obj-data\nconst sb=returnSendbirdObj(authenticated);// data to be given to sendbird\nconst fullName=\"\".concat(accountData.firstName,\" \").concat(accountData.lastName);const profilePicture=\"\".concat(process.env.REACT_APP_PLACEHOLDER_IMAGE);// update profile information - SENDBIRD related...\nsb.updateCurrentUserInfo(fullName,profilePicture,(response,error)=>{if(error){// Handle error.\nconsole.log(\"error while updating to lastest info!\",error);}else{console.log(\"SUCCESSFULLY updated profile sendbird information!\",response);}});}else{saveSendbirdInitialData(returnSendbirdObj(true));}}};this.state={profilePic:\"\",updatedAlready:false};}componentDidUpdate(prevProps,prevState){const{saveSendbirdInitialData,authenticated,SBData}=this.props;if(prevProps.SBData!==SBData){console.log(\"prevProps\",prevProps,prevState,SBData);saveSendbirdInitialData(returnSendbirdObj(authenticated));}}render(){const{authenticated,accountData}=this.props;const{updatedAlready}=this.state;// run other SENDBIRD Logic init\nif(authenticated===true){// create sendbird data obj\nconst sb=returnSendbirdObj(authenticated);console.log(\"validating - connecting user MESSAGING logic...\",sb);sb.connect(accountData.uniqueId,(user,error)=>{if(error){// Handle error.\nconsole.log(\"Messaging connection error... :\",error);}// The user is connected to Sendbird server.\nconsole.log(\"The user - \".concat(accountData.uniqueId,\" - is connected to Sendbird server\"),user);if(!updatedAlready){this.renderOnceUpdateProfileSendbirdInfo();}});}return null;}}const mapStateToProps=state=>{console.log(\"Stateeeeeee\",state);return{authenticated:_.has(state.auth.data,\"accountType\")?true:false,accountData:state.auth.data,SBData:_.has(state.sendbirdInitData,\"sendbirdInitData\")?state.sendbirdInitData.sendbirdInitData:null};};export default connect(mapStateToProps,{saveSendbirdInitialData})(MountingLogicRedux);","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/src/mountingLogicRedux.js"],"names":["React","Component","SendBird","connect","saveSendbirdInitialData","_","returnSendbirdObj","signedIn","appId","process","env","REACT_APP_SENDBIRD_APP_ID","localCacheEnabled","MountingLogicRedux","constructor","props","renderOnceUpdateProfileSendbirdInfo","authenticated","accountData","SBData","profilePicsVideos","length","reversed","reverse","console","log","currentUser","index","item","type","includes","sb","fullName","firstName","lastName","profilePicture","REACT_APP_ASSET_LINK","link","updateCurrentUserInfo","response","error","REACT_APP_PLACEHOLDER_IMAGE","state","profilePic","updatedAlready","componentDidUpdate","prevProps","prevState","render","uniqueId","user","mapStateToProps","has","auth","data","sendbirdInitData"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as SendBird from \"sendbird\";\nimport { connect } from \"react-redux\";\nimport { saveSendbirdInitialData } from \"./redux/actions/messaging/initialization/initSBLogic.js\";\nimport _ from \"lodash\";\n\n\nconst returnSendbirdObj = (signedIn) => {\n    return new SendBird({ appId: process.env.REACT_APP_SENDBIRD_APP_ID, localCacheEnabled: signedIn });\n}\n\nclass MountingLogicRedux extends Component {\nconstructor(props) {\n    super(props);\n\n    this.state = {\n        profilePic: \"\",\n        updatedAlready: false\n    }\n}\n    componentDidUpdate(prevProps, prevState) {\n        const { saveSendbirdInitialData, authenticated, SBData } = this.props;\n\n        if (prevProps.SBData !== SBData) {\n            console.log(\"prevProps\", prevProps, prevState, SBData);\n\n            saveSendbirdInitialData(returnSendbirdObj(authenticated));\n        }\n    }\n    renderOnceUpdateProfileSendbirdInfo = () => {\n        // deconstruct\n        const { authenticated, accountData, SBData, saveSendbirdInitialData } = this.props;\n        // reverse array to get MOST recent array item\n        if (typeof accountData.profilePicsVideos !== \"undefined\" && accountData.profilePicsVideos.length > 0) {\n            const reversed = accountData.profilePicsVideos.reverse();\n\n            console.log(\"SBData\", SBData);\n\n            if (SBData !== null && SBData.currentUser !== null) {\n                for (let index = 0; index < reversed.length; index++) {\n                    const item = reversed[index];\n                    // check if image\n                    if (item.type.includes(\"image\")) {\n                        // create SB (sendbird) core-obj-data\n                        const sb = returnSendbirdObj(authenticated);\n                        // data to be given to sendbird\n                        const fullName = `${accountData.firstName} ${accountData.lastName}`;\n                        const profilePicture = `${process.env.REACT_APP_ASSET_LINK}/${item.link}`;\n                    // update profile information - SENDBIRD related...\n                        sb.updateCurrentUserInfo(fullName, profilePicture, (response, error) => {\n                            if (error) {\n                                // Handle error.\n                                console.log(\"error while updating to lastest info!\", error);\n                            } else {\n                                console.log(\"SUCCESSFULLY updated profile sendbird information!\", response);\n                            }\n                        });\n                        break;\n                    } else {\n                        if ((reversed.length - 1) === index) {\n                            // create SB (sendbird) core-obj-data\n                            const sb = returnSendbirdObj(authenticated);\n                            // data to be given to sendbird\n                            const fullName = `${accountData.firstName} ${accountData.lastName}`;\n                            const profilePicture = `${process.env.REACT_APP_PLACEHOLDER_IMAGE}`;\n                            // update profile information - SENDBIRD related...\n                            sb.updateCurrentUserInfo(fullName, profilePicture, (response, error) => {\n                                if (error) {\n                                    // Handle error.\n                                    console.log(\"error while updating to lastest info!\", error);\n                                } else {\n                                    console.log(\"SUCCESSFULLY updated profile sendbird information!\", response);\n                                }\n                            });\n                            // looped thru array of images/videos and couldnt find a picture file\n                        }\n                    }\n                }\n            } else {\n                saveSendbirdInitialData(returnSendbirdObj(true))\n            }\n        } else {\n            console.log(\"SBData\", SBData);\n\n            if (SBData !== null && SBData.currentUser !== null) {\n                // create SB (sendbird) core-obj-data\n                const sb = returnSendbirdObj(authenticated);\n                // data to be given to sendbird\n                const fullName = `${accountData.firstName} ${accountData.lastName}`;\n                const profilePicture = `${process.env.REACT_APP_PLACEHOLDER_IMAGE}`;\n                // update profile information - SENDBIRD related...\n                sb.updateCurrentUserInfo(fullName, profilePicture, (response, error) => {\n                    if (error) {\n                        // Handle error.\n                        console.log(\"error while updating to lastest info!\", error);\n                    } else {\n                        console.log(\"SUCCESSFULLY updated profile sendbird information!\", response);\n                    }\n                });\n            } else {\n                saveSendbirdInitialData(returnSendbirdObj(true))\n            }\n        }\n    }\n    render () {\n        const { authenticated, accountData } = this.props;\n        const { updatedAlready } = this.state;\n        // run other SENDBIRD Logic init\n        if (authenticated === true) {\n            // create sendbird data obj\n            const sb = returnSendbirdObj(authenticated);\n            \n            console.log(\"validating - connecting user MESSAGING logic...\", sb);\n            \n            sb.connect(accountData.uniqueId, (user, error) => {\n                if (error) {\n                    // Handle error.\n                    console.log(\"Messaging connection error... :\", error);\n                }\n                // The user is connected to Sendbird server.\n                console.log(`The user - ${accountData.uniqueId} - is connected to Sendbird server`, user);\n\n                if (!updatedAlready) {\n                    this.renderOnceUpdateProfileSendbirdInfo();\n                } \n            });\n        }\n        return null;\n    }\n}\nconst mapStateToProps = (state) => {\n    console.log(\"Stateeeeeee\", state);\n    return {\n        authenticated: _.has(state.auth.data, \"accountType\") ? true : false,\n        accountData: state.auth.data,\n        SBData: _.has(state.sendbirdInitData, \"sendbirdInitData\") ? state.sendbirdInitData.sendbirdInitData : null\n    }\n}\nexport default connect(mapStateToProps, { saveSendbirdInitialData })(MountingLogicRedux);"]},"metadata":{},"sourceType":"module"}