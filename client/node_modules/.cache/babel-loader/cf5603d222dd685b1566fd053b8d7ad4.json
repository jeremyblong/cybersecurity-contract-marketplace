{"ast":null,"code":"import _defineProperty from \"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\n/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde (`boolean`, default:\n *   `true`).\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\nimport { splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * @param {Options} [options]\n * @returns {Extension}\n */\n\nexport function gfmStrikethrough() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var single = options.singleTilde;\n  var tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  };\n\n  if (single === null || single === undefined) {\n    single = true;\n  }\n\n  return {\n    text: _defineProperty({}, 126, tokenizer),\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  };\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n\n  function resolveAllStrikethrough(events, context) {\n    var index = -1; // Walk through all events.\n\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (events[index][0] === 'enter' && events[index][1].type === 'strikethroughSequenceTemporary' && events[index][1]._close) {\n        var open = index; // Now walk back to find an opener.\n\n        while (open--) {\n          // Find a token that can open the closer.\n          if (events[open][0] === 'exit' && events[open][1].type === 'strikethroughSequenceTemporary' && events[open][1]._open && // If the sizes are the same:\n          events[index][1].end.offset - events[index][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {\n            events[index][1].type = 'strikethroughSequence';\n            events[open][1].type = 'strikethroughSequence';\n            var strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            };\n            var text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            }; // Opening.\n\n            var nextEvents = [['enter', strikethrough, context], ['enter', events[open][1], context], ['exit', events[open][1], context], ['enter', text, context]]; // Between.\n\n            splice(nextEvents, nextEvents.length, 0, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context)); // Closing.\n\n            splice(nextEvents, nextEvents.length, 0, [['exit', text, context], ['enter', events[index][1], context], ['exit', events[index][1], context], ['exit', strikethrough, context]]);\n            splice(events, open - 1, index - open + 3, nextEvents);\n            index = open + nextEvents.length - 2;\n            break;\n          }\n        }\n      }\n    }\n\n    index = -1;\n\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = 'data';\n      }\n    }\n\n    return events;\n  }\n  /** @type {Tokenizer} */\n\n\n  function tokenizeStrikethrough(effects, ok, nok) {\n    var previous = this.previous;\n    var events = this.events;\n    var size = 0;\n    return start;\n    /** @type {State} */\n\n    function start(code) {\n      if (previous === 126 && events[events.length - 1][1].type !== 'characterEscape') {\n        return nok(code);\n      }\n\n      effects.enter('strikethroughSequenceTemporary');\n      return more(code);\n    }\n    /** @type {State} */\n\n\n    function more(code) {\n      var before = classifyCharacter(previous);\n\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code);\n        effects.consume(code);\n        size++;\n        return more;\n      }\n\n      if (size < 2 && !single) return nok(code);\n      var token = effects.exit('strikethroughSequenceTemporary');\n      var after = classifyCharacter(code);\n      token._open = !after || after === 2 && Boolean(before);\n      token._close = !before || before === 2 && Boolean(after);\n      return ok(code);\n    }\n  }\n}","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js"],"names":["splice","classifyCharacter","resolveAll","gfmStrikethrough","options","single","singleTilde","tokenizer","tokenize","tokenizeStrikethrough","resolveAllStrikethrough","undefined","text","insideSpan","null","attentionMarkers","events","context","index","length","type","_close","open","_open","end","offset","start","strikethrough","Object","assign","nextEvents","parser","constructs","slice","effects","ok","nok","previous","size","code","enter","more","before","consume","token","exit","after","Boolean"],"mappings":"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","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde (`boolean`, default:\n *   `true`).\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\nimport {splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/**\n * @param {Options} [options]\n * @returns {Extension}\n */\nexport function gfmStrikethrough(options = {}) {\n  let single = options.singleTilde\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  }\n\n  if (single === null || single === undefined) {\n    single = true\n  }\n\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  }\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n\n  function resolveAllStrikethrough(events, context) {\n    let index = -1 // Walk through all events.\n\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (\n        events[index][0] === 'enter' &&\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\n        events[index][1]._close\n      ) {\n        let open = index // Now walk back to find an opener.\n\n        while (open--) {\n          // Find a token that can open the closer.\n          if (\n            events[open][0] === 'exit' &&\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\n            events[open][1]._open && // If the sizes are the same:\n            events[index][1].end.offset - events[index][1].start.offset ===\n              events[open][1].end.offset - events[open][1].start.offset\n          ) {\n            events[index][1].type = 'strikethroughSequence'\n            events[open][1].type = 'strikethroughSequence'\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            }\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            } // Opening.\n\n            const nextEvents = [\n              ['enter', strikethrough, context],\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context],\n              ['enter', text, context]\n            ] // Between.\n\n            splice(\n              nextEvents,\n              nextEvents.length,\n              0,\n              resolveAll(\n                context.parser.constructs.insideSpan.null,\n                events.slice(open + 1, index),\n                context\n              )\n            ) // Closing.\n\n            splice(nextEvents, nextEvents.length, 0, [\n              ['exit', text, context],\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context],\n              ['exit', strikethrough, context]\n            ])\n            splice(events, open - 1, index - open + 3, nextEvents)\n            index = open + nextEvents.length - 2\n            break\n          }\n        }\n      }\n    }\n\n    index = -1\n\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = 'data'\n      }\n    }\n\n    return events\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous\n    const events = this.events\n    let size = 0\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      if (\n        previous === 126 &&\n        events[events.length - 1][1].type !== 'characterEscape'\n      ) {\n        return nok(code)\n      }\n\n      effects.enter('strikethroughSequenceTemporary')\n      return more(code)\n    }\n    /** @type {State} */\n\n    function more(code) {\n      const before = classifyCharacter(previous)\n\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code)\n        effects.consume(code)\n        size++\n        return more\n      }\n\n      if (size < 2 && !single) return nok(code)\n      const token = effects.exit('strikethroughSequenceTemporary')\n      const after = classifyCharacter(code)\n      token._open = !after || (after === 2 && Boolean(before))\n      token._close = !before || (before === 2 && Boolean(after))\n      return ok(code)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}