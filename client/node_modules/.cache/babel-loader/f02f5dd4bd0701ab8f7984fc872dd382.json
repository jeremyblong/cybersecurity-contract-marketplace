{"ast":null,"code":"var _jsxFileName = \"/home/kali/Documents/cybersecurity/client/src/components/dashboard/softwareHardwareExchanges/software/createListing/multiStepPages/pageFour/helpers/mainHelperFunctions.js\";\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport Slider from \"react-slick\";\nimport FileViewer from 'react-file-viewer';\nimport \"../styles.css\";\n\nconst renderSupportDetails = option => {\n  const renderHelper = () => {\n    if (option.supportProvidedExternalURL === true) {\n      return `and it is available via a support URL at ${option.supportExternalURL}!`;\n    } else {\n      return \"!\";\n    }\n  }; // render and return related support details into main helper function ---- <p>{category.label}</p>\n\n\n  if (option.supportProvidedExternalURL === true) {\n    // support URL exists and supported\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }\n    }, option.supportProvidedExternalURL, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }\n    }, \"Support \", /*#__PURE__*/React.createElement(\"strong\", {\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 28\n      }\n    }, \"IS PROVIDED\"), \" with this listing \", renderHelper()));\n  } else {\n    // support URL does NOT exist - no support\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 20\n      }\n    }, \"NO\"), \" support is provided with this listing.\"));\n  }\n};\n\nconst ReactSlickSliderUploadedPublicFilesHelper = _ref => {\n  let {\n    uploadedPublicFiles\n  } = _ref;\n  const [activeFileArray, setActiveFileArray] = useState([]);\n  const [ready, setReady] = useState(false);\n\n  const calculateFileType = type => {\n    switch (type) {\n      case \"video/mp4\":\n        return \"mp4\";\n        break;\n\n      case \"image/png\":\n        return \"png\";\n        break;\n\n      case \"image/jpeg\":\n        return \"jpeg\";\n        break;\n\n      case \"image/gif\":\n        return \"gif\";\n        break;\n\n      case \"image/bmp\":\n        return \"bmp\";\n        break;\n\n      case \"application/pdf\":\n        return \"pdf\";\n        break;\n\n      case \"text/csv\":\n        return \"csv\";\n        break;\n\n      case \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\":\n        return \"xlsx\";\n        break;\n\n      case \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\":\n        return \"docx\";\n        break;\n\n      case \"video/webm\":\n        return \"webm\";\n        break;\n\n      case \"audio/mpeg\":\n        return \"mp3\";\n        break;\n\n      case \"text/plain\":\n        return \"text-document\";\n        break;\n\n      case \"application/vnd.debian.binary-package\":\n        return \"deb\";\n        break;\n\n      case \"application/octet-stream\":\n        return \"exe\";\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"mounted mainHelperFunctions.js REVIEW page...!\");\n    const newFileArrayUpdated = []; // loop over files and update if displayable\n\n    if (typeof uploadedPublicFiles !== \"undefined\" && uploadedPublicFiles.length > 0) {\n      for (let index = 0; index < uploadedPublicFiles.length; index++) {\n        const file = uploadedPublicFiles[index]; // retreieve converted/calculated file type\n\n        const calculatedType = calculateFileType(file.type); // check if certain doc types\n\n        if (calculatedType === \"text-document\" || calculatedType === \"deb\" || calculatedType === \"exe\") {\n          if (calculatedType !== \"deb\" || calculatedType !== \"exe\") {\n            // NOT any matches - text-document only --- for now\n            newFileArrayUpdated.push({ ...file,\n              type: file.type,\n              notSupported: true\n            });\n          } else {\n            // FILE is one of these... ---- ~ deb OR exe ~\n            newFileArrayUpdated.push({ ...file,\n              type: \"not-displayable\",\n              notSupported: true\n            });\n          }\n        } else {\n          // dont do anything\n          newFileArrayUpdated.push({ ...file,\n            type: file.type,\n            notSupported: false\n          });\n        }\n      }\n    }\n\n    ; // set new updated data to new array to map over\n\n    setActiveFileArray(newFileArrayUpdated); // set as ready to allow display\n\n    setReady(true);\n  }, []);\n  const settings = {\n    dots: true,\n    infinite: true,\n    speed: 500,\n    slidesToShow: 1,\n    slidesToScroll: 1\n  };\n\n  const onError = error => {\n    console.log(\"error\", error);\n  };\n\n  const readFileAndDisplay = file => {\n    // create reader\n    const reader = new FileReader(); // create blob to cover all browsers\n\n    const ff = new Blob(file, {\n      type: 'text/plain'\n    }); // onLoad logic run\n\n    reader.onload = async e => {\n      // loaded...\n      console.log(\"reader.onload loaded!\");\n    };\n\n    return reader.readAsText(ff);\n  };\n\n  const calculateWhatToDisplayNotSupported = file => {\n    if (calculateFileType(file.type) === \"text-document\") {\n      return readFileAndDisplay(file);\n    } else if (calculateFileType(file.type) === \"exe\" || calculateFileType(file.type) === \"deb\") {\n      return /*#__PURE__*/React.createElement(\"i\", {\n        className: `fa fa-file-text-o txt-success`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 20\n        }\n      });\n    } else {\n      console.log(\"no match.\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Slider, Object.assign({}, settings, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }\n  }), ready === true ? activeFileArray.map((file, index) => {\n    console.log(\"ACTUAL file : \", file);\n    const filePathData = `${process.env.REACT_APP_ASSET_LINK}/${file.link}`;\n    return /*#__PURE__*/React.createElement(Fragment, {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"fileviewer-wrapper-slider\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 29\n      }\n    }, file.notSupported === true ? calculateWhatToDisplayNotSupported(file) : /*#__PURE__*/React.createElement(FileViewer, {\n      fileType: calculateFileType(file.type),\n      filePath: filePathData,\n      onError: onError,\n      className: \"file-viewer-component-slider\",\n      key: file.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 106\n      }\n    })));\n  }) : null));\n};\n\nexport default {\n  renderSupportDetails,\n  ReactSlickSliderUploadedPublicFilesHelper\n};","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/softwareHardwareExchanges/software/createListing/multiStepPages/pageFour/helpers/mainHelperFunctions.js"],"names":["React","Fragment","useState","useEffect","Slider","FileViewer","renderSupportDetails","option","renderHelper","supportProvidedExternalURL","supportExternalURL","color","ReactSlickSliderUploadedPublicFilesHelper","uploadedPublicFiles","activeFileArray","setActiveFileArray","ready","setReady","calculateFileType","type","console","log","newFileArrayUpdated","length","index","file","calculatedType","push","notSupported","settings","dots","infinite","speed","slidesToShow","slidesToScroll","onError","error","readFileAndDisplay","reader","FileReader","ff","Blob","onload","e","readAsText","calculateWhatToDisplayNotSupported","map","filePathData","process","env","REACT_APP_ASSET_LINK","link","id"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\nimport Slider from \"react-slick\";\nimport FileViewer from 'react-file-viewer';\nimport \"../styles.css\";\n\nconst renderSupportDetails = (option) => {\n    const renderHelper = () => {\n        if (option.supportProvidedExternalURL === true) {\n            return `and it is available via a support URL at ${option.supportExternalURL}!`\n        } else {\n            return \"!\";\n        }\n    }\n    // render and return related support details into main helper function ---- <p>{category.label}</p>\n    if (option.supportProvidedExternalURL === true) {\n        // support URL exists and supported\n        return (\n            <Fragment>{option.supportProvidedExternalURL}\n                <p>Support <strong style={{ color: \"red\" }}>IS PROVIDED</strong> with this listing {renderHelper()}</p>\n            </Fragment>\n        );\n    } else {\n        // support URL does NOT exist - no support\n        return (\n            <Fragment>\n                <p><strong style={{ color: \"red\" }}>NO</strong> support is provided with this listing.</p>\n            </Fragment>\n        );\n    }\n}\n\nconst ReactSlickSliderUploadedPublicFilesHelper = ({ uploadedPublicFiles }) => {\n\n    const [ activeFileArray, setActiveFileArray ] = useState([]);\n    const [ ready, setReady ] = useState(false);\n\n    const calculateFileType = (type) => {\n        switch (type) {\n            case \"video/mp4\":\n                return \"mp4\";\n                break;\n            case \"image/png\":\n                return \"png\";\n                break;\n            case \"image/jpeg\":\n                return \"jpeg\";\n                break;\n            case \"image/gif\":\n                return \"gif\";\n                break;\n            case \"image/bmp\":\n                return \"bmp\";\n                break;\n            case \"application/pdf\":\n                return \"pdf\";\n                break;\n            case \"text/csv\":\n                return \"csv\";\n                break;\n            case \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\":\n                return \"xlsx\";\n                break;\n            case \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\":\n                return \"docx\";\n                break;\n            case \"video/webm\":\n                return \"webm\";\n                break;\n            case \"audio/mpeg\":\n                return \"mp3\";\n                break;\n            case \"text/plain\":\n                return \"text-document\";\n                break;\n            case \"application/vnd.debian.binary-package\": \n                return \"deb\";\n                break;\n            case \"application/octet-stream\":\n                return \"exe\"\n                break;\n            default:\n                break;\n        }\n    }\n\n    useEffect(() => {\n        console.log(\"mounted mainHelperFunctions.js REVIEW page...!\");\n\n        const newFileArrayUpdated = [];\n\n        // loop over files and update if displayable\n        if (typeof uploadedPublicFiles !== \"undefined\" && uploadedPublicFiles.length > 0) {\n            for (let index = 0; index < uploadedPublicFiles.length; index++) {\n                const file = uploadedPublicFiles[index];\n                // retreieve converted/calculated file type\n                const calculatedType = calculateFileType(file.type);\n                // check if certain doc types\n                if ((calculatedType === \"text-document\") || (calculatedType === \"deb\") || (calculatedType === \"exe\")) {\n                    if ((calculatedType !== \"deb\") || (calculatedType !== \"exe\")) {\n                        // NOT any matches - text-document only --- for now\n                        newFileArrayUpdated.push({\n                            ...file,\n                            type: file.type,\n                            notSupported: true\n                        })\n                    } else {\n                        // FILE is one of these... ---- ~ deb OR exe ~\n                        newFileArrayUpdated.push({\n                            ...file,\n                            type: \"not-displayable\",\n                            notSupported: true\n                        })\n                    }\n                } else {\n                    // dont do anything\n                    newFileArrayUpdated.push({\n                        ...file,\n                        type: file.type,\n                        notSupported: false\n                    })\n                }\n            }\n        };\n        // set new updated data to new array to map over\n        setActiveFileArray(newFileArrayUpdated);\n        // set as ready to allow display\n        setReady(true);\n    }, []);\n\n    const settings = {\n        dots: true,\n        infinite: true,\n        speed: 500,\n        slidesToShow: 1,\n        slidesToScroll: 1\n    };\n    const onError = (error) => {\n        console.log(\"error\", error);\n    }\n    const readFileAndDisplay = (file) => {\n        // create reader\n        const reader = new FileReader()\n        // create blob to cover all browsers\n        const ff = new Blob(file, { type: 'text/plain' });\n        // onLoad logic run\n        reader.onload = async (e) => { \n            // loaded...\n            console.log(\"reader.onload loaded!\");\n        };\n        return reader.readAsText(ff)\n    }\n    const calculateWhatToDisplayNotSupported = (file) => {\n        if (calculateFileType(file.type) === \"text-document\") {\n            return readFileAndDisplay(file);\n        } else if ((calculateFileType(file.type) === \"exe\") || (calculateFileType(file.type) === \"deb\")) {\n            return <i className={`fa fa-file-text-o txt-success`}></i>;\n        } else {\n            console.log(\"no match.\");  \n        }\n    }\n    return (\n        <Fragment>\n            <Slider {...settings}>{/* \"text-document\" */}\n                {ready === true ? activeFileArray.map((file, index) => {\n                    console.log(\"ACTUAL file : \", file);\n\n                    const filePathData = `${process.env.REACT_APP_ASSET_LINK}/${file.link}`;\n                    return (\n                        <Fragment key={index}>\n                            <div className=\"fileviewer-wrapper-slider\">\n                                {file.notSupported === true ? calculateWhatToDisplayNotSupported(file) : <FileViewer\n                                    fileType={calculateFileType(file.type)}\n                                    filePath={filePathData}\n                                    onError={onError}\n                                    className={\"file-viewer-component-slider\"}\n                                    key={file.id}\n                                />}\n                            </div>\n                        </Fragment>\n                    );\n                }) : null}\n            </Slider>\n        </Fragment>\n    );\n}\n\nexport default {\n    renderSupportDetails,\n    ReactSlickSliderUploadedPublicFilesHelper\n};"]},"metadata":{},"sourceType":"module"}