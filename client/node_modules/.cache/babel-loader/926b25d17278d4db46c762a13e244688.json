{"ast":null,"code":"'use strict';\n\nvar getMediaSections = require('./').getMediaSections;\n/**\n * An {@link TrackMatcher} matches an RTCTrackEvent with a MediaStreamTrack\n * ID based on the MID of the underlying RTCRtpTransceiver.\n */\n\n\nvar TrackMatcher =\n/** @class */\nfunction () {\n  /**\n   * Construct an {@link TrackMatcher}.\n   */\n  function TrackMatcher() {\n    Object.defineProperties(this, {\n      _midsToTrackIds: {\n        value: new Map(),\n        writable: true\n      }\n    });\n  }\n  /**\n   * Match a given MediaStreamTrack with its ID.\n   * @param {RTCTrackEvent} event\n   * @returns {?Track.ID}\n   */\n\n\n  TrackMatcher.prototype.match = function (event) {\n    return this._midsToTrackIds.get(event.transceiver.mid) || null;\n  };\n  /**\n   * Update the {@link TrackMatcher} with a new SDP.\n   * @param {string} sdp\n   */\n\n\n  TrackMatcher.prototype.update = function (sdp) {\n    var sections = getMediaSections(sdp, '(audio|video)');\n    this._midsToTrackIds = sections.reduce(function (midsToTrackIds, section) {\n      var midMatches = section.match(/^a=mid:(.+)$/m) || [];\n      var trackIdMatches = section.match(/^a=msid:.+ (.+)$/m) || [];\n      var mid = midMatches[1];\n      var trackId = trackIdMatches[1];\n      return mid && trackId ? midsToTrackIds.set(mid, trackId) : midsToTrackIds;\n    }, this._midsToTrackIds);\n  };\n\n  return TrackMatcher;\n}();\n\nmodule.exports = TrackMatcher;","map":{"version":3,"sources":["../../../lib/util/sdp/trackmatcher.js"],"names":[],"mappings":"AAAA;;AAEQ,IAAA,gBAAgB,GAAK,OAAO,CAAC,IAAD,CAAP,CAAL,gBAAhB;AAER;;;AAGG;;;AACH,IAAA,YAAA;AAAA;AAAA,YAAA;AACE;;AAEG;AACH,WAAA,YAAA,GAAA;AACE,IAAA,MAAM,CAAC,gBAAP,CAAwB,IAAxB,EAA8B;AAC5B,MAAA,eAAe,EAAE;AACf,QAAA,KAAK,EAAE,IAAI,GAAJ,EADQ;AAEf,QAAA,QAAQ,EAAE;AAFK;AADW,KAA9B;AAMD;AAED;;;;AAIG;;;AACH,EAAA,YAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAAM,KAAN,EAAW;AACT,WAAO,KAAK,eAAL,CAAqB,GAArB,CAAyB,KAAK,CAAC,WAAN,CAAkB,GAA3C,KAAmD,IAA1D;AACD,GAFD;AAIA;;;AAGG;;;AACH,EAAA,YAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,GAAP,EAAU;AACR,QAAM,QAAQ,GAAG,gBAAgB,CAAC,GAAD,EAAM,eAAN,CAAjC;AACA,SAAK,eAAL,GAAuB,QAAQ,CAAC,MAAT,CAAgB,UAAC,cAAD,EAAiB,OAAjB,EAAwB;AAC7D,UAAM,UAAU,GAAG,OAAO,CAAC,KAAR,CAAc,eAAd,KAAkC,EAArD;AACA,UAAM,cAAc,GAAG,OAAO,CAAC,KAAR,CAAc,mBAAd,KAAsC,EAA7D;AACA,UAAM,GAAG,GAAG,UAAU,CAAC,CAAD,CAAtB;AACA,UAAM,OAAO,GAAG,cAAc,CAAC,CAAD,CAA9B;AACA,aAAO,GAAG,IAAI,OAAP,GAAiB,cAAc,CAAC,GAAf,CAAmB,GAAnB,EAAwB,OAAxB,CAAjB,GAAoD,cAA3D;AACD,KANsB,EAMpB,KAAK,eANe,CAAvB;AAOD,GATD;;AAUF,SAAA,YAAA;AAAC,CApCD,EAAA;;AAsCA,MAAM,CAAC,OAAP,GAAiB,YAAjB","sourceRoot":"","sourcesContent":["'use strict';\nvar getMediaSections = require('./').getMediaSections;\n/**\n * An {@link TrackMatcher} matches an RTCTrackEvent with a MediaStreamTrack\n * ID based on the MID of the underlying RTCRtpTransceiver.\n */\nvar TrackMatcher = /** @class */ (function () {\n    /**\n     * Construct an {@link TrackMatcher}.\n     */\n    function TrackMatcher() {\n        Object.defineProperties(this, {\n            _midsToTrackIds: {\n                value: new Map(),\n                writable: true\n            }\n        });\n    }\n    /**\n     * Match a given MediaStreamTrack with its ID.\n     * @param {RTCTrackEvent} event\n     * @returns {?Track.ID}\n     */\n    TrackMatcher.prototype.match = function (event) {\n        return this._midsToTrackIds.get(event.transceiver.mid) || null;\n    };\n    /**\n     * Update the {@link TrackMatcher} with a new SDP.\n     * @param {string} sdp\n     */\n    TrackMatcher.prototype.update = function (sdp) {\n        var sections = getMediaSections(sdp, '(audio|video)');\n        this._midsToTrackIds = sections.reduce(function (midsToTrackIds, section) {\n            var midMatches = section.match(/^a=mid:(.+)$/m) || [];\n            var trackIdMatches = section.match(/^a=msid:.+ (.+)$/m) || [];\n            var mid = midMatches[1];\n            var trackId = trackIdMatches[1];\n            return mid && trackId ? midsToTrackIds.set(mid, trackId) : midsToTrackIds;\n        }, this._midsToTrackIds);\n    };\n    return TrackMatcher;\n}());\nmodule.exports = TrackMatcher;\n//# sourceMappingURL=trackmatcher.js.map"]},"metadata":{},"sourceType":"script"}