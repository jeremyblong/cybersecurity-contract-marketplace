{"ast":null,"code":"var _jsxFileName = \"/home/kali/Documents/cybersecurity/client/src/route/protected/protectedRoute.js\";\nimport React, { useContext, createContext } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport _ from \"lodash\";\nimport ReactLoading from 'react-loading';\n\nclass ProtectedRoute extends React.Component {\n  render() {\n    console.log(\"props!\", this.props);\n    const {\n      user,\n      isLoading\n    } = useContext(createContext(null));\n    const {\n      component: Component,\n      ...rest\n    } = this.props;\n\n    if (isLoading) {\n      return /*#__PURE__*/React.createElement(ReactLoading, {\n        type: \"cubes\",\n        color: \"#00acee\",\n        height: 350,\n        width: 650,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 20\n        }\n      });\n    }\n\n    if (user) {\n      return /*#__PURE__*/React.createElement(Route, Object.assign({}, rest, {\n        render: props => /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 18\n          }\n        })),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 22\n        }\n      }));\n    } // redirect if there is no user \n\n\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 16\n      }\n    });\n  }\n\n}\n\nconst mapStateToProps = state => {\n  console.log(\"State protected... :\", state);\n  return {\n    userData: state.auth.data\n  };\n};\n\nexport default connect(mapStateToProps, {})(ProtectedRoute);","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/route/protected/protectedRoute.js"],"names":["React","useContext","createContext","Route","Redirect","connect","_","ReactLoading","ProtectedRoute","Component","render","console","log","props","user","isLoading","component","rest","mapStateToProps","state","userData","auth","data"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,aAA5B,QAAiD,OAAjD;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,YAAP,MAAyB,eAAzB;;AAEA,MAAMC,cAAN,SAA6BR,KAAK,CAACS,SAAnC,CAA6C;AACzCC,EAAAA,MAAM,GAAG;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsB,KAAKC,KAA3B;AAEA,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAsBd,UAAU,CAACC,aAAa,CAAC,IAAD,CAAd,CAAtC;AACA,UAAM;AAAEc,MAAAA,SAAS,EAAEP,SAAb;AAAwB,SAAGQ;AAA3B,QAAoC,KAAKJ,KAA/C;;AAEA,QAAGE,SAAH,EAAc;AACV,0BAAO,oBAAC,YAAD;AAAc,QAAA,IAAI,EAAE,OAApB;AAA6B,QAAA,KAAK,EAAE,SAApC;AAA+C,QAAA,MAAM,EAAE,GAAvD;AAA4D,QAAA,KAAK,EAAE,GAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH;;AACD,QAAGD,IAAH,EAAQ;AACJ,0BAAS,oBAAC,KAAD,oBAAWG,IAAX;AAAiB,QAAA,MAAM,EAAGJ,KAAD,iBAC7B,oBAAC,SAAD,oBAAeA,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAT;AAKH,KAfI,CAeD;;;AACJ,wBAAO,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;;AAlBwC;;AAoB7C,MAAMK,eAAe,GAAIC,KAAD,IAAW;AAC/BR,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCO,KAApC;AACA,SAAO;AACLC,IAAAA,QAAQ,EAAED,KAAK,CAACE,IAAN,CAAWC;AADhB,GAAP;AAGH,CALD;;AAMA,eAAejB,OAAO,CAACa,eAAD,EAAkB,EAAlB,CAAP,CAA8BV,cAA9B,CAAf","sourcesContent":["import React, { useContext, createContext } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport _ from \"lodash\";\nimport ReactLoading from 'react-loading';\n\nclass ProtectedRoute extends React.Component {\n    render() {\n        console.log(\"props!\", this.props);\n\n        const { user, isLoading } = useContext(createContext(null));\n        const { component: Component, ...rest } = this.props;\n\n        if(isLoading) {\n            return <ReactLoading type={\"cubes\"} color={\"#00acee\"} height={350} width={650} />;\n        }   \n        if(user){\n            return ( <Route {...rest} render={(props) => \n                (<Component {...props}/>)\n                    }\n                />\n            )\n        }   // redirect if there is no user \n        return <Redirect to='/login' />\n    }\n}\nconst mapStateToProps = (state) => {\n    console.log(\"State protected... :\", state);\n    return {\n      userData: state.auth.data\n    }\n}\nexport default connect(mapStateToProps, { })(ProtectedRoute);"]},"metadata":{},"sourceType":"module"}