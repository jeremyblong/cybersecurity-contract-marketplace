{"ast":null,"code":"import React, { Component } from 'react';\nimport * as SendBird from \"sendbird\";\nimport { connect } from \"react-redux\";\nimport { saveSendbirdInitialData } from \"./redux/actions/messaging/initialization/initSBLogic.js\";\nimport _ from \"lodash\";\n\nconst returnSendbirdObj = signedIn => {\n  return new SendBird({\n    appId: process.env.REACT_APP_SENDBIRD_APP_ID,\n    localCacheEnabled: signedIn\n  });\n};\n\nclass MountingLogicRedux extends Component {\n  constructor(props) {\n    super(props);\n\n    this.renderOnceUpdateProfileSendbirdInfo = () => {\n      // deconstruct\n      const {\n        authenticated,\n        accountData,\n        SBData,\n        saveSendbirdInitialData\n      } = this.props; // reverse array to get MOST recent array item\n\n      if (typeof accountData.profilePicsVideos !== \"undefined\" && accountData.profilePicsVideos.length > 0) {\n        const reversed = accountData.profilePicsVideos.reverse();\n        console.log(\"SBData\", SBData);\n\n        if (SBData !== null && SBData.currentUser !== null) {\n          for (let index = 0; index < reversed.length; index++) {\n            const item = reversed[index]; // check if image\n\n            if (item.type.includes(\"image\")) {\n              // create SB (sendbird) core-obj-data\n              const sb = returnSendbirdObj(authenticated); // data to be given to sendbird\n\n              const fullName = `${accountData.firstName} ${accountData.lastName}`;\n              const profilePicture = `${process.env.REACT_APP_ASSET_LINK}/${item.link}`; // update profile information - SENDBIRD related...\n\n              sb.updateCurrentUserInfo(fullName, profilePicture, (response, error) => {\n                if (error) {\n                  // Handle error.\n                  console.log(\"error while updating to lastest info!\", error);\n                } else {\n                  console.log(\"SUCCESSFULLY updated profile sendbird information!\", response);\n                }\n              });\n              break;\n            } else {\n              if (reversed.length - 1 === index) {\n                // create SB (sendbird) core-obj-data\n                const sb = returnSendbirdObj(authenticated); // data to be given to sendbird\n\n                const fullName = `${accountData.firstName} ${accountData.lastName}`;\n                const profilePicture = `${process.env.REACT_APP_PLACEHOLDER_IMAGE}`; // update profile information - SENDBIRD related...\n\n                sb.updateCurrentUserInfo(fullName, profilePicture, (response, error) => {\n                  if (error) {\n                    // Handle error.\n                    console.log(\"error while updating to lastest info!\", error);\n                  } else {\n                    console.log(\"SUCCESSFULLY updated profile sendbird information!\", response);\n                  }\n                }); // looped thru array of images/videos and couldnt find a picture file\n              }\n            }\n          }\n        } else {\n          saveSendbirdInitialData(returnSendbirdObj(true));\n        }\n      } else {\n        console.log(\"SBData\", SBData);\n\n        if (SBData !== null && SBData.currentUser !== null) {\n          // create SB (sendbird) core-obj-data\n          const sb = returnSendbirdObj(authenticated); // data to be given to sendbird\n\n          const fullName = `${accountData.firstName} ${accountData.lastName}`;\n          const profilePicture = `${process.env.REACT_APP_PLACEHOLDER_IMAGE}`; // update profile information - SENDBIRD related...\n\n          sb.updateCurrentUserInfo(fullName, profilePicture, (response, error) => {\n            if (error) {\n              // Handle error.\n              console.log(\"error while updating to lastest info!\", error);\n            } else {\n              console.log(\"SUCCESSFULLY updated profile sendbird information!\", response);\n            }\n          });\n        } else {\n          saveSendbirdInitialData(returnSendbirdObj(true));\n        }\n      }\n    };\n\n    this.state = {\n      profilePic: \"\",\n      updatedAlready: false\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      saveSendbirdInitialData,\n      authenticated,\n      SBData\n    } = this.props;\n\n    if (prevProps.SBData !== SBData) {\n      console.log(\"prevProps\", prevProps, prevState, SBData);\n      saveSendbirdInitialData(returnSendbirdObj(authenticated));\n    }\n  }\n\n  render() {\n    const {\n      authenticated,\n      accountData\n    } = this.props;\n    const {\n      updatedAlready\n    } = this.state; // run other SENDBIRD Logic init\n\n    if (authenticated === true) {\n      // create sendbird data obj\n      const sb = returnSendbirdObj(authenticated);\n      console.log(\"validating - connecting user MESSAGING logic...\", sb);\n      sb.connect(accountData.uniqueId, (user, error) => {\n        if (error) {\n          // Handle error.\n          console.log(\"Messaging connection error... :\", error);\n        } // The user is connected to Sendbird server.\n\n\n        console.log(`The user - ${accountData.uniqueId} - is connected to Sendbird server`, user);\n\n        if (!updatedAlready) {\n          this.renderOnceUpdateProfileSendbirdInfo();\n        }\n      });\n    }\n\n    return null;\n  }\n\n}\n\nconst mapStateToProps = state => {\n  console.log(\"Stateeeeeee\", state);\n  return {\n    authenticated: _.has(state.auth.data, \"accountType\") ? true : false,\n    accountData: state.auth.data,\n    SBData: _.has(state.sendbirdInitData, \"sendbirdInitData\") ? state.sendbirdInitData.sendbirdInitData : null\n  };\n};\n\nexport default connect(mapStateToProps, {\n  saveSendbirdInitialData\n})(MountingLogicRedux);","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/mountingLogicRedux.js"],"names":["React","Component","SendBird","connect","saveSendbirdInitialData","_","returnSendbirdObj","signedIn","appId","process","env","REACT_APP_SENDBIRD_APP_ID","localCacheEnabled","MountingLogicRedux","constructor","props","renderOnceUpdateProfileSendbirdInfo","authenticated","accountData","SBData","profilePicsVideos","length","reversed","reverse","console","log","currentUser","index","item","type","includes","sb","fullName","firstName","lastName","profilePicture","REACT_APP_ASSET_LINK","link","updateCurrentUserInfo","response","error","REACT_APP_PLACEHOLDER_IMAGE","state","profilePic","updatedAlready","componentDidUpdate","prevProps","prevState","render","uniqueId","user","mapStateToProps","has","auth","data","sendbirdInitData"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as SendBird from \"sendbird\";\nimport { connect } from \"react-redux\";\nimport { saveSendbirdInitialData } from \"./redux/actions/messaging/initialization/initSBLogic.js\";\nimport _ from \"lodash\";\n\n\nconst returnSendbirdObj = (signedIn) => {\n    return new SendBird({ appId: process.env.REACT_APP_SENDBIRD_APP_ID, localCacheEnabled: signedIn });\n}\n\nclass MountingLogicRedux extends Component {\nconstructor(props) {\n    super(props);\n\n    this.state = {\n        profilePic: \"\",\n        updatedAlready: false\n    }\n}\n    componentDidUpdate(prevProps, prevState) {\n        const { saveSendbirdInitialData, authenticated, SBData } = this.props;\n\n        if (prevProps.SBData !== SBData) {\n            console.log(\"prevProps\", prevProps, prevState, SBData);\n\n            saveSendbirdInitialData(returnSendbirdObj(authenticated));\n        }\n    }\n    renderOnceUpdateProfileSendbirdInfo = () => {\n        // deconstruct\n        const { authenticated, accountData, SBData, saveSendbirdInitialData } = this.props;\n        // reverse array to get MOST recent array item\n        if (typeof accountData.profilePicsVideos !== \"undefined\" && accountData.profilePicsVideos.length > 0) {\n            const reversed = accountData.profilePicsVideos.reverse();\n\n            console.log(\"SBData\", SBData);\n\n            if (SBData !== null && SBData.currentUser !== null) {\n                for (let index = 0; index < reversed.length; index++) {\n                    const item = reversed[index];\n                    // check if image\n                    if (item.type.includes(\"image\")) {\n                        // create SB (sendbird) core-obj-data\n                        const sb = returnSendbirdObj(authenticated);\n                        // data to be given to sendbird\n                        const fullName = `${accountData.firstName} ${accountData.lastName}`;\n                        const profilePicture = `${process.env.REACT_APP_ASSET_LINK}/${item.link}`;\n                    // update profile information - SENDBIRD related...\n                        sb.updateCurrentUserInfo(fullName, profilePicture, (response, error) => {\n                            if (error) {\n                                // Handle error.\n                                console.log(\"error while updating to lastest info!\", error);\n                            } else {\n                                console.log(\"SUCCESSFULLY updated profile sendbird information!\", response);\n                            }\n                        });\n                        break;\n                    } else {\n                        if ((reversed.length - 1) === index) {\n                            // create SB (sendbird) core-obj-data\n                            const sb = returnSendbirdObj(authenticated);\n                            // data to be given to sendbird\n                            const fullName = `${accountData.firstName} ${accountData.lastName}`;\n                            const profilePicture = `${process.env.REACT_APP_PLACEHOLDER_IMAGE}`;\n                            // update profile information - SENDBIRD related...\n                            sb.updateCurrentUserInfo(fullName, profilePicture, (response, error) => {\n                                if (error) {\n                                    // Handle error.\n                                    console.log(\"error while updating to lastest info!\", error);\n                                } else {\n                                    console.log(\"SUCCESSFULLY updated profile sendbird information!\", response);\n                                }\n                            });\n                            // looped thru array of images/videos and couldnt find a picture file\n                        }\n                    }\n                }\n            } else {\n                saveSendbirdInitialData(returnSendbirdObj(true))\n            }\n        } else {\n            console.log(\"SBData\", SBData);\n\n            if (SBData !== null && SBData.currentUser !== null) {\n                // create SB (sendbird) core-obj-data\n                const sb = returnSendbirdObj(authenticated);\n                // data to be given to sendbird\n                const fullName = `${accountData.firstName} ${accountData.lastName}`;\n                const profilePicture = `${process.env.REACT_APP_PLACEHOLDER_IMAGE}`;\n                // update profile information - SENDBIRD related...\n                sb.updateCurrentUserInfo(fullName, profilePicture, (response, error) => {\n                    if (error) {\n                        // Handle error.\n                        console.log(\"error while updating to lastest info!\", error);\n                    } else {\n                        console.log(\"SUCCESSFULLY updated profile sendbird information!\", response);\n                    }\n                });\n            } else {\n                saveSendbirdInitialData(returnSendbirdObj(true))\n            }\n        }\n    }\n    render () {\n        const { authenticated, accountData } = this.props;\n        const { updatedAlready } = this.state;\n        // run other SENDBIRD Logic init\n        if (authenticated === true) {\n            // create sendbird data obj\n            const sb = returnSendbirdObj(authenticated);\n            \n            console.log(\"validating - connecting user MESSAGING logic...\", sb);\n            \n            sb.connect(accountData.uniqueId, (user, error) => {\n                if (error) {\n                    // Handle error.\n                    console.log(\"Messaging connection error... :\", error);\n                }\n                // The user is connected to Sendbird server.\n                console.log(`The user - ${accountData.uniqueId} - is connected to Sendbird server`, user);\n\n                if (!updatedAlready) {\n                    this.renderOnceUpdateProfileSendbirdInfo();\n                } \n            });\n        }\n        return null;\n    }\n}\nconst mapStateToProps = (state) => {\n    console.log(\"Stateeeeeee\", state);\n    return {\n        authenticated: _.has(state.auth.data, \"accountType\") ? true : false,\n        accountData: state.auth.data,\n        SBData: _.has(state.sendbirdInitData, \"sendbirdInitData\") ? state.sendbirdInitData.sendbirdInitData : null\n    }\n}\nexport default connect(mapStateToProps, { saveSendbirdInitialData })(MountingLogicRedux);"]},"metadata":{},"sourceType":"module"}