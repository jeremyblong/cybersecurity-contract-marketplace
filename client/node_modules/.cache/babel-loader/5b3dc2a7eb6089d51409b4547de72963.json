{"ast":null,"code":"import _objectSpread from \"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\n// helpers logic related to mainly to redux-hook-form\nvar MainHooksCustomHelpers = function MainHooksCustomHelpers() {\n  var calculateWhetherURLIsLegit = function calculateWhetherURLIsLegit(data) {\n    // helper function\n    var isValidHttpUrl = function isValidHttpUrl(string) {\n      var url;\n\n      try {\n        url = new URL(string);\n      } catch (_) {\n        return false;\n      } // return protocol data\n\n\n      return url.protocol === \"http:\" || url.protocol === \"https:\";\n    }; // finally, check if url is VALID\n\n\n    if (isValidHttpUrl(data)) {\n      // url IS VALID\n      return true;\n    } else {\n      // url IS NOT VALID - return error string\n      return false;\n    }\n\n    ;\n  };\n\n  var urlEnteredLinkData = {\n    check: function check(setError, register, clearErrors, setValue, errors, name) {\n      return _objectSpread({}, register(name, {\n        required: {\n          value: true,\n          message: \"You MUST enter a value for this field between 8 and 75 charactors\"\n        },\n        minLength: {\n          value: 8,\n          message: \"You must enter AT Least 8 characters\"\n        },\n        maxLength: {\n          value: 75,\n          message: \"You may ONLY enter 75 characters or less\"\n        },\n        onBlur: function onBlur(e) {\n          // extracted final value from input\n          var value = e.target.value; // check if valid url in helper file.\n\n          var validOrNot = calculateWhetherURLIsLegit(value); // check if valid!\n\n          if (validOrNot === true) {\n            // set value\n            setValue(name, value, {\n              shouldValidate: false\n            }); // clear error after setting proper change state\n\n            setTimeout(function () {\n              // clear error\n              clearErrors(name);\n            }, 75);\n          } else {\n            setTimeout(function () {\n              setError(name, {\n                type: \"manual\",\n                message: \"You MUST enter a VALID URL including http/https and ://\"\n              });\n            }, 75);\n          }\n        }\n      }));\n    },\n    onChange: function onChange(e, name, setValue) {\n      console.log(\"e name val\", e, name, setValue); // deconstruct actual value\n\n      var value = e.target.value;\n      console.log(\"valu\", value); // set state without redux form\n\n      setValue(name, value, {\n        shouldValidate: false\n      });\n    }\n  };\n  var coverLetterChecks = {\n    check: function check(setError, register, clearErrors, name) {\n      return _objectSpread({}, register(name, {\n        required: {\n          value: true,\n          message: \"You MUST enter a value for this field between 50 and 750 charactors\"\n        },\n        minLength: {\n          value: 50,\n          message: \"You must enter AT Least 50 characters\"\n        },\n        maxLength: {\n          value: 750,\n          message: \"You may ONLY enter 750 characters or less\"\n        },\n        onBlur: function onBlur(e) {\n          // deconstruct actual value\n          var value = e.target.value; // deconstruct length\n\n          var len = value.length; // check if both min/max values met\n\n          if (len > 0 && len >= 50 && len <= 750) {\n            // clear error\n            clearErrors(name);\n          } else {\n            // set error\n            setTimeout(function () {\n              setError(name, {\n                type: \"manual\",\n                message: \"You MUST enter between 50 and 750 charectors in total for your cover letter (CV) before proceeding...\"\n              });\n            }, 50);\n          }\n        }\n      }));\n    },\n    onChange: function onChange(e, name, setValue) {\n      // deconstruct actual value\n      var value = e.target.value;\n      setValue(name, value, {\n        shouldValidate: true\n      });\n    },\n    label: \"Cover Letter (CV)\",\n    name: \"coverLetterText\",\n    placeholder: \"Enter your cover letter information (or upload in attachments)...\"\n  };\n  var messageToEmployerChecks = {\n    check: function check(setError, register, clearErrors, setValue, name) {\n      return _objectSpread({}, register(name, {\n        required: {\n          value: true,\n          message: \"You MUST enter a value for this field between 50 and 750 charactors\"\n        },\n        minLength: {\n          value: 50,\n          message: \"You must enter AT Least 50 characters\"\n        },\n        maxLength: {\n          value: 750,\n          message: \"You may ONLY enter 750 characters or less\"\n        },\n        onBlur: function onBlur(e) {\n          // deconstruct actual value\n          var value = e.target.value; // deconstruct length\n\n          var len = value.length; // check if both min/max values met\n\n          if (len > 0 && len >= 50 && len <= 750) {\n            // clear error\n            clearErrors(name);\n          } else {\n            // set error\n            setTimeout(function () {\n              setError(name, {\n                type: \"manual\",\n                message: \"You MUST enter between 50 and 750 charectors total while messaging employer before proceeding...\"\n              });\n            }, 50);\n          }\n        }\n      }));\n    },\n    onChange: function onChange(e, name, setValue) {\n      // deconstruct actual value\n      var value = e.target.value;\n      setValue(name, value, {\n        shouldValidate: true\n      });\n    },\n    label: \"Message To Employer (Direct to employer)\",\n    name: \"messageToEmployer\",\n    placeholder: \"Enter your 'custom' message to the employer...\"\n  };\n  var physicalOrDigitalChecks = {\n    check: function check(name, register) {\n      return _objectSpread({}, register(name, {\n        required: {\n          value: true,\n          message: \"You must select a value/option (digital, physical or both) before proceeding\"\n        }\n      }));\n    },\n    placeholder: \"Select your desired hack type (of enabled options)\",\n    name: \"physicalOrDigitalOrBoth\",\n    label: \"Account Type (Digital/Physical-hack type)\"\n  };\n  var participateInBettingWagers = {\n    check: function check(name, register) {\n      return _objectSpread({}, register(name, {\n        required: {\n          value: true,\n          message: \"You must select a value/option (participate in betting OR not) before proceeding\"\n        }\n      }));\n    },\n    placeholder: \"Select whether or not you'd like to participate in betting/gambling...\",\n    name: \"participateInBettingProcess\",\n    label: \"Would you like to participate in 'betting/waggering' on yourself to WIN more money IF you win the 'hack' or listing competition (WINNER selected by employer at end)\"\n  };\n  var amountWillingToCompleteJob = {\n    check: function check(setError, register, clearErrors, setValue, name) {\n      return _objectSpread({}, register(name, {\n        required: {\n          value: true,\n          message: \"You MUST enter a value BEFORE proceeding regarding how much you're willing to complete this contract for\"\n        },\n        min: {\n          value: 499.99,\n          message: \"You MUST enter a value of AT LEAST $499.99 OR more..\"\n        },\n        onBlur: function onBlur(e) {\n          // deconstruct actual value\n          var value = e.target.value; // check if both min/max values met\n\n          if (value >= 499.99) {\n            // clear error\n            clearErrors(name);\n          } else {\n            // set error\n            setTimeout(function () {\n              setError(name, {\n                type: \"manual\",\n                message: \"You MUST enter a value BEFORE proceeding regarding how much you're willing to complete this contract for as well as entering ONLY NUMERIC charactors!\"\n              });\n            }, 50);\n          }\n        }\n      }));\n    },\n    onChange: function onChange(e, name, setValue) {\n      // deconstruct actual value\n      var value = e.target.value;\n      setValue(name, value, {\n        shouldValidate: true\n      });\n    },\n    label: \"Enter an amount (USD-$) in which you'd be willing to complete this contract for, this should be the total value (excluding associated fee's) that you'd like to recieve upon completion\",\n    name: \"amountOfMoneyUponCompletion\",\n    placeholder: \"Enter a numerical value in USD ($$$) in which you'd be willing to complete this contract...\"\n  };\n  var approachToSuccessfullyHackCo = {\n    check: function check(setError, register, clearErrors, name) {\n      return _objectSpread({}, register(name, {\n        required: {\n          value: true,\n          message: \"You MUST enter a value for this field between 50 and 750 charactors\"\n        },\n        minLength: {\n          value: 50,\n          message: \"You must enter AT Least 50 characters\"\n        },\n        maxLength: {\n          value: 750,\n          message: \"You may ONLY enter 750 characters or less\"\n        },\n        onBlur: function onBlur(e) {\n          console.log(\"blurred/\"); // deconstruct actual value\n\n          var value = e.target.value; // deconstruct length\n\n          var len = value.length; // check if both min/max values met\n\n          if (len > 0 && len >= 50 && len <= 750) {\n            // clear error\n            clearErrors(name);\n          } else {\n            // set error\n            setTimeout(function () {\n              setError(name, {\n                type: \"manual\",\n                message: \"You MUST enter between 50 and 750 charectors total while 'describing your hack ideas' before proceeding...\"\n              });\n            }, 50);\n          }\n        }\n      }));\n    },\n    onChange: function onChange(e, name, setValue) {\n      // deconstruct actual value\n      var value = e.target.value; // set new value\n\n      setValue(name, value, {\n        shouldValidate: true\n      });\n    },\n    label: \"What is your approach to this 'hack'?\",\n    name: \"technicalApproachToHack\",\n    placeholder: \"Enter your 'approach' to how you expect to successfully hack this company... (don't give out your attack methods - just give a general idea - can be very broad - up to you)\"\n  }; // return values to other component\n\n  return {\n    urlEnteredLinkData: urlEnteredLinkData,\n    coverLetterChecks: coverLetterChecks,\n    messageToEmployerChecks: messageToEmployerChecks,\n    physicalOrDigitalChecks: physicalOrDigitalChecks,\n    participateInBettingWagers: participateInBettingWagers,\n    approachToSuccessfullyHackCo: approachToSuccessfullyHackCo,\n    amountWillingToCompleteJob: amountWillingToCompleteJob\n  };\n};\n\nexport default MainHooksCustomHelpers;","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/src/components/dashboard/opportunities/employers/applyToListingHacker/helpers/reactHookFormHelpers.js"],"names":["MainHooksCustomHelpers","calculateWhetherURLIsLegit","data","isValidHttpUrl","string","url","URL","_","protocol","urlEnteredLinkData","check","setError","register","clearErrors","setValue","errors","name","required","value","message","minLength","maxLength","onBlur","e","target","validOrNot","shouldValidate","setTimeout","type","onChange","console","log","coverLetterChecks","len","length","label","placeholder","messageToEmployerChecks","physicalOrDigitalChecks","participateInBettingWagers","amountWillingToCompleteJob","min","approachToSuccessfullyHackCo"],"mappings":"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","sourcesContent":["// helpers logic related to mainly to redux-hook-form\nconst MainHooksCustomHelpers = () => {\n\n    const calculateWhetherURLIsLegit = (data) => {\n        // helper function\n        const isValidHttpUrl = (string) => {\n            let url;\n            \n            try {\n              url = new URL(string);\n            } catch (_) {\n              return false;  \n            }\n            // return protocol data\n            return url.protocol === \"http:\" || url.protocol === \"https:\";\n        }\n        // finally, check if url is VALID\n        if (isValidHttpUrl(data)) {\n            // url IS VALID\n            return true;\n        } else {\n            // url IS NOT VALID - return error string\n            return false;\n        };\n    }\n\n    const urlEnteredLinkData = {\n        check: (setError, register, clearErrors, setValue, errors, name) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: \"You MUST enter a value for this field between 8 and 75 charactors\"\n                }, minLength: {\n                    value: 8,\n                    message: \"You must enter AT Least 8 characters\"\n                }, maxLength: {\n                    value: 75,\n                    message: \"You may ONLY enter 75 characters or less\"\n                }, onBlur: (e) => {\n                    // extracted final value from input\n                    const value = e.target.value;\n                    // check if valid url in helper file.\n                    const validOrNot = calculateWhetherURLIsLegit(value);\n                    // check if valid!\n                    if (validOrNot === true) {\n                        // set value\n                        setValue(name, value, { shouldValidate: false });\n                        // clear error after setting proper change state\n                        setTimeout(() => {\n                            // clear error\n                            clearErrors(name);\n                        }, 75);\n                    } else {\n                        setTimeout(() => {\n                            setError(name, {\n                                type: \"manual\",\n                                message: \"You MUST enter a VALID URL including http/https and ://\",\n                            });\n                        }, 75)\n                    }\n                }})}\n            );\n        },\n        onChange: (e, name, setValue) => {\n            console.log(\"e name val\", e, name, setValue);\n            // deconstruct actual value\n            const value = e.target.value;\n\n            console.log(\"valu\", value);\n            // set state without redux form\n            setValue(name, value, { shouldValidate: false });\n        }\n    };\n    const coverLetterChecks = {\n        check: (setError, register, clearErrors, name) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: \"You MUST enter a value for this field between 50 and 750 charactors\"\n                }, minLength: {\n                    value: 50,\n                    message: \"You must enter AT Least 50 characters\"\n                }, maxLength: {\n                    value: 750,\n                    message: \"You may ONLY enter 750 characters or less\"\n                }, onBlur: (e) => {\n                    // deconstruct actual value\n                    const value = e.target.value;\n                    // deconstruct length\n                    const len = value.length;\n                    // check if both min/max values met\n                    if ((len > 0) && (len >= 50) && (len <= 750)) {\n                        // clear error\n                        clearErrors(name);\n                    } else {\n                        // set error\n                        setTimeout(() => {\n                            setError(name, {\n                                type: \"manual\",\n                                message: \"You MUST enter between 50 and 750 charectors in total for your cover letter (CV) before proceeding...\",\n                            });\n                        }, 50);\n                    }\n                }})}\n            );\n        },\n        onChange: (e, name, setValue) => {\n            // deconstruct actual value\n            const value = e.target.value;\n\n            setValue(name, value, { shouldValidate: true })\n        },\n        label: \"Cover Letter (CV)\",\n        name: \"coverLetterText\",\n        placeholder: \"Enter your cover letter information (or upload in attachments)...\"\n    };\n    const messageToEmployerChecks = {\n        check: (setError, register, clearErrors, setValue, name) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: \"You MUST enter a value for this field between 50 and 750 charactors\"\n                }, minLength: {\n                    value: 50,\n                    message: \"You must enter AT Least 50 characters\"\n                }, maxLength: {\n                    value: 750,\n                    message: \"You may ONLY enter 750 characters or less\"\n                }, onBlur: (e) => {\n                    // deconstruct actual value\n                    const value = e.target.value;\n                    // deconstruct length\n                    const len = value.length;\n                    // check if both min/max values met\n                    if ((len > 0) && (len >= 50) && (len <= 750)) {\n                        // clear error\n                        clearErrors(name);\n                    } else {\n                        // set error\n                        setTimeout(() => {\n                            setError(name, {\n                                type: \"manual\",\n                                message: \"You MUST enter between 50 and 750 charectors total while messaging employer before proceeding...\",\n                            });\n                        }, 50);\n                    }\n                }})}\n            );\n        },\n        onChange: (e, name, setValue) => {\n            // deconstruct actual value\n            const value = e.target.value;\n\n            setValue(name, value, { shouldValidate: true })\n        },\n        label: \"Message To Employer (Direct to employer)\",\n        name: \"messageToEmployer\",\n        placeholder: \"Enter your 'custom' message to the employer...\"\n    };\n    const physicalOrDigitalChecks = {\n        check: (name, register) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: \"You must select a value/option (digital, physical or both) before proceeding\"\n                }})}\n            );\n        },\n        placeholder: \"Select your desired hack type (of enabled options)\",\n        name: \"physicalOrDigitalOrBoth\",\n        label: \"Account Type (Digital/Physical-hack type)\"\n    }\n    const participateInBettingWagers = {\n        check: (name, register) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: \"You must select a value/option (participate in betting OR not) before proceeding\"\n                }})}\n            );\n        },\n        placeholder: \"Select whether or not you'd like to participate in betting/gambling...\",\n        name: \"participateInBettingProcess\",\n        label: \"Would you like to participate in 'betting/waggering' on yourself to WIN more money IF you win the 'hack' or listing competition (WINNER selected by employer at end)\"\n    }\n    const amountWillingToCompleteJob = {\n        check: (setError, register, clearErrors, setValue, name) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: `You MUST enter a value BEFORE proceeding regarding how much you're willing to complete this contract for`\n                }, min: {\n                    value: 499.99,\n                    message: `You MUST enter a value of AT LEAST $499.99 OR more..`\n                }, onBlur: (e) => {\n                    // deconstruct actual value\n                    const value = e.target.value;\n                    // check if both min/max values met\n                    if (value >= 499.99) {\n                        // clear error\n                        clearErrors(name);\n                    } else {\n                        // set error\n                        setTimeout(() => {\n                            setError(name, {\n                                type: \"manual\",\n                                message: `You MUST enter a value BEFORE proceeding regarding how much you're willing to complete this contract for as well as entering ONLY NUMERIC charactors!`,\n                            });\n                        }, 50);\n                    }\n                }})}\n            );\n        },\n        onChange: (e, name, setValue) => {\n            // deconstruct actual value\n            const value = e.target.value;\n\n            setValue(name, value, { shouldValidate: true })\n        },\n        label: `Enter an amount (USD-$) in which you'd be willing to complete this contract for, this should be the total value (excluding associated fee's) that you'd like to recieve upon completion`,\n        name: \"amountOfMoneyUponCompletion\",\n        placeholder: `Enter a numerical value in USD ($$$) in which you'd be willing to complete this contract...`\n    }\n    const approachToSuccessfullyHackCo = {\n        check: (setError, register, clearErrors, name) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: \"You MUST enter a value for this field between 50 and 750 charactors\"\n                }, minLength: {\n                    value: 50,\n                    message: \"You must enter AT Least 50 characters\"\n                }, maxLength: {\n                    value: 750,\n                    message: \"You may ONLY enter 750 characters or less\"\n                }, onBlur: (e) => {\n                    console.log(\"blurred/\");\n                    // deconstruct actual value\n                    const value = e.target.value;\n                    // deconstruct length\n                    const len = value.length;\n                    // check if both min/max values met\n                    if ((len > 0) && (len >= 50) && (len <= 750)) {\n                        // clear error\n                        clearErrors(name);\n                    } else {\n                        // set error\n                        setTimeout(() => {\n                            setError(name, {\n                                type: \"manual\",\n                                message: \"You MUST enter between 50 and 750 charectors total while 'describing your hack ideas' before proceeding...\",\n                            });\n                        }, 50);\n                    }\n                }})}\n            );\n        },\n        onChange: (e, name, setValue) => {\n            // deconstruct actual value\n            const value = e.target.value;\n            // set new value\n            setValue(name, value, { shouldValidate: true })\n        },\n        label: \"What is your approach to this 'hack'?\",\n        name: \"technicalApproachToHack\",\n        placeholder: \"Enter your 'approach' to how you expect to successfully hack this company... (don't give out your attack methods - just give a general idea - can be very broad - up to you)\"\n    }\n    // return values to other component\n    return {\n        urlEnteredLinkData,\n        coverLetterChecks,\n        messageToEmployerChecks,\n        physicalOrDigitalChecks,\n        participateInBettingWagers,\n        approachToSuccessfullyHackCo,\n        amountWillingToCompleteJob\n    }\n}\n\nexport default MainHooksCustomHelpers;"]},"metadata":{},"sourceType":"module"}