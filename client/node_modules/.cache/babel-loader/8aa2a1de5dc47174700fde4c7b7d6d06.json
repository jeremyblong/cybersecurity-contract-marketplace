{"ast":null,"code":"// helpers logic related to mainly to redux-hook-form\nconst HookCourseCreationHelpers=()=>{const subtitleChecks={check:(setError,register)=>{return{...register(\"subtitle\",{required:{value:true,message:\"You MUST enter AT least 25 characters to 160 characters\"},minLength:{value:25,message:\"You must enter AT Least 25 characters\"},maxLength:{value:160,message:\"You may ONLY enter 160 characters or less\"}})};},onChange:(e,setValue)=>{const value=e.target.value;setValue(\"subtitle\",value,{shouldValidate:true});},name:\"subtitle\",placeholder:\"Enter a course 'Sub-Title' for your course...\",type:\"text\",label:\"Enter a course 'Sub-Title' for your course (this will be displayed right under your main description...)\"};const languageSpokenChecks={check:(setError,register,clearErrors)=>{return{...register(\"languageSpoken\",{required:{value:true,message:\"You MUST select a 'Language' option before proceeding forward\"},onBlur:e=>{// current value from this input\nconst value=e.target.value;// timeout to delay for state change(s)\nsetTimeout(()=>{// clear error after proper selection\nif(typeof value!==\"undefined\"&&Object.keys(value).length>0){clearErrors(\"languageSpoken\");}else{// set error as nothing was selected (blank 'click-off' selection of selector)\nsetError(\"languageSpoken\",{type:\"manual\",message:\"You MUST select a 'Language' option before proceeding forward\"});}},50);}})};},onChange:(selectedOption,setValue,clearErrors)=>{setValue(\"languageSpoken\",selectedOption,{shouldValidate:false});setTimeout(()=>{clearErrors(\"languageSpoken\");},75);},name:\"languageSpoken\",placeholder:\"Select a 'Language' type...\",label:\"Select what language your course is spoken/taught with/in\"};const skillLevelChecks={check:(setError,register,clearErrors)=>{return{...register(\"skillLevel\",{required:{value:true,message:\"You MUST select a 'Skill-Level' option before proceeding forward\"},onBlur:e=>{// current value from this input\nconst value=e.target.value;// timeout to delay for state change(s)\nsetTimeout(()=>{// clear error after proper selection\nif(typeof value!==\"undefined\"&&Object.keys(value).length>0){clearErrors(\"skillLevel\");}else{// set error as nothing was selected (blank 'click-off' selection of selector)\nsetError(\"skillLevel\",{type:\"manual\",message:\"You MUST select a 'Skill-Level' option before proceeding forward\"});}},50);}})};},onChange:(selectedOption,setValue,clearErrors)=>{setValue(\"skillLevel\",selectedOption,{shouldValidate:false});setTimeout(()=>{clearErrors(\"skillLevel\");},75);},name:\"skillLevel\",placeholder:\"Select a 'Skill Level'...\",label:\"Select what 'Skill Level' your course require's\"};const primaryLanguageChecks={check:(setError,register,clearErrors)=>{return{...register(\"primaryLanguageUsed\",{required:{value:true,message:\"You MUST select a 'Primary Language' option before proceeding forward\"},onBlur:e=>{// current value from this input\nconst value=e.target.value;// timeout to delay for state change(s)\nsetTimeout(()=>{// clear error after proper selection\nif(typeof value!==\"undefined\"&&Object.keys(value).length>0){clearErrors(\"primaryLanguageUsed\");}else{// set error as nothing was selected (blank 'click-off' selection of selector)\nsetError(\"primaryLanguageUsed\",{type:\"manual\",message:\"You MUST select a 'Primary Language' option before proceeding forward\"});}},50);}})};},onChange:(selectedOption,setValue,clearErrors)=>{setValue(\"primaryLanguageUsed\",selectedOption,{shouldValidate:false});setTimeout(()=>{clearErrors(\"primaryLanguageUsed\");},75);},name:\"primaryLanguageUsed\",placeholder:\"Select a 'Primary Language' used in this course...\",label:\"Select what language was 'primarily' used in this course regarding what 'CODING' language was used most in this course\"};const hoursOfCourseContentChecks={check:(setError,register,clearErrors)=>{return{...register(\"lengthInHours\",{required:{value:true,message:\"You MUST select a 'Course Content Length (in hour's)' option before proceeding forward\"},onBlur:e=>{// current value from this input\nconst value=e.target.value;// timeout to delay for state change(s)\nsetTimeout(()=>{// clear error after proper selection\nif(typeof value!==\"undefined\"&&Object.keys(value).length>0){clearErrors(\"lengthInHours\");}else{// set error as nothing was selected (blank 'click-off' selection of selector)\nsetError(\"lengthInHours\",{type:\"manual\",message:\"You MUST select a 'Course Content Length (in hour's)' option before proceeding forward\"});}},50);}})};},onChange:(selectedOption,setValue,clearErrors)=>{setValue(\"lengthInHours\",selectedOption,{shouldValidate:false});setTimeout(()=>{clearErrors(\"lengthInHours\");},75);},name:\"lengthInHours\",placeholder:\"Select 'How Many' hours this course consists of (LIVE CONTENT excluding test, quizes, etc...)\",label:\"Select 'How Many' hours this course length is limited to ONLY LIVE content while excluding quizes, tests, extra material, etc...\"};const courseWelcomeMessageChecks={check:(setError,register)=>{return{...register(\"welcomeMessage\",{required:{value:true,message:\"You MUST enter AT least 75 characters to 550 characters\"},minLength:{value:75,message:\"You must enter AT Least 75 characters\"},maxLength:{value:550,message:\"You may ONLY enter 550 characters or less\"}})};},onChange:(e,setValue)=>{const value=e.target.value;setValue(\"welcomeMessage\",value,{shouldValidate:true});},name:\"welcomeMessage\",placeholder:\"Enter a 'Welcome Message' to send to your students AFTER student's subscribe/purchase your course content. This is essentially a personal message from you to your student's leading into the intro of your course!\",type:\"textarea\",label:\"Enter a 'Welcome Message' to send to your student's after successfully enrolling in your course\"};const completionMessageChecks={check:(setError,register)=>{return{...register(\"completionMessage\",{required:{value:true,message:\"You MUST enter AT least 75 characters to 550 characters\"},minLength:{value:75,message:\"You must enter AT Least 75 characters\"},maxLength:{value:550,message:\"You may ONLY enter 550 characters or less\"}})};},onChange:(e,setValue)=>{const value=e.target.value;setValue(\"completionMessage\",value,{shouldValidate:true});},name:\"completionMessage\",placeholder:\"Enter a 'Completion Message' to send to your students AFTER student's successfully COMPLETE (fully complete) your course & all content involved. This is essentially a personal message from you to your student's after they successfully fully complete/finish your course!\",type:\"textarea\",label:\"Enter a 'Completion Message' to send to your student's after successfully COMPLETING your course\"};return{subtitleChecks,languageSpokenChecks,hoursOfCourseContentChecks,skillLevelChecks,primaryLanguageChecks,completionMessageChecks,courseWelcomeMessageChecks};};export default HookCourseCreationHelpers;","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/src/components/dashboard/learning/educationalCoursesSeminars/createCourse/helpers/pages/pageThree/helpers/helperFunctions/hookFormHelpers.js"],"names":["HookCourseCreationHelpers","subtitleChecks","check","setError","register","required","value","message","minLength","maxLength","onChange","e","setValue","target","shouldValidate","name","placeholder","type","label","languageSpokenChecks","clearErrors","onBlur","setTimeout","Object","keys","length","selectedOption","skillLevelChecks","primaryLanguageChecks","hoursOfCourseContentChecks","courseWelcomeMessageChecks","completionMessageChecks"],"mappings":"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","sourcesContent":["// helpers logic related to mainly to redux-hook-form\nconst HookCourseCreationHelpers = () => {\n    \n    const subtitleChecks = {\n        check: (setError, register) => {\n            return (\n                {...register(\"subtitle\", { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 25 characters to 160 characters\"\n                }, minLength: {\n                    value: 25,\n                    message: \"You must enter AT Least 25 characters\"\n                }, maxLength: {\n                    value: 160,\n                    message: \"You may ONLY enter 160 characters or less\"\n                }})}\n            )\n        },\n        onChange: (e, setValue) => {\n            const value = e.target.value;\n\n            setValue(\"subtitle\", value, { shouldValidate: true });\n        },\n        name: \"subtitle\",\n        placeholder: \"Enter a course 'Sub-Title' for your course...\",\n        type: \"text\",\n        label: \"Enter a course 'Sub-Title' for your course (this will be displayed right under your main description...)\"\n    };\n    const languageSpokenChecks = {\n        check: (setError, register, clearErrors) => {\n            return (\n                {...register(\"languageSpoken\", { required: {\n                    value: true,\n                    message: \"You MUST select a 'Language' option before proceeding forward\"\n                }, onBlur: (e) => {\n                    // current value from this input\n                    const value = e.target.value;\n                    // timeout to delay for state change(s)\n                    setTimeout(() => {\n                        // clear error after proper selection\n                        if ((typeof value !== \"undefined\") && (Object.keys(value).length > 0)) {\n                            clearErrors(\"languageSpoken\");\n                        } else {\n                            // set error as nothing was selected (blank 'click-off' selection of selector)\n                            setError(\"languageSpoken\", {\n                                type: \"manual\",\n                                message: \"You MUST select a 'Language' option before proceeding forward\",\n                            });\n                        }\n                    }, 50);\n                }})}\n            )\n        },\n        onChange: (selectedOption, setValue, clearErrors) => {\n            setValue(\"languageSpoken\", selectedOption, { shouldValidate: false });\n\n            setTimeout(() => {\n                clearErrors(\"languageSpoken\");\n            }, 75)\n        },\n        name: \"languageSpoken\",\n        placeholder: \"Select a 'Language' type...\",\n        label: \"Select what language your course is spoken/taught with/in\"\n    };\n    const skillLevelChecks = {\n        check: (setError, register, clearErrors) => {\n            return (\n                {...register(\"skillLevel\", { required: {\n                    value: true,\n                    message: \"You MUST select a 'Skill-Level' option before proceeding forward\"\n                }, onBlur: (e) => {\n                    // current value from this input\n                    const value = e.target.value;\n                    // timeout to delay for state change(s)\n                    setTimeout(() => {\n                        // clear error after proper selection\n                        if ((typeof value !== \"undefined\") && (Object.keys(value).length > 0)) {\n                            clearErrors(\"skillLevel\");\n                        } else {\n                            // set error as nothing was selected (blank 'click-off' selection of selector)\n                            setError(\"skillLevel\", {\n                                type: \"manual\",\n                                message: \"You MUST select a 'Skill-Level' option before proceeding forward\",\n                            });\n                        }\n                    }, 50);\n                }})}\n            )\n        },\n        onChange: (selectedOption, setValue, clearErrors) => {\n            \n            setValue(\"skillLevel\", selectedOption, { shouldValidate: false });\n\n            setTimeout(() => {\n                clearErrors(\"skillLevel\");\n            }, 75)\n        },\n        name: \"skillLevel\",\n        placeholder: \"Select a 'Skill Level'...\",\n        label: \"Select what 'Skill Level' your course require's\"\n    };\n    const primaryLanguageChecks = {\n        check: (setError, register, clearErrors) => {\n            return (\n                {...register(\"primaryLanguageUsed\", { required: {\n                    value: true,\n                    message: \"You MUST select a 'Primary Language' option before proceeding forward\"\n                }, onBlur: (e) => {\n                    // current value from this input\n                    const value = e.target.value;\n                    // timeout to delay for state change(s)\n                    setTimeout(() => {\n                        // clear error after proper selection\n                        if ((typeof value !== \"undefined\") && (Object.keys(value).length > 0)) {\n                            clearErrors(\"primaryLanguageUsed\");\n                        } else {\n                            // set error as nothing was selected (blank 'click-off' selection of selector)\n                            setError(\"primaryLanguageUsed\", {\n                                type: \"manual\",\n                                message: \"You MUST select a 'Primary Language' option before proceeding forward\",\n                            });\n                        }\n                    }, 50);\n                }})}\n            )\n        },\n        onChange: (selectedOption, setValue, clearErrors) => {\n            \n            setValue(\"primaryLanguageUsed\", selectedOption, { shouldValidate: false });\n\n            setTimeout(() => {\n                clearErrors(\"primaryLanguageUsed\");\n            }, 75)\n        },\n        name: \"primaryLanguageUsed\",\n        placeholder: \"Select a 'Primary Language' used in this course...\",\n        label: `Select what language was 'primarily' used in this course regarding what 'CODING' language was used most in this course`\n    };\n    const hoursOfCourseContentChecks = {\n        check: (setError, register, clearErrors) => {\n            return (\n                {...register(\"lengthInHours\", { required: {\n                    value: true,\n                    message: \"You MUST select a 'Course Content Length (in hour's)' option before proceeding forward\"\n                }, onBlur: (e) => {\n                    // current value from this input\n                    const value = e.target.value;\n                    // timeout to delay for state change(s)\n                    setTimeout(() => {\n                        // clear error after proper selection\n                        if ((typeof value !== \"undefined\") && (Object.keys(value).length > 0)) {\n                            clearErrors(\"lengthInHours\");\n                        } else {\n                            // set error as nothing was selected (blank 'click-off' selection of selector)\n                            setError(\"lengthInHours\", {\n                                type: \"manual\",\n                                message: \"You MUST select a 'Course Content Length (in hour's)' option before proceeding forward\",\n                            });\n                        }\n                    }, 50);\n                }})}\n            )\n        },\n        onChange: (selectedOption, setValue, clearErrors) => {\n            \n            setValue(\"lengthInHours\", selectedOption, { shouldValidate: false });\n\n            setTimeout(() => {\n                clearErrors(\"lengthInHours\");\n            }, 75)\n        },\n        name: \"lengthInHours\",\n        placeholder: \"Select 'How Many' hours this course consists of (LIVE CONTENT excluding test, quizes, etc...)\",\n        label: `Select 'How Many' hours this course length is limited to ONLY LIVE content while excluding quizes, tests, extra material, etc...`\n    }\n    const courseWelcomeMessageChecks = {\n        check: (setError, register) => {\n            return (\n                {...register(\"welcomeMessage\", { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 75 characters to 550 characters\"\n                }, minLength: {\n                    value: 75,\n                    message: \"You must enter AT Least 75 characters\"\n                }, maxLength: {\n                    value: 550,\n                    message: \"You may ONLY enter 550 characters or less\"\n                }})}\n            )\n        },\n        onChange: (e, setValue) => {\n            const value = e.target.value;\n\n            setValue(\"welcomeMessage\", value, { shouldValidate: true });\n        },\n        name: \"welcomeMessage\",\n        placeholder: \"Enter a 'Welcome Message' to send to your students AFTER student's subscribe/purchase your course content. This is essentially a personal message from you to your student's leading into the intro of your course!\",\n        type: \"textarea\",\n        label: \"Enter a 'Welcome Message' to send to your student's after successfully enrolling in your course\"\n    }\n    const completionMessageChecks = {\n        check: (setError, register) => {\n            return (\n                {...register(\"completionMessage\", { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 75 characters to 550 characters\"\n                }, minLength: {\n                    value: 75,\n                    message: \"You must enter AT Least 75 characters\"\n                }, maxLength: {\n                    value: 550,\n                    message: \"You may ONLY enter 550 characters or less\"\n                }})}\n            )\n        },\n        onChange: (e, setValue) => {\n            const value = e.target.value;\n\n            setValue(\"completionMessage\", value, { shouldValidate: true });\n        },\n        name: \"completionMessage\",\n        placeholder: \"Enter a 'Completion Message' to send to your students AFTER student's successfully COMPLETE (fully complete) your course & all content involved. This is essentially a personal message from you to your student's after they successfully fully complete/finish your course!\",\n        type: \"textarea\",\n        label: \"Enter a 'Completion Message' to send to your student's after successfully COMPLETING your course\"\n    }\n\n    return {\n        subtitleChecks,\n        languageSpokenChecks,\n        hoursOfCourseContentChecks,\n        skillLevelChecks,\n        primaryLanguageChecks,\n        completionMessageChecks,\n        courseWelcomeMessageChecks\n    }\n}\n\n\nexport default HookCourseCreationHelpers;"]},"metadata":{},"sourceType":"module"}