{"ast":null,"code":"// helpers logic related to mainly to redux-hook-form\nconst HookHelpers = () => {\n  const courseTitle = {\n    check: (setError, register) => {\n      return { ...register(\"courseTitle\", {\n          required: {\n            value: true,\n            message: \"You MUST enter AT least 25 characters to 100 characters\"\n          },\n          minLength: {\n            value: 25,\n            message: \"You must enter AT Least 25 characters\"\n          },\n          maxLength: {\n            value: 100,\n            message: \"You may ONLY enter 100 characters or less\"\n          },\n          onBlur: e => {// code here...\n          }\n        })\n      };\n    },\n    onChange: (e, setValue) => {\n      const value = e.target.value;\n      setValue(\"courseTitle\", value, {\n        shouldValidate: true\n      });\n    },\n    name: \"courseTitle\",\n    placeholder: \"Enter a 'Course Title'\",\n    type: \"text\",\n    label: \"Course Title\"\n  };\n  const courseCategory = {\n    check: (setError, register, clearErrors) => {\n      return { ...register(\"courseCategory\", {\n          required: {\n            value: true,\n            message: \"You MUST select a 'category' option before proceeding forward\"\n          },\n          onBlur: e => {\n            // code here...\n            console.log(\"blur - e\", e); // current value from this input\n\n            const value = e.target.value; // timeout to delay for state change(s)\n\n            setTimeout(() => {\n              // clear error after proper selection\n              if (typeof value !== \"undefined\" && Object.keys(value).length > 0) {\n                clearErrors(\"courseCategory\");\n              } else {\n                // set error as nothing was selected (blank 'click-off' selection of selector)\n                setError(\"courseCategory\", {\n                  type: \"manual\",\n                  message: \"You MUST select a 'category' option before proceeding forward\"\n                });\n              }\n            }, 50);\n          }\n        })\n      };\n    },\n    onChange: (selectedOption, setValue, clearErrors) => {\n      console.log(\"value changed...:\", selectedOption);\n      setValue(\"courseCategory\", selectedOption, {\n        shouldValidate: false\n      });\n      setTimeout(() => {\n        clearErrors(\"courseCategory\");\n      }, 75);\n    },\n    name: \"courseCategory\",\n    placeholder: \"Select a category/group type\",\n    label: \"Select a category for your course\"\n  };\n  const pricing = {\n    check: (setError, register, clearErrors) => {\n      return { ...register(\"pricing\", {\n          required: {\n            value: true,\n            message: \"You MUST select a 'pricing' option before proceeding forward\"\n          },\n          onBlur: e => {\n            // code here...\n            console.log(\"blur - e\", e); // current value from this input\n\n            const value = e.target.value; // timeout to delay for state change(s)\n\n            setTimeout(() => {\n              // clear error after proper selection\n              if (typeof value !== \"undefined\" && Object.keys(value).length > 0) {\n                clearErrors(\"pricing\");\n              } else {\n                // set error as nothing was selected (blank 'click-off' selection of selector)\n                setError(\"pricing\", {\n                  type: \"manual\",\n                  message: \"You MUST select a 'pricing' option before proceeding forward\"\n                });\n              }\n            }, 50);\n          }\n        })\n      };\n    },\n    onChange: (selectedOption, setValue, clearErrors) => {\n      console.log(\"value changed...:\", selectedOption);\n      setValue(\"pricing\", selectedOption, {\n        shouldValidate: false\n      });\n      setTimeout(() => {\n        clearErrors(\"pricing\");\n      }, 75);\n    },\n    name: \"pricing\",\n    placeholder: \"Select a pricing option...\",\n    label: \"Select a 'pricing option' for your course\"\n  };\n  const hashtagsChecker = {\n    check: (register, name) => {\n      return { ...register(name, {\n          required: {\n            value: true,\n            message: \"You MUST enter AT least 5 hashtags/tags before attempting to continue\"\n          }\n        })\n      };\n    },\n    onBlurred: (tags, setValue, clearErrors, setError) => {\n      setValue(\"courseHashtags\", tags, {\n        shouldValidate: true\n      }); // timeout to delay for state change(s)\n\n      setTimeout(() => {\n        // clear error after proper selection\n        if (typeof tags !== \"undefined\" && tags.length >= 5 && tags.length <= 15) {\n          clearErrors(\"courseHashtags\");\n        } else {\n          // set error as nothing was selected (blank 'click-off' selection of selector)\n          setError(\"courseHashtags\", {\n            type: \"manual\",\n            message: \"You MUST enter BETWEEN 5-15 hashtags/tags before attempting to continue\"\n          });\n        }\n      }, 100);\n    },\n    placeholder: \"Enter between 5-15 hashtags/tags...\",\n    type: \"text\",\n    label: \"Enter BETWEEN 5-15 hashtags to proceed forward - people will use these to find your specific course...\"\n  };\n  const descriptionChecks = {\n    check: (clearErrors, register, setError, currentValues, wordCount) => {\n      return { ...register(\"description\", {\n          required: {\n            value: true,\n            message: \"You must enter AT least 1000 characters OR 200 words to proceed\"\n          },\n          minLength: {\n            value: 1000,\n            message: \"You must enter AT least 1000 characters OR 200 words to proceed\"\n          },\n          maxLength: {\n            value: 6000,\n            message: \"You may only enter up to a max of 6000 characters or 475 words\"\n          }\n        })\n      };\n    },\n    onBlur: (clearErrors, setError, currentValues, wordCount) => {\n      console.log(\"blurred dynamic description\");\n      const description = currentValues.description;\n      setTimeout(() => {\n        if (typeof description !== \"undefined\" && description.length >= 1000 && description.length <= 6000) {\n          clearErrors(\"description\");\n        } else {\n          if (typeof description !== \"undefined\" && description.length !== 0) {\n            if (wordCount >= 200 || typeof description !== \"undefined\" && description.length <= 1000 && description.length >= 0) {\n              console.log(\"one ran!\");\n              setError(\"description\", {\n                type: \"manual\",\n                message: \"You must enter AT least 1000 characters OR 200 words to proceed\"\n              });\n            } else if (wordCount >= 475 && typeof description !== \"undefined\" && description.length >= 6000) {\n              console.log(\"two ran!\");\n              setError(\"description\", {\n                type: \"manual\",\n                message: \"You may only enter up to a max of 6000 characters OR a maximum of 475 words\"\n              });\n            } else {\n              console.log(\"three ran!\");\n              setError(\"description\", {\n                type: \"manual\",\n                message: \"You must enter between 1000-6000 characters to proceed or a minimum of 200 words\"\n              });\n            }\n          } else {\n            setError(\"description\", {\n              type: \"manual\",\n              message: \"You must enter a valid value for this input - we have detected that no data is currently in the input\"\n            });\n          }\n        }\n      }, 50);\n    },\n    placeholder: \"Enter your text here... (You can use MARKUP & various text styling tools with the bar above)\",\n    name: \"description\"\n  };\n  return {\n    courseTitle,\n    courseCategory,\n    hashtagsChecker,\n    descriptionChecks,\n    pricing\n  };\n};\n\nexport default HookHelpers;","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/learning/educationalCoursesSeminars/createCourse/helpers/pages/pageOne/helpers/reduxFormHelpers.js"],"names":["HookHelpers","courseTitle","check","setError","register","required","value","message","minLength","maxLength","onBlur","e","onChange","setValue","target","shouldValidate","name","placeholder","type","label","courseCategory","clearErrors","console","log","setTimeout","Object","keys","length","selectedOption","pricing","hashtagsChecker","onBlurred","tags","descriptionChecks","currentValues","wordCount","description"],"mappings":"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","sourcesContent":["// helpers logic related to mainly to redux-hook-form\nconst HookHelpers = () => {\n    \n    const courseTitle = {\n        check: (setError, register) => {\n            return (\n                {...register(\"courseTitle\", { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 25 characters to 100 characters\"\n                }, minLength: {\n                    value: 25,\n                    message: \"You must enter AT Least 25 characters\"\n                }, maxLength: {\n                    value: 100,\n                    message: \"You may ONLY enter 100 characters or less\"\n                }, onBlur: (e) => {\n                    // code here...\n                }})}\n            )\n        },\n        onChange: (e, setValue) => {\n            const value = e.target.value;\n\n            setValue(\"courseTitle\", value, { shouldValidate: true });\n        },\n        name: \"courseTitle\",\n        placeholder: \"Enter a 'Course Title'\",\n        type: \"text\",\n        label: \"Course Title\"\n    };\n    const courseCategory = {\n        check: (setError, register, clearErrors) => {\n            return (\n                {...register(\"courseCategory\", { required: {\n                    value: true,\n                    message: \"You MUST select a 'category' option before proceeding forward\"\n                }, onBlur: (e) => {\n                    // code here...\n                    console.log(\"blur - e\", e);\n                    // current value from this input\n                    const value = e.target.value;\n                    // timeout to delay for state change(s)\n                    setTimeout(() => {\n                        // clear error after proper selection\n                        if ((typeof value !== \"undefined\") && (Object.keys(value).length > 0)) {\n                            clearErrors(\"courseCategory\");\n                        } else {\n                            // set error as nothing was selected (blank 'click-off' selection of selector)\n                            setError(\"courseCategory\", {\n                                type: \"manual\",\n                                message: \"You MUST select a 'category' option before proceeding forward\",\n                            });\n                        }\n                    }, 50);\n                }})}\n            )\n        },\n        onChange: (selectedOption, setValue, clearErrors) => {\n            console.log(\"value changed...:\", selectedOption);\n            \n            setValue(\"courseCategory\", selectedOption, { shouldValidate: false });\n\n            setTimeout(() => {\n                clearErrors(\"courseCategory\");\n            }, 75)\n        },\n        name: \"courseCategory\",\n        placeholder: \"Select a category/group type\",\n        label: \"Select a category for your course\"\n    };\n    const pricing = {\n        check: (setError, register, clearErrors) => {\n            return (\n                {...register(\"pricing\", { required: {\n                    value: true,\n                    message: \"You MUST select a 'pricing' option before proceeding forward\"\n                }, onBlur: (e) => {\n                    // code here...\n                    console.log(\"blur - e\", e);\n                    // current value from this input\n                    const value = e.target.value;\n                    // timeout to delay for state change(s)\n                    setTimeout(() => {\n                        // clear error after proper selection\n                        if ((typeof value !== \"undefined\") && (Object.keys(value).length > 0)) {\n                            clearErrors(\"pricing\");\n                        } else {\n                            // set error as nothing was selected (blank 'click-off' selection of selector)\n                            setError(\"pricing\", {\n                                type: \"manual\",\n                                message: \"You MUST select a 'pricing' option before proceeding forward\",\n                            });\n                        }\n                    }, 50);\n                }})}\n            )\n        },\n        onChange: (selectedOption, setValue, clearErrors) => {\n            console.log(\"value changed...:\", selectedOption);\n            \n            setValue(\"pricing\", selectedOption, { shouldValidate: false });\n\n            setTimeout(() => {\n                clearErrors(\"pricing\");\n            }, 75)\n        },\n        name: \"pricing\",\n        placeholder: \"Select a pricing option...\",\n        label: \"Select a 'pricing option' for your course\"\n    };\n    const hashtagsChecker = {\n        check: (register, name) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 5 hashtags/tags before attempting to continue\"\n                }})}\n            )\n        },\n        onBlurred: (tags, setValue, clearErrors, setError) => {\n            setValue(\"courseHashtags\", tags, { shouldValidate: true });\n            // timeout to delay for state change(s)\n            setTimeout(() => {\n                // clear error after proper selection\n                if ((typeof tags !== \"undefined\") && (tags.length >= 5 && tags.length <= 15)) {\n                    clearErrors(\"courseHashtags\");\n                } else {\n                    // set error as nothing was selected (blank 'click-off' selection of selector)\n                    setError(\"courseHashtags\", {\n                        type: \"manual\",\n                        message: \"You MUST enter BETWEEN 5-15 hashtags/tags before attempting to continue\",\n                    });\n                }\n            }, 100);\n        },\n        placeholder: \"Enter between 5-15 hashtags/tags...\",\n        type: \"text\",\n        label: \"Enter BETWEEN 5-15 hashtags to proceed forward - people will use these to find your specific course...\"\n    };\n    const descriptionChecks = {\n        check: (clearErrors, register, setError, currentValues, wordCount) => {\n            return (\n                {...register(\"description\", { required: {\n                    value: true,\n                    message: \"You must enter AT least 1000 characters OR 200 words to proceed\"\n                }, minLength: {\n                    value: 1000,\n                    message: \"You must enter AT least 1000 characters OR 200 words to proceed\"\n                }, maxLength: {\n                    value: 6000,\n                    message: \"You may only enter up to a max of 6000 characters or 475 words\"\n                }})}\n            );\n        },\n        onBlur: (clearErrors, setError, currentValues, wordCount) => {\n\n            console.log(\"blurred dynamic description\");\n\n            const description = currentValues.description;\n\n            setTimeout(() => {\n                if ((typeof description !== \"undefined\") && ((description.length >= 1000) && (description.length <= 6000))) {\n                    clearErrors(\"description\");\n                } else {\n                    if ((typeof description !== \"undefined\") && description.length !== 0) {\n                        if ((wordCount >= 200) || ((typeof description !== \"undefined\" && description.length <= 1000) && (description.length >= 0))) {\n                            console.log(\"one ran!\");\n\n                            setError(\"description\", {\n                                type: \"manual\",\n                                message: \"You must enter AT least 1000 characters OR 200 words to proceed\",\n                            });\n                        } else if ((wordCount >= 475) && ((typeof description !== \"undefined\" && description.length >= 6000))) {\n                            console.log(\"two ran!\");\n\n                            setError(\"description\", {\n                                type: \"manual\",\n                                message: \"You may only enter up to a max of 6000 characters OR a maximum of 475 words\",\n                            });\n                        } else {\n                            console.log(\"three ran!\");\n\n                            setError(\"description\", {\n                                type: \"manual\",\n                                message: \"You must enter between 1000-6000 characters to proceed or a minimum of 200 words\",\n                            });\n                        }\n                    } else {\n                        setError(\"description\", {\n                            type: \"manual\",\n                            message: \"You must enter a valid value for this input - we have detected that no data is currently in the input\",\n                        });\n                    }\n                }\n            }, 50)\n        },\n        placeholder: \"Enter your text here... (You can use MARKUP & various text styling tools with the bar above)\",\n        name: \"description\"\n    }\n\n    return {\n        courseTitle,\n        courseCategory,\n        hashtagsChecker,\n        descriptionChecks,\n        pricing\n    }\n}\n\n\nexport default HookHelpers;"]},"metadata":{},"sourceType":"module"}