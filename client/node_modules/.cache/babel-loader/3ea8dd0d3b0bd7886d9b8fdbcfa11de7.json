{"ast":null,"code":"import _classCallCheck from \"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport React, { Component } from 'react';\nimport * as SendBird from \"sendbird\";\nimport { connect } from \"react-redux\";\nimport { saveSendbirdInitialData } from \"./redux/actions/messaging/initialization/initSBLogic.js\";\nimport _ from \"lodash\";\n\nvar returnSendbirdObj = function returnSendbirdObj(signedIn) {\n  return new SendBird({\n    appId: process.env.REACT_APP_SENDBIRD_APP_ID,\n    localCacheEnabled: signedIn\n  });\n};\n\nvar MountingLogicRedux = /*#__PURE__*/function (_Component) {\n  _inherits(MountingLogicRedux, _Component);\n\n  var _super = _createSuper(MountingLogicRedux);\n\n  function MountingLogicRedux(props) {\n    var _this;\n\n    _classCallCheck(this, MountingLogicRedux);\n\n    _this = _super.call(this, props);\n\n    _this.renderOnceUpdateProfileSendbirdInfo = function () {\n      // deconstruct\n      var _this$props = _this.props,\n          authenticated = _this$props.authenticated,\n          accountData = _this$props.accountData,\n          SBData = _this$props.SBData,\n          saveSendbirdInitialData = _this$props.saveSendbirdInitialData; // reverse array to get MOST recent array item\n\n      if (typeof accountData.profilePicsVideos !== \"undefined\" && accountData.profilePicsVideos.length > 0) {\n        var reversed = accountData.profilePicsVideos.reverse();\n        console.log(\"SBData\", SBData);\n\n        if (SBData !== null && SBData.currentUser !== null) {\n          for (var index = 0; index < reversed.length; index++) {\n            var item = reversed[index]; // check if image\n\n            if (item.type.includes(\"image\")) {\n              // create SB (sendbird) core-obj-data\n              var sb = returnSendbirdObj(authenticated); // data to be given to sendbird\n\n              var fullName = \"\".concat(accountData.firstName, \" \").concat(accountData.lastName);\n              var profilePicture = \"\".concat(process.env.REACT_APP_ASSET_LINK, \"/\").concat(item.link); // update profile information - SENDBIRD related...\n\n              sb.updateCurrentUserInfo(fullName, profilePicture, function (response, error) {\n                if (error) {\n                  // Handle error.\n                  console.log(\"error while updating to lastest info!\", error);\n                } else {\n                  console.log(\"SUCCESSFULLY updated profile sendbird information!\", response);\n                }\n              });\n              break;\n            } else {\n              if (reversed.length - 1 === index) {\n                // create SB (sendbird) core-obj-data\n                var _sb = returnSendbirdObj(authenticated); // data to be given to sendbird\n\n\n                var _fullName = \"\".concat(accountData.firstName, \" \").concat(accountData.lastName);\n\n                var _profilePicture = \"\".concat(process.env.REACT_APP_PLACEHOLDER_IMAGE); // update profile information - SENDBIRD related...\n\n\n                _sb.updateCurrentUserInfo(_fullName, _profilePicture, function (response, error) {\n                  if (error) {\n                    // Handle error.\n                    console.log(\"error while updating to lastest info!\", error);\n                  } else {\n                    console.log(\"SUCCESSFULLY updated profile sendbird information!\", response);\n                  }\n                }); // looped thru array of images/videos and couldnt find a picture file\n\n              }\n            }\n          }\n        } else {\n          saveSendbirdInitialData(returnSendbirdObj(true));\n        }\n      } else {\n        console.log(\"SBData\", SBData);\n\n        if (SBData !== null && SBData.currentUser !== null) {\n          // create SB (sendbird) core-obj-data\n          var _sb2 = returnSendbirdObj(authenticated); // data to be given to sendbird\n\n\n          var _fullName2 = \"\".concat(accountData.firstName, \" \").concat(accountData.lastName);\n\n          var _profilePicture2 = \"\".concat(process.env.REACT_APP_PLACEHOLDER_IMAGE); // update profile information - SENDBIRD related...\n\n\n          _sb2.updateCurrentUserInfo(_fullName2, _profilePicture2, function (response, error) {\n            if (error) {\n              // Handle error.\n              console.log(\"error while updating to lastest info!\", error);\n            } else {\n              console.log(\"SUCCESSFULLY updated profile sendbird information!\", response);\n            }\n          });\n        } else {\n          saveSendbirdInitialData(returnSendbirdObj(true));\n        }\n      }\n    };\n\n    _this.state = {\n      profilePic: \"\",\n      updatedAlready: false\n    };\n    return _this;\n  }\n\n  _createClass(MountingLogicRedux, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this$props2 = this.props,\n          saveSendbirdInitialData = _this$props2.saveSendbirdInitialData,\n          authenticated = _this$props2.authenticated,\n          SBData = _this$props2.SBData;\n\n      if (prevProps.SBData !== SBData) {\n        console.log(\"prevProps\", prevProps, prevState, SBData);\n        saveSendbirdInitialData(returnSendbirdObj(authenticated));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          authenticated = _this$props3.authenticated,\n          accountData = _this$props3.accountData;\n      var updatedAlready = this.state.updatedAlready; // run other SENDBIRD Logic init\n\n      if (authenticated === true) {\n        // create sendbird data obj\n        var sb = returnSendbirdObj(authenticated);\n        console.log(\"validating - connecting user MESSAGING logic...\", sb);\n        sb.connect(accountData.uniqueId, function (user, error) {\n          if (error) {\n            // Handle error.\n            console.log(\"Messaging connection error... :\", error);\n          } // The user is connected to Sendbird server.\n\n\n          console.log(\"The user - \".concat(accountData.uniqueId, \" - is connected to Sendbird server\"), user);\n\n          if (!updatedAlready) {\n            _this2.renderOnceUpdateProfileSendbirdInfo();\n          }\n        });\n      }\n\n      return null;\n    }\n  }]);\n\n  return MountingLogicRedux;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  console.log(\"Stateeeeeee\", state);\n  return {\n    authenticated: _.has(state.auth.data, \"accountType\") ? true : false,\n    accountData: state.auth.data,\n    SBData: _.has(state.sendbirdInitData, \"sendbirdInitData\") ? state.sendbirdInitData.sendbirdInitData : null\n  };\n};\n\nexport default connect(mapStateToProps, {\n  saveSendbirdInitialData: saveSendbirdInitialData\n})(MountingLogicRedux);","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/src/mountingLogicRedux.js"],"names":["React","Component","SendBird","connect","saveSendbirdInitialData","_","returnSendbirdObj","signedIn","appId","process","env","REACT_APP_SENDBIRD_APP_ID","localCacheEnabled","MountingLogicRedux","props","renderOnceUpdateProfileSendbirdInfo","authenticated","accountData","SBData","profilePicsVideos","length","reversed","reverse","console","log","currentUser","index","item","type","includes","sb","fullName","firstName","lastName","profilePicture","REACT_APP_ASSET_LINK","link","updateCurrentUserInfo","response","error","REACT_APP_PLACEHOLDER_IMAGE","state","profilePic","updatedAlready","prevProps","prevState","uniqueId","user","mapStateToProps","has","auth","data","sendbirdInitData"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as SendBird from \"sendbird\";\nimport { connect } from \"react-redux\";\nimport { saveSendbirdInitialData } from \"./redux/actions/messaging/initialization/initSBLogic.js\";\nimport _ from \"lodash\";\n\n\nconst returnSendbirdObj = (signedIn) => {\n    return new SendBird({ appId: process.env.REACT_APP_SENDBIRD_APP_ID, localCacheEnabled: signedIn });\n}\n\nclass MountingLogicRedux extends Component {\nconstructor(props) {\n    super(props);\n\n    this.state = {\n        profilePic: \"\",\n        updatedAlready: false\n    }\n}\n    componentDidUpdate(prevProps, prevState) {\n        const { saveSendbirdInitialData, authenticated, SBData } = this.props;\n\n        if (prevProps.SBData !== SBData) {\n            console.log(\"prevProps\", prevProps, prevState, SBData);\n\n            saveSendbirdInitialData(returnSendbirdObj(authenticated));\n        }\n    }\n    renderOnceUpdateProfileSendbirdInfo = () => {\n        // deconstruct\n        const { authenticated, accountData, SBData, saveSendbirdInitialData } = this.props;\n        // reverse array to get MOST recent array item\n        if (typeof accountData.profilePicsVideos !== \"undefined\" && accountData.profilePicsVideos.length > 0) {\n            const reversed = accountData.profilePicsVideos.reverse();\n\n            console.log(\"SBData\", SBData);\n\n            if (SBData !== null && SBData.currentUser !== null) {\n                for (let index = 0; index < reversed.length; index++) {\n                    const item = reversed[index];\n                    // check if image\n                    if (item.type.includes(\"image\")) {\n                        // create SB (sendbird) core-obj-data\n                        const sb = returnSendbirdObj(authenticated);\n                        // data to be given to sendbird\n                        const fullName = `${accountData.firstName} ${accountData.lastName}`;\n                        const profilePicture = `${process.env.REACT_APP_ASSET_LINK}/${item.link}`;\n                    // update profile information - SENDBIRD related...\n                        sb.updateCurrentUserInfo(fullName, profilePicture, (response, error) => {\n                            if (error) {\n                                // Handle error.\n                                console.log(\"error while updating to lastest info!\", error);\n                            } else {\n                                console.log(\"SUCCESSFULLY updated profile sendbird information!\", response);\n                            }\n                        });\n                        break;\n                    } else {\n                        if ((reversed.length - 1) === index) {\n                            // create SB (sendbird) core-obj-data\n                            const sb = returnSendbirdObj(authenticated);\n                            // data to be given to sendbird\n                            const fullName = `${accountData.firstName} ${accountData.lastName}`;\n                            const profilePicture = `${process.env.REACT_APP_PLACEHOLDER_IMAGE}`;\n                            // update profile information - SENDBIRD related...\n                            sb.updateCurrentUserInfo(fullName, profilePicture, (response, error) => {\n                                if (error) {\n                                    // Handle error.\n                                    console.log(\"error while updating to lastest info!\", error);\n                                } else {\n                                    console.log(\"SUCCESSFULLY updated profile sendbird information!\", response);\n                                }\n                            });\n                            // looped thru array of images/videos and couldnt find a picture file\n                        }\n                    }\n                }\n            } else {\n                saveSendbirdInitialData(returnSendbirdObj(true))\n            }\n        } else {\n            console.log(\"SBData\", SBData);\n\n            if (SBData !== null && SBData.currentUser !== null) {\n                // create SB (sendbird) core-obj-data\n                const sb = returnSendbirdObj(authenticated);\n                // data to be given to sendbird\n                const fullName = `${accountData.firstName} ${accountData.lastName}`;\n                const profilePicture = `${process.env.REACT_APP_PLACEHOLDER_IMAGE}`;\n                // update profile information - SENDBIRD related...\n                sb.updateCurrentUserInfo(fullName, profilePicture, (response, error) => {\n                    if (error) {\n                        // Handle error.\n                        console.log(\"error while updating to lastest info!\", error);\n                    } else {\n                        console.log(\"SUCCESSFULLY updated profile sendbird information!\", response);\n                    }\n                });\n            } else {\n                saveSendbirdInitialData(returnSendbirdObj(true))\n            }\n        }\n    }\n    render () {\n        const { authenticated, accountData } = this.props;\n        const { updatedAlready } = this.state;\n        // run other SENDBIRD Logic init\n        if (authenticated === true) {\n            // create sendbird data obj\n            const sb = returnSendbirdObj(authenticated);\n            \n            console.log(\"validating - connecting user MESSAGING logic...\", sb);\n            \n            sb.connect(accountData.uniqueId, (user, error) => {\n                if (error) {\n                    // Handle error.\n                    console.log(\"Messaging connection error... :\", error);\n                }\n                // The user is connected to Sendbird server.\n                console.log(`The user - ${accountData.uniqueId} - is connected to Sendbird server`, user);\n\n                if (!updatedAlready) {\n                    this.renderOnceUpdateProfileSendbirdInfo();\n                } \n            });\n        }\n        return null;\n    }\n}\nconst mapStateToProps = (state) => {\n    console.log(\"Stateeeeeee\", state);\n    return {\n        authenticated: _.has(state.auth.data, \"accountType\") ? true : false,\n        accountData: state.auth.data,\n        SBData: _.has(state.sendbirdInitData, \"sendbirdInitData\") ? state.sendbirdInitData.sendbirdInitData : null\n    }\n}\nexport default connect(mapStateToProps, { saveSendbirdInitialData })(MountingLogicRedux);"]},"metadata":{},"sourceType":"module"}