{"ast":null,"code":"// helpers logic related to mainly to redux-hook-form\nconst MainHooksCustomHelpers = () => {\n  const calculateWhetherURLIsLegit = data => {\n    // helper function\n    const isValidHttpUrl = string => {\n      let url;\n\n      try {\n        url = new URL(string);\n      } catch (_) {\n        return false;\n      } // return protocol data\n\n\n      return url.protocol === \"http:\" || url.protocol === \"https:\";\n    }; // finally, check if url is VALID\n\n\n    if (isValidHttpUrl(data)) {\n      // url IS VALID\n      return true;\n    } else {\n      // url IS NOT VALID - return error string\n      return false;\n    }\n\n    ;\n  };\n\n  const urlEnteredLinkData = {\n    check: (setError, register, clearErrors, setValue, errors, name, clearInput) => {\n      return { ...register(name, {\n          required: true,\n          minLength: {\n            value: 8,\n            message: \"You must enter AT Least 8 characters\"\n          },\n          maxLength: {\n            value: 75,\n            message: \"You may ONLY enter 75 characters or less\"\n          },\n          onBlur: e => {\n            // extracted final value from input\n            const value = e.target.value; // check if valid url in helper file.\n\n            const validOrNot = calculateWhetherURLIsLegit(value); // check if valid!\n\n            if (validOrNot === true) {\n              // set value\n              setValue(name, value, {\n                shouldValidate: false\n              }); // clear error after setting proper change state\n\n              setTimeout(() => {\n                clearErrors(name);\n                clearInput();\n              }, 50);\n            } else {\n              setTimeout(() => {\n                setError(name, {\n                  type: \"manual\",\n                  message: \"You MUST enter a VALID URL including http/https and ://\"\n                });\n              }, 50);\n            }\n          }\n        })\n      };\n    },\n    onChange: (e, setError, clearErrors, setValue) => {\n      // deconstruct actual value\n      const value = e.target.value; // created timeout variable\n\n      let timed; // set timeout/delay span\n\n      clearTimeout(timed); // set timeout\n\n      timed = setTimeout(() => {\n        // check whether legit URL\n        if (calculateWhetherURLIsLegit(value)) {\n          // clear error (relevant);\n          clearErrors(\"referenceLink\"); // set value\n\n          setValue(\"referenceLink\", value, {\n            shouldValidate: false\n          });\n        } else {\n          setError(\"referenceLink\", {\n            type: \"manual\",\n            message: \"You MUST enter a VALID URL including http/https and ://\"\n          });\n        }\n      }, 50);\n    }\n  }; // return values to other component\n\n  return {\n    urlEnteredLinkData\n  };\n};\n\nexport default MainHooksCustomHelpers;","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/opportunities/employers/applyToListingHacker/helpers/reactHookFormHelpers.js"],"names":["MainHooksCustomHelpers","calculateWhetherURLIsLegit","data","isValidHttpUrl","string","url","URL","_","protocol","urlEnteredLinkData","check","setError","register","clearErrors","setValue","errors","name","clearInput","required","minLength","value","message","maxLength","onBlur","e","target","validOrNot","shouldValidate","setTimeout","type","onChange","timed","clearTimeout"],"mappings":"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","sourcesContent":["// helpers logic related to mainly to redux-hook-form\nconst MainHooksCustomHelpers = () => {\n\n    const calculateWhetherURLIsLegit = (data) => {\n        // helper function\n        const isValidHttpUrl = (string) => {\n            let url;\n            \n            try {\n              url = new URL(string);\n            } catch (_) {\n              return false;  \n            }\n            // return protocol data\n            return url.protocol === \"http:\" || url.protocol === \"https:\";\n        }\n        // finally, check if url is VALID\n        if (isValidHttpUrl(data)) {\n            // url IS VALID\n            return true;\n        } else {\n            // url IS NOT VALID - return error string\n            return false;\n        };\n    }\n\n    const urlEnteredLinkData = {\n        check: (setError, register, clearErrors, setValue, errors, name, clearInput) => {\n            return (\n                {...register(name, { required: true, \n                minLength: {\n                    value: 8,\n                    message: \"You must enter AT Least 8 characters\"\n                }, maxLength: {\n                    value: 75,\n                    message: \"You may ONLY enter 75 characters or less\"\n                }, onBlur: (e) => {\n                    // extracted final value from input\n                    const value = e.target.value;\n                    // check if valid url in helper file.\n                    const validOrNot = calculateWhetherURLIsLegit(value);\n                    // check if valid!\n                    if (validOrNot === true) {\n                        // set value\n                        setValue(name, value, { shouldValidate: false });\n                        // clear error after setting proper change state\n                        setTimeout(() => {\n                            clearErrors(name);\n\n                            clearInput();\n                        }, 50);\n                    } else {\n                        setTimeout(() => {\n                            setError(name, {\n                                type: \"manual\",\n                                message: \"You MUST enter a VALID URL including http/https and ://\",\n                            });\n                        }, 50)\n                    }\n                }})}\n            );\n        },\n        onChange: (e, setError, clearErrors, setValue) => {\n            // deconstruct actual value\n            const value = e.target.value;\n            // created timeout variable\n            let timed;\n            // set timeout/delay span\n            clearTimeout(timed);\n            // set timeout\n            timed = setTimeout(() => {\n                // check whether legit URL\n                if (calculateWhetherURLIsLegit(value)) {\n                    // clear error (relevant);\n                    clearErrors(\"referenceLink\");\n                    // set value\n                    setValue(\"referenceLink\", value, { shouldValidate: false });\n                } else {\n                    setError(\"referenceLink\", {\n                        type: \"manual\",\n                        message: \"You MUST enter a VALID URL including http/https and ://\",\n                    });\n                }\n            },  50);\n        }\n    };\n    // return values to other component\n    return {\n        urlEnteredLinkData\n    }\n}\n\nexport default MainHooksCustomHelpers;"]},"metadata":{},"sourceType":"module"}