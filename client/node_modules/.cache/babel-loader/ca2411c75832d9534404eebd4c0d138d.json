{"ast":null,"code":"// helpers logic related to mainly to redux-hook-form\nconst CreateNewPostReduxFormHelpers = () => {\n  const subcategoryChecker = {\n    check: (setError, register, name, clearErrors) => {\n      return { ...register(name, {\n          required: {\n            value: true,\n            message: \"You MUST select an option before starting your LIVE stream\"\n          },\n          onBlur: e => {\n            // log to check whats returned\n            const value = e.target.value; // timeout to delay for state change(s)\n\n            setTimeout(() => {\n              // clear error after proper selection\n              if (typeof value !== \"undefined\" && Object.keys(value).length > 0) {\n                clearErrors(name);\n              } else {\n                // set error as nothing was selected (blank 'click-off' selection of selector)\n                setError(name, {\n                  type: \"manual\",\n                  message: \"You MUST select an option before starting your LIVE stream\"\n                });\n              }\n            }, 50);\n          }\n        })\n      };\n    },\n    name: \"subCategory\",\n    placeholder: \"Enter a 'sub' category for your live stream (stream filtration)...\",\n    type: \"text\",\n    label: \"Stream Sub-Category\"\n  };\n  const descriptionChecker = {\n    check: register => {\n      return { ...register(\"description\", {\n          required: {\n            value: true,\n            message: \"You MUST enter AT least 35 characters to 850 characters\"\n          },\n          minLength: {\n            value: 35,\n            message: \"You MUST enter AT Least 35 characters\"\n          },\n          maxLength: {\n            value: 850,\n            message: \"You may ONLY enter 850 characters or less\"\n          }\n        })\n      };\n    },\n    onBlur: data => {\n      console.log(\"blurrred... data :\", data);\n    },\n    onChange: (value, setValue) => {\n      setValue(\"description\", value, {\n        shouldValidate: false\n      });\n    },\n    name: \"description\",\n    placeholder: \"Enter the 'Main Descriptive' text/information for this specific post, enter anywhere from 35-850 charectors in total - be as descriptive as you'd like or as breif as you'd like... up to you!\",\n    type: \"textarea\",\n    label: \"Enter a description or details about what your post is about or write about the contents of the file(s) you've uploaded (if applicable)\"\n  }; // return values to other component\n\n  return {\n    descriptionChecker,\n    subcategoryChecker\n  };\n};\n\nexport default CreateNewPostReduxFormHelpers;","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/people/hackers/individualProfile/wallData/postNewData/helpers/reactHookFormHelpers.js"],"names":["CreateNewPostReduxFormHelpers","subcategoryChecker","check","setError","register","name","clearErrors","required","value","message","onBlur","e","target","setTimeout","Object","keys","length","type","placeholder","label","descriptionChecker","minLength","maxLength","data","console","log","onChange","setValue","shouldValidate"],"mappings":"AAAA;AACA,MAAMA,6BAA6B,GAAG,MAAM;AAExC,QAAMC,kBAAkB,GAAG;AACvBC,IAAAA,KAAK,EAAE,CAACC,QAAD,EAAWC,QAAX,EAAqBC,IAArB,EAA2BC,WAA3B,KAA2C;AAC9C,aACI,EAAC,GAAGF,QAAQ,CAACC,IAAD,EAAO;AAAEE,UAAAA,QAAQ,EAAE;AAC3BC,YAAAA,KAAK,EAAE,IADoB;AAE3BC,YAAAA,OAAO,EAAE;AAFkB,WAAZ;AAGhBC,UAAAA,MAAM,EAAGC,CAAD,IAAO;AACd;AACA,kBAAMH,KAAK,GAAGG,CAAC,CAACC,MAAF,CAASJ,KAAvB,CAFc,CAGd;;AACAK,YAAAA,UAAU,CAAC,MAAM;AACb;AACA,kBAAK,OAAOL,KAAP,KAAiB,WAAlB,IAAmCM,MAAM,CAACC,IAAP,CAAYP,KAAZ,EAAmBQ,MAAnB,GAA4B,CAAnE,EAAuE;AACnEV,gBAAAA,WAAW,CAACD,IAAD,CAAX;AACH,eAFD,MAEO;AACH;AACAF,gBAAAA,QAAQ,CAACE,IAAD,EAAO;AACXY,kBAAAA,IAAI,EAAE,QADK;AAEXR,kBAAAA,OAAO,EAAE;AAFE,iBAAP,CAAR;AAIH;AACJ,aAXS,EAWP,EAXO,CAAV;AAYH;AAnBkB,SAAP;AAAZ,OADJ;AAsBH,KAxBsB;AAyBvBJ,IAAAA,IAAI,EAAE,aAzBiB;AA0BvBa,IAAAA,WAAW,EAAE,oEA1BU;AA2BvBD,IAAAA,IAAI,EAAE,MA3BiB;AA4BvBE,IAAAA,KAAK,EAAE;AA5BgB,GAA3B;AA8BA,QAAMC,kBAAkB,GAAG;AACvBlB,IAAAA,KAAK,EAAGE,QAAD,IAAc;AACjB,aACI,EAAC,GAAGA,QAAQ,CAAC,aAAD,EAAgB;AAAEG,UAAAA,QAAQ,EAAE;AACpCC,YAAAA,KAAK,EAAE,IAD6B;AAEpCC,YAAAA,OAAO,EAAE;AAF2B,WAAZ;AAGzBY,UAAAA,SAAS,EAAE;AACVb,YAAAA,KAAK,EAAE,EADG;AAEVC,YAAAA,OAAO,EAAE;AAFC,WAHc;AAMzBa,UAAAA,SAAS,EAAE;AACVd,YAAAA,KAAK,EAAE,GADG;AAEVC,YAAAA,OAAO,EAAE;AAFC;AANc,SAAhB;AAAZ,OADJ;AAYH,KAdsB;AAevBC,IAAAA,MAAM,EAAGa,IAAD,IAAU;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCF,IAAlC;AACH,KAjBsB;AAkBvBG,IAAAA,QAAQ,EAAE,CAAClB,KAAD,EAAQmB,QAAR,KAAqB;AAC3BA,MAAAA,QAAQ,CAAC,aAAD,EAAgBnB,KAAhB,EAAuB;AAAEoB,QAAAA,cAAc,EAAE;AAAlB,OAAvB,CAAR;AACH,KApBsB;AAqBvBvB,IAAAA,IAAI,EAAE,aArBiB;AAsBvBa,IAAAA,WAAW,EAAE,gMAtBU;AAuBvBD,IAAAA,IAAI,EAAE,UAvBiB;AAwBvBE,IAAAA,KAAK,EAAE;AAxBgB,GAA3B,CAhCwC,CA0DxC;;AACA,SAAO;AACHC,IAAAA,kBADG;AAEHnB,IAAAA;AAFG,GAAP;AAIH,CA/DD;;AAiEA,eAAeD,6BAAf","sourcesContent":["// helpers logic related to mainly to redux-hook-form\nconst CreateNewPostReduxFormHelpers = () => {\n    \n    const subcategoryChecker = {\n        check: (setError, register, name, clearErrors) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: \"You MUST select an option before starting your LIVE stream\"\n                }, onBlur: (e) => {\n                    // log to check whats returned\n                    const value = e.target.value;\n                    // timeout to delay for state change(s)\n                    setTimeout(() => {\n                        // clear error after proper selection\n                        if ((typeof value !== \"undefined\") && (Object.keys(value).length > 0)) {\n                            clearErrors(name);\n                        } else {\n                            // set error as nothing was selected (blank 'click-off' selection of selector)\n                            setError(name, {\n                                type: \"manual\",\n                                message: \"You MUST select an option before starting your LIVE stream\",\n                            });\n                        }\n                    }, 50);\n                }})}\n            )\n        },\n        name: \"subCategory\",\n        placeholder: \"Enter a 'sub' category for your live stream (stream filtration)...\",\n        type: \"text\",\n        label: \"Stream Sub-Category\"\n    };\n    const descriptionChecker = {\n        check: (register) => {\n            return (\n                {...register(\"description\", { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 35 characters to 850 characters\"\n                }, minLength: {\n                    value: 35,\n                    message: \"You MUST enter AT Least 35 characters\"\n                }, maxLength: {\n                    value: 850,\n                    message: \"You may ONLY enter 850 characters or less\"\n                }})}\n            )\n        },\n        onBlur: (data) => {\n            console.log(\"blurrred... data :\", data);\n        },\n        onChange: (value, setValue) => {\n            setValue(\"description\", value, { shouldValidate: false });\n        },\n        name: \"description\",\n        placeholder: \"Enter the 'Main Descriptive' text/information for this specific post, enter anywhere from 35-850 charectors in total - be as descriptive as you'd like or as breif as you'd like... up to you!\",\n        type: \"textarea\",\n        label: \"Enter a description or details about what your post is about or write about the contents of the file(s) you've uploaded (if applicable)\"\n    };\n    // return values to other component\n    return {\n        descriptionChecker,\n        subcategoryChecker\n    }\n}\n\nexport default CreateNewPostReduxFormHelpers;"]},"metadata":{},"sourceType":"module"}