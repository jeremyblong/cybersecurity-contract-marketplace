{"ast":null,"code":"var _jsxFileName = \"/home/kali/Documents/cybersecurity/client/src/components/dashboard/people/hackers/individualProfile/bars/helpers/rightBarHelperFunctions.js\";\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport ReactPlayer from \"react-player\";\nimport _ from \"lodash\";\nimport \"./styles.css\";\nimport { SRLWrapper } from \"simple-react-lightbox\";\n\nconst renderPictureOrVideoLast = (file, index, openLightbox) => {\n  if (file !== null && _.has(file, \"link\")) {\n    if (file.type.includes(\"video\")) {\n      // video logic\n      return /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"li\", {\n        onClick: () => {\n          // open modal and display\n          openLightbox(index - 1);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"latest-post profile-pic-video-sidebar-custom\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(ReactPlayer, {\n        playing: true,\n        loop: true,\n        muted: true,\n        width: \"100%\",\n        className: \"img-fluid\",\n        wrapper: \"div\",\n        url: `${process.env.REACT_APP_ASSET_LINK}/${file.link}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 29\n        }\n      }))));\n    } else {\n      // image logic\n      return /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"li\", {\n        onClick: () => {\n          // open modal and display\n          openLightbox(index - 1);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"latest-post profile-pic-video-sidebar-custom\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        className: \"img-fluid\",\n        alt: \"post1\",\n        src: `${process.env.REACT_APP_ASSET_LINK}/${file.link}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 29\n        }\n      }))));\n    }\n  } else {\n    // image logic - DEFAULT.\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      onClick: () => {\n        // open modal and display\n        openLightbox(index - 1);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"latest-post profile-pic-video-sidebar-custom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"img-fluid\",\n      alt: \"post1\",\n      src: process.env.REACT_APP_PLACEHOLDER_IMAGE,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 25\n      }\n    }))));\n  }\n};\n\nconst RenderGalleryModalHackerProfileHelper = _ref => {\n  let {\n    closeLightbox,\n    user,\n    openLightbox\n  } = _ref;\n  const [picturesArr, setPicturesArr] = useState([]);\n  const [captions, setCaptions] = useState([]);\n  const callbacks = {\n    onSlideChange: object => console.log(object),\n    onLightboxOpened: object => console.log(object),\n    onLightboxClosed: object => console.log(object),\n    onCountSlides: object => console.log(object)\n  };\n  const options = {\n    settings: {\n      overlayColor: \"rgba(23, 33, 175, 0.7)\",\n      autoplaySpeed: 2250,\n      boxShadow: true\n    },\n    buttons: {\n      backgroundColor: \"#1b5245\",\n      iconColor: \"rgba(126, 172, 139, 0.8)\"\n    },\n    thumbnails: {},\n    caption: {\n      captionColor: \"#a6cfa5\",\n      captionTextTransform: \"uppercase\"\n    }\n  };\n  useEffect(async () => {\n    if (typeof user.profilePicsVideos !== \"undefined\" && user.profilePicsVideos.length > 0) {\n      const captionArray = []; // pictures exist - run setup logic\n\n      const newlyStructuredProfilePicsVids = await user.profilePicsVideos.map((el, idx, row) => {\n        if (idx + 1 === row.length) {\n          // Last one.\n          let result = {\n            src: `${process.env.REACT_APP_ASSET_LINK}/${el.link}`,\n            type: el.type.includes(\"image\") ? \"photo\" : \"video\",\n            caption: `You're viewing the ${el.name} file...`,\n            autoplay: false,\n            showControls: true,\n            thumbnail: `${process.env.REACT_APP_ASSET_LINK}/${el.link}`,\n            link: `${process.env.REACT_APP_ASSET_LINK}/${el.link}`,\n            className: \"caption-thumbnail-custom-hacker-profile\"\n          };\n          let caption = /*#__PURE__*/React.createElement(\"div\", {\n            className: \"SRLCustomCaption lightbox-hacker-profile-display-custom\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 25\n            }\n          }, \"Something - put a like or respond action here...\", /*#__PURE__*/React.createElement(\"span\", {\n            className: \"SRLCustomCaption\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 27\n            }\n          }, \"You're viewing \", el.name)); // push appropriate caption for lightbox\n\n          captionArray.push(caption); // return constructed obj for lightbox\n\n          return result;\n        } else {\n          // Not last one.\n          let resultNotLast = {\n            src: `${process.env.REACT_APP_ASSET_LINK}/${el.link}`,\n            type: el.type.includes(\"image\") ? \"photo\" : \"video\",\n            caption: `You're viewing the ${el.name} file...`,\n            autoplay: false,\n            showControls: true,\n            thumbnail: `${process.env.REACT_APP_ASSET_LINK}/${el.link}`,\n            link: `${process.env.REACT_APP_ASSET_LINK}/${el.link}`,\n            className: \"caption-thumbnail-custom-hacker-profile\"\n          };\n          let caption = /*#__PURE__*/React.createElement(\"div\", {\n            className: \"SRLCustomCaption lightbox-hacker-profile-display-custom\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 25\n            }\n          }, \"Something - put a like or respond action here...\", /*#__PURE__*/React.createElement(\"span\", {\n            className: \"SRLCustomCaption\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 27\n            }\n          }, \"You're viewing \", el.name)); // push appropriate caption for lightbox\n\n          captionArray.push(caption); // return constructed obj for lightbox\n\n          return resultNotLast;\n        }\n      }); // wait for .mapped to finish then set the local state.\n\n      if (newlyStructuredProfilePicsVids) {\n        setCaptions(captionArray);\n        setPicturesArr(newlyStructuredProfilePicsVids);\n      }\n    }\n  }, []);\n\n  const galleryCloseModal = data => {\n    console.log(\"galleryCloseModal callback :\", data);\n    closeLightbox();\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SRLWrapper, {\n    callbacks: callbacks,\n    options: options,\n    customCaptions: captions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"gallery-spacer-hacker-profile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"text-center customized-row-profile-hacker-pics\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 21\n    }\n  }, typeof picturesArr !== \"undefined\" && picturesArr.length > 0 ? picturesArr.map((file, idxxx) => renderPictureOrVideoLast(file, idxxx, openLightbox)) : null))));\n};\n\nexport default {\n  renderPictureOrVideoLast,\n  RenderGalleryModalHackerProfileHelper\n};","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/people/hackers/individualProfile/bars/helpers/rightBarHelperFunctions.js"],"names":["React","Fragment","useState","useEffect","ReactPlayer","_","SRLWrapper","renderPictureOrVideoLast","file","index","openLightbox","has","type","includes","process","env","REACT_APP_ASSET_LINK","link","REACT_APP_PLACEHOLDER_IMAGE","RenderGalleryModalHackerProfileHelper","closeLightbox","user","picturesArr","setPicturesArr","captions","setCaptions","callbacks","onSlideChange","object","console","log","onLightboxOpened","onLightboxClosed","onCountSlides","options","settings","overlayColor","autoplaySpeed","boxShadow","buttons","backgroundColor","iconColor","thumbnails","caption","captionColor","captionTextTransform","profilePicsVideos","length","captionArray","newlyStructuredProfilePicsVids","map","el","idx","row","result","src","name","autoplay","showControls","thumbnail","className","push","resultNotLast","galleryCloseModal","data","idxxx"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\nimport ReactPlayer from \"react-player\";\nimport _ from \"lodash\";\nimport \"./styles.css\";\nimport { SRLWrapper } from \"simple-react-lightbox\";\n\nconst renderPictureOrVideoLast = (file, index, openLightbox) => {\n    if (file !== null && _.has(file, \"link\")) {\n        if (file.type.includes(\"video\")) {\n            // video logic\n            return (\n                <Fragment>\n                    <li onClick={() => {\n                        // open modal and display\n                        openLightbox(index - 1);\n                    }}>\n                        <div className=\"latest-post profile-pic-video-sidebar-custom\">\n                            <ReactPlayer playing={true} loop={true} muted={true} width={\"100%\"} className={\"img-fluid\"} wrapper={\"div\"} url={`${process.env.REACT_APP_ASSET_LINK}/${file.link}`} />\n                        </div>\n                    </li>\n                </Fragment>\n            );\n        } else {\n            // image logic\n            return (\n                <Fragment>\n                    <li onClick={() => {\n                        // open modal and display\n                        openLightbox(index - 1);\n                    }}>\n                        <div className=\"latest-post profile-pic-video-sidebar-custom\">\n                            <img className=\"img-fluid\" alt=\"post1\" src={`${process.env.REACT_APP_ASSET_LINK}/${file.link}`} />\n                        </div>\n                    </li>\n                </Fragment>\n            );\n        }  \n    } else {\n        // image logic - DEFAULT.\n        return (\n            <Fragment>\n                <li onClick={() => {\n                    // open modal and display\n                    openLightbox(index - 1);\n                }}>\n                    <div className=\"latest-post profile-pic-video-sidebar-custom\">\n                        <img className=\"img-fluid\" alt=\"post1\" src={process.env.REACT_APP_PLACEHOLDER_IMAGE} />\n                    </div>\n                </li>\n            </Fragment>\n        );\n    } \n}\nconst RenderGalleryModalHackerProfileHelper = ({ closeLightbox, user, openLightbox }) => {\n\n    const [ picturesArr, setPicturesArr ] = useState([]);\n    const [ captions, setCaptions ] = useState([]);\n\n    const callbacks = {\n        onSlideChange: object => console.log(object),\n        onLightboxOpened: object => console.log(object),\n        onLightboxClosed: object => console.log(object),\n        onCountSlides: object => console.log(object)\n    };\n\n    const options = {\n        settings: {\n            overlayColor: \"rgba(23, 33, 175, 0.7)\",\n            autoplaySpeed: 2250,\n            boxShadow: true\n        },\n        buttons: {\n            backgroundColor: \"#1b5245\",\n            iconColor: \"rgba(126, 172, 139, 0.8)\",\n        },\n        thumbnails: {\n           \n        },\n        caption: {\n            captionColor: \"#a6cfa5\",\n            captionTextTransform: \"uppercase\",\n        }\n    };\n\n    useEffect(async () => {\n\n        if (typeof user.profilePicsVideos !== \"undefined\" && user.profilePicsVideos.length > 0) {\n            const captionArray = [];\n            // pictures exist - run setup logic\n            const newlyStructuredProfilePicsVids = await user.profilePicsVideos.map((el, idx, row) => {\n                if (idx + 1 === row.length) {\n                    // Last one.\n                    let result = {\n                        src: `${process.env.REACT_APP_ASSET_LINK}/${el.link}`,\n                        type: el.type.includes(\"image\") ? \"photo\" : \"video\",\n                        caption: `You're viewing the ${el.name} file...`,\n                        autoplay: false,\n                        showControls: true,\n                        thumbnail: `${process.env.REACT_APP_ASSET_LINK}/${el.link}`,\n                        link: `${process.env.REACT_APP_ASSET_LINK}/${el.link}`,\n                        className: \"caption-thumbnail-custom-hacker-profile\"\n                    };\n                    let caption = (\n                        <div className=\"SRLCustomCaption lightbox-hacker-profile-display-custom\">\n                          Something - put a like or respond action here...\n                          <span className=\"SRLCustomCaption\">You're viewing {el.name}</span>\n                        </div>\n                    );\n                    // push appropriate caption for lightbox\n                    captionArray.push(caption);\n                    // return constructed obj for lightbox\n                    return result;\n                } else {\n                    // Not last one.\n                    let resultNotLast = {\n                        src: `${process.env.REACT_APP_ASSET_LINK}/${el.link}`,\n                        type: el.type.includes(\"image\") ? \"photo\" : \"video\",\n                        caption: `You're viewing the ${el.name} file...`,\n                        autoplay: false,\n                        showControls: true,\n                        thumbnail: `${process.env.REACT_APP_ASSET_LINK}/${el.link}`,\n                        link: `${process.env.REACT_APP_ASSET_LINK}/${el.link}`,\n                        className: \"caption-thumbnail-custom-hacker-profile\"\n                    }\n                    let caption = (\n                        <div className=\"SRLCustomCaption lightbox-hacker-profile-display-custom\">\n                          Something - put a like or respond action here...\n                          <span className=\"SRLCustomCaption\">You're viewing {el.name}</span>\n                        </div>\n                    );\n                    // push appropriate caption for lightbox\n                    captionArray.push(caption);\n                    // return constructed obj for lightbox\n                    return resultNotLast;\n                }\n            });\n            // wait for .mapped to finish then set the local state.\n            if (newlyStructuredProfilePicsVids) {\n                setCaptions(captionArray);\n                setPicturesArr(newlyStructuredProfilePicsVids);\n            }\n        }\n    }, []);\n\n    const galleryCloseModal = (data) => {\n        console.log(\"galleryCloseModal callback :\", data);\n\n        closeLightbox();\n    }\n    return (\n        <Fragment>\n            <SRLWrapper callbacks={callbacks} options={options} customCaptions={captions}>\n                <div className={\"gallery-spacer-hacker-profile\"}>\n                    <ul className=\"text-center customized-row-profile-hacker-pics\">\n                        {typeof picturesArr !== \"undefined\" && picturesArr.length > 0 ? picturesArr.map((file, idxxx) => renderPictureOrVideoLast(file, idxxx, openLightbox)) : null}\n                    </ul>\n                </div>\n            </SRLWrapper>\n        </Fragment>\n    );\n}\nexport default {\n    renderPictureOrVideoLast,\n    RenderGalleryModalHackerProfileHelper\n};"]},"metadata":{},"sourceType":"module"}