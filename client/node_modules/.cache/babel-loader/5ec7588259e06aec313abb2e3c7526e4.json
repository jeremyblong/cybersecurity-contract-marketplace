{"ast":null,"code":"import React, { Component } from 'react';\nimport * as SendBird from \"sendbird\";\nimport { connect } from \"react-redux\";\nimport { saveSendbirdInitialData } from \"./redux/actions/messaging/initialization/initSBLogic.js\";\nimport _ from \"lodash\";\nconst sb = new SendBird({\n  appId: process.env.REACT_APP_SENDBIRD_APP_ID,\n  localCacheEnabled: true\n});\n\nclass MountingLogicRedux extends Component {\n  constructor(props) {\n    super(props);\n\n    this.renderOnceUpdateProfileSendbirdInfo = () => {\n      const reversed = accountData.profilePicsVideos.reverse();\n\n      for (let index = 0; index < reversed.length; index++) {\n        const item = reversed[index];\n\n        if (item.type.includes(\"image\")) {\n          // update \n          // change mounted state to prevent further renders (will revert back to FALSE upon page refresh)\n          sb.updateCurrentUserInfo(`${accountData.firstName} ${accountData.lastName}`, `${process.env.REACT_APP_ASSET_LINK}/${item.link}`, (response, error) => {\n            if (error) {\n              // Handle error.\n              console.log(\"error while updating to lastest info!\", error);\n            } else {\n              console.log(\"SUCCESSFULLY updated profile sendbird information!\");\n            }\n          }, () => {\n            console.log(\"callback!\");\n          });\n          break;\n        }\n      }\n    };\n\n    this.state = {\n      profilePic: \"\",\n      updatedAlready: false\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      saveSendbirdInitialData,\n      authenticated,\n      accountData,\n      SBData\n    } = this.props;\n\n    if (prevProps.SBData !== SBData) {\n      console.log(\"prevProps\", prevProps, prevState, SBData);\n      saveSendbirdInitialData(sb);\n    }\n  }\n\n  render() {\n    const {\n      authenticated,\n      accountData\n    } = this.props;\n    const {\n      updatedAlready\n    } = this.state; // run other SENDBIRD Logic init\n\n    if (authenticated === true) {\n      console.log(\"validating - connecting user MESSAGING logic...\", sb);\n      sb.connect(accountData.uniqueId, (user, error) => {\n        if (error) {\n          // Handle error.\n          console.log(\"Messaging connection error... :\", error);\n        } // The user is connected to Sendbird server.\n\n\n        console.log(`The user - ${accountData.uniqueId} - is connected to Sendbird server`, user);\n\n        if (!updatedAlready) {\n          renderOnceUpdateProfileSendbirdInfo();\n        }\n      });\n    }\n\n    return null;\n  }\n\n}\n\nconst mapStateToProps = state => {\n  console.log(\"Stateeeeeee\", state);\n  return {\n    authenticated: _.has(state.auth.data, \"accountType\") ? true : false,\n    accountData: state.auth.data,\n    SBData: state.sendbirdInitData.sendbirdInitData\n  };\n};\n\nexport default connect(mapStateToProps, {\n  saveSendbirdInitialData\n})(MountingLogicRedux);","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/mountingLogicRedux.js"],"names":["React","Component","SendBird","connect","saveSendbirdInitialData","_","sb","appId","process","env","REACT_APP_SENDBIRD_APP_ID","localCacheEnabled","MountingLogicRedux","constructor","props","renderOnceUpdateProfileSendbirdInfo","reversed","accountData","profilePicsVideos","reverse","index","length","item","type","includes","updateCurrentUserInfo","firstName","lastName","REACT_APP_ASSET_LINK","link","response","error","console","log","state","profilePic","updatedAlready","componentDidUpdate","prevProps","prevState","authenticated","SBData","render","uniqueId","user","mapStateToProps","has","auth","data","sendbirdInitData"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as SendBird from \"sendbird\";\nimport { connect } from \"react-redux\";\nimport { saveSendbirdInitialData } from \"./redux/actions/messaging/initialization/initSBLogic.js\";\nimport _ from \"lodash\";\n\n\nconst sb = new SendBird({ appId: process.env.REACT_APP_SENDBIRD_APP_ID, localCacheEnabled: true });\n\nclass MountingLogicRedux extends Component {\nconstructor(props) {\n    super(props);\n\n    this.state = {\n        profilePic: \"\",\n        updatedAlready: false\n    }\n}\n    componentDidUpdate(prevProps, prevState) {\n        const { saveSendbirdInitialData, authenticated, accountData, SBData } = this.props;\n\n        if (prevProps.SBData !== SBData) {\n            console.log(\"prevProps\", prevProps, prevState, SBData);\n\n            saveSendbirdInitialData(sb);\n        }\n    }\n    renderOnceUpdateProfileSendbirdInfo = () => {\n        const reversed = accountData.profilePicsVideos.reverse();\n\n        for (let index = 0; index < reversed.length; index++) {\n            const item = reversed[index];\n            if (item.type.includes(\"image\")) {\n                // update \n                // change mounted state to prevent further renders (will revert back to FALSE upon page refresh)\n                sb.updateCurrentUserInfo(`${accountData.firstName} ${accountData.lastName}`, `${process.env.REACT_APP_ASSET_LINK}/${item.link}`, (response, error) => {\n                    if (error) {\n                        // Handle error.\n                        console.log(\"error while updating to lastest info!\", error);\n                    } else {\n                        console.log(\"SUCCESSFULLY updated profile sendbird information!\");\n                    }\n                }, () => {\n                    console.log(\"callback!\")\n                });\n                break;\n            }\n        }\n    }\n    render () {\n        const { authenticated, accountData } = this.props;\n        const { updatedAlready } = this.state;\n        // run other SENDBIRD Logic init\n        if (authenticated === true) {\n            console.log(\"validating - connecting user MESSAGING logic...\", sb);\n            \n            sb.connect(accountData.uniqueId, (user, error) => {\n                if (error) {\n                    // Handle error.\n                    console.log(\"Messaging connection error... :\", error);\n                }\n                // The user is connected to Sendbird server.\n                console.log(`The user - ${accountData.uniqueId} - is connected to Sendbird server`, user);\n\n                if (!updatedAlready) {\n                    renderOnceUpdateProfileSendbirdInfo();\n                } \n            });\n        }\n        return null;\n    }\n}\nconst mapStateToProps = (state) => {\n    console.log(\"Stateeeeeee\", state);\n    return {\n        authenticated: _.has(state.auth.data, \"accountType\") ? true : false,\n        accountData: state.auth.data,\n        SBData: state.sendbirdInitData.sendbirdInitData\n    }\n}\nexport default connect(mapStateToProps, { saveSendbirdInitialData })(MountingLogicRedux);"]},"metadata":{},"sourceType":"module"}