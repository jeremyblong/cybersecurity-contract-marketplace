{"ast":null,"code":"// helpers logic related to mainly to redux-hook-form\nconst HookHelpers = () => {\n  // start helper creations...\n  const listingTitleChecker = {\n    check: (setError, register) => {\n      return { ...register(\"listingTitle\", {\n          required: {\n            value: true,\n            message: \"You MUST enter AT least 15 characters to 75 characters\"\n          },\n          minLength: {\n            value: 15,\n            message: \"You must enter AT Least 15 characters\"\n          },\n          maxLength: {\n            value: 75,\n            message: \"You may ONLY enter 75 characters or less\"\n          }\n        })\n      };\n    },\n    onChange: (e, setValue) => {\n      const value = e.target.value;\n      setValue(\"listingTitle\", value, {\n        shouldValidate: false\n      });\n    },\n    name: \"listingTitle\",\n    placeholder: \"Enter a stream title...\",\n    type: \"text\",\n    label: \"Enter a stream title (this will be displayed first/foremost w/other streams)\"\n  };\n  const subcategoryChecker = {\n    check: (setError, register, values, errors, name, clearErrors) => {\n      return { ...register(name, {\n          required: {\n            value: true,\n            message: \"You MUST select an option before starting your LIVE stream\"\n          },\n          onBlur: e => {\n            // log to check whats returned\n            const value = e.target.value; // timeout to delay for state change(s)\n\n            setTimeout(() => {\n              // clear error after proper selection\n              if (typeof value !== \"undefined\" && Object.keys(value).length > 0) {\n                clearErrors(name);\n              } else {\n                // set error as nothing was selected (blank 'click-off' selection of selector)\n                setError(name, {\n                  type: \"manual\",\n                  message: \"You MUST select an option before starting your LIVE stream\"\n                });\n              }\n            }, 50);\n          }\n        })\n      };\n    },\n    name: \"subCategory\",\n    placeholder: \"Enter a 'sub' category for your live stream (stream filtration)...\",\n    type: \"text\",\n    label: \"Stream Sub-Category\"\n  };\n  const hashtagsChecker = {\n    check: (setError, register, values, errors, name, clearErrors) => {\n      return { ...register(name, {\n          required: {\n            value: true,\n            message: \"You MUST enter AT least 5 hashtags/tags before attempting to continue\"\n          },\n          onBlur: e => {\n            // log to check whats returned\n            const value = e.target.value;\n            console.log(\"value\", value, e); // timeout to delay for state change(s)\n            // setTimeout(() => {\n            //     // clear error after proper selection\n            //     if ((typeof value !== \"undefined\") && (Object.keys(value).length > 0)) {\n            //         clearErrors(name);\n            //     } else {\n            //         // set error as nothing was selected (blank 'click-off' selection of selector)\n            //         setError(name, {\n            //             type: \"manual\",\n            //             message: \"You MUST enter AT least 5 hashtags/tags before attempting to continue\",\n            //         });\n            //     }\n            // }, 50);\n          }\n        })\n      };\n    },\n    placeholder: \"Enter between 5-15 hashtags/tags...\",\n    type: \"text\",\n    label: \"Enter BETWEEN 5-15 hashtags to proceed forward - people will use these to find your live stream...\"\n  };\n\n  const handleSubcategoryCheckerChange = (selectedOption, setValue, subCategoryRefSelector) => {\n    // run conditionals\n    setValue('quantityAvailableForSale', selectedOption, {\n      shouldValidate: false\n    });\n    subCategoryRefSelector.current.blur();\n  };\n\n  return {\n    hashtagsChecker,\n    subcategoryChecker,\n    handleSubcategoryCheckerChange,\n    listingTitleChecker\n  };\n};\n\nexport default HookHelpers;","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/streamingLiveHacks/createLiveStream/createNewStream/helpers/helperFunctions.js"],"names":["HookHelpers","listingTitleChecker","check","setError","register","required","value","message","minLength","maxLength","onChange","e","setValue","target","shouldValidate","name","placeholder","type","label","subcategoryChecker","values","errors","clearErrors","onBlur","setTimeout","Object","keys","length","hashtagsChecker","console","log","handleSubcategoryCheckerChange","selectedOption","subCategoryRefSelector","current","blur"],"mappings":"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","sourcesContent":["// helpers logic related to mainly to redux-hook-form\nconst HookHelpers = () => {\n    // start helper creations...\n    const listingTitleChecker = {\n        check: (setError, register) => {\n            return (\n                {...register(\"listingTitle\", { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 15 characters to 75 characters\"\n                }, minLength: {\n                    value: 15,\n                    message: \"You must enter AT Least 15 characters\"\n                }, maxLength: {\n                    value: 75,\n                    message: \"You may ONLY enter 75 characters or less\"\n                }})}\n            )\n        },\n        onChange: (e, setValue) => {\n            const value = e.target.value;\n\n            setValue(\"listingTitle\", value, { shouldValidate: false });\n        },\n        name: \"listingTitle\",\n        placeholder: \"Enter a stream title...\",\n        type: \"text\",\n        label: \"Enter a stream title (this will be displayed first/foremost w/other streams)\"\n    };\n    const subcategoryChecker = {\n        check: (setError, register, values, errors, name, clearErrors) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: \"You MUST select an option before starting your LIVE stream\"\n                }, onBlur: (e) => {\n                    // log to check whats returned\n\n                    const value = e.target.value;\n                    // timeout to delay for state change(s)\n                    setTimeout(() => {\n                        // clear error after proper selection\n                        if ((typeof value !== \"undefined\") && (Object.keys(value).length > 0)) {\n                            clearErrors(name);\n                        } else {\n                            // set error as nothing was selected (blank 'click-off' selection of selector)\n                            setError(name, {\n                                type: \"manual\",\n                                message: \"You MUST select an option before starting your LIVE stream\",\n                            });\n                        }\n                    }, 50);\n                }})}\n            )\n        },\n        name: \"subCategory\",\n        placeholder: \"Enter a 'sub' category for your live stream (stream filtration)...\",\n        type: \"text\",\n        label: \"Stream Sub-Category\"\n    };\n    const hashtagsChecker = {\n        check: (setError, register, values, errors, name, clearErrors) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 5 hashtags/tags before attempting to continue\"\n                }, onBlur: (e) => {\n                    // log to check whats returned\n\n                    const value = e.target.value;\n\n                    console.log(\"value\", value, e);\n                    // timeout to delay for state change(s)\n                    // setTimeout(() => {\n                    //     // clear error after proper selection\n                    //     if ((typeof value !== \"undefined\") && (Object.keys(value).length > 0)) {\n                    //         clearErrors(name);\n                    //     } else {\n                    //         // set error as nothing was selected (blank 'click-off' selection of selector)\n                    //         setError(name, {\n                    //             type: \"manual\",\n                    //             message: \"You MUST enter AT least 5 hashtags/tags before attempting to continue\",\n                    //         });\n                    //     }\n                    // }, 50);\n                }})}\n            )\n        },\n        placeholder: \"Enter between 5-15 hashtags/tags...\",\n        type: \"text\",\n        label: \"Enter BETWEEN 5-15 hashtags to proceed forward - people will use these to find your live stream...\"\n    };\n    const handleSubcategoryCheckerChange = (selectedOption, setValue, subCategoryRefSelector) => {\n        // run conditionals\n        setValue('quantityAvailableForSale', selectedOption, { shouldValidate: false });\n\n        subCategoryRefSelector.current.blur();\n    }\n    return {\n        hashtagsChecker,\n        subcategoryChecker,\n        handleSubcategoryCheckerChange,\n        listingTitleChecker\n    }\n}\n\n\nexport default HookHelpers;"]},"metadata":{},"sourceType":"module"}