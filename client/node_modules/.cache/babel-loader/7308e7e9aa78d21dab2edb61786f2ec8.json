{"ast":null,"code":"import React,{Fragment,useState,useEffect}from'react';import\"./styles.css\";import{Container,Row,Col,Card,CardBody,CardHeader,CardFooter,Input,FormGroup,Form,Label,Button}from\"reactstrap\";import Breadcrumb from'../../../../layout/breadcrumb';import Slider from'rc-slider';import{connect}from\"react-redux\";import Cards from'react-credit-cards';import axios from\"axios\";import{NotificationManager}from'react-notifications';import crypto from\"../../../../utils/crypto.js\";import{confirmAlert}from'react-confirm-alert';const{encryptObject}=crypto;const TopOffBalanceHelper=_ref=>{let{userData}=_ref;const[valid,setValidness]=useState(false);const[percentageToBePaid,setPercentageToBePaid]=useState(25);const[cost,setCost]=useState(0);const[marks,setMarks]=useState({0:{style:{color:\"blue\"},label:\"$0.00\"},10:{style:{color:\"blue\"},label:\"$125\"},20:{style:{color:\"blue\"},label:\"$250\"},30:{style:{color:\"blue\"},label:\"$375\"},40:{style:{color:\"blue\"},label:\"$500\"},50:{style:{color:\"blue\"},label:\"$625\"},60:{style:{color:\"blue\"},label:\"$750\"},70:{style:{color:\"blue\"},label:\"$875\"},80:{style:{color:\"blue\"},label:\"$1000\"},90:{style:{color:\"blue\"},label:\"$1125\"},100:{style:{color:\"blue\"},label:\"$1250\"}});const[selectedPaymentCard,setSelectedCard]=useState(null);const[cardInfo,setCardInfo]=useState({cvc:\"\",expiry:\"\",focus:\"\",name:\"\",number:\"\",cardType:\"\"});const handleInputChange=e=>{const{name,value}=e.target;setSelectedCard(null);setCardInfo(prevState=>{return{...prevState,[name]:value};});};console.log(\"setSelectedCard\",selectedPaymentCard);const handleSliderValueChange=percentage=>{console.log(\"handleSliderValueChange percentage\",percentage);setPercentageToBePaid(percentage);};const onAfterChange=percentage=>{console.log(\"onAfterChange percentage\",percentage);const totalCost=1250;const perc=parseFloat(percentage)/100.0;const converted=totalCost*perc;setCost(converted);};const calculateCurrentSelectedCost=percentage=>{const totalCost=1250;const perc=parseFloat(percentage)/100.0;const converted=totalCost*perc;return\"$\".concat(converted.toFixed(0),\" selected to be deposited into your account immediately!\");};const calculateDisabled=()=>{const{cvc,expiry,focus,name,number,cardType}=cardInfo;if(valid===true&&typeof cvc!==\"undefined\"&&cvc.length>=3&&typeof expiry!==\"undefined\"&&expiry.length>=4&&typeof name!==\"undefined\"&&name.length>=8&&typeof number!==\"undefined\"&&number.length>=10){return false;}else{return true;}};const handleSubmissionDepositFunds=()=>{console.log(\"handleSubmissionDepositFunds ran/running!\");if(selectedPaymentCard!==null){confirmAlert({customUI:_ref2=>{let{onClose}=_ref2;return/*#__PURE__*/React.createElement(\"div\",{className:\"custom-ui\"},/*#__PURE__*/React.createElement(\"h1\",null,\"Are you sure you'd like to make this deposit?!\"),/*#__PURE__*/React.createElement(\"p\",null,\"You're about to deposit approx. \",/*#__PURE__*/React.createElement(\"strong\",{style:{color:\"#f73164\"}},\"$\",cost.toFixed(2)),\" into your account which will charge the entered/selected card via the form on this page. Please click \\\"Yes, Make Payment & Deposit Funds!\\\" if you wish to proceed with this transaction and/or deposit!\"),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(Button,{className:\"btn-square-success\",color:\"success\",style:{width:\"50%\"},onClick:()=>{submitLogic();onClose();}},\"Yes, Make Payment & Deposit Funds!\"),/*#__PURE__*/React.createElement(Button,{className:\"btn-square-danger\",color:\"danger\",style:{width:\"50%\"},onClick:()=>{onClose();}},\"Yes, Cancel!\"));}});}else{submitLogic();}};const submitLogic=()=>{if(typeof cost!==\"undefined\"&&cost!==0){const config={id:userData.uniqueId,accountType:userData.accountType,cardInfo:encryptObject(cardInfo),cost};axios.post(\"\".concat(process.env.REACT_APP_BASE_URL,\"/deposit/funds/account/both/account/types\"),config).then(res=>{if(res.data.message===\"Successfully deposited funds!\"){console.log(res.data);NotificationManager.success(\"Successfully deposited funds into your account and they are now ACTIVE and AVAILIABLE! Check your account bal to see the reflected/updated changes..\",\"Successfully deposited funds into account & charged card!\",4750);}else{console.log(\"err\",res.data);NotificationManager.warning(\"An unknown error has occurred while attempting to deposit funds into your account. This error could've originated from a failed payment, database errors or other misc errors. Contact support if the problem persists!\",\"Unknown error has occurred.\",4750);}}).catch(err=>{console.log(err);NotificationManager.warning(\"An unknown error has occurred while attempting to deposit funds into your account. This error could've originated from a failed payment, database errors or other misc errors. Contact support if the problem persists!\",\"Unknown error has occurred.\",4750);});}else{NotificationManager.info(\"You MUST select a value (number) amount so we know how much you'd like to deposit into your account, please select a value with the slider before proceeding...!\",\"Select a value/number via the slider before continuing!\",4750);}};console.log(\"Cardinfo\",cardInfo);return/*#__PURE__*/React.createElement(Fragment,null,/*#__PURE__*/React.createElement(Breadcrumb,{parent:\"Purchase 'In-App' Currency And/Or Deposit Fund's\",title:\"Deposit funds into your account balance (can be withdrawn at later date)\"}),/*#__PURE__*/React.createElement(Container,{fluid:true},/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{sm:\"12\",md:\"12\",lg:\"12\",xl:\"12\"},/*#__PURE__*/React.createElement(Card,{className:\"topoff-balance-card-wrapper\"},/*#__PURE__*/React.createElement(CardHeader,{className:\"b-l-secondary b-r-secondary\"},/*#__PURE__*/React.createElement(\"h3\",{className:\"title-deposit-funds\"},\"Deposit funds into your account and/or top-off your balance with more funding!\"),/*#__PURE__*/React.createElement(\"p\",{className:\"lead\"},\"You can deposit fund's into your account to have a positive availiable balance to pay hacker's/contractors, employers, purchase profile boosts, purchase tokens, etc... These funds ARE retreivable and \",/*#__PURE__*/React.createElement(\"strong\",null,\"CAN BE WITHDRAWN\"),\" at any point if you wish to clear your current/availiable account balance.\")),/*#__PURE__*/React.createElement(CardBody,{className:\"b-l-info b-r-info\"},/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(\"div\",{className:\"centered-both-ways\"},/*#__PURE__*/React.createElement(Col,{className:\"dotted-border-col-two-customized\",sm:\"12\",md:\"6\",lg:\"6\",xl:\"6\",style:{marginRight:\"17.5px\"}},/*#__PURE__*/React.createElement(\"h3\",null,\"Please select a value that you wish to deposit into your account. \",/*#__PURE__*/React.createElement(\"strong\",{style:{color:\"darkred\",textDecorationLine:\"underline\"}},\"drag the slider\"),\" to the appropriate point, select your payment method & make the desired purchase. You'll balance will be \",/*#__PURE__*/React.createElement(\"strong\",{style:{color:\"darkred\",textDecorationLine:\"underline\"}},\"immediately updated!\")),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(\"div\",{className:\"center-slider-adjustment-bar\"},/*#__PURE__*/React.createElement(\"p\",{className:\"lead\"},\"Please drag the marker to the appropriate position marking 'how much' you'd like to depsoit on this transaction..\"),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(Slider,{value:percentageToBePaid,startPoint:0,onAfterChange:onAfterChange,onChange:handleSliderValueChange,marks:marks}),/*#__PURE__*/React.createElement(\"div\",{className:\"centered-both-ways\"},/*#__PURE__*/React.createElement(\"h3\",{className:\"current-selected-cost\",style:{textAlign:\"center\"}},calculateCurrentSelectedCost(percentageToBePaid))))),/*#__PURE__*/React.createElement(Col,{className:\"dotted-border-col-two-customized\",sm:\"12\",md:\"6\",lg:\"6\",xl:\"6\"},/*#__PURE__*/React.createElement(Form,{className:\"theme-form mega-form\"},/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(Input,{className:\"form-control\",type:\"text\",name:\"name\",value:cardInfo.name,placeholder:\"Name (Full Name - First/Last)\",onChange:e=>handleInputChange(e)})),/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(Input,{className:\"form-control\",type:\"number\",name:\"number\",value:cardInfo.number,placeholder:\"Enter your card number..\",onChange:e=>handleInputChange(e)})),/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(\"select\",{onChange:e=>{const value=e.target.value;if(value!==\"\"){cardInfo.expiry=value+cardInfo.expiry.substring(2,5);setSelectedCard(null);setCardInfo(prevState=>{return{...prevState,expiry:cardInfo.expiry};});}},style:{marginLeft:\"15px\"},className:\"form-control digits year-date-format\",name:\"expireMM\",id:\"expireMM\"},/*#__PURE__*/React.createElement(\"option\",{value:\"\"},\"Select a month\"),/*#__PURE__*/React.createElement(\"option\",{value:\"01\"},\"January\"),/*#__PURE__*/React.createElement(\"option\",{value:\"02\"},\"February\"),/*#__PURE__*/React.createElement(\"option\",{value:\"03\"},\"March\"),/*#__PURE__*/React.createElement(\"option\",{value:\"04\"},\"April\"),/*#__PURE__*/React.createElement(\"option\",{value:\"05\"},\"May\"),/*#__PURE__*/React.createElement(\"option\",{value:\"06\"},\"June\"),/*#__PURE__*/React.createElement(\"option\",{value:\"07\"},\"July\"),/*#__PURE__*/React.createElement(\"option\",{value:\"08\"},\"August\"),/*#__PURE__*/React.createElement(\"option\",{value:\"09\"},\"September\"),/*#__PURE__*/React.createElement(\"option\",{value:\"10\"},\"October\"),/*#__PURE__*/React.createElement(\"option\",{value:\"11\"},\"November\"),/*#__PURE__*/React.createElement(\"option\",{value:\"12\"},\"December\")),/*#__PURE__*/React.createElement(\"select\",{onChange:e=>{const value=e.target.value;if(value!==\"\"){cardInfo.expiry=cardInfo.expiry.substring(0,2)+value;setSelectedCard(null);setCardInfo(prevState=>{return{...prevState,expiry:cardInfo.expiry};});}},className:\"form-control digits year-date-format\",name:\"expireYY\",id:\"expireYY\"},/*#__PURE__*/React.createElement(\"option\",{value:\"\"},\"Select a year\"),/*#__PURE__*/React.createElement(\"option\",{value:\"20\"},\"2020\"),/*#__PURE__*/React.createElement(\"option\",{value:\"21\"},\"2021\"),/*#__PURE__*/React.createElement(\"option\",{value:\"22\"},\"2022\"),/*#__PURE__*/React.createElement(\"option\",{value:\"23\"},\"2023\"),/*#__PURE__*/React.createElement(\"option\",{value:\"24\"},\"2024\"),/*#__PURE__*/React.createElement(\"option\",{value:\"25\"},\"2025\"),/*#__PURE__*/React.createElement(\"option\",{value:\"26\"},\"2026\"),/*#__PURE__*/React.createElement(\"option\",{value:\"27\"},\"2027\"),/*#__PURE__*/React.createElement(\"option\",{value:\"28\"},\"2028\"),/*#__PURE__*/React.createElement(\"option\",{value:\"29\"},\"2029\"),/*#__PURE__*/React.createElement(\"option\",{value:\"30\"},\"2030\"),/*#__PURE__*/React.createElement(\"option\",{value:\"31\"},\"2031\"),/*#__PURE__*/React.createElement(\"option\",{value:\"32\"},\"2032\"),/*#__PURE__*/React.createElement(\"option\",{value:\"33\"},\"2033\"),/*#__PURE__*/React.createElement(\"option\",{value:\"34\"},\"2034\"),/*#__PURE__*/React.createElement(\"option\",{value:\"35\"},\"2035\"),/*#__PURE__*/React.createElement(\"option\",{value:\"36\"},\"2036\")))),/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(Input,{className:\"form-control\",type:\"number\",name:\"cvc\",placeholder:\"CVC... (Security Code On Back)\",value:cardInfo.cvc,onChange:e=>handleInputChange(e)})),/*#__PURE__*/React.createElement(\"div\",{className:\"centered-both-ways\"},/*#__PURE__*/React.createElement(Cards,{callback:(type,isValid)=>{setCardInfo(prevState=>{return{...prevState,cardType:type.issuer};});setValidness(isValid);},cvc:cardInfo.cvc,expiry:cardInfo.expiry,focused:cardInfo.focus,name:cardInfo.name,number:cardInfo.number})))))),/*#__PURE__*/React.createElement(Row,{style:{marginTop:\"27.5px\"}},/*#__PURE__*/React.createElement(Col,{sm:\"12\",md:\"12\",lg:\"12\",xl:\"12\"},/*#__PURE__*/React.createElement(Button,{disabled:calculateDisabled(),className:\"btn-square-info\",color:\"info-2x\",onClick:()=>handleSubmissionDepositFunds(),outline:true,style:{width:\"100%\"}},\"Submit & Purchase Account Credits & Top-Off Balance!\")))),/*#__PURE__*/React.createElement(CardFooter,{className:\"b-l-secondary b-r-secondary\"},/*#__PURE__*/React.createElement(\"p\",{className:\"lead\"},\"An account balance allows for specific actions such as 'purchasing tokens', 'profile boosts' and other misc. actions. It is \",/*#__PURE__*/React.createElement(\"strong\",null,\"recommended\"),\" that you keep a \",/*#__PURE__*/React.createElement(\"strong\",null,\"minimum\"),\" of $125.00 in your account balance at any given time however this is NOT mandatory, just recommended.\")))))));};const mapStateToProps=state=>{return{userData:state.auth.data};};export default connect(mapStateToProps,{})(TopOffBalanceHelper);","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/src/components/dashboard/balanceRelated/topOffBal/topoffBalance.js"],"names":["React","Fragment","useState","useEffect","Container","Row","Col","Card","CardBody","CardHeader","CardFooter","Input","FormGroup","Form","Label","Button","Breadcrumb","Slider","connect","Cards","axios","NotificationManager","crypto","confirmAlert","encryptObject","TopOffBalanceHelper","userData","valid","setValidness","percentageToBePaid","setPercentageToBePaid","cost","setCost","marks","setMarks","style","color","label","selectedPaymentCard","setSelectedCard","cardInfo","setCardInfo","cvc","expiry","focus","name","number","cardType","handleInputChange","e","value","target","prevState","console","log","handleSliderValueChange","percentage","onAfterChange","totalCost","perc","parseFloat","converted","calculateCurrentSelectedCost","toFixed","calculateDisabled","length","handleSubmissionDepositFunds","customUI","onClose","width","submitLogic","config","id","uniqueId","accountType","post","process","env","REACT_APP_BASE_URL","then","res","data","message","success","warning","catch","err","info","marginRight","textDecorationLine","textAlign","substring","marginLeft","type","isValid","issuer","marginTop","mapStateToProps","state","auth"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport \"./styles.css\";\nimport { Container, Row, Col, Card, CardBody, CardHeader, CardFooter, Input, FormGroup, Form, Label, Button } from \"reactstrap\";\nimport Breadcrumb from '../../../../layout/breadcrumb';\nimport Slider from 'rc-slider';\nimport { connect } from \"react-redux\";\nimport Cards from 'react-credit-cards';\nimport axios from \"axios\";\nimport { NotificationManager } from 'react-notifications';\nimport crypto from \"../../../../utils/crypto.js\";\nimport { confirmAlert } from 'react-confirm-alert';\n\n\nconst { \n    encryptObject \n} = crypto;\n\nconst TopOffBalanceHelper = ({ userData }) => {\n    const [ valid, setValidness ] = useState(false);\n    const [ percentageToBePaid, setPercentageToBePaid ] = useState(25);\n    const [ cost, setCost ] = useState(0);\n    const [ marks, setMarks ] = useState({\n        0: { style: { color: \"blue\" }, label: \"$0.00\" },\n        10: { style: { color: \"blue\" }, label: \"$125\" },\n        20: { style: { color: \"blue\" }, label: \"$250\" },\n        30: { style: { color: \"blue\" }, label: \"$375\" },\n        40: { style: { color: \"blue\" }, label: \"$500\" },\n        50: { style: { color: \"blue\" }, label: \"$625\" },\n        60: { style: { color: \"blue\" }, label: \"$750\" },\n        70: { style: { color: \"blue\" }, label: \"$875\" },\n        80: { style: { color: \"blue\" }, label: \"$1000\" },\n        90: { style: { color: \"blue\" }, label: \"$1125\" },\n        100: { style: { color: \"blue\" }, label: \"$1250\" }\n    });\n    const [ selectedPaymentCard, setSelectedCard ] = useState(null);\n    const [ cardInfo, setCardInfo ] = useState({\n        cvc: \"\",\n        expiry: \"\",\n        focus: \"\",\n        name: \"\",\n        number: \"\",\n        cardType: \"\"\n    })\n\n    const handleInputChange = (e) => {\n        const { name, value } = e.target;\n\n        setSelectedCard(null);\n        \n        setCardInfo(prevState => {\n            return {\n                ...prevState,\n                [name]: value\n            }\n        })\n    }\n\n    console.log(\"setSelectedCard\", selectedPaymentCard);\n\n    const handleSliderValueChange = (percentage) => {\n        console.log(\"handleSliderValueChange percentage\", percentage);\n\n        setPercentageToBePaid(percentage);\n    }\n    const onAfterChange = (percentage) => {\n        console.log(\"onAfterChange percentage\", percentage);\n\n        const totalCost = 1250;\n        const perc = parseFloat(percentage) / 100.0;\n        const converted = totalCost * perc;\n        setCost(converted);\n    }\n    const calculateCurrentSelectedCost = (percentage) => {\n        const totalCost = 1250;\n        const perc = parseFloat(percentage) / 100.0;\n        const converted = totalCost * perc;\n        return `$${converted.toFixed(0)} selected to be deposited into your account immediately!`;\n    }\n\n    const calculateDisabled = () => {\n        const { cvc, expiry, focus, name, number, cardType } = cardInfo;\n\n        if ((valid === true && (typeof cvc !== \"undefined\" && cvc.length >= 3) && (typeof expiry !== \"undefined\" && expiry.length >= 4) && (typeof name !== \"undefined\" && name.length >= 8) && (typeof number !== \"undefined\" && number.length >= 10))) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n    const handleSubmissionDepositFunds = () => {\n        console.log(\"handleSubmissionDepositFunds ran/running!\");\n\n\n        if (selectedPaymentCard !== null) {\n            confirmAlert({\n                customUI: ({ onClose }) => {\n                  return (\n                    <div className='custom-ui'>\n                        <h1>Are you sure you'd like to make this deposit?!</h1>\n                        <p>You're about to deposit approx. <strong style={{ color: \"#f73164\" }}>${cost.toFixed(2)}</strong> into your account which will charge the entered/selected card via the form on this page. Please click \"Yes, Make Payment & Deposit Funds!\" if you wish to proceed with this transaction and/or deposit!</p>\n                        <hr />\n                        <Button className='btn-square-success' color={\"success\"} style={{ width: \"50%\" }} onClick={() => {\n                            submitLogic();\n                            onClose();\n                        }}>Yes, Make Payment & Deposit Funds!</Button>\n                        <Button className='btn-square-danger' color={\"danger\"} style={{ width: \"50%\" }} onClick={() => {\n                            onClose();\n                        }}\n                        >\n                            Yes, Cancel!\n                        </Button>\n                    </div>\n                  );\n                }\n            });\n        } else {\n            submitLogic();\n        }\n    }\n\n    const submitLogic = () => {\n        if (typeof cost !== \"undefined\" && cost !== 0) {\n            const config = {\n                id: userData.uniqueId,\n                accountType: userData.accountType,\n                cardInfo: encryptObject(cardInfo),\n                cost\n            }\n            axios.post(`${process.env.REACT_APP_BASE_URL}/deposit/funds/account/both/account/types`, config).then((res) => {\n                if (res.data.message === \"Successfully deposited funds!\") {\n    \n                    console.log(res.data);\n    \n                    NotificationManager.success(\"Successfully deposited funds into your account and they are now ACTIVE and AVAILIABLE! Check your account bal to see the reflected/updated changes..\", \"Successfully deposited funds into account & charged card!\", 4750);\n    \n                } else {\n                    console.log(\"err\", res.data);\n                    \n                    NotificationManager.warning(\"An unknown error has occurred while attempting to deposit funds into your account. This error could've originated from a failed payment, database errors or other misc errors. Contact support if the problem persists!\", \"Unknown error has occurred.\", 4750);\n                }\n            }).catch((err) => {\n                console.log(err);\n    \n                NotificationManager.warning(\"An unknown error has occurred while attempting to deposit funds into your account. This error could've originated from a failed payment, database errors or other misc errors. Contact support if the problem persists!\", \"Unknown error has occurred.\", 4750);\n            })\n        } else {\n            NotificationManager.info(\"You MUST select a value (number) amount so we know how much you'd like to deposit into your account, please select a value with the slider before proceeding...!\", \"Select a value/number via the slider before continuing!\", 4750);\n        }\n    }\n    console.log(\"Cardinfo\", cardInfo);\n\n    return (\n        <Fragment>\n            <Breadcrumb parent=\"Purchase 'In-App' Currency And/Or Deposit Fund's\" title=\"Deposit funds into your account balance (can be withdrawn at later date)\" />\n            <Container fluid={true}>\n                <Row>\n                    <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                        <Card className={\"topoff-balance-card-wrapper\"}>\n                            <CardHeader className={\"b-l-secondary b-r-secondary\"}>\n                                <h3 className='title-deposit-funds'>Deposit funds into your account and/or top-off your balance with more funding!</h3>\n                                <p className='lead'>You can deposit fund's into your account to have a positive availiable balance to pay hacker's/contractors, employers, purchase profile boosts, purchase tokens, etc... These funds ARE retreivable and <strong>CAN BE WITHDRAWN</strong> at any point if you wish to clear your current/availiable account balance.</p>\n                            </CardHeader>\n                            <CardBody className='b-l-info b-r-info'>\n                                <Row>\n                                    <div className='centered-both-ways'>\n                                        <Col className='dotted-border-col-two-customized' sm=\"12\" md=\"6\" lg=\"6\" xl=\"6\" style={{ marginRight: \"17.5px\" }}>\n                                            <h3>Please select a value that you wish to deposit into your account. <strong style={{ color: \"darkred\", textDecorationLine: \"underline\" }}>drag the slider</strong> to the appropriate point, select your payment method & make the desired purchase. You'll balance will be <strong style={{ color: \"darkred\", textDecorationLine: \"underline\" }}>immediately updated!</strong></h3>\n                                            <hr />\n                                            <div className='center-slider-adjustment-bar'>\n                                                <p className='lead'>Please drag the marker to the appropriate position marking 'how much' you'd like to depsoit on this transaction..</p>\n                                                <hr />\n                                                <Slider value={percentageToBePaid} startPoint={0} onAfterChange={onAfterChange} onChange={handleSliderValueChange} marks={marks} />\n                                                <div className='centered-both-ways'>\n                                                    <h3 className='current-selected-cost' style={{ textAlign: \"center\" }}>{calculateCurrentSelectedCost(percentageToBePaid)}</h3>\n                                                </div>\n                                            </div>\n                                        </Col>\n                                        <Col className='dotted-border-col-two-customized' sm=\"12\" md=\"6\" lg=\"6\" xl=\"6\">\n                                            <Form className=\"theme-form mega-form\">\n                                                <FormGroup>\n                                                    <Input\n                                                        className=\"form-control\"\n                                                        type=\"text\"\n                                                        name=\"name\"\n                                                        value={cardInfo.name}\n                                                        placeholder=\"Name (Full Name - First/Last)\"\n                                                        onChange={(e) => handleInputChange(e)}\n                                                    />\n                                                </FormGroup>\n                                                <FormGroup>\n                                                    <Input\n                                                        className=\"form-control\"\n                                                        type=\"number\"\n                                                        name=\"number\"\n                                                        value={cardInfo.number}\n                                                        placeholder=\"Enter your card number..\"\n                                                        onChange={(e) => handleInputChange(e)}\n                                                    />\n                                                </FormGroup>\n                                                <FormGroup>\n                                                    <Row>\n                                                        <select onChange={(e) => {\n                                                            const value = e.target.value;\n\n                                                            if (value !== \"\") {\n                                                        \n                                                                cardInfo.expiry = value + cardInfo.expiry.substring(2, 5);\n\n                                                                setSelectedCard(null);\n\n                                                                setCardInfo(prevState => {\n                                                                    return {\n                                                                        ...prevState,\n                                                                        expiry: cardInfo.expiry\n                                                                    }\n                                                                })\n                                                            }\n                                                        }} style={{ marginLeft: \"15px\" }} className=\"form-control digits year-date-format\" name='expireMM' id='expireMM'>\n                                                            <option value=''>Select a month</option>\n                                                            <option value='01'>January</option>\n                                                            <option value='02'>February</option>\n                                                            <option value='03'>March</option>\n                                                            <option value='04'>April</option>\n                                                            <option value='05'>May</option>\n                                                            <option value='06'>June</option>\n                                                            <option value='07'>July</option>\n                                                            <option value='08'>August</option>\n                                                            <option value='09'>September</option>\n                                                            <option value='10'>October</option>\n                                                            <option value='11'>November</option>\n                                                            <option value='12'>December</option>\n                                                        </select> \n                                                        <select onChange={(e) => {\n                                                            const value = e.target.value;\n\n                                                            if (value !== \"\") {\n                                                                \n                                                                cardInfo.expiry = cardInfo.expiry.substring(0, 2) + value;\n\n                                                                setSelectedCard(null);\n\n                                                                setCardInfo(prevState => {\n                                                                    return {\n                                                                        ...prevState,\n                                                                        expiry: cardInfo.expiry\n                                                                    }\n                                                                })\n                                                            }\n                                                        }} className=\"form-control digits year-date-format\" name='expireYY' id='expireYY'>\n                                                            <option value=''>Select a year</option>\n                                                            <option value='20'>2020</option>\n                                                            <option value='21'>2021</option>\n                                                            <option value='22'>2022</option>\n                                                            <option value='23'>2023</option>\n                                                            <option value='24'>2024</option>\n                                                            <option value='25'>2025</option>\n                                                            <option value='26'>2026</option>\n                                                            <option value='27'>2027</option>\n                                                            <option value='28'>2028</option>\n                                                            <option value='29'>2029</option>\n                                                            <option value='30'>2030</option>\n                                                            <option value='31'>2031</option>\n                                                            <option value='32'>2032</option>\n                                                            <option value='33'>2033</option>\n                                                            <option value='34'>2034</option>\n                                                            <option value='35'>2035</option>\n                                                            <option value='36'>2036</option>\n                                                        </select> \n                                                    </Row>\n                                                </FormGroup>\n                                                <FormGroup>\n                                                    <Input\n                                                        className=\"form-control\"\n                                                        type=\"number\"\n                                                        name=\"cvc\"\n                                                        placeholder=\"CVC... (Security Code On Back)\"\n                                                        value={cardInfo.cvc}\n                                                        onChange={(e) => handleInputChange(e)}\n                                                    />\n                                                </FormGroup>\n                                                <div className='centered-both-ways'>\n                                                    <Cards\n                                                        callback={(type, isValid) => {\n                                                            setCardInfo(prevState => {\n                                                                return {\n                                                                    ...prevState,\n                                                                    cardType: type.issuer\n                                                                }\n                                                            })\n                                                            setValidness(isValid);\n                                                        }}\n                                                        cvc={cardInfo.cvc}\n                                                        expiry={cardInfo.expiry}\n                                                        focused={cardInfo.focus}\n                                                        name={cardInfo.name}\n                                                        number={cardInfo.number}\n                                                    />\n                                                </div>\n                                            </Form>\n                                        </Col>\n                                    </div>\n                                </Row>\n                                <Row style={{ marginTop: \"27.5px\" }}>\n                                    <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                                        <Button disabled={calculateDisabled()} className={\"btn-square-info\"} color={\"info-2x\"} onClick={() => handleSubmissionDepositFunds()} outline style={{ width: \"100%\" }}>Submit & Purchase Account Credits & Top-Off Balance!</Button>\n                                    </Col>\n                                </Row>\n                            </CardBody>\n                            <CardFooter className='b-l-secondary b-r-secondary'>\n                                <p className='lead'>An account balance allows for specific actions such as 'purchasing tokens', 'profile boosts' and other misc. actions. It is <strong>recommended</strong> that you keep a <strong>minimum</strong> of $125.00 in your account balance at any given time however this is NOT mandatory, just recommended.</p>\n                            </CardFooter>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n        </Fragment>\n    );\n}\nconst mapStateToProps = (state) => {\n    return {\n        userData: state.auth.data\n    }\n}\nexport default connect(mapStateToProps, { })(TopOffBalanceHelper);"]},"metadata":{},"sourceType":"module"}