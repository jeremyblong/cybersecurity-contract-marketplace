{"ast":null,"code":"/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n */\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { association } from 'mdast-util-to-markdown/lib/util/association.js';\nimport { containerFlow } from 'mdast-util-to-markdown/lib/util/container-flow.js';\nimport { indentLines } from 'mdast-util-to-markdown/lib/util/indent-lines.js';\nimport { safe } from 'mdast-util-to-markdown/lib/util/safe.js';\nimport { visit, EXIT } from 'unist-util-visit';\nlet warningColonInFootnote = false;\nlet warningListInFootnote = false;\n/**\n * @returns {FromMarkdownExtension}\n */\n\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  };\n  /** @type {FromMarkdownHandle} */\n\n  function enterFootnoteDefinition(token) {\n    this.enter({\n      type: 'footnoteDefinition',\n      identifier: '',\n      label: '',\n      children: []\n    }, token);\n  }\n  /** @type {FromMarkdownHandle} */\n\n\n  function enterFootnoteDefinitionLabelString() {\n    this.buffer();\n  }\n  /** @type {FromMarkdownHandle} */\n\n\n  function exitFootnoteDefinitionLabelString(token) {\n    const label = this.resume();\n    const node =\n    /** @type {FootnoteDefinition} */\n    this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n  /** @type {FromMarkdownHandle} */\n\n\n  function exitFootnoteDefinition(token) {\n    this.exit(token);\n  }\n  /** @type {FromMarkdownHandle} */\n\n\n  function enterFootnoteCall(token) {\n    this.enter({\n      type: 'footnoteReference',\n      identifier: '',\n      label: ''\n    }, token);\n  }\n  /** @type {FromMarkdownHandle} */\n\n\n  function enterFootnoteCallString() {\n    this.buffer();\n  }\n  /** @type {FromMarkdownHandle} */\n\n\n  function exitFootnoteCallString(token) {\n    const label = this.resume();\n    const node =\n    /** @type {FootnoteDefinition} */\n    this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n  /** @type {FromMarkdownHandle} */\n\n\n  function exitFootnoteCall(token) {\n    this.exit(token);\n  }\n}\n/**\n * @returns {ToMarkdownExtension}\n */\n\nexport function gfmFootnoteToMarkdown() {\n  footnoteReference.peek = footnoteReferencePeek;\n  return {\n    // This is on by default already.\n    unsafe: [{\n      character: '[',\n      inConstruct: ['phrasing', 'label', 'reference']\n    }],\n    handlers: {\n      footnoteDefinition,\n      footnoteReference\n    }\n  };\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {FootnoteReference} node\n   */\n\n  function footnoteReference(node, _, context) {\n    const exit = context.enter('footnoteReference');\n    const subexit = context.enter('reference');\n    const reference = safe(context, association(node), {\n      before: '^',\n      after: ']'\n    });\n    subexit();\n    exit();\n    return '[^' + reference + ']';\n  }\n  /** @type {ToMarkdownHandle} */\n\n\n  function footnoteReferencePeek() {\n    return '[';\n  }\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {FootnoteDefinition} node\n   */\n\n\n  function footnoteDefinition(node, _, context) {\n    const exit = context.enter('footnoteDefinition');\n    const subexit = context.enter('label');\n    const id = safe(context, association(node), {\n      before: '^',\n      after: ']'\n    });\n    const label = '[^' + id + ']:';\n    subexit();\n    const value = indentLines(containerFlow(node, context), map);\n    exit();\n\n    if (!warningColonInFootnote && id.includes(':')) {\n      console.warn('[mdast-util-gfm-footnote] Warning: Found a colon in footnote identifier `' + id + '`. GitHub currently crahes on colons in footnotes (see <https://github.com/github/cmark-gfm/issues/241> for more info)');\n      warningColonInFootnote = true;\n    }\n\n    if (!warningListInFootnote) {\n      visit(node, 'list', () => {\n        console.warn('[mdast-util-gfm-footnote] Warning: Found a list in a footnote definition. GitHub currently crahes on lists in footnotes (see <https://github.com/github/cmark-gfm/issues/241> for more info)');\n        warningListInFootnote = true;\n        return EXIT;\n      });\n    }\n\n    return value;\n    /** @type {Map} */\n\n    function map(line, index, blank) {\n      if (index) {\n        return (blank ? '' : '    ') + line;\n      }\n\n      return (blank ? label : label + ' ') + line;\n    }\n  }\n}","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/node_modules/mdast-util-gfm-footnote/index.js"],"names":["normalizeIdentifier","association","containerFlow","indentLines","safe","visit","EXIT","warningColonInFootnote","warningListInFootnote","gfmFootnoteFromMarkdown","enter","gfmFootnoteDefinition","enterFootnoteDefinition","gfmFootnoteDefinitionLabelString","enterFootnoteDefinitionLabelString","gfmFootnoteCall","enterFootnoteCall","gfmFootnoteCallString","enterFootnoteCallString","exit","exitFootnoteDefinition","exitFootnoteDefinitionLabelString","exitFootnoteCall","exitFootnoteCallString","token","type","identifier","label","children","buffer","resume","node","stack","length","sliceSerialize","toLowerCase","gfmFootnoteToMarkdown","footnoteReference","peek","footnoteReferencePeek","unsafe","character","inConstruct","handlers","footnoteDefinition","_","context","subexit","reference","before","after","id","value","map","includes","console","warn","line","index","blank"],"mappings":"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","sourcesContent":["/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n */\n\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {association} from 'mdast-util-to-markdown/lib/util/association.js'\nimport {containerFlow} from 'mdast-util-to-markdown/lib/util/container-flow.js'\nimport {indentLines} from 'mdast-util-to-markdown/lib/util/indent-lines.js'\nimport {safe} from 'mdast-util-to-markdown/lib/util/safe.js'\nimport {visit, EXIT} from 'unist-util-visit'\n\nlet warningColonInFootnote = false\nlet warningListInFootnote = false\n\n/**\n * @returns {FromMarkdownExtension}\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function enterFootnoteDefinition(token) {\n    this.enter(\n      {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n      token\n    )\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function enterFootnoteDefinitionLabelString() {\n    this.buffer()\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function exitFootnoteDefinitionLabelString(token) {\n    const label = this.resume()\n    const node = /** @type {FootnoteDefinition} */ (\n      this.stack[this.stack.length - 1]\n    )\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function exitFootnoteDefinition(token) {\n    this.exit(token)\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function enterFootnoteCall(token) {\n    this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function enterFootnoteCallString() {\n    this.buffer()\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function exitFootnoteCallString(token) {\n    const label = this.resume()\n    const node = /** @type {FootnoteDefinition} */ (\n      this.stack[this.stack.length - 1]\n    )\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function exitFootnoteCall(token) {\n    this.exit(token)\n  }\n}\n\n/**\n * @returns {ToMarkdownExtension}\n */\nexport function gfmFootnoteToMarkdown() {\n  footnoteReference.peek = footnoteReferencePeek\n\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {FootnoteReference} node\n   */\n  function footnoteReference(node, _, context) {\n    const exit = context.enter('footnoteReference')\n    const subexit = context.enter('reference')\n    const reference = safe(context, association(node), {\n      before: '^',\n      after: ']'\n    })\n    subexit()\n    exit()\n    return '[^' + reference + ']'\n  }\n\n  /** @type {ToMarkdownHandle} */\n  function footnoteReferencePeek() {\n    return '['\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {FootnoteDefinition} node\n   */\n  function footnoteDefinition(node, _, context) {\n    const exit = context.enter('footnoteDefinition')\n    const subexit = context.enter('label')\n    const id = safe(context, association(node), {before: '^', after: ']'})\n    const label = '[^' + id + ']:'\n    subexit()\n    const value = indentLines(containerFlow(node, context), map)\n    exit()\n\n    if (!warningColonInFootnote && id.includes(':')) {\n      console.warn(\n        '[mdast-util-gfm-footnote] Warning: Found a colon in footnote identifier `' +\n          id +\n          '`. GitHub currently crahes on colons in footnotes (see <https://github.com/github/cmark-gfm/issues/241> for more info)'\n      )\n      warningColonInFootnote = true\n    }\n\n    if (!warningListInFootnote) {\n      visit(node, 'list', () => {\n        console.warn(\n          '[mdast-util-gfm-footnote] Warning: Found a list in a footnote definition. GitHub currently crahes on lists in footnotes (see <https://github.com/github/cmark-gfm/issues/241> for more info)'\n        )\n        warningListInFootnote = true\n        return EXIT\n      })\n    }\n\n    return value\n\n    /** @type {Map} */\n    function map(line, index, blank) {\n      if (index) {\n        return (blank ? '' : '    ') + line\n      }\n\n      return (blank ? label : label + ' ') + line\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}