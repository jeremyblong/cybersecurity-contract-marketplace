{"ast":null,"code":"import React,{Fragment,useRef,useState}from\"react\";import\"./styles.css\";import{connect}from\"react-redux\";import helpers from\"./helpers/miscFunctions.js\";import{Button,Row,Col,Card,CardBody,FormGroup,Label,Input,Media,InputGroup,InputGroupAddon,InputGroupText,Progress,ListGroupItem,Container}from'reactstrap';import Tour from'reactour';import{disableBodyScroll,clearAllBodyScrollLocks}from'body-scroll-lock';import{updateCourseInformationData}from\"../../../../../../../../redux/actions/courses/createNewCourse/index.js\";import _ from\"lodash\";import ReactDragListView from\"react-drag-listview\";import uuid from\"react-uuid\";import moment from\"moment\";import SheetHelperPaneUploadCourseContent from\"./helpers/paneSheet.js\";import{shiftCoreStyles}from\"../../../../../../../../redux/actions/universal/index.js\";import{Modal}from'react-responsive-modal';import{confirmAlert}from'react-confirm-alert';import ModalMoreInformationGuiadanceHelper from\"./helpers/moreInformationModal.js\";const{handleDeletionConfirmationOpen}=helpers;const steps=[{selector:'#navigate-to-redirect',content:\"If you're a bit confused as to 'how' to 'upload/create' new course content to be sold and streamed on our platform, click this highlighted icon/button and we will open a modal with more detailed information regarding this matter...\"}];const CreateNewCoursePageTwo=_ref=>{let{setProgress,updateCourseInformationData,courseData,shiftCoreStyles,coursesArray,overallProgress}=_ref;const scrollToTourWrapper=useRef(null);// state initialization\nconst[subtitle,setSubTitleValue]=useState(\"\");const[stepOpen,setStepOpenState]=useState(false);const[modalOpen,setModalState]=useState(false);const[courseContent,setCourseContentList]=useState([]);const[isOpen,setIsOpen]=useState(false);const[selectedCourseContent,setCourseContentState]=useState(null);const[isOpenModal,setIsOpenModalState]=useState(false);console.log(\"courseData\",courseData);const disableBodyAndScroll=target=>{disableBodyScroll(target);};// enable body!\nconst enableBody=target=>clearAllBodyScrollLocks();const handleTourActivate=()=>{console.log(\"handleTourActivate ran...\");scrollToTourWrapper.current.scrollIntoView();// alter slightly according to scroll behavior\nsetTimeout(()=>{window.scrollBy(0,-175);},300);// #navigate-to-redirect\nsetTimeout(()=>{setStepOpenState(true);},750);};const handleSubAddition=()=>{console.log(\"handleSubAddition ran...\");if(typeof coursesArray!==\"undefined\"&&coursesArray.length>0){console.log(\"already exists...!\");const createdDate=new Date();const addNew={id:uuid(),dateTimeAdded:createdDate,video:null,sectionTitle:subtitle,formattedDate:moment(createdDate).format(\"MM/DD/YYYY hh:mm:ss a\")};updateCourseInformationData({...courseData,pageTwoData:{courseContentSections:[...coursesArray,addNew]}});setSubTitleValue(\"\");}else{console.log(\"doesnt exist...\");const createdDate=new Date();const newState=[{id:uuid(),dateTimeAdded:createdDate,video:null,sectionTitle:subtitle,formattedDate:moment(createdDate).format(\"MM/DD/YYYY hh:mm:ss a\")}];updateCourseInformationData({...courseData,pageTwoData:{courseContentSections:newState}});setSubTitleValue(\"\");}};const dragProps={onDragEnd(fromIndex,toIndex){const data=[...coursesArray];const item=data.splice(fromIndex,1)[0];data.splice(toIndex,0,item);console.log(data);updateCourseInformationData({...courseData,pageTwoData:{courseContentSections:data}});},nodeSelector:'li',handleSelector:'a'};const showConfirmAlert=selected=>{confirmAlert({title:\"You're about to delete this section/chunk\",message:\"Are you SURE you'd like to delete this section/chunk from your course material & content? If so, please proceed by clicking 'Yes, Delete!' to delete this item from your course content!\",buttons:[{label:'Yes, Delete!',onClick:()=>{// Delete\nconst filtered=coursesArray.filter((section,index)=>{if(section.id!==selected.id){return true;}});updateCourseInformationData({...courseData,pageTwoData:{courseContentSections:filtered}});}},{label:'No, Cancel',onClick:()=>{// do nothing\n}}]});};const handleSubmission=()=>{console.log(\"handleSubmission ran...!\");if(courseData.makingEdits===true){updateCourseInformationData({...courseData,currentPage:4});}else{updateCourseInformationData({...courseData,currentPage:3});}};return/*#__PURE__*/React.createElement(Fragment,null,/*#__PURE__*/React.createElement(Tour,{steps:steps,isOpen:stepOpen,onAfterOpen:disableBodyAndScroll,onBeforeClose:enableBody,onRequestClose:()=>{setStepOpenState(false);}}),/*#__PURE__*/React.createElement(Modal,{classNames:{overlay:'course-content-overlay-modal',modal:'course-content-modal'},open:isOpenModal,onClose:()=>setIsOpenModalState(false),center:true},/*#__PURE__*/React.createElement(ModalMoreInformationGuiadanceHelper,{setIsOpenModalState:setIsOpenModalState})),/*#__PURE__*/React.createElement(SheetHelperPaneUploadCourseContent,{setCourseContentState:setCourseContentState,selectedCourseContent:selectedCourseContent,disableBodyScroll:disableBodyScroll,clearAllBodyScrollLocks:clearAllBodyScrollLocks,setProgress:setProgress,isOpen:isOpen,setIsOpen:setIsOpen}),/*#__PURE__*/React.createElement(\"div\",{className:\"centered-horizontally-course\"},/*#__PURE__*/React.createElement(\"div\",{className:\"position-above-bar-percentage\"},/*#__PURE__*/React.createElement(\"h1\",null,overallProgress,\"% Complete\")),/*#__PURE__*/React.createElement(Progress,{className:\"course-creation-progress-bar\",animated:true,color:\"info\",value:overallProgress})),/*#__PURE__*/React.createElement(Container,{fluid:true},/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{sm:\"12\",md:\"12\",lg:\"12\",xl:\"12\"},/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(CardBody,null,/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(\"div\",{ref:scrollToTourWrapper,id:\"navigate-to-redirect\"},/*#__PURE__*/React.createElement(Media,{className:\"p-20\"},/*#__PURE__*/React.createElement(\"div\",{className:\"radio radio-info mr-3\"},/*#__PURE__*/React.createElement(Input,{id:\"radio66\",type:\"radio\",name:\"radio66\",checked:modalOpen===true?true:false,value:null}),/*#__PURE__*/React.createElement(Label,{for:\"radio66\"})),/*#__PURE__*/React.createElement(Media,{body:true},/*#__PURE__*/React.createElement(\"h6\",{className:\"mt-0 mega-title-badge\"},\"Confused on how to upload 'Course-Content'?\",/*#__PURE__*/React.createElement(\"span\",{className:\"badge badge-info pull-right digits make-digits-larger-courses\"},\"Need Clarification/Help on how to upload new content?\")),/*#__PURE__*/React.createElement(\"p\",null,\"Are you unsure of 'what' or 'how' to upload course content & most of all organize the data in a manner that makes sense? We will guide you through the process but you can find a very detailed overview/guide by clicking the button just below this text...Click it to find out more!\"),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(\"div\",{className:\"centered-both-ways\"},/*#__PURE__*/React.createElement(Button,{outline:true,style:{width:\"50%\"},onClick:()=>setIsOpenModalState(true),className:\"btn-square-dark\",color:\"dark\",size:\"md\"},\"Get help, guidance OR clarification on uploading course's!\")),/*#__PURE__*/React.createElement(\"p\",{className:\"customized-course-lead\"},\"Basically, you will need to select the \",/*#__PURE__*/React.createElement(\"strong\",null,\"core\"),\" details for your new course (which you've already done on page 1) and secondly (now) you will need to upload \",/*#__PURE__*/React.createElement(\"strong\",null,\"ONE (1) VIDEO\"),\" per each added item in the list you generate/create below with the input/form & button to submit them. Simply, enter a \\\"part\\\" name and upload a video for that cooresponding part!\"))))),/*#__PURE__*/React.createElement(\"ol\",{className:\"custom-ordered-list-courses\"},/*#__PURE__*/React.createElement(\"li\",null,\"Enter a name/title for your new segment (segment being a chunk or small portion of your overall course/content)\"),/*#__PURE__*/React.createElement(\"li\",null,\"Submit the title and it will automatically be added to the existing list (the course will be saved exactly as uploaded regarding the order)\"),/*#__PURE__*/React.createElement(\"li\",null,\"Upload a video to the cooresponding HIGHLIGHTED region and this new video will be attached to the highlighted segment (will replace any existing video/content if already exists)\"),/*#__PURE__*/React.createElement(\"li\",null,\"That's it! Proceed with your other course content...\")),/*#__PURE__*/React.createElement(\"div\",{className:\"absolute-positioned-button-clear-redux\"},/*#__PURE__*/React.createElement(Button,{id:\"absolute-redux-clear-button\",onClick:()=>handleDeletionConfirmationOpen(),className:\"btn-square-danger\",color:\"danger\",size:\"md\"},\"Clear ENTIRE Already Filled Course Data\")))))),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{sm:\"12\",md:\"12\",lg:\"12\",xl:\"12\"},/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(CardBody,null,/*#__PURE__*/React.createElement(Row,{style:{paddingTop:\"12.5px\"}},/*#__PURE__*/React.createElement(Col,{sm:\"12\",md:\"12\",lg:\"12\",xl:\"12\"},/*#__PURE__*/React.createElement(FormGroup,{className:\"m-form__group\"},/*#__PURE__*/React.createElement(Label,null,\"Add a \\\"Sub-Section Course Content\\\" section with this form. If you're confused as to what this means, \",/*#__PURE__*/React.createElement(\"strong\",{style:{color:\"red\"},id:\"hover-a-uploading\",onClick:()=>handleTourActivate()},\"click this\"),\" to retreieve more details on \",/*#__PURE__*/React.createElement(\"strong\",null,\"how to create sellable content/courses\")),/*#__PURE__*/React.createElement(InputGroup,{style:{width:\"100%\"}},/*#__PURE__*/React.createElement(InputGroupAddon,{addonType:\"prepend\"},/*#__PURE__*/React.createElement(InputGroupText,null,\"Add Course Section\")),/*#__PURE__*/React.createElement(Input,{value:subtitle,onChange:e=>setSubTitleValue(e.target.value),className:\"form-control min-height-input-courses\",name:\"subtitle\",type:\"text\",placeholder:\"Enter a course sub-section title...\"}),/*#__PURE__*/React.createElement(InputGroupAddon,{addonType:\"prepend\"},/*#__PURE__*/React.createElement(Button,{style:{width:\"100%\"},onClick:()=>handleSubAddition(),className:\"btn-square-info\",color:\"info\",size:\"md\"},\"Add New Section\")))))),/*#__PURE__*/React.createElement(ReactDragListView,dragProps,/*#__PURE__*/React.createElement(\"ul\",null,coursesArray.map((item,index)=>{console.log(\"itenm!\",item);return/*#__PURE__*/React.createElement(Fragment,{key:index},/*#__PURE__*/React.createElement(ListGroupItem,{className:\"d-flex justify-content-between align-items-center\"},/*#__PURE__*/React.createElement(\"div\",{id:\"left-chunk-course\"},/*#__PURE__*/React.createElement(\"img\",{onClick:()=>showConfirmAlert(item),src:require(\"../../../../../../../../assets/icons/delete.png\"),className:\"view-more-icon\"}),/*#__PURE__*/React.createElement(\"img\",{onClick:()=>{setCourseContentState(item);// DISABLE clicking background\nshiftCoreStyles(true);// set modal sheet pane OPEN/true\nsetIsOpen(true);// lock after appropriate position change\nsetTimeout(()=>{// LOCK page\nconst select=document.querySelector(\".enact-nonclick\");disableBodyScroll(select);},500);},src:require(\"../../../../../../../../assets/icons/view.png\"),className:\"view-more-icon\"})),/*#__PURE__*/React.createElement(\"p\",{className:\"custom-strong-list-item\"},item.sectionTitle),/*#__PURE__*/React.createElement(\"a\",{className:\"badge badge-secondary counter digits make-digits-larger-course-draggable\"},\"Use me to drag this item\")));}))))))),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{sm:\"12\",md:\"12\",lg:\"12\",xl:\"12\"},/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(CardBody,null,/*#__PURE__*/React.createElement(Button,{onClick:handleSubmission,className:\"btn-square-secondary\",color:\"secondary-2x\",outline:true,style:{width:\"100%\"}},\"Submit & Continue W/Form Process\")))))));};const mapStateToProps=state=>{return{userData:state.auth.data,coursesArray:_.has(state.courseData,\"courseData\")&&_.has(state.courseData.courseData,\"pageTwoData\")&&_.has(state.courseData.courseData.pageTwoData,\"courseContentSections\")?state.courseData.courseData.pageTwoData.courseContentSections:[],courseData:_.has(state.courseData,\"courseData\")?state.courseData.courseData:{}};};export default connect(mapStateToProps,{updateCourseInformationData,shiftCoreStyles})(CreateNewCoursePageTwo);","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/src/components/dashboard/learning/educationalCoursesSeminars/createCourse/helpers/pages/pageTwo/index.js"],"names":["React","Fragment","useRef","useState","connect","helpers","Button","Row","Col","Card","CardBody","FormGroup","Label","Input","Media","InputGroup","InputGroupAddon","InputGroupText","Progress","ListGroupItem","Container","Tour","disableBodyScroll","clearAllBodyScrollLocks","updateCourseInformationData","_","ReactDragListView","uuid","moment","SheetHelperPaneUploadCourseContent","shiftCoreStyles","Modal","confirmAlert","ModalMoreInformationGuiadanceHelper","handleDeletionConfirmationOpen","steps","selector","content","CreateNewCoursePageTwo","setProgress","courseData","coursesArray","overallProgress","scrollToTourWrapper","subtitle","setSubTitleValue","stepOpen","setStepOpenState","modalOpen","setModalState","courseContent","setCourseContentList","isOpen","setIsOpen","selectedCourseContent","setCourseContentState","isOpenModal","setIsOpenModalState","console","log","disableBodyAndScroll","target","enableBody","handleTourActivate","current","scrollIntoView","setTimeout","window","scrollBy","handleSubAddition","length","createdDate","Date","addNew","id","dateTimeAdded","video","sectionTitle","formattedDate","format","pageTwoData","courseContentSections","newState","dragProps","onDragEnd","fromIndex","toIndex","data","item","splice","nodeSelector","handleSelector","showConfirmAlert","selected","title","message","buttons","label","onClick","filtered","filter","section","index","handleSubmission","makingEdits","currentPage","overlay","modal","width","paddingTop","color","e","value","map","require","select","document","querySelector","mapStateToProps","state","userData","auth","has"],"mappings":"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","sourcesContent":["import React, { Fragment, useRef, useState } from \"react\";\nimport \"./styles.css\";\nimport { connect } from \"react-redux\";\nimport helpers from \"./helpers/miscFunctions.js\";\nimport { Button, Row, Col, Card, CardBody, FormGroup, Label, Input, Media, InputGroup, InputGroupAddon, InputGroupText, Progress, ListGroupItem, Container } from 'reactstrap';\nimport Tour from 'reactour';\nimport { disableBodyScroll, clearAllBodyScrollLocks } from 'body-scroll-lock';\nimport { updateCourseInformationData } from \"../../../../../../../../redux/actions/courses/createNewCourse/index.js\";\nimport _ from \"lodash\";\nimport ReactDragListView from \"react-drag-listview\";\nimport uuid from \"react-uuid\";\nimport moment from \"moment\";\nimport SheetHelperPaneUploadCourseContent from \"./helpers/paneSheet.js\";\nimport { shiftCoreStyles } from \"../../../../../../../../redux/actions/universal/index.js\";\nimport { Modal } from 'react-responsive-modal';\nimport { confirmAlert } from 'react-confirm-alert';\nimport ModalMoreInformationGuiadanceHelper from \"./helpers/moreInformationModal.js\";\n\nconst { \n    handleDeletionConfirmationOpen\n} = helpers;\n\n\nconst steps = [\n    {\n      selector: '#navigate-to-redirect',\n      content: `If you're a bit confused as to 'how' to 'upload/create' new course content to be sold and streamed on our platform, click this highlighted icon/button and we will open a modal with more detailed information regarding this matter...`,\n    }\n]\n\nconst CreateNewCoursePageTwo = ({ setProgress, updateCourseInformationData, courseData, shiftCoreStyles, coursesArray, overallProgress }) => {\n    const scrollToTourWrapper = useRef(null);\n    // state initialization\n    const [ subtitle, setSubTitleValue ] = useState(\"\");\n    const [ stepOpen, setStepOpenState ] = useState(false);\n    const [ modalOpen, setModalState ] = useState(false);\n    const [ courseContent, setCourseContentList ] = useState([]); \n    const [ isOpen, setIsOpen ] = useState(false);\n    const [ selectedCourseContent, setCourseContentState ] = useState(null);\n    const [ isOpenModal, setIsOpenModalState ] = useState(false);\n\n    console.log(\"courseData\", courseData);\n\n    const disableBodyAndScroll = target => {\n        disableBodyScroll(target);        \n    };\n    // enable body!\n    const enableBody = target => clearAllBodyScrollLocks();\n\n    const handleTourActivate = () => {\n        console.log(\"handleTourActivate ran...\");\n\n        scrollToTourWrapper.current.scrollIntoView();\n        // alter slightly according to scroll behavior\n        setTimeout(() => {\n            window.scrollBy(0, -175);\n        }, 300);\n        // #navigate-to-redirect\n        setTimeout(() => {\n            setStepOpenState(true);\n        }, 750)\n    }\n    const handleSubAddition = () => {\n        console.log(\"handleSubAddition ran...\");\n\n        if (typeof coursesArray !== \"undefined\" && coursesArray.length > 0) {\n            console.log(\"already exists...!\");\n            \n            const createdDate = new Date();\n\n            const addNew = {\n                id: uuid(),\n                dateTimeAdded: createdDate,\n                video: null,\n                sectionTitle: subtitle,\n                formattedDate: moment(createdDate).format(\"MM/DD/YYYY hh:mm:ss a\")\n            };\n            updateCourseInformationData({\n                ...courseData,\n                pageTwoData: {\n                    courseContentSections: [...coursesArray, addNew]\n                }\n            });\n            setSubTitleValue(\"\");\n        } else {\n            console.log(\"doesnt exist...\");\n\n            const createdDate = new Date();\n\n            const newState = [{\n                id: uuid(),\n                dateTimeAdded: createdDate,\n                video: null,\n                sectionTitle: subtitle,\n                formattedDate: moment(createdDate).format(\"MM/DD/YYYY hh:mm:ss a\")\n            }];\n            updateCourseInformationData({\n                ...courseData,\n                pageTwoData: {\n                    courseContentSections: newState\n                }\n            });\n\n            setSubTitleValue(\"\");\n        }\n    }\n    const dragProps = {\n        onDragEnd(fromIndex, toIndex) {\n            const data = [...coursesArray];\n            const item = data.splice(fromIndex, 1)[0];\n            data.splice(toIndex, 0, item);\n            console.log(data);\n\n            updateCourseInformationData({\n                ...courseData,\n                pageTwoData: {\n                    courseContentSections: data\n                }\n            });\n        },\n        nodeSelector: 'li',\n        handleSelector: 'a'\n    };\n    const showConfirmAlert = (selected) => {\n        confirmAlert({\n            title: \"You're about to delete this section/chunk\",\n            message: \"Are you SURE you'd like to delete this section/chunk from your course material & content? If so, please proceed by clicking 'Yes, Delete!' to delete this item from your course content!\",\n            buttons: [\n              {\n                label: 'Yes, Delete!',\n                onClick: () => {\n                    // Delete\n                    const filtered = coursesArray.filter((section, index) => {\n                        if (section.id !== selected.id) {\n                            return true;\n                        }\n                    });\n                    updateCourseInformationData({\n                        ...courseData,\n                        pageTwoData: {\n                            courseContentSections: filtered\n                        }\n                    });\n                }\n              },\n              {\n                label: 'No, Cancel',\n                onClick: () => {\n                    // do nothing\n                }\n              }\n            ]\n        });\n    }\n    const handleSubmission = () => {\n        console.log(\"handleSubmission ran...!\");\n\n        if (courseData.makingEdits === true) {\n            updateCourseInformationData({\n                ...courseData,\n                currentPage: 4\n            })\n        } else {\n            updateCourseInformationData({\n                ...courseData,\n                currentPage: 3\n            })   \n        }\n    }\n    return (\n        <Fragment>\n            <Tour\n                steps={steps}\n                isOpen={stepOpen}\n                onAfterOpen={disableBodyAndScroll}\n                onBeforeClose={enableBody}\n                onRequestClose={() => {\n                    setStepOpenState(false);\n                }} \n            />\n            <Modal classNames={{\n                overlay: 'course-content-overlay-modal',\n                modal: 'course-content-modal',\n            }} open={isOpenModal} onClose={() => setIsOpenModalState(false)} center>\n                <ModalMoreInformationGuiadanceHelper setIsOpenModalState={setIsOpenModalState} />\n            </Modal>\n            <SheetHelperPaneUploadCourseContent setCourseContentState={setCourseContentState} selectedCourseContent={selectedCourseContent} disableBodyScroll={disableBodyScroll} clearAllBodyScrollLocks={clearAllBodyScrollLocks} setProgress={setProgress} isOpen={isOpen} setIsOpen={setIsOpen} />\n\n                <div className={\"centered-horizontally-course\"}>\n                    <div className={\"position-above-bar-percentage\"}>\n                        <h1>{overallProgress}% Complete</h1>\n                    </div>\n                    <Progress className={\"course-creation-progress-bar\"} animated color=\"info\" value={overallProgress} />\n                </div>\n                <Container fluid={true}>\n                    <Row>\n                        <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                                <Card>\n                                    <CardBody>\n                                        <Row>\n                                            <div ref={scrollToTourWrapper} id={\"navigate-to-redirect\"}>\n                                                <Media className=\"p-20\">\n                                                    <div className=\"radio radio-info mr-3\">\n                                                        <Input id=\"radio66\" type=\"radio\" name=\"radio66\" checked={modalOpen === true ? true : false} value={null} />\n                                                        <Label for={\"radio66\"}></Label>\n                                                    </div>\n                                                    <Media body>\n                                                        <h6 className=\"mt-0 mega-title-badge\">Confused on how to upload 'Course-Content'?<span className=\"badge badge-info pull-right digits make-digits-larger-courses\">{\"Need Clarification/Help on how to upload new content?\"}</span></h6>\n                                                        <p>{\"Are you unsure of 'what' or 'how' to upload course content & most of all organize the data in a manner that makes sense? We will guide you through the process but you can find a very detailed overview/guide by clicking the button just below this text...Click it to find out more!\"}</p>\n                                                        <hr />\n                                                        <div className={\"centered-both-ways\"}>\n                                                            <Button outline style={{ width: \"50%\" }} onClick={() => setIsOpenModalState(true)} className=\"btn-square-dark\" color=\"dark\" size=\"md\">Get help, guidance OR clarification on uploading course's!</Button>\n                                                        </div>\n                                                        <p className=\"customized-course-lead\">Basically, you will need to select the <strong>core</strong> details for your new course (which you've already done on page 1) and secondly (now) you will need to upload <strong>ONE (1) VIDEO</strong> per each added item in the list you generate/create below with the input/form & button to submit them. Simply, enter a \"part\" name and upload a video for that cooresponding part!</p>\n                                                    </Media>\n                                                </Media>\n                                            </div>\n                                        </Row>\n                                        <ol className={\"custom-ordered-list-courses\"}>\n                                            <li>Enter a name/title for your new segment (segment being a chunk or small portion of your overall course/content)</li>\n                                            <li>Submit the title and it will automatically be added to the existing list (the course will be saved exactly as uploaded regarding the order)</li>\n                                            <li>Upload a video to the cooresponding HIGHLIGHTED region and this new video will be attached to the highlighted segment (will replace any existing video/content if already exists)</li>\n                                            <li>That's it! Proceed with your other course content...</li>\n                                        </ol>\n                                        <div className={\"absolute-positioned-button-clear-redux\"}>\n                                            <Button id={\"absolute-redux-clear-button\"} onClick={() => handleDeletionConfirmationOpen()} className=\"btn-square-danger\" color=\"danger\" size=\"md\">Clear ENTIRE Already Filled Course Data</Button>\n                                        </div>\n                                    </CardBody>\n                                </Card>\n                            </Col>\n                        </Row>\n                    <Row>\n                    <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                        <Card>\n                            <CardBody>\n                                <Row style={{ paddingTop: \"12.5px\" }}>\n                                    <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                                        <FormGroup className=\"m-form__group\">\n                                            <Label>Add a \"Sub-Section Course Content\" section with this form. If you're confused as to what this means, <strong style={{ color: \"red\" }} id=\"hover-a-uploading\" onClick={() => handleTourActivate()}>click this</strong> to retreieve more details on <strong>how to create sellable content/courses</strong></Label>\n                                            <InputGroup style={{ width: \"100%\" }}>\n                                                <InputGroupAddon addonType=\"prepend\"><InputGroupText>{\"Add Course Section\"}</InputGroupText></InputGroupAddon>\n                                                <Input value={subtitle} onChange={(e) => setSubTitleValue(e.target.value)} className=\"form-control min-height-input-courses\" name={\"subtitle\"} type=\"text\" placeholder={\"Enter a course sub-section title...\"} />\n                                                <InputGroupAddon addonType=\"prepend\"><Button style={{ width: \"100%\" }} onClick={() => handleSubAddition()} className=\"btn-square-info\" color=\"info\" size=\"md\">Add New Section</Button></InputGroupAddon>\n                                            </InputGroup>\n                                        </FormGroup>\n                                    </Col>\n                                </Row>\n                                <ReactDragListView {...dragProps}>\n                                    <ul>\n                                        {coursesArray.map((item, index) => {\n                                            console.log(\"itenm!\", item);\n                                            return (\n                                                <Fragment key={index}>\n                                                    <ListGroupItem className=\"d-flex justify-content-between align-items-center\">\n                                                        <div id=\"left-chunk-course\">\n                                                            <img onClick={() => showConfirmAlert(item)} src={require(\"../../../../../../../../assets/icons/delete.png\")} className={\"view-more-icon\"} />\n                                                            <img onClick={() => {\n                                                                setCourseContentState(item);\n                                                                // DISABLE clicking background\n                                                                shiftCoreStyles(true);\n                                                                // set modal sheet pane OPEN/true\n                                                                setIsOpen(true);\n                                                                // lock after appropriate position change\n                                                                setTimeout(() => {\n                                                                    // LOCK page\n                                                                    const select = document.querySelector(\".enact-nonclick\");\n\n                                                                    disableBodyScroll(select);\n                                                                }, 500)\n                                                            }} src={require(\"../../../../../../../../assets/icons/view.png\")} className={\"view-more-icon\"} />\n                                                        </div>\n                                                            <p className={\"custom-strong-list-item\"}>{item.sectionTitle}</p>\n                                                        <a className=\"badge badge-secondary counter digits make-digits-larger-course-draggable\">{\"Use me to drag this item\"}</a>\n                                                    </ListGroupItem>\n                                                </Fragment>\n                                            );\n                                        })}\n                                    </ul>\n                                </ReactDragListView>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                        <Card>\n                            <CardBody>\n                                <Button onClick={handleSubmission} className={\"btn-square-secondary\"} color={\"secondary-2x\"} outline style={{ width: \"100%\" }}>Submit & Continue W/Form Process</Button>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n        </Fragment>\n    );\n}\nconst mapStateToProps = (state) => {\n    return {\n        userData: state.auth.data,\n        coursesArray: (_.has(state.courseData, \"courseData\") && _.has(state.courseData.courseData, \"pageTwoData\") && _.has(state.courseData.courseData.pageTwoData, \"courseContentSections\")) ? state.courseData.courseData.pageTwoData.courseContentSections : [],\n        courseData: _.has(state.courseData, \"courseData\") ? state.courseData.courseData : {}\n    }\n}\nexport default connect(mapStateToProps, { updateCourseInformationData, shiftCoreStyles })(CreateNewCoursePageTwo);"]},"metadata":{},"sourceType":"module"}