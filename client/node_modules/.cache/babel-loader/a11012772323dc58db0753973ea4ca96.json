{"ast":null,"code":"'use strict';\n\nvar immediate = require('immediate');\n\nvar splitter = /\\s+/;\nmodule.exports = {\n  onSync: onSync,\n  onAsync: onAsync,\n  off: off,\n  trigger: trigger\n};\n\nfunction on(method, types, cb, context) {\n  var type;\n\n  if (!cb) {\n    return this;\n  }\n\n  types = types.split(splitter);\n  cb = context ? bindContext(cb, context) : cb;\n  this._callbacks = this._callbacks || {};\n\n  while (type = types.shift()) {\n    this._callbacks[type] = this._callbacks[type] || {\n      sync: [],\n      async: []\n    };\n\n    this._callbacks[type][method].push(cb);\n  }\n\n  return this;\n}\n\nfunction onAsync(types, cb, context) {\n  return on.call(this, 'async', types, cb, context);\n}\n\nfunction onSync(types, cb, context) {\n  return on.call(this, 'sync', types, cb, context);\n}\n\nfunction off(types) {\n  var type;\n\n  if (!this._callbacks) {\n    return this;\n  }\n\n  types = types.split(splitter);\n\n  while (type = types.shift()) {\n    delete this._callbacks[type];\n  }\n\n  return this;\n}\n\nfunction trigger(types) {\n  var type;\n  var callbacks;\n  var args;\n  var syncFlush;\n  var asyncFlush;\n\n  if (!this._callbacks) {\n    return this;\n  }\n\n  types = types.split(splitter);\n  args = [].slice.call(arguments, 1);\n\n  while ((type = types.shift()) && (callbacks = this._callbacks[type])) {\n    // eslint-disable-line\n    syncFlush = getFlush(callbacks.sync, this, [type].concat(args));\n    asyncFlush = getFlush(callbacks.async, this, [type].concat(args));\n\n    if (syncFlush()) {\n      immediate(asyncFlush);\n    }\n  }\n\n  return this;\n}\n\nfunction getFlush(callbacks, context, args) {\n  return flush;\n\n  function flush() {\n    var cancelled;\n\n    for (var i = 0, len = callbacks.length; !cancelled && i < len; i += 1) {\n      // only cancel if the callback explicitly returns false\n      cancelled = callbacks[i].apply(context, args) === false;\n    }\n\n    return !cancelled;\n  }\n}\n\nfunction bindContext(fn, context) {\n  return fn.bind ? fn.bind(context) : function () {\n    fn.apply(context, [].slice.call(arguments, 0));\n  };\n}","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/node_modules/autocomplete.js/src/autocomplete/event_emitter.js"],"names":["immediate","require","splitter","module","exports","onSync","onAsync","off","trigger","on","method","types","cb","context","type","split","bindContext","_callbacks","shift","sync","async","push","call","callbacks","args","syncFlush","asyncFlush","slice","arguments","getFlush","concat","flush","cancelled","i","len","length","apply","fn","bind"],"mappings":"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","sourcesContent":["'use strict';\n\nvar immediate = require('immediate');\nvar splitter = /\\s+/;\n\nmodule.exports = {\n  onSync: onSync,\n  onAsync: onAsync,\n  off: off,\n  trigger: trigger\n};\n\nfunction on(method, types, cb, context) {\n  var type;\n\n  if (!cb) {\n    return this;\n  }\n\n  types = types.split(splitter);\n  cb = context ? bindContext(cb, context) : cb;\n\n  this._callbacks = this._callbacks || {};\n\n  while (type = types.shift()) {\n    this._callbacks[type] = this._callbacks[type] || {sync: [], async: []};\n    this._callbacks[type][method].push(cb);\n  }\n\n  return this;\n}\n\nfunction onAsync(types, cb, context) {\n  return on.call(this, 'async', types, cb, context);\n}\n\nfunction onSync(types, cb, context) {\n  return on.call(this, 'sync', types, cb, context);\n}\n\nfunction off(types) {\n  var type;\n\n  if (!this._callbacks) {\n    return this;\n  }\n\n  types = types.split(splitter);\n\n  while (type = types.shift()) {\n    delete this._callbacks[type];\n  }\n\n  return this;\n}\n\nfunction trigger(types) {\n  var type;\n  var callbacks;\n  var args;\n  var syncFlush;\n  var asyncFlush;\n\n  if (!this._callbacks) {\n    return this;\n  }\n\n  types = types.split(splitter);\n  args = [].slice.call(arguments, 1);\n\n  while ((type = types.shift()) && (callbacks = this._callbacks[type])) { // eslint-disable-line\n    syncFlush = getFlush(callbacks.sync, this, [type].concat(args));\n    asyncFlush = getFlush(callbacks.async, this, [type].concat(args));\n\n    if (syncFlush()) {\n      immediate(asyncFlush);\n    }\n  }\n\n  return this;\n}\n\nfunction getFlush(callbacks, context, args) {\n  return flush;\n\n  function flush() {\n    var cancelled;\n\n    for (var i = 0, len = callbacks.length; !cancelled && i < len; i += 1) {\n      // only cancel if the callback explicitly returns false\n      cancelled = callbacks[i].apply(context, args) === false;\n    }\n\n    return !cancelled;\n  }\n}\n\nfunction bindContext(fn, context) {\n  return fn.bind ?\n    fn.bind(context) :\n    function() { fn.apply(context, [].slice.call(arguments, 0)); };\n}\n"]},"metadata":{},"sourceType":"script"}