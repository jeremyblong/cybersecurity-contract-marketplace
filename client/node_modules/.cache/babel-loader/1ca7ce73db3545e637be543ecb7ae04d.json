{"ast":null,"code":"// helpers logic related to mainly to redux-hook-form\nconst CreateNewPostReduxFormHelpers = () => {\n  const subcategoryChecker = {\n    check: (setError, register, values, errors, name, clearErrors) => {\n      return { ...register(name, {\n          required: {\n            value: true,\n            message: \"You MUST select an option before starting your LIVE stream\"\n          },\n          onBlur: e => {\n            // log to check whats returned\n            const value = e.target.value; // timeout to delay for state change(s)\n\n            setTimeout(() => {\n              // clear error after proper selection\n              if (typeof value !== \"undefined\" && Object.keys(value).length > 0) {\n                clearErrors(name);\n              } else {\n                // set error as nothing was selected (blank 'click-off' selection of selector)\n                setError(name, {\n                  type: \"manual\",\n                  message: \"You MUST select an option before starting your LIVE stream\"\n                });\n              }\n            }, 50);\n          }\n        })\n      };\n    },\n    name: \"subCategory\",\n    placeholder: \"Enter a 'sub' category for your live stream (stream filtration)...\",\n    type: \"text\",\n    label: \"Stream Sub-Category\"\n  };\n\n  const calculateBlurOrNot = (e, clearErrors, name, setError) => {\n    // deconstruct value\n    const valueLen = e.target.value.length; // timeout to delay for state change(s)\n\n    setTimeout(() => {\n      // clear error after proper selection\n      if (valueLen >= 50) {\n        if (valueLen <= 1000) {\n          clearErrors(name);\n        } else {\n          // set error - TOO many characters\n          setError(name, {\n            type: \"manual\",\n            message: \"You may ONLY enter 1000 characters or less\"\n          });\n        }\n      } else {\n        // NOT Long enough\n        setError(name, {\n          type: \"manual\",\n          message: \"You MUST enter AT Least 50 characters\"\n        });\n      }\n    }, 100);\n  };\n\n  const mainDescriptionChecker = {\n    check: (setError, register) => {\n      return { ...register(\"mainDescription\", {\n          required: {\n            value: true,\n            message: \"You MUST enter AT least 50 characters to 1000 characters\"\n          },\n          minLength: {\n            value: 50,\n            message: \"You MUST enter AT Least 50 characters\"\n          },\n          maxLength: {\n            value: 1000,\n            message: \"You may ONLY enter 1000 characters or less\"\n          }\n        })\n      };\n    },\n    onBlur: (e, clearErrors, name, setError) => calculateBlurOrNot(e, clearErrors, name, setError),\n    onChange: (value, setValue) => {\n      setValue(\"mainDescription\", value, {\n        shouldValidate: false\n      });\n    },\n    name: \"mainDescription\",\n    placeholder: \"Enter a detailed or basic (totally up to you but at least include 50 characters) for your description\",\n    type: \"textarea\",\n    label: \"Enter a description for your live stream (AT-LEAST 50 characters)\"\n  }; // return values to other component\n\n  return {\n    mainDescriptionChecker,\n    subcategoryChecker\n  };\n};\n\nexport default CreateNewPostReduxFormHelpers;","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/people/hackers/individualProfile/wallData/postNewData/helpers/reactHookFormHelpers.js"],"names":["CreateNewPostReduxFormHelpers","subcategoryChecker","check","setError","register","values","errors","name","clearErrors","required","value","message","onBlur","e","target","setTimeout","Object","keys","length","type","placeholder","label","calculateBlurOrNot","valueLen","mainDescriptionChecker","minLength","maxLength","onChange","setValue","shouldValidate"],"mappings":"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","sourcesContent":["// helpers logic related to mainly to redux-hook-form\nconst CreateNewPostReduxFormHelpers = () => {\n    \n    const subcategoryChecker = {\n        check: (setError, register, values, errors, name, clearErrors) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: \"You MUST select an option before starting your LIVE stream\"\n                }, onBlur: (e) => {\n                    // log to check whats returned\n\n                    const value = e.target.value;\n                    // timeout to delay for state change(s)\n                    setTimeout(() => {\n                        // clear error after proper selection\n                        if ((typeof value !== \"undefined\") && (Object.keys(value).length > 0)) {\n                            clearErrors(name);\n                        } else {\n                            // set error as nothing was selected (blank 'click-off' selection of selector)\n                            setError(name, {\n                                type: \"manual\",\n                                message: \"You MUST select an option before starting your LIVE stream\",\n                            });\n                        }\n                    }, 50);\n                }})}\n            )\n        },\n        name: \"subCategory\",\n        placeholder: \"Enter a 'sub' category for your live stream (stream filtration)...\",\n        type: \"text\",\n        label: \"Stream Sub-Category\"\n    };\n    const calculateBlurOrNot = (e, clearErrors, name, setError) => {\n        // deconstruct value\n        const valueLen = e.target.value.length;\n        // timeout to delay for state change(s)\n        setTimeout(() => {\n            // clear error after proper selection\n            if (valueLen >= 50) {\n                if (valueLen <= 1000) {\n                    clearErrors(name);\n                } else {\n                    // set error - TOO many characters\n                    setError(name, {\n                        type: \"manual\",\n                        message: \"You may ONLY enter 1000 characters or less\",\n                    });\n                }\n            } else {\n                // NOT Long enough\n                setError(name, {\n                    type: \"manual\",\n                    message: \"You MUST enter AT Least 50 characters\",\n                });\n            }\n        }, 100);\n    }\n    const mainDescriptionChecker = {\n        check: (setError, register) => {\n            return (\n                {...register(\"mainDescription\", { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 50 characters to 1000 characters\"\n                }, minLength: {\n                    value: 50,\n                    message: \"You MUST enter AT Least 50 characters\"\n                }, maxLength: {\n                    value: 1000,\n                    message: \"You may ONLY enter 1000 characters or less\"\n                }})}\n            )\n        },\n        onBlur: (e, clearErrors, name, setError) => calculateBlurOrNot(e, clearErrors, name, setError),\n        onChange: (value, setValue) => {\n            setValue(\"mainDescription\", value, { shouldValidate: false });\n        },\n        name: \"mainDescription\",\n        placeholder: \"Enter a detailed or basic (totally up to you but at least include 50 characters) for your description\",\n        type: \"textarea\",\n        label: \"Enter a description for your live stream (AT-LEAST 50 characters)\"\n    };\n    // return values to other component\n    return {\n        mainDescriptionChecker,\n        subcategoryChecker\n    }\n}\n\nexport default CreateNewPostReduxFormHelpers;"]},"metadata":{},"sourceType":"module"}