{"ast":null,"code":"import _slicedToArray from \"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport KDBush from 'kdbush';\nvar defaultOptions = {\n  minZoom: 0,\n  // min zoom to generate clusters on\n  maxZoom: 16,\n  // max zoom level to cluster the points on\n  minPoints: 2,\n  // minimum points to form a cluster\n  radius: 40,\n  // cluster radius in pixels\n  extent: 512,\n  // tile extent (radius is calculated relative to it)\n  nodeSize: 64,\n  // size of the KD-tree leaf node, affects performance\n  log: false,\n  // whether to log timing info\n  // whether to generate numeric ids for input features (in vector tiles)\n  generateId: false,\n  // a reduce function for calculating custom cluster properties\n  reduce: null,\n  // (accumulated, props) => { accumulated.sum += props.sum; }\n  // properties to use for individual points when running the reducer\n  map: function map(props) {\n    return props;\n  } // props => ({sum: props.my_value})\n\n};\n\nvar fround = Math.fround || function (tmp) {\n  return function (x) {\n    tmp[0] = +x;\n    return tmp[0];\n  };\n}(new Float32Array(1));\n\nvar Supercluster = /*#__PURE__*/function () {\n  function Supercluster(options) {\n    _classCallCheck(this, Supercluster);\n\n    this.options = extend(Object.create(defaultOptions), options);\n    this.trees = new Array(this.options.maxZoom + 1);\n  }\n\n  _createClass(Supercluster, [{\n    key: \"load\",\n    value: function load(points) {\n      var _this$options = this.options,\n          log = _this$options.log,\n          minZoom = _this$options.minZoom,\n          maxZoom = _this$options.maxZoom,\n          nodeSize = _this$options.nodeSize;\n      if (log) console.time('total time');\n      var timerId = \"prepare \".concat(points.length, \" points\");\n      if (log) console.time(timerId);\n      this.points = points; // generate a cluster object for each point and index input points into a KD-tree\n\n      var clusters = [];\n\n      for (var i = 0; i < points.length; i++) {\n        if (!points[i].geometry) continue;\n        clusters.push(createPointCluster(points[i], i));\n      }\n\n      this.trees[maxZoom + 1] = new KDBush(clusters, getX, getY, nodeSize, Float32Array);\n      if (log) console.timeEnd(timerId); // cluster points on max zoom, then cluster the results on previous zoom, etc.;\n      // results in a cluster hierarchy across zoom levels\n\n      for (var z = maxZoom; z >= minZoom; z--) {\n        var now = +Date.now(); // create a new set of clusters for the zoom and index them with a KD-tree\n\n        clusters = this._cluster(clusters, z);\n        this.trees[z] = new KDBush(clusters, getX, getY, nodeSize, Float32Array);\n        if (log) console.log('z%d: %d clusters in %dms', z, clusters.length, +Date.now() - now);\n      }\n\n      if (log) console.timeEnd('total time');\n      return this;\n    }\n  }, {\n    key: \"getClusters\",\n    value: function getClusters(bbox, zoom) {\n      var minLng = ((bbox[0] + 180) % 360 + 360) % 360 - 180;\n      var minLat = Math.max(-90, Math.min(90, bbox[1]));\n      var maxLng = bbox[2] === 180 ? 180 : ((bbox[2] + 180) % 360 + 360) % 360 - 180;\n      var maxLat = Math.max(-90, Math.min(90, bbox[3]));\n\n      if (bbox[2] - bbox[0] >= 360) {\n        minLng = -180;\n        maxLng = 180;\n      } else if (minLng > maxLng) {\n        var easternHem = this.getClusters([minLng, minLat, 180, maxLat], zoom);\n        var westernHem = this.getClusters([-180, minLat, maxLng, maxLat], zoom);\n        return easternHem.concat(westernHem);\n      }\n\n      var tree = this.trees[this._limitZoom(zoom)];\n\n      var ids = tree.range(lngX(minLng), latY(maxLat), lngX(maxLng), latY(minLat));\n      var clusters = [];\n\n      var _iterator = _createForOfIteratorHelper(ids),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var id = _step.value;\n          var c = tree.points[id];\n          clusters.push(c.numPoints ? getClusterJSON(c) : this.points[c.index]);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return clusters;\n    }\n  }, {\n    key: \"getChildren\",\n    value: function getChildren(clusterId) {\n      var originId = this._getOriginId(clusterId);\n\n      var originZoom = this._getOriginZoom(clusterId);\n\n      var errorMsg = 'No cluster with the specified id.';\n      var index = this.trees[originZoom];\n      if (!index) throw new Error(errorMsg);\n      var origin = index.points[originId];\n      if (!origin) throw new Error(errorMsg);\n      var r = this.options.radius / (this.options.extent * Math.pow(2, originZoom - 1));\n      var ids = index.within(origin.x, origin.y, r);\n      var children = [];\n\n      var _iterator2 = _createForOfIteratorHelper(ids),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var id = _step2.value;\n          var c = index.points[id];\n\n          if (c.parentId === clusterId) {\n            children.push(c.numPoints ? getClusterJSON(c) : this.points[c.index]);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      if (children.length === 0) throw new Error(errorMsg);\n      return children;\n    }\n  }, {\n    key: \"getLeaves\",\n    value: function getLeaves(clusterId, limit, offset) {\n      limit = limit || 10;\n      offset = offset || 0;\n      var leaves = [];\n\n      this._appendLeaves(leaves, clusterId, limit, offset, 0);\n\n      return leaves;\n    }\n  }, {\n    key: \"getTile\",\n    value: function getTile(z, x, y) {\n      var tree = this.trees[this._limitZoom(z)];\n\n      var z2 = Math.pow(2, z);\n      var _this$options2 = this.options,\n          extent = _this$options2.extent,\n          radius = _this$options2.radius;\n      var p = radius / extent;\n      var top = (y - p) / z2;\n      var bottom = (y + 1 + p) / z2;\n      var tile = {\n        features: []\n      };\n\n      this._addTileFeatures(tree.range((x - p) / z2, top, (x + 1 + p) / z2, bottom), tree.points, x, y, z2, tile);\n\n      if (x === 0) {\n        this._addTileFeatures(tree.range(1 - p / z2, top, 1, bottom), tree.points, z2, y, z2, tile);\n      }\n\n      if (x === z2 - 1) {\n        this._addTileFeatures(tree.range(0, top, p / z2, bottom), tree.points, -1, y, z2, tile);\n      }\n\n      return tile.features.length ? tile : null;\n    }\n  }, {\n    key: \"getClusterExpansionZoom\",\n    value: function getClusterExpansionZoom(clusterId) {\n      var expansionZoom = this._getOriginZoom(clusterId) - 1;\n\n      while (expansionZoom <= this.options.maxZoom) {\n        var children = this.getChildren(clusterId);\n        expansionZoom++;\n        if (children.length !== 1) break;\n        clusterId = children[0].properties.cluster_id;\n      }\n\n      return expansionZoom;\n    }\n  }, {\n    key: \"_appendLeaves\",\n    value: function _appendLeaves(result, clusterId, limit, offset, skipped) {\n      var children = this.getChildren(clusterId);\n\n      var _iterator3 = _createForOfIteratorHelper(children),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var child = _step3.value;\n          var props = child.properties;\n\n          if (props && props.cluster) {\n            if (skipped + props.point_count <= offset) {\n              // skip the whole cluster\n              skipped += props.point_count;\n            } else {\n              // enter the cluster\n              skipped = this._appendLeaves(result, props.cluster_id, limit, offset, skipped); // exit the cluster\n            }\n          } else if (skipped < offset) {\n            // skip a single point\n            skipped++;\n          } else {\n            // add a single point\n            result.push(child);\n          }\n\n          if (result.length === limit) break;\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return skipped;\n    }\n  }, {\n    key: \"_addTileFeatures\",\n    value: function _addTileFeatures(ids, points, x, y, z2, tile) {\n      var _iterator4 = _createForOfIteratorHelper(ids),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var i = _step4.value;\n          var c = points[i];\n          var isCluster = c.numPoints;\n          var tags = void 0,\n              px = void 0,\n              py = void 0;\n\n          if (isCluster) {\n            tags = getClusterProperties(c);\n            px = c.x;\n            py = c.y;\n          } else {\n            var p = this.points[c.index];\n            tags = p.properties;\n            px = lngX(p.geometry.coordinates[0]);\n            py = latY(p.geometry.coordinates[1]);\n          }\n\n          var f = {\n            type: 1,\n            geometry: [[Math.round(this.options.extent * (px * z2 - x)), Math.round(this.options.extent * (py * z2 - y))]],\n            tags: tags\n          }; // assign id\n\n          var id = void 0;\n\n          if (isCluster) {\n            id = c.id;\n          } else if (this.options.generateId) {\n            // optionally generate id\n            id = c.index;\n          } else if (this.points[c.index].id) {\n            // keep id if already assigned\n            id = this.points[c.index].id;\n          }\n\n          if (id !== undefined) f.id = id;\n          tile.features.push(f);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"_limitZoom\",\n    value: function _limitZoom(z) {\n      return Math.max(this.options.minZoom, Math.min(+z, this.options.maxZoom + 1));\n    }\n  }, {\n    key: \"_cluster\",\n    value: function _cluster(points, zoom) {\n      var clusters = [];\n      var _this$options3 = this.options,\n          radius = _this$options3.radius,\n          extent = _this$options3.extent,\n          reduce = _this$options3.reduce,\n          minPoints = _this$options3.minPoints;\n      var r = radius / (extent * Math.pow(2, zoom)); // loop through each point\n\n      for (var i = 0; i < points.length; i++) {\n        var p = points[i]; // if we've already visited the point at this zoom level, skip it\n\n        if (p.zoom <= zoom) continue;\n        p.zoom = zoom; // find all nearby points\n\n        var tree = this.trees[zoom + 1];\n        var neighborIds = tree.within(p.x, p.y, r);\n        var numPointsOrigin = p.numPoints || 1;\n        var numPoints = numPointsOrigin; // count the number of points in a potential cluster\n\n        var _iterator5 = _createForOfIteratorHelper(neighborIds),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var _neighborId2 = _step5.value;\n            var _b2 = tree.points[_neighborId2]; // filter out neighbors that are already processed\n\n            if (_b2.zoom > zoom) numPoints += _b2.numPoints || 1;\n          } // if there were neighbors to merge, and there are enough points to form a cluster\n\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n\n        if (numPoints > numPointsOrigin && numPoints >= minPoints) {\n          var wx = p.x * numPointsOrigin;\n          var wy = p.y * numPointsOrigin;\n          var clusterProperties = reduce && numPointsOrigin > 1 ? this._map(p, true) : null; // encode both zoom and point index on which the cluster originated -- offset by total length of features\n\n          var id = (i << 5) + (zoom + 1) + this.points.length;\n\n          var _iterator6 = _createForOfIteratorHelper(neighborIds),\n              _step6;\n\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var neighborId = _step6.value;\n              var b = tree.points[neighborId];\n              if (b.zoom <= zoom) continue;\n              b.zoom = zoom; // save the zoom (so it doesn't get processed twice)\n\n              var numPoints2 = b.numPoints || 1;\n              wx += b.x * numPoints2; // accumulate coordinates for calculating weighted center\n\n              wy += b.y * numPoints2;\n              b.parentId = id;\n\n              if (reduce) {\n                if (!clusterProperties) clusterProperties = this._map(p, true);\n                reduce(clusterProperties, this._map(b));\n              }\n            }\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n\n          p.parentId = id;\n          clusters.push(createCluster(wx / numPoints, wy / numPoints, id, numPoints, clusterProperties));\n        } else {\n          // left points as unclustered\n          clusters.push(p);\n\n          if (numPoints > 1) {\n            var _iterator7 = _createForOfIteratorHelper(neighborIds),\n                _step7;\n\n            try {\n              for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                var _neighborId = _step7.value;\n                var _b = tree.points[_neighborId];\n                if (_b.zoom <= zoom) continue;\n                _b.zoom = zoom;\n                clusters.push(_b);\n              }\n            } catch (err) {\n              _iterator7.e(err);\n            } finally {\n              _iterator7.f();\n            }\n          }\n        }\n      }\n\n      return clusters;\n    } // get index of the point from which the cluster originated\n\n  }, {\n    key: \"_getOriginId\",\n    value: function _getOriginId(clusterId) {\n      return clusterId - this.points.length >> 5;\n    } // get zoom of the point from which the cluster originated\n\n  }, {\n    key: \"_getOriginZoom\",\n    value: function _getOriginZoom(clusterId) {\n      return (clusterId - this.points.length) % 32;\n    }\n  }, {\n    key: \"_map\",\n    value: function _map(point, clone) {\n      if (point.numPoints) {\n        return clone ? extend({}, point.properties) : point.properties;\n      }\n\n      var original = this.points[point.index].properties;\n      var result = this.options.map(original);\n      return clone && result === original ? extend({}, result) : result;\n    }\n  }]);\n\n  return Supercluster;\n}();\n\nexport { Supercluster as default };\n\nfunction createCluster(x, y, id, numPoints, properties) {\n  return {\n    x: fround(x),\n    // weighted cluster center; round for consistency with Float32Array index\n    y: fround(y),\n    zoom: Infinity,\n    // the last zoom the cluster was processed at\n    id: id,\n    // encodes index of the first child of the cluster and its zoom level\n    parentId: -1,\n    // parent cluster id\n    numPoints: numPoints,\n    properties: properties\n  };\n}\n\nfunction createPointCluster(p, id) {\n  var _p$geometry$coordinat = _slicedToArray(p.geometry.coordinates, 2),\n      x = _p$geometry$coordinat[0],\n      y = _p$geometry$coordinat[1];\n\n  return {\n    x: fround(lngX(x)),\n    // projected point coordinates\n    y: fround(latY(y)),\n    zoom: Infinity,\n    // the last zoom the point was processed at\n    index: id,\n    // index of the source feature in the original input array,\n    parentId: -1 // parent cluster id\n\n  };\n}\n\nfunction getClusterJSON(cluster) {\n  return {\n    type: 'Feature',\n    id: cluster.id,\n    properties: getClusterProperties(cluster),\n    geometry: {\n      type: 'Point',\n      coordinates: [xLng(cluster.x), yLat(cluster.y)]\n    }\n  };\n}\n\nfunction getClusterProperties(cluster) {\n  var count = cluster.numPoints;\n  var abbrev = count >= 10000 ? \"\".concat(Math.round(count / 1000), \"k\") : count >= 1000 ? \"\".concat(Math.round(count / 100) / 10, \"k\") : count;\n  return extend(extend({}, cluster.properties), {\n    cluster: true,\n    cluster_id: cluster.id,\n    point_count: count,\n    point_count_abbreviated: abbrev\n  });\n} // longitude/latitude to spherical mercator in [0..1] range\n\n\nfunction lngX(lng) {\n  return lng / 360 + 0.5;\n}\n\nfunction latY(lat) {\n  var sin = Math.sin(lat * Math.PI / 180);\n  var y = 0.5 - 0.25 * Math.log((1 + sin) / (1 - sin)) / Math.PI;\n  return y < 0 ? 0 : y > 1 ? 1 : y;\n} // spherical mercator to longitude/latitude\n\n\nfunction xLng(x) {\n  return (x - 0.5) * 360;\n}\n\nfunction yLat(y) {\n  var y2 = (180 - y * 360) * Math.PI / 180;\n  return 360 * Math.atan(Math.exp(y2)) / Math.PI - 90;\n}\n\nfunction extend(dest, src) {\n  for (var id in src) {\n    dest[id] = src[id];\n  }\n\n  return dest;\n}\n\nfunction getX(p) {\n  return p.x;\n}\n\nfunction getY(p) {\n  return p.y;\n}","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/node_modules/supercluster/index.js"],"names":["KDBush","defaultOptions","minZoom","maxZoom","minPoints","radius","extent","nodeSize","log","generateId","reduce","map","props","fround","Math","tmp","x","Float32Array","Supercluster","options","extend","Object","create","trees","Array","points","console","time","timerId","length","clusters","i","geometry","push","createPointCluster","getX","getY","timeEnd","z","now","Date","_cluster","bbox","zoom","minLng","minLat","max","min","maxLng","maxLat","easternHem","getClusters","westernHem","concat","tree","_limitZoom","ids","range","lngX","latY","id","c","numPoints","getClusterJSON","index","clusterId","originId","_getOriginId","originZoom","_getOriginZoom","errorMsg","Error","origin","r","pow","within","y","children","parentId","limit","offset","leaves","_appendLeaves","z2","p","top","bottom","tile","features","_addTileFeatures","expansionZoom","getChildren","properties","cluster_id","result","skipped","child","cluster","point_count","isCluster","tags","px","py","getClusterProperties","coordinates","f","type","round","undefined","neighborIds","numPointsOrigin","neighborId","b","wx","wy","clusterProperties","_map","numPoints2","createCluster","point","clone","original","Infinity","xLng","yLat","count","abbrev","point_count_abbreviated","lng","lat","sin","PI","y2","atan","exp","dest","src"],"mappings":"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","sourcesContent":["\nimport KDBush from 'kdbush';\n\nconst defaultOptions = {\n    minZoom: 0,   // min zoom to generate clusters on\n    maxZoom: 16,  // max zoom level to cluster the points on\n    minPoints: 2, // minimum points to form a cluster\n    radius: 40,   // cluster radius in pixels\n    extent: 512,  // tile extent (radius is calculated relative to it)\n    nodeSize: 64, // size of the KD-tree leaf node, affects performance\n    log: false,   // whether to log timing info\n\n    // whether to generate numeric ids for input features (in vector tiles)\n    generateId: false,\n\n    // a reduce function for calculating custom cluster properties\n    reduce: null, // (accumulated, props) => { accumulated.sum += props.sum; }\n\n    // properties to use for individual points when running the reducer\n    map: props => props // props => ({sum: props.my_value})\n};\n\nconst fround = Math.fround || (tmp => ((x) => { tmp[0] = +x; return tmp[0]; }))(new Float32Array(1));\n\nexport default class Supercluster {\n    constructor(options) {\n        this.options = extend(Object.create(defaultOptions), options);\n        this.trees = new Array(this.options.maxZoom + 1);\n    }\n\n    load(points) {\n        const {log, minZoom, maxZoom, nodeSize} = this.options;\n\n        if (log) console.time('total time');\n\n        const timerId = `prepare ${  points.length  } points`;\n        if (log) console.time(timerId);\n\n        this.points = points;\n\n        // generate a cluster object for each point and index input points into a KD-tree\n        let clusters = [];\n        for (let i = 0; i < points.length; i++) {\n            if (!points[i].geometry) continue;\n            clusters.push(createPointCluster(points[i], i));\n        }\n        this.trees[maxZoom + 1] = new KDBush(clusters, getX, getY, nodeSize, Float32Array);\n\n        if (log) console.timeEnd(timerId);\n\n        // cluster points on max zoom, then cluster the results on previous zoom, etc.;\n        // results in a cluster hierarchy across zoom levels\n        for (let z = maxZoom; z >= minZoom; z--) {\n            const now = +Date.now();\n\n            // create a new set of clusters for the zoom and index them with a KD-tree\n            clusters = this._cluster(clusters, z);\n            this.trees[z] = new KDBush(clusters, getX, getY, nodeSize, Float32Array);\n\n            if (log) console.log('z%d: %d clusters in %dms', z, clusters.length, +Date.now() - now);\n        }\n\n        if (log) console.timeEnd('total time');\n\n        return this;\n    }\n\n    getClusters(bbox, zoom) {\n        let minLng = ((bbox[0] + 180) % 360 + 360) % 360 - 180;\n        const minLat = Math.max(-90, Math.min(90, bbox[1]));\n        let maxLng = bbox[2] === 180 ? 180 : ((bbox[2] + 180) % 360 + 360) % 360 - 180;\n        const maxLat = Math.max(-90, Math.min(90, bbox[3]));\n\n        if (bbox[2] - bbox[0] >= 360) {\n            minLng = -180;\n            maxLng = 180;\n        } else if (minLng > maxLng) {\n            const easternHem = this.getClusters([minLng, minLat, 180, maxLat], zoom);\n            const westernHem = this.getClusters([-180, minLat, maxLng, maxLat], zoom);\n            return easternHem.concat(westernHem);\n        }\n\n        const tree = this.trees[this._limitZoom(zoom)];\n        const ids = tree.range(lngX(minLng), latY(maxLat), lngX(maxLng), latY(minLat));\n        const clusters = [];\n        for (const id of ids) {\n            const c = tree.points[id];\n            clusters.push(c.numPoints ? getClusterJSON(c) : this.points[c.index]);\n        }\n        return clusters;\n    }\n\n    getChildren(clusterId) {\n        const originId = this._getOriginId(clusterId);\n        const originZoom = this._getOriginZoom(clusterId);\n        const errorMsg = 'No cluster with the specified id.';\n\n        const index = this.trees[originZoom];\n        if (!index) throw new Error(errorMsg);\n\n        const origin = index.points[originId];\n        if (!origin) throw new Error(errorMsg);\n\n        const r = this.options.radius / (this.options.extent * Math.pow(2, originZoom - 1));\n        const ids = index.within(origin.x, origin.y, r);\n        const children = [];\n        for (const id of ids) {\n            const c = index.points[id];\n            if (c.parentId === clusterId) {\n                children.push(c.numPoints ? getClusterJSON(c) : this.points[c.index]);\n            }\n        }\n\n        if (children.length === 0) throw new Error(errorMsg);\n\n        return children;\n    }\n\n    getLeaves(clusterId, limit, offset) {\n        limit = limit || 10;\n        offset = offset || 0;\n\n        const leaves = [];\n        this._appendLeaves(leaves, clusterId, limit, offset, 0);\n\n        return leaves;\n    }\n\n    getTile(z, x, y) {\n        const tree = this.trees[this._limitZoom(z)];\n        const z2 = Math.pow(2, z);\n        const {extent, radius} = this.options;\n        const p = radius / extent;\n        const top = (y - p) / z2;\n        const bottom = (y + 1 + p) / z2;\n\n        const tile = {\n            features: []\n        };\n\n        this._addTileFeatures(\n            tree.range((x - p) / z2, top, (x + 1 + p) / z2, bottom),\n            tree.points, x, y, z2, tile);\n\n        if (x === 0) {\n            this._addTileFeatures(\n                tree.range(1 - p / z2, top, 1, bottom),\n                tree.points, z2, y, z2, tile);\n        }\n        if (x === z2 - 1) {\n            this._addTileFeatures(\n                tree.range(0, top, p / z2, bottom),\n                tree.points, -1, y, z2, tile);\n        }\n\n        return tile.features.length ? tile : null;\n    }\n\n    getClusterExpansionZoom(clusterId) {\n        let expansionZoom = this._getOriginZoom(clusterId) - 1;\n        while (expansionZoom <= this.options.maxZoom) {\n            const children = this.getChildren(clusterId);\n            expansionZoom++;\n            if (children.length !== 1) break;\n            clusterId = children[0].properties.cluster_id;\n        }\n        return expansionZoom;\n    }\n\n    _appendLeaves(result, clusterId, limit, offset, skipped) {\n        const children = this.getChildren(clusterId);\n\n        for (const child of children) {\n            const props = child.properties;\n\n            if (props && props.cluster) {\n                if (skipped + props.point_count <= offset) {\n                    // skip the whole cluster\n                    skipped += props.point_count;\n                } else {\n                    // enter the cluster\n                    skipped = this._appendLeaves(result, props.cluster_id, limit, offset, skipped);\n                    // exit the cluster\n                }\n            } else if (skipped < offset) {\n                // skip a single point\n                skipped++;\n            } else {\n                // add a single point\n                result.push(child);\n            }\n            if (result.length === limit) break;\n        }\n\n        return skipped;\n    }\n\n    _addTileFeatures(ids, points, x, y, z2, tile) {\n        for (const i of ids) {\n            const c = points[i];\n            const isCluster = c.numPoints;\n\n            let tags, px, py;\n            if (isCluster) {\n                tags = getClusterProperties(c);\n                px = c.x;\n                py = c.y;\n            } else {\n                const p = this.points[c.index];\n                tags = p.properties;\n                px = lngX(p.geometry.coordinates[0]);\n                py = latY(p.geometry.coordinates[1]);\n            }\n\n            const f = {\n                type: 1,\n                geometry: [[\n                    Math.round(this.options.extent * (px * z2 - x)),\n                    Math.round(this.options.extent * (py * z2 - y))\n                ]],\n                tags\n            };\n\n            // assign id\n            let id;\n            if (isCluster) {\n                id = c.id;\n            } else if (this.options.generateId) {\n                // optionally generate id\n                id = c.index;\n            } else if (this.points[c.index].id) {\n                // keep id if already assigned\n                id = this.points[c.index].id;\n            }\n\n            if (id !== undefined) f.id = id;\n\n            tile.features.push(f);\n        }\n    }\n\n    _limitZoom(z) {\n        return Math.max(this.options.minZoom, Math.min(+z, this.options.maxZoom + 1));\n    }\n\n    _cluster(points, zoom) {\n        const clusters = [];\n        const {radius, extent, reduce, minPoints} = this.options;\n        const r = radius / (extent * Math.pow(2, zoom));\n\n        // loop through each point\n        for (let i = 0; i < points.length; i++) {\n            const p = points[i];\n            // if we've already visited the point at this zoom level, skip it\n            if (p.zoom <= zoom) continue;\n            p.zoom = zoom;\n\n            // find all nearby points\n            const tree = this.trees[zoom + 1];\n            const neighborIds = tree.within(p.x, p.y, r);\n\n            const numPointsOrigin = p.numPoints || 1;\n            let numPoints = numPointsOrigin;\n\n            // count the number of points in a potential cluster\n            for (const neighborId of neighborIds) {\n                const b = tree.points[neighborId];\n                // filter out neighbors that are already processed\n                if (b.zoom > zoom) numPoints += b.numPoints || 1;\n            }\n\n            // if there were neighbors to merge, and there are enough points to form a cluster\n            if (numPoints > numPointsOrigin && numPoints >= minPoints) {\n                let wx = p.x * numPointsOrigin;\n                let wy = p.y * numPointsOrigin;\n\n                let clusterProperties = reduce && numPointsOrigin > 1 ? this._map(p, true) : null;\n\n                // encode both zoom and point index on which the cluster originated -- offset by total length of features\n                const id = (i << 5) + (zoom + 1) + this.points.length;\n\n                for (const neighborId of neighborIds) {\n                    const b = tree.points[neighborId];\n\n                    if (b.zoom <= zoom) continue;\n                    b.zoom = zoom; // save the zoom (so it doesn't get processed twice)\n\n                    const numPoints2 = b.numPoints || 1;\n                    wx += b.x * numPoints2; // accumulate coordinates for calculating weighted center\n                    wy += b.y * numPoints2;\n\n                    b.parentId = id;\n\n                    if (reduce) {\n                        if (!clusterProperties) clusterProperties = this._map(p, true);\n                        reduce(clusterProperties, this._map(b));\n                    }\n                }\n\n                p.parentId = id;\n                clusters.push(createCluster(wx / numPoints, wy / numPoints, id, numPoints, clusterProperties));\n\n            } else { // left points as unclustered\n                clusters.push(p);\n\n                if (numPoints > 1) {\n                    for (const neighborId of neighborIds) {\n                        const b = tree.points[neighborId];\n                        if (b.zoom <= zoom) continue;\n                        b.zoom = zoom;\n                        clusters.push(b);\n                    }\n                }\n            }\n        }\n\n        return clusters;\n    }\n\n    // get index of the point from which the cluster originated\n    _getOriginId(clusterId) {\n        return (clusterId - this.points.length) >> 5;\n    }\n\n    // get zoom of the point from which the cluster originated\n    _getOriginZoom(clusterId) {\n        return (clusterId - this.points.length) % 32;\n    }\n\n    _map(point, clone) {\n        if (point.numPoints) {\n            return clone ? extend({}, point.properties) : point.properties;\n        }\n        const original = this.points[point.index].properties;\n        const result = this.options.map(original);\n        return clone && result === original ? extend({}, result) : result;\n    }\n}\n\nfunction createCluster(x, y, id, numPoints, properties) {\n    return {\n        x: fround(x), // weighted cluster center; round for consistency with Float32Array index\n        y: fround(y),\n        zoom: Infinity, // the last zoom the cluster was processed at\n        id, // encodes index of the first child of the cluster and its zoom level\n        parentId: -1, // parent cluster id\n        numPoints,\n        properties\n    };\n}\n\nfunction createPointCluster(p, id) {\n    const [x, y] = p.geometry.coordinates;\n    return {\n        x: fround(lngX(x)), // projected point coordinates\n        y: fround(latY(y)),\n        zoom: Infinity, // the last zoom the point was processed at\n        index: id, // index of the source feature in the original input array,\n        parentId: -1 // parent cluster id\n    };\n}\n\nfunction getClusterJSON(cluster) {\n    return {\n        type: 'Feature',\n        id: cluster.id,\n        properties: getClusterProperties(cluster),\n        geometry: {\n            type: 'Point',\n            coordinates: [xLng(cluster.x), yLat(cluster.y)]\n        }\n    };\n}\n\nfunction getClusterProperties(cluster) {\n    const count = cluster.numPoints;\n    const abbrev =\n        count >= 10000 ? `${Math.round(count / 1000)  }k` :\n        count >= 1000 ? `${Math.round(count / 100) / 10  }k` : count;\n    return extend(extend({}, cluster.properties), {\n        cluster: true,\n        cluster_id: cluster.id,\n        point_count: count,\n        point_count_abbreviated: abbrev\n    });\n}\n\n// longitude/latitude to spherical mercator in [0..1] range\nfunction lngX(lng) {\n    return lng / 360 + 0.5;\n}\nfunction latY(lat) {\n    const sin = Math.sin(lat * Math.PI / 180);\n    const y = (0.5 - 0.25 * Math.log((1 + sin) / (1 - sin)) / Math.PI);\n    return y < 0 ? 0 : y > 1 ? 1 : y;\n}\n\n// spherical mercator to longitude/latitude\nfunction xLng(x) {\n    return (x - 0.5) * 360;\n}\nfunction yLat(y) {\n    const y2 = (180 - y * 360) * Math.PI / 180;\n    return 360 * Math.atan(Math.exp(y2)) / Math.PI - 90;\n}\n\nfunction extend(dest, src) {\n    for (const id in src) dest[id] = src[id];\n    return dest;\n}\n\nfunction getX(p) {\n    return p.x;\n}\nfunction getY(p) {\n    return p.y;\n}\n"]},"metadata":{},"sourceType":"module"}