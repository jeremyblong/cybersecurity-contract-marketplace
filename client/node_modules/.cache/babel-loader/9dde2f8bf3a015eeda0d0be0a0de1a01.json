{"ast":null,"code":"// helpers logic related to mainly to redux-hook-form\nconst MainHooksCustomHelpers = () => {\n  const calculateWhetherURLIsLegit = data => {\n    // helper function\n    const isValidHttpUrl = string => {\n      let url;\n\n      try {\n        url = new URL(string);\n      } catch (_) {\n        return false;\n      } // return protocol data\n\n\n      return url.protocol === \"http:\" || url.protocol === \"https:\";\n    }; // finally, check if url is VALID\n\n\n    if (isValidHttpUrl(data)) {\n      // url IS VALID\n      return true;\n    } else {\n      // url IS NOT VALID - return error string\n      return false;\n    }\n\n    ;\n  };\n\n  const urlEnteredLinkData = {\n    check: (setError, register, clearErrors, setValue, setLinkInput, name) => {\n      return { ...register(name, {\n          required: {\n            value: true,\n            message: \"You MUST enter a value for this field between 8 and 75 charactors\"\n          },\n          minLength: {\n            value: 8,\n            message: \"You must enter AT Least 8 characters\"\n          },\n          maxLength: {\n            value: 75,\n            message: \"You may ONLY enter 75 characters or less\"\n          },\n          onBlur: e => {\n            // extracted final value from input\n            const value = e.target.value; // check if valid url in helper file.\n\n            const validOrNot = calculateWhetherURLIsLegit(value); // check if valid!\n\n            if (validOrNot === true) {\n              // set value\n              // setValue(name, value, { shouldValidate: false });\n              setLinkInput(value); // clear error after setting proper change state\n\n              setTimeout(() => {\n                clearErrors(name);\n              }, 100);\n            } else {\n              setTimeout(() => {\n                setError(name, {\n                  type: \"manual\",\n                  message: \"You MUST enter a VALID URL including http/https and ://\"\n                });\n              }, 100);\n            }\n          }\n        })\n      };\n    },\n    onChange: (e, setLinkInput) => {\n      // deconstruct actual value\n      const value = e.target.value; // set state without redux form\n\n      setLinkInput(value);\n    }\n  };\n  const coverLetterChecks = {\n    check: (setError, register, clearErrors, setValue, name) => {\n      return { ...register(name, {\n          required: {\n            value: true,\n            message: \"You MUST enter a value for this field between 50 and 750 charactors\"\n          },\n          minLength: {\n            value: 50,\n            message: \"You must enter AT Least 50 characters\"\n          },\n          maxLength: {\n            value: 750,\n            message: \"You may ONLY enter 750 characters or less\"\n          },\n          onBlur: e => {\n            // deconstruct actual value\n            const value = e.target.value; // deconstruct length\n\n            const len = value.length; // check if both min/max values met\n\n            if (len > 0 && len >= 50 && len <= 750) {\n              // clear error\n              clearErrors(name);\n            } else {\n              // set error\n              setTimeout(() => {\n                setError(name, {\n                  type: \"manual\",\n                  message: \"You MUST enter between 50 and 750 charectors in total for your cover letter (CV) before proceeding...\"\n                });\n              }, 50);\n            }\n          }\n        })\n      };\n    },\n    onChange: (e, name, setValue) => {\n      // deconstruct actual value\n      const value = e.target.value;\n      setValue(name, value, {\n        shouldValidate: true\n      });\n    },\n    label: \"Cover Letter (CV)\",\n    name: \"coverLetterText\",\n    placeholder: \"Enter your cover letter information (or upload in attachments)...\"\n  };\n  const messageToEmployerChecks = {\n    check: (setError, register, clearErrors, setValue, name) => {\n      return { ...register(name, {\n          required: {\n            value: true,\n            message: \"You MUST enter a value for this field between 50 and 750 charactors\"\n          },\n          minLength: {\n            value: 50,\n            message: \"You must enter AT Least 50 characters\"\n          },\n          maxLength: {\n            value: 750,\n            message: \"You may ONLY enter 750 characters or less\"\n          },\n          onBlur: e => {\n            // deconstruct actual value\n            const value = e.target.value; // deconstruct length\n\n            const len = value.length; // check if both min/max values met\n\n            if (len > 0 && len >= 50 && len <= 750) {\n              // clear error\n              clearErrors(name);\n            } else {\n              // set error\n              setTimeout(() => {\n                setError(name, {\n                  type: \"manual\",\n                  message: \"You MUST enter between 50 and 750 charectors total while messaging employer before proceeding...\"\n                });\n              }, 50);\n            }\n          }\n        })\n      };\n    },\n    onChange: (e, name, setValue) => {\n      // deconstruct actual value\n      const value = e.target.value;\n      setValue(name, value, {\n        shouldValidate: true\n      });\n    },\n    label: \"Message To Employer (Direct to employer)\",\n    name: \"messageToEmployer\",\n    placeholder: \"Enter your 'custom' message to the employer...\"\n  };\n  const physicalOrDigitalChecks = {\n    check: (name, register) => {\n      return { ...register(name, {\n          required: {\n            value: true,\n            message: \"You must select a value/option (digital, physical or both) before proceeding\"\n          }\n        })\n      };\n    },\n    placeholder: \"Select your desired hack type (of enabled options)\",\n    name: \"physicalOrDigitalOrBoth\",\n    label: \"Account Type (Digital/Physical-hack type)\"\n  };\n  const participateInBettingWagers = {\n    check: (name, register) => {\n      return { ...register(name, {\n          required: {\n            value: true,\n            message: \"You must select a value/option (participate in betting OR not) before proceeding\"\n          }\n        })\n      };\n    },\n    placeholder: \"Select whether or not you'd like to participate in betting/gambling...\",\n    name: \"participateInBettingProcess\",\n    label: \"Would you like to participate in 'betting/waggering' on yourself to WIN more money IF you win the 'hack' or listing competition (WINNER selected by employer at end)\"\n  };\n  const tokenBidWagerAmount = {\n    check: (setError, register, clearErrors, setValue, name) => {\n      return { ...register(name, {\n          required: {\n            value: true,\n            message: `You MUST wager anywhere from 5-100 ${process.env.REACT_APP_CRYPTO_TOKEN_NAME} IF bidding is ENABLED (participate input...)`\n          },\n          min: {\n            value: 5,\n            message: `You MUST wager/bid AT-LEAST 5 ${process.env.REACT_APP_CRYPTO_TOKEN_NAME}`\n          },\n          pattern: /\\d+/g,\n          max: {\n            value: 100,\n            message: `You may ONLY wager/bid UP-TO 100 ${process.env.REACT_APP_CRYPTO_TOKEN_NAME}`\n          },\n          onBlur: e => {\n            // deconstruct actual value\n            const value = e.target.value; // check if both min/max values met\n\n            if (value >= 5 && value <= 100) {\n              // clear error\n              clearErrors(name);\n            } else {\n              // set error\n              setTimeout(() => {\n                setError(name, {\n                  type: \"manual\",\n                  message: `You MUST wager anywhere from 5-100 ${process.env.REACT_APP_CRYPTO_TOKEN_NAME} IF bidding is ENABLED (participate input...) as well as entering ONLY NUMERIC charactors!`\n                });\n              }, 50);\n            }\n          }\n        })\n      };\n    },\n    onChange: (e, name, setValue) => {\n      // deconstruct actual value\n      const value = e.target.value;\n      setValue(name, value, {\n        shouldValidate: true\n      });\n    },\n    label: `Enter how many ${process.env.REACT_APP_CRYPTO_TOKEN_NAME} you'd like to wager/bid that YOU will WIN the competition & are selected as the 'winner' of this employer listing`,\n    name: \"waggeredBidAmount\",\n    placeholder: `Enter how many ${process.env.REACT_APP_CRYPTO_TOKEN_NAME} you'd like to wager/bet (that you WIN)`\n  };\n  const approachToSuccessfullyHackCo = {\n    check: (setError, register, clearErrors, name) => {\n      return { ...register(name, {\n          required: {\n            value: true,\n            message: \"You MUST enter a value for this field between 50 and 750 charactors\"\n          },\n          minLength: {\n            value: 50,\n            message: \"You must enter AT Least 50 characters\"\n          },\n          maxLength: {\n            value: 750,\n            message: \"You may ONLY enter 750 characters or less\"\n          },\n          onBlur: e => {\n            console.log(\"blurred/\"); // deconstruct actual value\n\n            const value = e.target.value; // deconstruct length\n\n            const len = value.length; // check if both min/max values met\n\n            if (len > 0 && len >= 50 && len <= 750) {\n              // clear error\n              clearErrors(name);\n            } else {\n              // set error\n              setTimeout(() => {\n                setError(name, {\n                  type: \"manual\",\n                  message: \"You MUST enter between 50 and 750 charectors total while 'describing your hack ideas' before proceeding...\"\n                });\n              }, 50);\n            }\n          }\n        })\n      };\n    },\n    onChange: (e, name, setValue) => {\n      // deconstruct actual value\n      const value = e.target.value; // set new value\n\n      setValue(name, value, {\n        shouldValidate: true\n      });\n    },\n    label: \"What is your approach to this 'hack'?\",\n    name: \"technicalApproachToHack\",\n    placeholder: \"Enter your 'approach' to how you expect to successfully hack this company... (don't give out your attack methods - just give a general idea - can be very broad - up to you)\"\n  }; // return values to other component\n\n  return {\n    urlEnteredLinkData,\n    coverLetterChecks,\n    messageToEmployerChecks,\n    physicalOrDigitalChecks,\n    participateInBettingWagers,\n    approachToSuccessfullyHackCo,\n    tokenBidWagerAmount\n  };\n};\n\nexport default MainHooksCustomHelpers;","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/opportunities/employers/applyToListingHacker/helpers/reactHookFormHelpers.js"],"names":["MainHooksCustomHelpers","calculateWhetherURLIsLegit","data","isValidHttpUrl","string","url","URL","_","protocol","urlEnteredLinkData","check","setError","register","clearErrors","setValue","setLinkInput","name","required","value","message","minLength","maxLength","onBlur","e","target","validOrNot","setTimeout","type","onChange","coverLetterChecks","len","length","shouldValidate","label","placeholder","messageToEmployerChecks","physicalOrDigitalChecks","participateInBettingWagers","tokenBidWagerAmount","process","env","REACT_APP_CRYPTO_TOKEN_NAME","min","pattern","max","approachToSuccessfullyHackCo","console","log"],"mappings":"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","sourcesContent":["// helpers logic related to mainly to redux-hook-form\nconst MainHooksCustomHelpers = () => {\n\n    const calculateWhetherURLIsLegit = (data) => {\n        // helper function\n        const isValidHttpUrl = (string) => {\n            let url;\n            \n            try {\n              url = new URL(string);\n            } catch (_) {\n              return false;  \n            }\n            // return protocol data\n            return url.protocol === \"http:\" || url.protocol === \"https:\";\n        }\n        // finally, check if url is VALID\n        if (isValidHttpUrl(data)) {\n            // url IS VALID\n            return true;\n        } else {\n            // url IS NOT VALID - return error string\n            return false;\n        };\n    }\n\n    const urlEnteredLinkData = {\n        check: (setError, register, clearErrors, setValue, setLinkInput, name) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: \"You MUST enter a value for this field between 8 and 75 charactors\"\n                }, minLength: {\n                    value: 8,\n                    message: \"You must enter AT Least 8 characters\"\n                }, maxLength: {\n                    value: 75,\n                    message: \"You may ONLY enter 75 characters or less\"\n                }, onBlur: (e) => {\n                    // extracted final value from input\n                    const value = e.target.value;\n                    // check if valid url in helper file.\n                    const validOrNot = calculateWhetherURLIsLegit(value);\n                    // check if valid!\n                    if (validOrNot === true) {\n                        // set value\n                        // setValue(name, value, { shouldValidate: false });\n                        setLinkInput(value);\n                        // clear error after setting proper change state\n                        setTimeout(() => {\n                            clearErrors(name);\n                        }, 100);\n                    } else {\n                        setTimeout(() => {\n                            setError(name, {\n                                type: \"manual\",\n                                message: \"You MUST enter a VALID URL including http/https and ://\",\n                            });\n                        }, 100)\n                    }\n                }})}\n            );\n        },\n        onChange: (e, setLinkInput) => {\n            // deconstruct actual value\n            const value = e.target.value;\n            // set state without redux form\n            setLinkInput(value);\n        }\n    };\n    const coverLetterChecks = {\n        check: (setError, register, clearErrors, setValue, name) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: \"You MUST enter a value for this field between 50 and 750 charactors\"\n                }, minLength: {\n                    value: 50,\n                    message: \"You must enter AT Least 50 characters\"\n                }, maxLength: {\n                    value: 750,\n                    message: \"You may ONLY enter 750 characters or less\"\n                }, onBlur: (e) => {\n                    // deconstruct actual value\n                    const value = e.target.value;\n                    // deconstruct length\n                    const len = value.length;\n                    // check if both min/max values met\n                    if ((len > 0) && (len >= 50) && (len <= 750)) {\n                        // clear error\n                        clearErrors(name);\n                    } else {\n                        // set error\n                        setTimeout(() => {\n                            setError(name, {\n                                type: \"manual\",\n                                message: \"You MUST enter between 50 and 750 charectors in total for your cover letter (CV) before proceeding...\",\n                            });\n                        }, 50);\n                    }\n                }})}\n            );\n        },\n        onChange: (e, name, setValue) => {\n            // deconstruct actual value\n            const value = e.target.value;\n\n            setValue(name, value, { shouldValidate: true })\n        },\n        label: \"Cover Letter (CV)\",\n        name: \"coverLetterText\",\n        placeholder: \"Enter your cover letter information (or upload in attachments)...\"\n    };\n    const messageToEmployerChecks = {\n        check: (setError, register, clearErrors, setValue, name) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: \"You MUST enter a value for this field between 50 and 750 charactors\"\n                }, minLength: {\n                    value: 50,\n                    message: \"You must enter AT Least 50 characters\"\n                }, maxLength: {\n                    value: 750,\n                    message: \"You may ONLY enter 750 characters or less\"\n                }, onBlur: (e) => {\n                    // deconstruct actual value\n                    const value = e.target.value;\n                    // deconstruct length\n                    const len = value.length;\n                    // check if both min/max values met\n                    if ((len > 0) && (len >= 50) && (len <= 750)) {\n                        // clear error\n                        clearErrors(name);\n                    } else {\n                        // set error\n                        setTimeout(() => {\n                            setError(name, {\n                                type: \"manual\",\n                                message: \"You MUST enter between 50 and 750 charectors total while messaging employer before proceeding...\",\n                            });\n                        }, 50);\n                    }\n                }})}\n            );\n        },\n        onChange: (e, name, setValue) => {\n            // deconstruct actual value\n            const value = e.target.value;\n\n            setValue(name, value, { shouldValidate: true })\n        },\n        label: \"Message To Employer (Direct to employer)\",\n        name: \"messageToEmployer\",\n        placeholder: \"Enter your 'custom' message to the employer...\"\n    };\n    const physicalOrDigitalChecks = {\n        check: (name, register) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: \"You must select a value/option (digital, physical or both) before proceeding\"\n                }})}\n            );\n        },\n        placeholder: \"Select your desired hack type (of enabled options)\",\n        name: \"physicalOrDigitalOrBoth\",\n        label: \"Account Type (Digital/Physical-hack type)\"\n    }\n    const participateInBettingWagers = {\n        check: (name, register) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: \"You must select a value/option (participate in betting OR not) before proceeding\"\n                }})}\n            );\n        },\n        placeholder: \"Select whether or not you'd like to participate in betting/gambling...\",\n        name: \"participateInBettingProcess\",\n        label: \"Would you like to participate in 'betting/waggering' on yourself to WIN more money IF you win the 'hack' or listing competition (WINNER selected by employer at end)\"\n    }\n    const tokenBidWagerAmount = {\n        check: (setError, register, clearErrors, setValue, name) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: `You MUST wager anywhere from 5-100 ${process.env.REACT_APP_CRYPTO_TOKEN_NAME} IF bidding is ENABLED (participate input...)`\n                }, min: {\n                    value: 5,\n                    message: `You MUST wager/bid AT-LEAST 5 ${process.env.REACT_APP_CRYPTO_TOKEN_NAME}`\n                }, pattern: /\\d+/g, max: {\n                    value: 100,\n                    message: `You may ONLY wager/bid UP-TO 100 ${process.env.REACT_APP_CRYPTO_TOKEN_NAME}`\n                }, onBlur: (e) => {\n                    // deconstruct actual value\n                    const value = e.target.value;\n                    // check if both min/max values met\n                    if ((value >= 5) && (value <= 100)) {\n                        // clear error\n                        clearErrors(name);\n                    } else {\n                        // set error\n                        setTimeout(() => {\n                            setError(name, {\n                                type: \"manual\",\n                                message: `You MUST wager anywhere from 5-100 ${process.env.REACT_APP_CRYPTO_TOKEN_NAME} IF bidding is ENABLED (participate input...) as well as entering ONLY NUMERIC charactors!`,\n                            });\n                        }, 50);\n                    }\n                }})}\n            );\n        },\n        onChange: (e, name, setValue) => {\n            // deconstruct actual value\n            const value = e.target.value;\n\n            setValue(name, value, { shouldValidate: true })\n        },\n        label: `Enter how many ${process.env.REACT_APP_CRYPTO_TOKEN_NAME} you'd like to wager/bid that YOU will WIN the competition & are selected as the 'winner' of this employer listing`,\n        name: \"waggeredBidAmount\",\n        placeholder: `Enter how many ${process.env.REACT_APP_CRYPTO_TOKEN_NAME} you'd like to wager/bet (that you WIN)`\n    }\n    const approachToSuccessfullyHackCo = {\n        check: (setError, register, clearErrors, name) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: \"You MUST enter a value for this field between 50 and 750 charactors\"\n                }, minLength: {\n                    value: 50,\n                    message: \"You must enter AT Least 50 characters\"\n                }, maxLength: {\n                    value: 750,\n                    message: \"You may ONLY enter 750 characters or less\"\n                }, onBlur: (e) => {\n                    console.log(\"blurred/\");\n                    // deconstruct actual value\n                    const value = e.target.value;\n                    // deconstruct length\n                    const len = value.length;\n                    // check if both min/max values met\n                    if ((len > 0) && (len >= 50) && (len <= 750)) {\n                        // clear error\n                        clearErrors(name);\n                    } else {\n                        // set error\n                        setTimeout(() => {\n                            setError(name, {\n                                type: \"manual\",\n                                message: \"You MUST enter between 50 and 750 charectors total while 'describing your hack ideas' before proceeding...\",\n                            });\n                        }, 50);\n                    }\n                }})}\n            );\n        },\n        onChange: (e, name, setValue) => {\n            // deconstruct actual value\n            const value = e.target.value;\n            // set new value\n            setValue(name, value, { shouldValidate: true })\n        },\n        label: \"What is your approach to this 'hack'?\",\n        name: \"technicalApproachToHack\",\n        placeholder: \"Enter your 'approach' to how you expect to successfully hack this company... (don't give out your attack methods - just give a general idea - can be very broad - up to you)\"\n    }\n    // return values to other component\n    return {\n        urlEnteredLinkData,\n        coverLetterChecks,\n        messageToEmployerChecks,\n        physicalOrDigitalChecks,\n        participateInBettingWagers,\n        approachToSuccessfullyHackCo,\n        tokenBidWagerAmount\n    }\n}\n\nexport default MainHooksCustomHelpers;"]},"metadata":{},"sourceType":"module"}