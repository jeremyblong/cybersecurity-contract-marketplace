{"ast":null,"code":"import React, { Fragment } from 'react';\nimport axios from \"axios\";\nimport { NotificationManager } from \"react-notifications\";\nimport { Row, Col, Card, CardBody, Button, CardHeader, ButtonGroup } from 'reactstrap';\n\nconst handleFileDeletionUploadedFiles = (i, setMyFile, setPopoverStates, selected) => {\n  // set files state\n  setMyFile(prevState => {\n    console.log(\"prev\", prevState);\n    return prevState.filter((item, idx) => {\n      if (item.link !== selected.link) {\n        return true;\n      }\n    });\n  }); // close popover\n\n  setPopoverStates(prevState => {\n    return { ...prevState,\n      [`popover${i}`]: false\n    };\n  });\n};\n\nconst handleDotsClickExpansion = (file, index, setPopoverStates) => {\n  setPopoverStates(prevState => {\n    return { ...prevState,\n      [`popover${index}`]: true\n    };\n  });\n};\n\nconst bytesToSize = bytes => {\n  var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n  if (bytes == 0) return '0 Byte';\n  var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\n  return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];\n};\n\nconst calculateFileType = type => {\n  switch (type) {\n    case \"video/mp4\":\n      return \"mp4\";\n      break;\n\n    case \"image/png\":\n      return \"png\";\n      break;\n\n    case \"image/jpeg\":\n      return \"jpeg\";\n      break;\n\n    case \"image/jpg\":\n      return \"jpg\";\n      break;\n\n    case \"image/gif\":\n      return \"gif\";\n      break;\n\n    case \"image/bmp\":\n      return \"bmp\";\n      break;\n\n    case \"application/pdf\":\n      return \"pdf\";\n      break;\n\n    case \"text/csv\":\n      return \"csv\";\n      break;\n\n    case \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\":\n      return \"xlsx\";\n      break;\n\n    case \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\":\n      return \"docx\";\n      break;\n\n    case \"video/webm\":\n      return \"webm\";\n      break;\n\n    case \"audio/mpeg\":\n      return \"mp3\";\n      break;\n\n    default:\n      break;\n  }\n};\n\nconst calculateFileTypeSavedUploadedAlready = type => {\n  switch (type) {\n    case \"video/mp4\":\n      return \"videos-only\";\n      break;\n\n    case \"image/png\":\n      return \"images-only\";\n      break;\n\n    case \"image/jpeg\":\n      return \"images-only\";\n      break;\n\n    case \"image/jpg\":\n      return \"images-only\";\n      break;\n\n    case \"image/gif\":\n      return \"images-only\";\n      break;\n\n    case \"image/bmp\":\n      return \"images-only\";\n      break;\n\n    case \"application/pdf\":\n      return \"misc-others\";\n      break;\n\n    case \"text/csv\":\n      return \"misc-others\";\n      break;\n\n    case \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\":\n      return \"misc-others\";\n      break;\n\n    case \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\":\n      return \"misc-others\";\n      break;\n\n    case \"video/webm\":\n      return \"videos-only\";\n      break;\n\n    case \"audio/mpeg\":\n      return \"videos-only\";\n      break;\n\n    default:\n      return \"allfiles\";\n      break;\n  }\n};\n\nconst closePopoverDynamic = (i, setPopoverStates) => {\n  setPopoverStates(prevState => {\n    return { ...prevState,\n      [`popover${i}`]: false\n    };\n  });\n}; // UPLOAD file via api-call to AWS-S3\n\n\nconst handleFileUploadAnyType = (onSubmit, setMetaFileData, setFileReadyStatus, setCurrentUploadFileStatus, setMyFile, currentFileSelectedUpload, metaFileData, setProgress, setChecked, checked, saveApplicationDetailsProgress, previousFiles) => {\n  // upload file to aws S3\n  const data = new FormData();\n  data.append(\"file\", currentFileSelectedUpload);\n  data.append(\"meta\", metaFileData);\n  const config = {\n    onUploadProgress: progressEvent => {\n      let percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n      setProgress(percentCompleted);\n    },\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  };\n  console.log(\"previousFiles API-REQUEST : \", previousFiles);\n  const previouslySubmitted = previousFiles.applicationDetails.applicationDetails.files;\n  axios.post(`${process.env.REACT_APP_BASE_URL}/upload/misc/file/softare/listing/sale`, data, config).then(res => {\n    if (res.data.message === \"Successfully uploaded file!\") {\n      console.log(res.data);\n      const {\n        file\n      } = res.data; // update local file array state\n\n      saveApplicationDetailsProgress({\n        files: [...previouslySubmitted, { ...file,\n          icon: \"fa fa-file\",\n          customType: checked === true ? \"allfiles\" : calculateFileTypeSavedUploadedAlready(file.type)\n        }]\n      });\n      setChecked(false);\n      NotificationManager.success(`We've successfully uploaded your file! Please proceed filling out the remaining form data in order to move onto the final page!`, 'Successfully uploaded file!', 4500);\n      setMetaFileData(null);\n      setFileReadyStatus(false);\n      setCurrentUploadFileStatus(null);\n      onSubmit();\n    } else {\n      console.log(\"Err\", res.data);\n      NotificationManager.error(res.data.message, 'An error occurred while uploading file!', 4500);\n      onSubmit();\n    }\n  }).catch(err => {\n    console.log(err);\n    NotificationManager.error(\"An unknown error has occurred while uploading your file - please try again or contact support if the issue persists...\", 'An error occurred while uploading file!', 4500);\n    onSubmit();\n  });\n};\n\nconst handleFilesFinalSubmission = (files, previous, saveApplicationDetailsProgress, setSubmissionPopoverState, shiftCoreStyles, clearAllBodyScrollLocks, setFileSheetOpenState) => {\n  // clear locks related to pane\n  shiftCoreStyles(false); // clear body locks from open pane\n\n  clearAllBodyScrollLocks(); // save redux logic\n\n  saveApplicationDetailsProgress({ ...previous,\n    files\n  }); // notifiy of success\n\n  NotificationManager.success(`You've successfully 'saved' your uploaded files/folders - continue onwards with your application and good luck!`, 'Successfully uupdated/uploaded files & folders.', 4500); // close popover then MAIN pane\n\n  setSubmissionPopoverState(false); // close MAIN PANE FINALLY\n\n  setFileSheetOpenState(false);\n};\n\nexport default {\n  handleFileDeletionUploadedFiles,\n  handleDotsClickExpansion,\n  handleFilesFinalSubmission,\n  calculateFileType,\n  bytesToSize,\n  handleFileUploadAnyType,\n  closePopoverDynamic\n};","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/opportunities/employers/applyToListingHacker/helpers/fileManagerHelperFunctions.js"],"names":["React","Fragment","axios","NotificationManager","Row","Col","Card","CardBody","Button","CardHeader","ButtonGroup","handleFileDeletionUploadedFiles","i","setMyFile","setPopoverStates","selected","prevState","console","log","filter","item","idx","link","handleDotsClickExpansion","file","index","bytesToSize","bytes","sizes","parseInt","Math","floor","round","pow","calculateFileType","type","calculateFileTypeSavedUploadedAlready","closePopoverDynamic","handleFileUploadAnyType","onSubmit","setMetaFileData","setFileReadyStatus","setCurrentUploadFileStatus","currentFileSelectedUpload","metaFileData","setProgress","setChecked","checked","saveApplicationDetailsProgress","previousFiles","data","FormData","append","config","onUploadProgress","progressEvent","percentCompleted","loaded","total","headers","previouslySubmitted","applicationDetails","files","post","process","env","REACT_APP_BASE_URL","then","res","message","icon","customType","success","error","catch","err","handleFilesFinalSubmission","previous","setSubmissionPopoverState","shiftCoreStyles","clearAllBodyScrollLocks","setFileSheetOpenState"],"mappings":"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","sourcesContent":["import React, { Fragment} from 'react';\nimport axios from \"axios\";\nimport { NotificationManager } from \"react-notifications\";\nimport { Row, Col, Card, CardBody, Button, CardHeader, ButtonGroup } from 'reactstrap';\n\n\nconst handleFileDeletionUploadedFiles = (i, setMyFile, setPopoverStates, selected) => {\n    // set files state\n    setMyFile(prevState => {\n        console.log(\"prev\", prevState);\n        return prevState.filter((item, idx) => {\n            if (item.link !== selected.link) {\n                return true;\n            }\n        })\n    });\n    // close popover\n    setPopoverStates(prevState => {\n        return {\n            ...prevState,\n            [`popover${i}`]: false\n        }\n    });\n}\nconst handleDotsClickExpansion = (file, index, setPopoverStates) => {\n    setPopoverStates(prevState => {\n        return {\n            ...prevState,\n            [`popover${index}`]: true\n        }\n    });\n}\nconst bytesToSize = (bytes) => {\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n    if (bytes == 0) return '0 Byte';\n    var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\n    return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];\n}\nconst calculateFileType = (type) => {\n    switch (type) {\n        case \"video/mp4\":\n            return \"mp4\";\n            break;\n        case \"image/png\":\n            return \"png\";\n            break;\n        case \"image/jpeg\":\n            return \"jpeg\";\n            break;\n        case \"image/jpg\":\n            return \"jpg\";\n            break;\n        case \"image/gif\":\n            return \"gif\";\n            break;\n        case \"image/bmp\":\n            return \"bmp\";\n            break;\n        case \"application/pdf\":\n            return \"pdf\";\n            break;\n        case \"text/csv\":\n            return \"csv\";\n            break;\n        case \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\":\n            return \"xlsx\";\n            break;\n        case \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\":\n            return \"docx\";\n            break;\n        case \"video/webm\":\n            return \"webm\";\n            break;\n        case \"audio/mpeg\":\n            return \"mp3\";\n            break;\n        default:\n            break;\n    }\n}\nconst calculateFileTypeSavedUploadedAlready = (type) => {\n    switch (type) {\n        case \"video/mp4\":\n            return \"videos-only\";\n            break;\n        case \"image/png\":\n            return \"images-only\";\n            break;\n        case \"image/jpeg\":\n            return \"images-only\";\n            break;\n        case \"image/jpg\":\n            return \"images-only\";\n            break;\n        case \"image/gif\":\n            return \"images-only\";\n            break;\n        case \"image/bmp\":\n            return \"images-only\";\n            break;\n        case \"application/pdf\":\n            return \"misc-others\";\n            break;\n        case \"text/csv\":\n            return \"misc-others\";\n            break;\n        case \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\":\n            return \"misc-others\";\n            break;\n        case \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\":\n            return \"misc-others\";\n            break;\n        case \"video/webm\":\n            return \"videos-only\";\n            break;\n        case \"audio/mpeg\":\n            return \"videos-only\";\n            break;\n        default:\n            return \"allfiles\";\n            break;\n    }\n}\nconst closePopoverDynamic = (i, setPopoverStates) => {\n    setPopoverStates(prevState => {\n        return {\n            ...prevState,\n            [`popover${i}`]: false\n        }\n    });\n}\n// UPLOAD file via api-call to AWS-S3\nconst handleFileUploadAnyType = (onSubmit, setMetaFileData, setFileReadyStatus, setCurrentUploadFileStatus, setMyFile, currentFileSelectedUpload, metaFileData, setProgress, setChecked, checked, saveApplicationDetailsProgress, previousFiles) => {\n    // upload file to aws S3\n    const data = new FormData();\n\n    data.append(\"file\", currentFileSelectedUpload);\n    data.append(\"meta\", metaFileData);\n\n    const config = {\n        onUploadProgress: (progressEvent) => {\n            let percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n\n            setProgress(percentCompleted);\n        },\n        headers: {\n            'Content-Type': 'multipart/form-data'\n        }\n    };\n\n    console.log(\"previousFiles API-REQUEST : \", previousFiles);\n\n    const previouslySubmitted = previousFiles.applicationDetails.applicationDetails.files;\n\n    axios.post(`${process.env.REACT_APP_BASE_URL}/upload/misc/file/softare/listing/sale`, data, config).then((res) => {\n        if (res.data.message === \"Successfully uploaded file!\") {\n            console.log(res.data);\n\n            const { file } = res.data;\n\n            // update local file array state\n            saveApplicationDetailsProgress({\n                files: [...previouslySubmitted, {\n                    ...file,\n                    icon: \"fa fa-file\",\n                    customType: checked === true ? \"allfiles\" : calculateFileTypeSavedUploadedAlready(file.type)\n                }]\n            });\n            setChecked(false);\n\n            NotificationManager.success(`We've successfully uploaded your file! Please proceed filling out the remaining form data in order to move onto the final page!`, 'Successfully uploaded file!', 4500);\n\n            setMetaFileData(null);\n            setFileReadyStatus(false);\n            setCurrentUploadFileStatus(null);\n\n            onSubmit();\n        } else {\n            console.log(\"Err\", res.data);\n\n            NotificationManager.error(res.data.message, 'An error occurred while uploading file!', 4500);\n\n            onSubmit();\n        }\n    }).catch((err) => {\n        console.log(err);\n\n        NotificationManager.error(\"An unknown error has occurred while uploading your file - please try again or contact support if the issue persists...\", 'An error occurred while uploading file!', 4500);\n\n        onSubmit();\n    })\n}\nconst handleFilesFinalSubmission = (files, previous, saveApplicationDetailsProgress, setSubmissionPopoverState, shiftCoreStyles, clearAllBodyScrollLocks, setFileSheetOpenState) => {\n    // clear locks related to pane\n    shiftCoreStyles(false); \n    // clear body locks from open pane\n    clearAllBodyScrollLocks();\n    // save redux logic\n    saveApplicationDetailsProgress({\n        ...previous,\n        files\n    });\n    // notifiy of success\n    NotificationManager.success(`You've successfully 'saved' your uploaded files/folders - continue onwards with your application and good luck!`, 'Successfully uupdated/uploaded files & folders.', 4500);\n    // close popover then MAIN pane\n    setSubmissionPopoverState(false);\n    // close MAIN PANE FINALLY\n    setFileSheetOpenState(false);\n} \nexport default {\n    handleFileDeletionUploadedFiles,\n    handleDotsClickExpansion,\n    handleFilesFinalSubmission,\n    calculateFileType,\n    bytesToSize,\n    handleFileUploadAnyType,\n    closePopoverDynamic\n}\n"]},"metadata":{},"sourceType":"module"}