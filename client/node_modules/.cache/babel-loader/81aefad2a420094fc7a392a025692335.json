{"ast":null,"code":"import React, { Fragment, useState } from 'react';\n\nconst handleCheckGroupType = (e, setGroupType) => {\n  const checked = e.target.checked;\n  setGroupType({\n    groupType: checked === true ? \"Public Convo's\" : \"Private Convo's\",\n    checked\n  });\n};\n\nconst handleListItemClickPrivateChannel = (item, SBData, setChannelState, setMessageListState) => {\n  console.log(\"handleListItemClickPrivateChannel clicked... : \", item);\n  SBData.GroupChannel.getChannel(item.url, (openChannel, error) => {\n    if (error) {\n      // Handle error.\n      console.log(\"getChannel : \", error);\n    } else {\n      const params = new SBData.MessageListParams(); // create param's for message log/chat\n\n      params.prevResultSize = 25;\n      params.nextResultSize = 25;\n      params.isInclusive = true;\n      params.reverse = true;\n      params.replyType = \"all\";\n      params.includeThreadInfo = true;\n      params.includeParentMessageInfo = true; // create timestamp\n\n      const TIMESTAMP = Date.now();\n      console.log(\"openChannel\", openChannel);\n      setChannelState(openChannel); // Pass the params as an argument to the `getMessagesByTimestamp()` method.\n\n      openChannel.getMessagesByTimestamp(TIMESTAMP, params, (messages, error) => {\n        if (error) {\n          // Handle error.\n          console.log(\"error getMessagesByTimestamp :\", error);\n        } else {\n          console.log(\"messages\", messages);\n          setMessageListState(messages);\n        }\n      });\n    }\n  });\n};\n\nconst renderOnlineStatus = (item, userData) => {\n  for (let index = 0; index < item.members.length; index++) {\n    const user = item.members[index];\n\n    if (user.userId !== userData.uniqueId) {\n      return user.connectionStatus;\n    }\n\n    if (item.members.length - 1 === index) {\n      return user.connectionStatus;\n    }\n  }\n};\n\nconst renderNicknamePrivateGroup = (item, userData) => {\n  for (let index = 0; index < item.members.length; index++) {\n    const user = item.members[index];\n\n    if (user.userId !== userData.uniqueId) {\n      return user.nickname;\n    }\n\n    if (item.members.length - 1 === index) {\n      return user.nickname;\n    }\n  }\n};\n\nconst renderNickname = (item, userData) => {\n  for (let index = 0; index < item.operators.length; index++) {\n    const user = item.operators[index];\n\n    if (user.userId !== userData.uniqueId) {\n      return user.nickname;\n    }\n\n    if (item.operators.length - 1 === index) {\n      return \"Chat Invite Pending...\";\n    }\n  }\n};\n\nconst renderStatus = (item, userData) => {\n  for (let index = 0; index < item.operators.length; index++) {\n    const user = item.operators[index];\n\n    if (user.userId !== userData.uniqueId) {\n      return user.isActive;\n    }\n\n    if (item.operators.length - 1 === index) {\n      return user.isActive;\n    }\n  }\n};\n\nconst renderLastProfilePicMainUser = user => {\n  const reversed = user.profilePicsVideos.reverse();\n\n  for (let index = 0; index < reversed.length; index++) {\n    const item = reversed[index];\n\n    if (item.type.includes(\"image\")) {\n      return `${process.env.REACT_APP_ASSET_LINK}/${item.link}`;\n      break;\n    }\n  }\n};\n\nexport default {\n  handleCheckGroupType,\n  handleListItemClickPrivateChannel,\n  renderOnlineStatus,\n  renderNicknamePrivateGroup,\n  renderNickname,\n  renderStatus,\n  renderLastProfilePicMainUser\n};","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/messaging/main/helpers/mainHelperFunctions.js"],"names":["React","Fragment","useState","handleCheckGroupType","e","setGroupType","checked","target","groupType","handleListItemClickPrivateChannel","item","SBData","setChannelState","setMessageListState","console","log","GroupChannel","getChannel","url","openChannel","error","params","MessageListParams","prevResultSize","nextResultSize","isInclusive","reverse","replyType","includeThreadInfo","includeParentMessageInfo","TIMESTAMP","Date","now","getMessagesByTimestamp","messages","renderOnlineStatus","userData","index","members","length","user","userId","uniqueId","connectionStatus","renderNicknamePrivateGroup","nickname","renderNickname","operators","renderStatus","isActive","renderLastProfilePicMainUser","reversed","profilePicsVideos","type","includes","process","env","REACT_APP_ASSET_LINK","link"],"mappings":"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","sourcesContent":["import React,{ Fragment, useState } from 'react';\n\nconst handleCheckGroupType = (e, setGroupType) => {\n    const checked = e.target.checked;\n\n    setGroupType({\n        groupType: checked === true ? \"Public Convo's\" : \"Private Convo's\",\n        checked\n    })\n}\nconst handleListItemClickPrivateChannel = (item, SBData, setChannelState, setMessageListState) => {\n    console.log(\"handleListItemClickPrivateChannel clicked... : \", item);\n\n    SBData.GroupChannel.getChannel(item.url, (openChannel, error) => {\n        if (error) {\n            // Handle error.\n            console.log(\"getChannel : \", error);\n        } else {\n            const params = new SBData.MessageListParams();\n            // create param's for message log/chat\n            params.prevResultSize = 25;\n            params.nextResultSize = 25;\n            params.isInclusive = true;\n            params.reverse = true;\n            params.replyType = \"all\";\n            params.includeThreadInfo = true;\n            params.includeParentMessageInfo = true;\n            // create timestamp\n            const TIMESTAMP = Date.now();\n\n            console.log(\"openChannel\", openChannel);\n\n            setChannelState(openChannel);\n\n            // Pass the params as an argument to the `getMessagesByTimestamp()` method.\n            openChannel.getMessagesByTimestamp(TIMESTAMP, params, (messages, error) => {\n                if (error) {\n                    // Handle error.\n                    console.log(\"error getMessagesByTimestamp :\", error);\n                } else {\n                    console.log(\"messages\", messages);\n\n                    setMessageListState(messages);\n                }\n            });\n        }\n    });\n}\nconst renderOnlineStatus = (item, userData) => {\n    for (let index = 0; index < item.members.length; index++) {\n        const user = item.members[index];\n        if (user.userId !== userData.uniqueId) {\n            return user.connectionStatus;\n        }\n        if ((item.members.length - 1) === index) {\n            return user.connectionStatus;\n        }\n    }\n}\nconst renderNicknamePrivateGroup = (item, userData) => {\n    for (let index = 0; index < item.members.length; index++) {\n        const user = item.members[index];\n        if (user.userId !== userData.uniqueId) {\n            return user.nickname;\n        }\n        if ((item.members.length - 1) === index) {\n            return user.nickname;\n        }\n    }\n}\nconst renderNickname = (item, userData) => {\n    for (let index = 0; index < item.operators.length; index++) {\n        const user = item.operators[index];\n        if (user.userId !== userData.uniqueId) {\n            return user.nickname;\n        }\n        if ((item.operators.length - 1) === index) {\n            return \"Chat Invite Pending...\";\n        }\n    }\n}\nconst renderStatus = (item, userData) => {\n    for (let index = 0; index < item.operators.length; index++) {\n        const user = item.operators[index];\n        if (user.userId !== userData.uniqueId) {\n            return user.isActive;\n        }\n        if ((item.operators.length - 1) === index) {\n            return user.isActive;\n        }\n    }\n}\nconst renderLastProfilePicMainUser = (user) => {\n    const reversed = user.profilePicsVideos.reverse();\n\n    for (let index = 0; index < reversed.length; index++) {\n        const item = reversed[index];\n        if (item.type.includes(\"image\")) {\n            return `${process.env.REACT_APP_ASSET_LINK}/${item.link}`;\n            break;\n        }\n    }\n}\nexport default {\n    handleCheckGroupType,\n    handleListItemClickPrivateChannel,\n    renderOnlineStatus,\n    renderNicknamePrivateGroup,\n    renderNickname,\n    renderStatus,\n    renderLastProfilePicMainUser\n};"]},"metadata":{},"sourceType":"module"}