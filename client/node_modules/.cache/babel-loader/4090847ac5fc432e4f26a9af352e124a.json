{"ast":null,"code":"import React,{Fragment,useState}from'react';import Sheet from'react-modal-sheet';import{Container,Row,Col,Card,CardBody,Button,Form,Label,Input,InputGroup,InputGroupAddon,InputGroupText}from'reactstrap';import\"./styles.css\";import uuid from\"react-uuid\";import{NotificationManager}from'react-notifications';import{connect}from\"react-redux\";const MessagePaneHelperCourseContent=_ref=>{let{messagePaneOpen,setMessagePaneState,employerName,SBData,userData,employerID}=_ref;const[formData,setFormData]=useState({subject:\"\",message:\"\"});const handleInputChange=e=>{const{value,name}=e.target;setFormData(prevState=>{return{...prevState,[name]:value};});};const handleFormSubmission=()=>{console.log(\"handleFormSubmission ran...!\");const reversedProfilePicVideos=userData.profilePicsVideos.reverse();let coverURLImage=\"\";const generatedChannelID=uuid();for(let index=0;index<reversedProfilePicVideos.length;index++){const item=reversedProfilePicVideos[index];if(item.type.includes(\"image\")){coverURLImage=\"\".concat(process.env.REACT_APP_ASSET_LINK,\"/\").concat(item.link);break;}}console.log(coverURLImage,userData.uniqueId,employerID,formData.subject,generatedChannelID);const params=new SBData.GroupChannelParams();params.isEphemeral=false;params.isPublic=false;params.isSuper=false;params.isDistinct=true;params.addUserIds([userData.uniqueId,employerID]);params.operatorUserIds=[userData.uniqueId];// params.channelUrl = generatedChannelID; // In a group channel, you can create a new channel by specifying its unique channel URL in a 'GroupChannelParams' object.\nparams.coverUrl=coverURLImage;// params.creator = `${userData.firstName} ${userData.lastName}`;\nparams.data=formData.subject;params.customType=\"private\";console.log(\"sbdata\",SBData,coverURLImage);// params.channelUrl = generatedChannelID; \n// START BACK UP HERE!!!\nSBData.GroupChannel.createChannel(params,(groupChannel,error)=>{if(error){// Handle error.\nconsole.log(\"opening channel error occurred... :\",error);}else{const channelUrl=groupChannel.channelUrl;const invitedUsers=[employerID];groupChannel.inviteWithUserIds(invitedUsers,(response,error)=>{if(error){// Handle error.\nconsole.log(\"groupChannel inviteWithUserIds error :\",error);}else{console.log(\"inviteWithUserIds SUCCESS...! :\");const sendMsgParams=new SBData.UserMessageParams();sendMsgParams.message=formData.message;sendMsgParams.pushNotificationDeliveryOption='default';groupChannel.sendUserMessage(sendMsgParams,(message,errorrrr)=>{if(errorrrr){// Handle error.\nconsole.log(\"sendUserMessage err :\",errorrrr);}else{// close pane! success on all requests...!\nsetMessagePaneState(false);}});}});console.log(\"openChannel - channelUrl: \",groupChannel,channelUrl);}});};const handleMessageSubmission=()=>{const{subject,message}=formData;if(typeof subject!==\"undefined\"&&subject.length>0){if(typeof message!==\"undefined\"&&message.length>0){handleFormSubmission();}else{NotificationManager.warning(\"You MUST complete (fill-out) the 'message' field/input before proceeding...!\",\"Fill-out the 'message' field!\",4500);}}else{NotificationManager.warning(\"You MUST complete (fill-out) the 'subject' line/input before proceeding...!\",\"Fill-out the 'subject' line!\",4500);}};return/*#__PURE__*/React.createElement(Fragment,null,/*#__PURE__*/React.createElement(Sheet,{isOpen:messagePaneOpen,onClose:()=>setMessagePaneState(false)},/*#__PURE__*/React.createElement(Sheet.Container,null,/*#__PURE__*/React.createElement(Sheet.Header,null),/*#__PURE__*/React.createElement(Sheet.Content,null,/*#__PURE__*/React.createElement(Container,{fluid:true},/*#__PURE__*/React.createElement(Col,{lg:\"12 box-col-12\",xl:\"12 xl-100\",md:\"12\"},/*#__PURE__*/React.createElement(Card,{className:\"card-shadow-messaging-initialize\"},/*#__PURE__*/React.createElement(CardBody,null,/*#__PURE__*/React.createElement(\"h3\",null,\"Create a new \",/*#__PURE__*/React.createElement(\"strong\",null,\"private message\"),\" to \",employerName),/*#__PURE__*/React.createElement(\"p\",{className:\"lead\"},\"This will send a \\\"Private Message\\\" to \",/*#__PURE__*/React.createElement(\"strong\",{style:{textDecorationLine:\"underline\"}},\"ONLY\"),\" the employer/poster of this listing - this information is encrypted & protected for privacy.\"),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(Form,null,/*#__PURE__*/React.createElement(\"div\",{className:\"form-row\"},/*#__PURE__*/React.createElement(Col,{md:\"12 mb-3\"},/*#__PURE__*/React.createElement(Label,null,\"Message Title/Subject\"),/*#__PURE__*/React.createElement(InputGroup,null,/*#__PURE__*/React.createElement(InputGroupAddon,{addonType:\"prepend\"},/*#__PURE__*/React.createElement(InputGroupText,null,\"Msg Subject\")),/*#__PURE__*/React.createElement(Input,{onChange:handleInputChange,value:formData.subject,className:\"form-control\",name:\"subject\",type:\"text\",placeholder:\"Subject or title...\"})))),/*#__PURE__*/React.createElement(\"div\",{className:\"form-row\"},/*#__PURE__*/React.createElement(Col,{md:\"12 mb-3\"},/*#__PURE__*/React.createElement(Label,null,\"Message Content\"),/*#__PURE__*/React.createElement(Input,{onChange:handleInputChange,value:formData.message,className:\"form-control\",rows:12,name:\"message\",type:\"textarea\",placeholder:\"Enter your chat message here,  this is essential your 'private message' text...\"}))),/*#__PURE__*/React.createElement(\"div\",{className:\"centered-both-ways\"},/*#__PURE__*/React.createElement(Button,{onClick:handleMessageSubmission,style:{width:\"75%\"},outline:true,color:\"info-2x\"},\"Submit/Send Message!\"))))))))),/*#__PURE__*/React.createElement(Sheet.Backdrop,null)));};const mapStateToProps=state=>{return{SBData:state.sendbirdInitData.sendbirdInitData,userData:state.auth.data};};export default connect(mapStateToProps,{})(MessagePaneHelperCourseContent);","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/src/components/dashboard/learning/educationalCoursesSeminars/previouslyPurchased/listPurchasedCourses/individual/helpers/helpers.js"],"names":["React","Fragment","useState","Sheet","Container","Row","Col","Card","CardBody","Button","Form","Label","Input","InputGroup","InputGroupAddon","InputGroupText","uuid","NotificationManager","connect","MessagePaneHelperCourseContent","messagePaneOpen","setMessagePaneState","employerName","SBData","userData","employerID","formData","setFormData","subject","message","handleInputChange","e","value","name","target","prevState","handleFormSubmission","console","log","reversedProfilePicVideos","profilePicsVideos","reverse","coverURLImage","generatedChannelID","index","length","item","type","includes","process","env","REACT_APP_ASSET_LINK","link","uniqueId","params","GroupChannelParams","isEphemeral","isPublic","isSuper","isDistinct","addUserIds","operatorUserIds","coverUrl","data","customType","GroupChannel","createChannel","groupChannel","error","channelUrl","invitedUsers","inviteWithUserIds","response","sendMsgParams","UserMessageParams","pushNotificationDeliveryOption","sendUserMessage","errorrrr","handleMessageSubmission","warning","textDecorationLine","width","mapStateToProps","state","sendbirdInitData","auth"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport Sheet from 'react-modal-sheet';\nimport { Container, Row, Col, Card, CardBody, Button, Form, Label, Input, InputGroup, InputGroupAddon, InputGroupText } from 'reactstrap';\nimport \"./styles.css\";\nimport uuid from \"react-uuid\";\nimport { NotificationManager } from 'react-notifications';\nimport { connect } from \"react-redux\";\n\nconst MessagePaneHelperCourseContent = ({ messagePaneOpen, setMessagePaneState, employerName, SBData, userData, employerID }) => {\n\n    const [ formData, setFormData ] = useState({\n        subject: \"\",\n        message: \"\"\n    });\n    const handleInputChange = (e) => {\n        const { value, name } = e.target;\n\n        setFormData(prevState => {\n            return {\n                ...prevState,\n                [name]: value\n            }\n        })\n    }\n    const handleFormSubmission = () => {\n        console.log(\"handleFormSubmission ran...!\");\n\n        const reversedProfilePicVideos = userData.profilePicsVideos.reverse();\n\n        let coverURLImage = \"\";\n        const generatedChannelID = uuid();\n\n        for (let index = 0; index < reversedProfilePicVideos.length; index++) {\n            const item = reversedProfilePicVideos[index];\n            \n            if (item.type.includes(\"image\")) {\n                coverURLImage = `${process.env.REACT_APP_ASSET_LINK}/${item.link}`;\n                break;\n            }\n        }\n        console.log(coverURLImage, userData.uniqueId, employerID, formData.subject, generatedChannelID);\n\n        const params = new SBData.GroupChannelParams();\n        params.isEphemeral = false;\n        params.isPublic = false;\n        params.isSuper = false;\n        params.isDistinct = true;\n        params.addUserIds([userData.uniqueId, employerID]);\n        params.operatorUserIds = [userData.uniqueId];\n        // params.channelUrl = generatedChannelID; // In a group channel, you can create a new channel by specifying its unique channel URL in a 'GroupChannelParams' object.\n        params.coverUrl = coverURLImage;\n        // params.creator = `${userData.firstName} ${userData.lastName}`;\n        params.data = formData.subject;\n        params.customType = \"private\";\n\n        console.log(\"sbdata\", SBData, coverURLImage);\n        // params.channelUrl = generatedChannelID; \n        // START BACK UP HERE!!!\n        SBData.GroupChannel.createChannel(params, (groupChannel, error) => {\n            if (error) {\n                // Handle error.\n                console.log(\"opening channel error occurred... :\", error);\n            } else {\n                const channelUrl = groupChannel.channelUrl;\n\n                const invitedUsers = [employerID];\n\n                groupChannel.inviteWithUserIds(invitedUsers, (response, error) => {\n                    if (error) {\n                        // Handle error.\n                        console.log(\"groupChannel inviteWithUserIds error :\", error);\n                    } else {\n                        console.log(\"inviteWithUserIds SUCCESS...! :\");\n\n                        const sendMsgParams = new SBData.UserMessageParams();\n                        sendMsgParams.message = formData.message;\n                        sendMsgParams.pushNotificationDeliveryOption = 'default'; \n\n                        groupChannel.sendUserMessage(sendMsgParams, (message, errorrrr) => {\n                            if (errorrrr) {\n                                // Handle error.\n                                console.log(\"sendUserMessage err :\", errorrrr);\n                            } else {\n                                // close pane! success on all requests...!\n                                setMessagePaneState(false);\n                            }\n                        });\n                    }\n                });\n\n                console.log(\"openChannel - channelUrl: \", groupChannel, channelUrl);\n            }\n        });\n    }\n    const handleMessageSubmission = () => {\n        const { subject, message } = formData;\n\n        if (typeof subject !== \"undefined\" && subject.length > 0) {\n            if (typeof message !== \"undefined\" && message.length > 0) {\n                handleFormSubmission();\n            } else {\n                NotificationManager.warning(\"You MUST complete (fill-out) the 'message' field/input before proceeding...!\", \"Fill-out the 'message' field!\", 4500);\n            }\n        } else {\n            NotificationManager.warning(\"You MUST complete (fill-out) the 'subject' line/input before proceeding...!\", \"Fill-out the 'subject' line!\", 4500);\n        }\n    }\n    return (\n        <Fragment>\n            <Sheet isOpen={messagePaneOpen} onClose={() => setMessagePaneState(false)}>\n                <Sheet.Container>\n                    <Sheet.Header />\n                        <Sheet.Content>\n                            <Container fluid={true}>\n                                <Col lg=\"12 box-col-12\" xl=\"12 xl-100\" md=\"12\">\n                                    <Card className={\"card-shadow-messaging-initialize\"}>\n                                        <CardBody>\n                                            <h3>Create a new <strong>private message</strong> to {employerName}</h3>\n                                            <p className=\"lead\">This will send a \"Private Message\" to <strong style={{ textDecorationLine: \"underline\" }}>ONLY</strong> the employer/poster of this listing - this information is encrypted & protected for privacy.</p>\n                                            <hr />\n                                            <Form>\n                                                    <div className=\"form-row\">\n                                                        <Col md=\"12 mb-3\">\n                                                            <Label>Message Title/Subject</Label>\n                                                            <InputGroup>\n                                                                <InputGroupAddon addonType=\"prepend\">\n                                                                    <InputGroupText>{\"Msg Subject\"}</InputGroupText>\n                                                                </InputGroupAddon>\n                                                                <Input onChange={handleInputChange} value={formData.subject} className=\"form-control\" name=\"subject\" type=\"text\" placeholder=\"Subject or title...\" />\n                                                            </InputGroup>\n                                                        </Col>\n                                                    </div>\n                                                    <div className=\"form-row\">\n                                                        <Col md=\"12 mb-3\">\n                                                            <Label>Message Content</Label>\n                                                            <Input onChange={handleInputChange} value={formData.message} className=\"form-control\" rows={12} name=\"message\" type=\"textarea\" placeholder=\"Enter your chat message here,  this is essential your 'private message' text...\" />\n                                                        </Col>\n                                                    </div>\n                                                    <div className={\"centered-both-ways\"}>\n                                                        <Button onClick={handleMessageSubmission} style={{ width: \"75%\" }} outline color=\"info-2x\">{\"Submit/Send Message!\"}</Button>\n                                                    </div>\n                                                </Form>\n                                        </CardBody>\n                                    </Card>\n                                </Col>\n                            </Container>\n                        </Sheet.Content>\n                    </Sheet.Container>\n                <Sheet.Backdrop />\n            </Sheet>\n        </Fragment>\n    );\n}\nconst mapStateToProps = (state) => {\n    return {\n        SBData: state.sendbirdInitData.sendbirdInitData,\n        userData: state.auth.data\n    }\n}\nexport default connect(mapStateToProps, { })(MessagePaneHelperCourseContent);"]},"metadata":{},"sourceType":"module"}