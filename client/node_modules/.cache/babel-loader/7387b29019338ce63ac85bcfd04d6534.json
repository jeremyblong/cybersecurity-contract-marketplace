{"ast":null,"code":"// helpers logic related to mainly to redux-hook-form\nconst HookHelpers=()=>{// start helper creations...\nconst listingTitleChecker={check:(setError,register)=>{return{...register(\"listingTitle\",{required:{value:true,message:\"You MUST enter AT least 15 characters to 75 characters\"},minLength:{value:15,message:\"You must enter AT Least 15 characters\"},maxLength:{value:75,message:\"You may ONLY enter 75 characters or less\"}})};},onChange:(e,setValue)=>{const value=e.target.value;setValue(\"listingTitle\",value,{shouldValidate:false});},name:\"listingTitle\",placeholder:\"Enter a stream title...\",type:\"text\",label:\"Enter a stream title (this will be displayed first/foremost w/other streams)\"};const subcategoryChecker={check:(setError,register,values,errors,name,clearErrors)=>{return{...register(name,{required:{value:true,message:\"You MUST select an option before starting your LIVE stream\"},onBlur:e=>{// log to check whats returned\nconst value=e.target.value;// timeout to delay for state change(s)\nsetTimeout(()=>{// clear error after proper selection\nif(typeof value!==\"undefined\"&&Object.keys(value).length>0){clearErrors(name);}else{// set error as nothing was selected (blank 'click-off' selection of selector)\nsetError(name,{type:\"manual\",message:\"You MUST select an option before starting your LIVE stream\"});}},50);}})};},name:\"subCategory\",placeholder:\"Enter a 'sub' category for your live stream (stream filtration)...\",type:\"text\",label:\"Stream Sub-Category\"};const hashtagsChecker={check:(setError,register,values,errors,name,clearErrors)=>{return{...register(name,{required:{value:true,message:\"You MUST enter AT least 5 hashtags/tags before attempting to continue\"}})};},onBlurred:(tags,setValue,clearErrors,setError)=>{setValue(\"streamHashtags\",tags,{shouldValidate:true});// timeout to delay for state change(s)\nsetTimeout(()=>{// clear error after proper selection\nif(typeof tags!==\"undefined\"&&tags.length>=5&&tags.length<=15){clearErrors(\"streamHashtags\");}else{// set error as nothing was selected (blank 'click-off' selection of selector)\nsetError(\"streamHashtags\",{type:\"manual\",message:\"You MUST enter BETWEEN 5-15 hashtags/tags before attempting to continue\"});}},100);},placeholder:\"Enter between 5-15 hashtags/tags...\",type:\"text\",label:\"Enter BETWEEN 5-15 hashtags to proceed forward - people will use these to find your live stream...\"};const calculateBlurOrNot=(e,clearErrors,name,setError)=>{// deconstruct value\nconst valueLen=e.target.value.length;// timeout to delay for state change(s)\nsetTimeout(()=>{// clear error after proper selection\nif(valueLen>=50){if(valueLen<=1000){clearErrors(name);}else{// set error - TOO many characters\nsetError(name,{type:\"manual\",message:\"You may ONLY enter 1000 characters or less\"});}}else{// NOT Long enough\nsetError(name,{type:\"manual\",message:\"You MUST enter AT Least 50 characters\"});}},100);};const mainDescriptionChecker={check:(setError,register)=>{return{...register(\"mainDescription\",{required:{value:true,message:\"You MUST enter AT least 50 characters to 1000 characters\"},minLength:{value:50,message:\"You MUST enter AT Least 50 characters\"},maxLength:{value:1000,message:\"You may ONLY enter 1000 characters or less\"}})};},onBlur:(e,clearErrors,name,setError)=>calculateBlurOrNot(e,clearErrors,name,setError),onChange:(value,setValue)=>{setValue(\"mainDescription\",value,{shouldValidate:false});},name:\"mainDescription\",placeholder:\"Enter a detailed or basic (totally up to you but at least include 50 characters) for your description\",type:\"textarea\",label:\"Enter a description for your live stream (AT-LEAST 50 characters)\"};const handleSubcategoryCheckerChange=(selectedOption,setValue,subCategoryRefSelector)=>{// run conditionals\nsetValue('subCategory',selectedOption,{shouldValidate:false});subCategoryRefSelector.current.blur();};return{hashtagsChecker,subcategoryChecker,handleSubcategoryCheckerChange,listingTitleChecker,mainDescriptionChecker};};export default HookHelpers;","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/src/components/dashboard/streamingLiveHacks/createLiveStream/createNewStream/helpers/helperFunctions.js"],"names":["HookHelpers","listingTitleChecker","check","setError","register","required","value","message","minLength","maxLength","onChange","e","setValue","target","shouldValidate","name","placeholder","type","label","subcategoryChecker","values","errors","clearErrors","onBlur","setTimeout","Object","keys","length","hashtagsChecker","onBlurred","tags","calculateBlurOrNot","valueLen","mainDescriptionChecker","handleSubcategoryCheckerChange","selectedOption","subCategoryRefSelector","current","blur"],"mappings":"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","sourcesContent":["// helpers logic related to mainly to redux-hook-form\nconst HookHelpers = () => {\n    // start helper creations...\n    const listingTitleChecker = {\n        check: (setError, register) => {\n            return (\n                {...register(\"listingTitle\", { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 15 characters to 75 characters\"\n                }, minLength: {\n                    value: 15,\n                    message: \"You must enter AT Least 15 characters\"\n                }, maxLength: {\n                    value: 75,\n                    message: \"You may ONLY enter 75 characters or less\"\n                }})}\n            )\n        },\n        onChange: (e, setValue) => {\n            const value = e.target.value;\n\n            setValue(\"listingTitle\", value, { shouldValidate: false });\n        },\n        name: \"listingTitle\",\n        placeholder: \"Enter a stream title...\",\n        type: \"text\",\n        label: \"Enter a stream title (this will be displayed first/foremost w/other streams)\"\n    };\n    const subcategoryChecker = {\n        check: (setError, register, values, errors, name, clearErrors) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: \"You MUST select an option before starting your LIVE stream\"\n                }, onBlur: (e) => {\n                    // log to check whats returned\n\n                    const value = e.target.value;\n                    // timeout to delay for state change(s)\n                    setTimeout(() => {\n                        // clear error after proper selection\n                        if ((typeof value !== \"undefined\") && (Object.keys(value).length > 0)) {\n                            clearErrors(name);\n                        } else {\n                            // set error as nothing was selected (blank 'click-off' selection of selector)\n                            setError(name, {\n                                type: \"manual\",\n                                message: \"You MUST select an option before starting your LIVE stream\",\n                            });\n                        }\n                    }, 50);\n                }})}\n            )\n        },\n        name: \"subCategory\",\n        placeholder: \"Enter a 'sub' category for your live stream (stream filtration)...\",\n        type: \"text\",\n        label: \"Stream Sub-Category\"\n    };\n    const hashtagsChecker = {\n        check: (setError, register, values, errors, name, clearErrors) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 5 hashtags/tags before attempting to continue\"\n                }})}\n            )\n        },\n        onBlurred: (tags, setValue, clearErrors, setError) => {\n            setValue(\"streamHashtags\", tags, { shouldValidate: true });\n            // timeout to delay for state change(s)\n            setTimeout(() => {\n                // clear error after proper selection\n                if ((typeof tags !== \"undefined\") && (tags.length >= 5 && tags.length <= 15)) {\n                    clearErrors(\"streamHashtags\");\n                } else {\n                    // set error as nothing was selected (blank 'click-off' selection of selector)\n                    setError(\"streamHashtags\", {\n                        type: \"manual\",\n                        message: \"You MUST enter BETWEEN 5-15 hashtags/tags before attempting to continue\",\n                    });\n                }\n            }, 100);\n        },\n        placeholder: \"Enter between 5-15 hashtags/tags...\",\n        type: \"text\",\n        label: \"Enter BETWEEN 5-15 hashtags to proceed forward - people will use these to find your live stream...\"\n    };\n    const calculateBlurOrNot = (e, clearErrors, name, setError) => {\n        // deconstruct value\n        const valueLen = e.target.value.length;\n        // timeout to delay for state change(s)\n        setTimeout(() => {\n            // clear error after proper selection\n            if (valueLen >= 50) {\n                if (valueLen <= 1000) {\n                    clearErrors(name);\n                } else {\n                    // set error - TOO many characters\n                    setError(name, {\n                        type: \"manual\",\n                        message: \"You may ONLY enter 1000 characters or less\",\n                    });\n                }\n            } else {\n                // NOT Long enough\n                setError(name, {\n                    type: \"manual\",\n                    message: \"You MUST enter AT Least 50 characters\",\n                });\n            }\n        }, 100);\n    }\n    const mainDescriptionChecker = {\n        check: (setError, register) => {\n            return (\n                {...register(\"mainDescription\", { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 50 characters to 1000 characters\"\n                }, minLength: {\n                    value: 50,\n                    message: \"You MUST enter AT Least 50 characters\"\n                }, maxLength: {\n                    value: 1000,\n                    message: \"You may ONLY enter 1000 characters or less\"\n                }})}\n            )\n        },\n        onBlur: (e, clearErrors, name, setError) => calculateBlurOrNot(e, clearErrors, name, setError),\n        onChange: (value, setValue) => {\n            setValue(\"mainDescription\", value, { shouldValidate: false });\n        },\n        name: \"mainDescription\",\n        placeholder: \"Enter a detailed or basic (totally up to you but at least include 50 characters) for your description\",\n        type: \"textarea\",\n        label: \"Enter a description for your live stream (AT-LEAST 50 characters)\"\n    };\n    const handleSubcategoryCheckerChange = (selectedOption, setValue, subCategoryRefSelector) => {\n        // run conditionals\n        setValue('subCategory', selectedOption, { shouldValidate: false });\n\n        subCategoryRefSelector.current.blur();\n    }\n    return {\n        hashtagsChecker,\n        subcategoryChecker,\n        handleSubcategoryCheckerChange,\n        listingTitleChecker,\n        mainDescriptionChecker\n    }\n}\n\n\nexport default HookHelpers;"]},"metadata":{},"sourceType":"module"}