{"ast":null,"code":"var _jsxFileName = \"/home/kali/Documents/cybersecurity/client/src/components/dashboard/learning/educationalCoursesSeminars/createCourse/helpers/pages/pageThree/index.js\";\nimport React, { Fragment, useState, useRef, useEffect } from \"react\";\nimport \"./styles.css\";\nimport { connect } from \"react-redux\";\nimport helpers from \"./helpers/helperFunctions/helpers.js\";\nimport { Button, Row, Col, Card, CardBody, CardHeader, FormGroup, Label, Input, Media, InputGroup, Form, InputGroupAddon, InputGroupText, Progress, ListGroupItem, Container } from 'reactstrap';\nimport { updateCourseInformationData } from \"../../../../../../../../redux/actions/courses/createNewCourse/index.js\";\nimport _ from \"lodash\";\nimport uuid from \"react-uuid\";\nimport moment from \"moment\";\nimport Select from \"react-select\";\nimport { useForm, Controller } from 'react-hook-form';\nimport reactHookHelpers from \"./helpers/helperFunctions/hookFormHelpers.js\";\nimport options from \"./helpers/helperFunctions/options.js\";\nconst {\n  lanuageOptions,\n  experienceLevelOptions,\n  languageList,\n  hoursInLengthOptions\n} = options; // react-hook-form imports/helpers\n\nconst subtitleChecks = reactHookHelpers().subtitleChecks;\nconst languageSpokenChecks = reactHookHelpers().languageSpokenChecks;\nconst skillLevelChecks = reactHookHelpers().skillLevelChecks;\nconst primaryLanguageChecks = reactHookHelpers().primaryLanguageChecks;\nconst hoursOfCourseContentChecks = reactHookHelpers().hoursOfCourseContentChecks;\nconst courseWelcomeMessageChecks = reactHookHelpers().courseWelcomeMessageChecks;\nconst completionMessageChecks = reactHookHelpers().completionMessageChecks; // actual component\n\nconst CreateNewCoursePageThree = _ref => {\n  let {\n    userData,\n    courseData,\n    overallProgress,\n    setOverallProgress,\n    setProgress\n  } = _ref;\n  const [languageArrayNew, setLanguageArray] = useState([]);\n  const languageSpokenRef = useRef(null);\n  const primaryLanguageRef = useRef(null);\n  const skillLevelRef = useRef(null); // redux form logic\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    resetField,\n    unregister,\n    getValues,\n    array,\n    setValue,\n    setError,\n    clearErrors,\n    formState: {\n      errors\n    }\n  } = useForm({\n    mode: \"onTouched\",\n    reValidateMode: \"onBlur\"\n  });\n  const currentValues = getValues();\n  useEffect(() => {\n    const languageArrayNew = [];\n\n    for (let index = 0; index < languageList.length; index++) {\n      const language = languageList[index];\n      languageArrayNew.push({\n        label: language.name,\n        value: language.name,\n        completeData: language\n      });\n\n      if (languageList.length - 1 === index) {\n        setLanguageArray(languageArrayNew);\n      }\n    }\n  }, []);\n\n  const handleSubmission = () => {\n    console.log(\"handleSubmission ran...\");\n  };\n\n  const onSubmit = (data, e) => {\n    console.log(\"onSubmit ran...\", data, e);\n  };\n\n  const errorsSubmit = (e, errors) => {\n    console.log(\"errorsSubmit\", e, errors);\n  };\n\n  console.log(\"current VALUES:\", currentValues);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"centered-horizontally-course\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"position-above-bar-percentage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 21\n    }\n  }, overallProgress, \"% Complete\")), /*#__PURE__*/React.createElement(Progress, {\n    className: \"course-creation-progress-bar\",\n    animated: true,\n    color: \"info\",\n    value: overallProgress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"course-custom-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 45\n    }\n  }, \"More fine-grain specific details about your listing. Please fill out each of the following fields to the best of your ability & be as specific/detailed as possible. We will collect things such as difficulty level, language, etc...\"))), /*#__PURE__*/React.createElement(Row, {\n    style: {\n      marginTop: \"17.5px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    className: \"specifics-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    className: \"b-l-primary card-header-customized-specifics\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 49\n    }\n  }, \"More required detailed information related to core listing\")), /*#__PURE__*/React.createElement(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit(onSubmit, (e, errors) => {\n      return errorsSubmit(e, errors);\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12 mb-3\",\n    lg: \"12 mb-3\",\n    xl: \"12 mb-3\",\n    md: \"12 mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 61\n    }\n  }, subtitleChecks.label), /*#__PURE__*/React.createElement(Input, Object.assign({}, subtitleChecks.check(setError, register), {\n    onChange: e => subtitleChecks.onChange(e, setValue),\n    value: currentValues.subtitle,\n    className: \"form-control\",\n    name: subtitleChecks.name,\n    type: subtitleChecks.type,\n    placeholder: subtitleChecks.placeholder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 61\n    }\n  })), errors.subtitle ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"span-tooltip\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 80\n    }\n  }, errors.subtitle.message) : null)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: \"6 mb-3\",\n    sm: \"12 mb-3\",\n    lg: \"6 mb-3\",\n    xl: \"6 mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 61\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 65\n    }\n  }, skillLevelChecks.label), /*#__PURE__*/React.createElement(Controller, Object.assign({\n    control: control,\n    name: skillLevelChecks.name\n  }, skillLevelChecks.check(setError, register, clearErrors), {\n    render: _ref2 => {\n      let {\n        field\n      } = _ref2;\n      return /*#__PURE__*/React.createElement(Select, Object.assign({}, field, {\n        ref: skillLevelRef,\n        autoBlur: true,\n        placeholder: skillLevelChecks.placeholder,\n        defaultValue: null,\n        onMenuClose: () => {\n          skillLevelRef.current.blur();\n        },\n        value: currentValues.skillLevel,\n        onChange: selectedOption => skillLevelChecks.onChange(selectedOption, setValue, clearErrors),\n        options: experienceLevelOptions,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 73\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 65\n    }\n  })), errors.skillLevel ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"span-tooltip\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 86\n    }\n  }, errors.skillLevel.message) : null)), /*#__PURE__*/React.createElement(Col, {\n    md: \"6 mb-3\",\n    sm: \"12 mb-3\",\n    lg: \"6 mb-3\",\n    xl: \"6 mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 61\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 65\n    }\n  }, languageSpokenChecks.label), /*#__PURE__*/React.createElement(Controller, Object.assign({\n    control: control,\n    name: languageSpokenChecks.name\n  }, languageSpokenChecks.check(setError, register, clearErrors), {\n    render: _ref3 => {\n      let {\n        field\n      } = _ref3;\n      return /*#__PURE__*/React.createElement(Select, Object.assign({}, field, {\n        ref: languageSpokenRef,\n        autoBlur: true,\n        placeholder: languageSpokenChecks.placeholder,\n        defaultValue: null,\n        onMenuClose: () => {\n          languageSpokenRef.current.blur();\n        },\n        value: currentValues.languageSpoken,\n        onChange: selectedOption => languageSpokenChecks.onChange(selectedOption, setValue, clearErrors),\n        options: lanuageOptions,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 73\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 65\n    }\n  })), errors.languageSpoken ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"span-tooltip\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 90\n    }\n  }, errors.languageSpoken.message) : null))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: \"5 mb-3\",\n    sm: \"12 mb-3\",\n    lg: \"5 mb-3\",\n    xl: \"5 mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 61\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 65\n    }\n  }, primaryLanguageChecks.label), /*#__PURE__*/React.createElement(Controller, Object.assign({\n    control: control,\n    name: primaryLanguageChecks.name\n  }, primaryLanguageChecks.check(setError, register, clearErrors), {\n    render: _ref4 => {\n      let {\n        field\n      } = _ref4;\n      return /*#__PURE__*/React.createElement(Select, Object.assign({}, field, {\n        ref: primaryLanguageRef,\n        autoBlur: true,\n        placeholder: primaryLanguageChecks.placeholder,\n        defaultValue: null,\n        onMenuClose: () => {\n          primaryLanguageRef.current.blur();\n        },\n        value: currentValues.primaryLanguageUsed,\n        onChange: selectedOption => primaryLanguageChecks.onChange(selectedOption, setValue, clearErrors),\n        options: languageArrayNew,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 73\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 65\n    }\n  })), errors.primaryLanguageUsed ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"span-tooltip\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 95\n    }\n  }, errors.primaryLanguageUsed.message) : null)), /*#__PURE__*/React.createElement(Col, {\n    md: \"7 mb-3\",\n    sm: \"12 mb-3\",\n    lg: \"7 mb-3\",\n    xl: \"7 mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 61\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 65\n    }\n  }, hoursOfCourseContentChecks.label), /*#__PURE__*/React.createElement(Controller, Object.assign({\n    control: control,\n    name: hoursOfCourseContentChecks.name\n  }, hoursOfCourseContentChecks.check(setError, register, clearErrors), {\n    render: _ref5 => {\n      let {\n        field\n      } = _ref5;\n      return /*#__PURE__*/React.createElement(Select, Object.assign({\n        className: \"controlled-select-course\"\n      }, field, {\n        ref: primaryLanguageRef,\n        autoBlur: true,\n        placeholder: hoursOfCourseContentChecks.placeholder,\n        defaultValue: null,\n        onMenuClose: () => {\n          primaryLanguageRef.current.blur();\n        },\n        value: currentValues.lengthInHours,\n        onChange: selectedOption => hoursOfCourseContentChecks.onChange(selectedOption, setValue, clearErrors),\n        options: hoursInLengthOptions,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 73\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 65\n    }\n  })), errors.lengthInHours ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"span-tooltip\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 89\n    }\n  }, errors.lengthInHours.message) : null))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12 mb-3\",\n    lg: \"12 mb-3\",\n    xl: \"12 mb-3\",\n    md: \"12 mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 61\n    }\n  }, courseWelcomeMessageChecks.label), /*#__PURE__*/React.createElement(Input, Object.assign({}, courseWelcomeMessageChecks.check(setError, register), {\n    onChange: e => courseWelcomeMessageChecks.onChange(e, setValue),\n    value: currentValues.welcomeMessage,\n    className: \"form-control\",\n    name: courseWelcomeMessageChecks.name,\n    rows: 8,\n    type: courseWelcomeMessageChecks.type,\n    placeholder: courseWelcomeMessageChecks.placeholder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 61\n    }\n  })), errors.welcomeMessage ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"span-tooltip\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 86\n    }\n  }, errors.welcomeMessage.message) : null)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12 mb-3\",\n    lg: \"12 mb-3\",\n    xl: \"12 mb-3\",\n    md: \"12 mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 61\n    }\n  }, completionMessageChecks.label), /*#__PURE__*/React.createElement(Input, Object.assign({}, completionMessageChecks.check(setError, register), {\n    onChange: e => completionMessageChecks.onChange(e, setValue),\n    value: currentValues.completionMessage,\n    className: \"form-control\",\n    name: completionMessageChecks.name,\n    rows: 8,\n    type: completionMessageChecks.type,\n    placeholder: completionMessageChecks.placeholder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 61\n    }\n  })), errors.completionMessage ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"span-tooltip\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 89\n    }\n  }, errors.completionMessage.message) : null)), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 53\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    style: {\n      width: \"100%\"\n    },\n    outline: true,\n    className: \"btn-square-info\",\n    color: \"info-2x\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 53\n    }\n  }, \"Submit form & proceed w/rest of logic\"))))))))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 29\n    }\n  })))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: handleSubmission,\n    className: \"btn-square-secondary\",\n    color: \"secondary-2x\",\n    outline: true,\n    style: {\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 33\n    }\n  }, \"Submit & Continue W/Form Process\")))))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    userData: state.auth.data,\n    courseData: _.has(state.courseData, \"courseData\") ? state.courseData.courseData : []\n  };\n};\n\nexport default connect(mapStateToProps, {\n  updateCourseInformationData\n})(CreateNewCoursePageThree);","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/learning/educationalCoursesSeminars/createCourse/helpers/pages/pageThree/index.js"],"names":["React","Fragment","useState","useRef","useEffect","connect","helpers","Button","Row","Col","Card","CardBody","CardHeader","FormGroup","Label","Input","Media","InputGroup","Form","InputGroupAddon","InputGroupText","Progress","ListGroupItem","Container","updateCourseInformationData","_","uuid","moment","Select","useForm","Controller","reactHookHelpers","options","lanuageOptions","experienceLevelOptions","languageList","hoursInLengthOptions","subtitleChecks","languageSpokenChecks","skillLevelChecks","primaryLanguageChecks","hoursOfCourseContentChecks","courseWelcomeMessageChecks","completionMessageChecks","CreateNewCoursePageThree","userData","courseData","overallProgress","setOverallProgress","setProgress","languageArrayNew","setLanguageArray","languageSpokenRef","primaryLanguageRef","skillLevelRef","register","handleSubmit","control","resetField","unregister","getValues","array","setValue","setError","clearErrors","formState","errors","mode","reValidateMode","currentValues","index","length","language","push","label","name","value","completeData","handleSubmission","console","log","onSubmit","data","e","errorsSubmit","marginTop","check","onChange","subtitle","type","placeholder","message","field","current","blur","skillLevel","selectedOption","languageSpoken","primaryLanguageUsed","lengthInHours","welcomeMessage","completionMessage","width","mapStateToProps","state","auth","has"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useRef, useEffect } from \"react\";\nimport \"./styles.css\";\nimport { connect } from \"react-redux\";\nimport helpers from \"./helpers/helperFunctions/helpers.js\";\nimport { Button, Row, Col, Card, CardBody, CardHeader, FormGroup, Label, Input, Media, InputGroup, Form, InputGroupAddon, InputGroupText, Progress, ListGroupItem, Container } from 'reactstrap';\nimport { updateCourseInformationData } from \"../../../../../../../../redux/actions/courses/createNewCourse/index.js\";\nimport _ from \"lodash\";\nimport uuid from \"react-uuid\";\nimport moment from \"moment\";\nimport Select from \"react-select\";\nimport { useForm, Controller } from 'react-hook-form';\nimport reactHookHelpers from \"./helpers/helperFunctions/hookFormHelpers.js\";\nimport options from \"./helpers/helperFunctions/options.js\";\n\nconst { lanuageOptions, experienceLevelOptions, languageList, hoursInLengthOptions } = options;\n\n// react-hook-form imports/helpers\nconst subtitleChecks = reactHookHelpers().subtitleChecks;\nconst languageSpokenChecks = reactHookHelpers().languageSpokenChecks;\nconst skillLevelChecks = reactHookHelpers().skillLevelChecks;\nconst primaryLanguageChecks = reactHookHelpers().primaryLanguageChecks;\nconst hoursOfCourseContentChecks = reactHookHelpers().hoursOfCourseContentChecks;\nconst courseWelcomeMessageChecks = reactHookHelpers().courseWelcomeMessageChecks;\nconst completionMessageChecks = reactHookHelpers().completionMessageChecks;\n\n// actual component\nconst CreateNewCoursePageThree = ({ userData, courseData, overallProgress, setOverallProgress, setProgress }) => {\n\n    const [ languageArrayNew, setLanguageArray ] = useState([]);\n\n    const languageSpokenRef = useRef(null);\n    const primaryLanguageRef = useRef(null);\n    const skillLevelRef = useRef(null);\n    // redux form logic\n    const { register, handleSubmit, control, resetField, unregister, getValues, array, setValue, setError, clearErrors, formState: { errors }} = useForm({\n        mode: \"onTouched\",\n        reValidateMode: \"onBlur\"\n    });\n\n    const currentValues = getValues();\n\n    useEffect(() => {\n\n        const languageArrayNew = [];\n      \n        for (let index = 0; index < languageList.length; index++) {\n            const language = languageList[index];\n            languageArrayNew.push({ label: language.name, value: language.name, completeData: language });\n\n            if ((languageList.length - 1) === index) {\n                setLanguageArray(languageArrayNew);\n            }\n        }\n    }, [])\n\n    const handleSubmission = () => {\n        console.log(\"handleSubmission ran...\");\n    }\n    const onSubmit = (data, e) => {\n        console.log(\"onSubmit ran...\", data, e);\n    }\n    const errorsSubmit = (e, errors) => {\n        console.log(\"errorsSubmit\", e, errors);\n    }\n    console.log(\"current VALUES:\", currentValues);\n    return (\n        <Fragment>\n            <div className={\"centered-horizontally-course\"}>\n                <div className={\"position-above-bar-percentage\"}>\n                    <h1>{overallProgress}% Complete</h1>\n                </div>\n                <Progress className={\"course-creation-progress-bar\"} animated color=\"info\" value={overallProgress} />\n            </div>\n            <Container fluid={true}>\n                <Row>\n                    <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                            <Card>\n                                <CardBody>\n                                    <Row>\n                                        <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                                            <h4 className={\"course-custom-title\"}>More fine-grain specific details about your listing. Please fill out each of the following fields to the best of your ability & be as specific/detailed as possible. We will collect things such as difficulty level, language, etc...</h4>\n                                        </Col>\n                                    </Row>\n                                    <Row style={{ marginTop: \"17.5px\" }}>\n                                        <Card className={\"specifics-card\"}>\n                                            <CardHeader className=\"b-l-primary card-header-customized-specifics\">\n                                                <h4>More required detailed information related to core listing</h4>\n                                            </CardHeader>\n                                            <CardBody>\n                                                <Form onSubmit={handleSubmit(onSubmit, (e, errors) => {\n                                                    return errorsSubmit(e, errors);\n                                                })}>\n                                                    <div className=\"form-row\">\n                                                        <Col sm=\"12 mb-3\" lg=\"12 mb-3\" xl=\"12 mb-3\" md=\"12 mb-3\">\n                                                            <Label>{subtitleChecks.label}</Label>\n                                                            <Input {...subtitleChecks.check(setError, register)} onChange={(e) => subtitleChecks.onChange(e, setValue)} value={currentValues.subtitle} className=\"form-control\" name={subtitleChecks.name} type={subtitleChecks.type} placeholder={subtitleChecks.placeholder} />\n                                                            {errors.subtitle ? <span className=\"span-tooltip\">{errors.subtitle.message}</span> : null}\n                                                        </Col>\n                                                    </div>\n                                                    <div className=\"form-row\">\n                                                        <Col md=\"6 mb-3\" sm=\"12 mb-3\" lg=\"6 mb-3\" xl=\"6 mb-3\">\n                                                            <FormGroup>\n                                                                <Label>{skillLevelChecks.label}</Label>\n                                                                <Controller\n                                                                    control={control}\n                                                                    name={skillLevelChecks.name}\n                                                                    {...skillLevelChecks.check(setError, register, clearErrors)}\n                                                                    render={({ field }) => (\n                                                                        <Select\n                                                                            {...field}\n                                                                            ref={skillLevelRef}\n                                                                            autoBlur={true}\n                                                                            placeholder={skillLevelChecks.placeholder}\n                                                                            defaultValue={null}\n                                                                            onMenuClose={() => {\n                                                                                skillLevelRef.current.blur();\n                                                                            }}\n                                                                            value={currentValues.skillLevel}\n                                                                            onChange={(selectedOption) => skillLevelChecks.onChange(selectedOption, setValue, clearErrors)}\n                                                                            options={experienceLevelOptions}\n                                                                        />\n                                                                    )}\n                                                                />\n                                                                {errors.skillLevel ? <span className=\"span-tooltip\">{errors.skillLevel.message}</span> : null}\n                                                            </FormGroup>\n                                                        </Col>\n                                                        <Col md=\"6 mb-3\" sm=\"12 mb-3\" lg=\"6 mb-3\" xl=\"6 mb-3\">\n                                                            <FormGroup>\n                                                                <Label>{languageSpokenChecks.label}</Label>\n                                                                <Controller\n                                                                    control={control}\n                                                                    name={languageSpokenChecks.name}\n                                                                    {...languageSpokenChecks.check(setError, register, clearErrors)}\n                                                                    render={({ field }) => (\n                                                                        <Select\n                                                                            {...field}\n                                                                            ref={languageSpokenRef}\n                                                                            autoBlur={true}\n                                                                            placeholder={languageSpokenChecks.placeholder}\n                                                                            defaultValue={null}\n                                                                            onMenuClose={() => {\n                                                                                languageSpokenRef.current.blur();\n                                                                            }}\n                                                                            value={currentValues.languageSpoken}\n                                                                            onChange={(selectedOption) => languageSpokenChecks.onChange(selectedOption, setValue, clearErrors)}\n                                                                            options={lanuageOptions}\n                                                                        />\n                                                                    )}\n                                                                />\n                                                                {errors.languageSpoken ? <span className=\"span-tooltip\">{errors.languageSpoken.message}</span> : null}\n                                                            </FormGroup>\n                                                        </Col>\n                                                    </div>\n                                                    <div className=\"form-row\">\n                                                        <Col md=\"5 mb-3\" sm=\"12 mb-3\" lg=\"5 mb-3\" xl=\"5 mb-3\">\n                                                            <FormGroup>\n                                                                <Label>{primaryLanguageChecks.label}</Label>\n                                                                <Controller\n                                                                    control={control}\n                                                                    name={primaryLanguageChecks.name}\n                                                                    {...primaryLanguageChecks.check(setError, register, clearErrors)}\n                                                                    render={({ field }) => (\n                                                                        <Select\n                                                                            {...field}\n                                                                            ref={primaryLanguageRef}\n                                                                            autoBlur={true}\n                                                                            placeholder={primaryLanguageChecks.placeholder}\n                                                                            defaultValue={null}\n                                                                            onMenuClose={() => {\n                                                                                primaryLanguageRef.current.blur();\n                                                                            }}\n                                                                            value={currentValues.primaryLanguageUsed}\n                                                                            onChange={(selectedOption) => primaryLanguageChecks.onChange(selectedOption, setValue, clearErrors)}\n                                                                            options={languageArrayNew}\n                                                                        />\n                                                                    )}\n                                                                />\n                                                                {errors.primaryLanguageUsed ? <span className=\"span-tooltip\">{errors.primaryLanguageUsed.message}</span> : null}\n                                                            </FormGroup>\n                                                        </Col>\n                                                        <Col md=\"7 mb-3\" sm=\"12 mb-3\" lg=\"7 mb-3\" xl=\"7 mb-3\">\n                                                            <FormGroup>\n                                                                <Label>{hoursOfCourseContentChecks.label}</Label>\n                                                                <Controller\n                                                                    control={control}\n                                                                    name={hoursOfCourseContentChecks.name}\n                                                                    {...hoursOfCourseContentChecks.check(setError, register, clearErrors)}\n                                                                    render={({ field }) => (\n                                                                        <Select\n                                                                            className={\"controlled-select-course\"}\n                                                                            {...field}\n                                                                            ref={primaryLanguageRef}\n                                                                            autoBlur={true}\n                                                                            placeholder={hoursOfCourseContentChecks.placeholder}\n                                                                            defaultValue={null}\n                                                                            onMenuClose={() => {\n                                                                                primaryLanguageRef.current.blur();\n                                                                            }}\n                                                                            value={currentValues.lengthInHours}\n                                                                            onChange={(selectedOption) => hoursOfCourseContentChecks.onChange(selectedOption, setValue, clearErrors)}\n                                                                            options={hoursInLengthOptions}\n                                                                        />\n                                                                    )}\n                                                                />\n                                                                {errors.lengthInHours ? <span className=\"span-tooltip\">{errors.lengthInHours.message}</span> : null}\n                                                            </FormGroup>\n                                                        </Col>\n                                                    </div>\n                                                    <div className=\"form-row\">\n                                                        <Col sm=\"12 mb-3\" lg=\"12 mb-3\" xl=\"12 mb-3\" md=\"12 mb-3\">\n                                                            <Label>{courseWelcomeMessageChecks.label}</Label>\n                                                            <Input {...courseWelcomeMessageChecks.check(setError, register)} onChange={(e) => courseWelcomeMessageChecks.onChange(e, setValue)} value={currentValues.welcomeMessage} className=\"form-control\" name={courseWelcomeMessageChecks.name} rows={8} type={courseWelcomeMessageChecks.type} placeholder={courseWelcomeMessageChecks.placeholder} />\n                                                            {errors.welcomeMessage ? <span className=\"span-tooltip\">{errors.welcomeMessage.message}</span> : null}\n                                                        </Col>\n                                                    </div>\n                                                    <div className=\"form-row\">\n                                                        <Col sm=\"12 mb-3\" lg=\"12 mb-3\" xl=\"12 mb-3\" md=\"12 mb-3\">\n                                                            <Label>{completionMessageChecks.label}</Label>\n                                                            <Input {...completionMessageChecks.check(setError, register)} onChange={(e) => completionMessageChecks.onChange(e, setValue)} value={currentValues.completionMessage} className=\"form-control\" name={completionMessageChecks.name} rows={8} type={completionMessageChecks.type} placeholder={completionMessageChecks.placeholder} />\n                                                            {errors.completionMessage ? <span className=\"span-tooltip\">{errors.completionMessage.message}</span> : null}\n                                                        </Col>\n                                                    </div>\n                                                    <hr />\n                                                    <Button style={{ width: \"100%\" }} outline className={\"btn-square-info\"} color=\"info-2x\">{\"Submit form & proceed w/rest of logic\"}</Button>\n                                                    </Form>\n                                            </CardBody>\n                                        </Card>\n                                    </Row>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    </Row>\n                <Row>\n                    <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                        <Card>\n                            <CardBody>\n                                \n                            </CardBody>\n                        </Card>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                        <Card>\n                            <CardBody>\n                                <Button onClick={handleSubmission} className={\"btn-square-secondary\"} color={\"secondary-2x\"} outline style={{ width: \"100%\" }}>Submit & Continue W/Form Process</Button>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n        </Fragment>\n    );\n}\nconst mapStateToProps = (state) => {\n    return {\n        userData: state.auth.data,\n        courseData: _.has(state.courseData, \"courseData\") ? state.courseData.courseData : []    \n    }\n}\nexport default connect(mapStateToProps, { updateCourseInformationData })(CreateNewCoursePageThree);"]},"metadata":{},"sourceType":"module"}