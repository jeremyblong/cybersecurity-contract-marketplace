{"ast":null,"code":"export const getCroppedImg = (image, crop, mimetype) => {\n  const canvas = document.createElement(\"canvas\");\n  const scaleX = image.naturalWidth / image.width;\n  const scaleY = image.naturalHeight / image.height;\n  canvas.width = crop.width;\n  canvas.height = crop.height;\n  const ctx = canvas.getContext(\"2d\"); // New lines to be added\n\n  const pixelRatio = window.devicePixelRatio;\n  canvas.width = crop.width * pixelRatio;\n  canvas.height = crop.height * pixelRatio;\n  ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n  ctx.imageSmoothingQuality = \"high\";\n  ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n  return new Promise((resolve, reject) => {\n    canvas.toBlob(blob => {\n      blob.name = image.name;\n      resolve(blob);\n    }, mimetype, 1);\n  });\n}; //////////////////////////\n// export function getCroppedImg(image, crop, mimetype) {\n//   const canvas = document.createElement(\"canvas\");\n//   const scaleX = image.naturalWidth / image.width;\n//   const scaleY = image.naturalHeight / image.height;\n//   canvas.width = crop.width;\n//   canvas.height = crop.height;\n//   const ctx = canvas.getContext(\"2d\");\n//   // New lines to be added\n//   const pixelRatio = window.devicePixelRatio;\n//   canvas.width = crop.width * pixelRatio;\n//   canvas.height = crop.height * pixelRatio;\n//   ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n//   ctx.imageSmoothingQuality = \"high\";\n//   let img = new Image();\n//   const myResult = new Promise((resolve, reject) => {\n//     img.src = URL.createObjectURL(image);\n//     resolve(img);\n//   }).then((passedData) => {\n//     console.log(\"IMG :\", passedData);\n//     ctx.drawImage(\n//       passedData,\n//       crop.x * scaleX,\n//       crop.y * scaleY,\n//       crop.width * scaleX,\n//       crop.height * scaleY,\n//       0,\n//       0,\n//       crop.width,\n//       crop.height\n//     );\n//     const base64Image = canvas.toDataURL(mimetype);\n//     return base64Image;\n//   })\n//   return myResult.then((dataaa) => {\n//     console.log(\"dataaa\", dataaa);\n//     return dataaa;\n//   });\n// }","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/profile/employer/view/generalDetails/helpers/croppingBannerImage/getCroppedImage.js"],"names":["getCroppedImg","image","crop","mimetype","canvas","document","createElement","scaleX","naturalWidth","width","scaleY","naturalHeight","height","ctx","getContext","pixelRatio","window","devicePixelRatio","setTransform","imageSmoothingQuality","drawImage","x","y","Promise","resolve","reject","toBlob","blob","name"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAG,CAACC,KAAD,EAAQC,IAAR,EAAcC,QAAd,KAA2B;AACtD,QAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACA,QAAMC,MAAM,GAAGN,KAAK,CAACO,YAAN,GAAqBP,KAAK,CAACQ,KAA1C;AACA,QAAMC,MAAM,GAAGT,KAAK,CAACU,aAAN,GAAsBV,KAAK,CAACW,MAA3C;AACAR,EAAAA,MAAM,CAACK,KAAP,GAAeP,IAAI,CAACO,KAApB;AACAL,EAAAA,MAAM,CAACQ,MAAP,GAAgBV,IAAI,CAACU,MAArB;AACA,QAAMC,GAAG,GAAGT,MAAM,CAACU,UAAP,CAAkB,IAAlB,CAAZ,CANsD,CAQtD;;AACA,QAAMC,UAAU,GAAGC,MAAM,CAACC,gBAA1B;AACAb,EAAAA,MAAM,CAACK,KAAP,GAAeP,IAAI,CAACO,KAAL,GAAaM,UAA5B;AACAX,EAAAA,MAAM,CAACQ,MAAP,GAAgBV,IAAI,CAACU,MAAL,GAAcG,UAA9B;AACAF,EAAAA,GAAG,CAACK,YAAJ,CAAiBH,UAAjB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmCA,UAAnC,EAA+C,CAA/C,EAAkD,CAAlD;AACAF,EAAAA,GAAG,CAACM,qBAAJ,GAA4B,MAA5B;AAEAN,EAAAA,GAAG,CAACO,SAAJ,CACEnB,KADF,EAEEC,IAAI,CAACmB,CAAL,GAASd,MAFX,EAGEL,IAAI,CAACoB,CAAL,GAASZ,MAHX,EAIER,IAAI,CAACO,KAAL,GAAaF,MAJf,EAKEL,IAAI,CAACU,MAAL,GAAcF,MALhB,EAME,CANF,EAOE,CAPF,EAQER,IAAI,CAACO,KARP,EASEP,IAAI,CAACU,MATP;AAYA,SAAO,IAAIW,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCrB,IAAAA,MAAM,CAACsB,MAAP,CACGC,IAAD,IAAU;AACRA,MAAAA,IAAI,CAACC,IAAL,GAAY3B,KAAK,CAAC2B,IAAlB;AACAJ,MAAAA,OAAO,CAACG,IAAD,CAAP;AACD,KAJH,EAKExB,QALF,EAME,CANF;AAQD,GATM,CAAP;AAUD,CArCM,C,CAyCP;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA","sourcesContent":["export const getCroppedImg = (image, crop, mimetype) => {\n  const canvas = document.createElement(\"canvas\");\n  const scaleX = image.naturalWidth / image.width;\n  const scaleY = image.naturalHeight / image.height;\n  canvas.width = crop.width;\n  canvas.height = crop.height;\n  const ctx = canvas.getContext(\"2d\");\n\n  // New lines to be added\n  const pixelRatio = window.devicePixelRatio;\n  canvas.width = crop.width * pixelRatio;\n  canvas.height = crop.height * pixelRatio;\n  ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n  ctx.imageSmoothingQuality = \"high\";\n\n  ctx.drawImage(\n    image,\n    crop.x * scaleX,\n    crop.y * scaleY,\n    crop.width * scaleX,\n    crop.height * scaleY,\n    0,\n    0,\n    crop.width,\n    crop.height\n  );\n\n  return new Promise((resolve, reject) => {\n    canvas.toBlob(\n      (blob) => {\n        blob.name = image.name;\n        resolve(blob);\n      },\n      mimetype,\n      1\n    );\n  });\n}\n\n\n\n//////////////////////////\n\n\n// export function getCroppedImg(image, crop, mimetype) {\n//   const canvas = document.createElement(\"canvas\");\n//   const scaleX = image.naturalWidth / image.width;\n//   const scaleY = image.naturalHeight / image.height;\n//   canvas.width = crop.width;\n//   canvas.height = crop.height;\n//   const ctx = canvas.getContext(\"2d\");\n\n//   // New lines to be added\n//   const pixelRatio = window.devicePixelRatio;\n//   canvas.width = crop.width * pixelRatio;\n//   canvas.height = crop.height * pixelRatio;\n//   ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n//   ctx.imageSmoothingQuality = \"high\";\n\n//   let img = new Image();\n\n//   const myResult = new Promise((resolve, reject) => {\n//     img.src = URL.createObjectURL(image);\n//     resolve(img);\n\n//   }).then((passedData) => {\n//     console.log(\"IMG :\", passedData);\n\n//     ctx.drawImage(\n//       passedData,\n//       crop.x * scaleX,\n//       crop.y * scaleY,\n//       crop.width * scaleX,\n//       crop.height * scaleY,\n//       0,\n//       0,\n//       crop.width,\n//       crop.height\n//     );\n    \n//     const base64Image = canvas.toDataURL(mimetype);\n\n//     return base64Image;\n//   })\n\n//   return myResult.then((dataaa) => {\n//     console.log(\"dataaa\", dataaa);\n\n//     return dataaa;\n//   });\n// }"]},"metadata":{},"sourceType":"module"}