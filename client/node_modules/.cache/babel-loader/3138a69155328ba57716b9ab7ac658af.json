{"ast":null,"code":"import _objectSpread from \"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\n// helpers logic related to mainly to redux-hook-form\nvar HookHelpers = function HookHelpers() {\n  var courseTitle = {\n    check: function check(setError, register) {\n      return _objectSpread({}, register(\"courseTitle\", {\n        required: {\n          value: true,\n          message: \"You MUST enter AT least 25 characters to 100 characters\"\n        },\n        minLength: {\n          value: 25,\n          message: \"You must enter AT Least 25 characters\"\n        },\n        maxLength: {\n          value: 100,\n          message: \"You may ONLY enter 100 characters or less\"\n        }\n      }));\n    },\n    onChange: function onChange(e, setValue) {\n      var value = e.target.value;\n      setValue(\"courseTitle\", value, {\n        shouldValidate: true\n      });\n    },\n    name: \"courseTitle\",\n    placeholder: \"Enter a 'Course Title'\",\n    type: \"text\",\n    label: \"Course Title\"\n  };\n  var objectiveChecks = {\n    check: function check(register, name) {\n      return _objectSpread({}, register(name, {\n        required: {\n          value: true,\n          message: \"You MUST enter AT least 25 characters to 160 characters\"\n        },\n        minLength: {\n          value: 25,\n          message: \"You must enter AT Least 25 characters\"\n        },\n        maxLength: {\n          value: 160,\n          message: \"You may ONLY enter 160 characters or less\"\n        }\n      }));\n    },\n    onChange: function onChange(setValue, name, value) {\n      // update react-hook-form value(s)\n      setValue(name, value, {\n        shouldValidate: true\n      });\n    },\n    placeholder: \"Example: Define the roles and responsibilities of a project manager\",\n    type: \"text\"\n  };\n  var prerequisitesChecks = {\n    check: function check(register, name) {\n      return _objectSpread({}, register(name, {\n        required: {\n          value: true,\n          message: \"You MUST enter AT least 25 characters to 160 characters\"\n        },\n        minLength: {\n          value: 25,\n          message: \"You must enter AT Least 25 characters\"\n        },\n        maxLength: {\n          value: 160,\n          message: \"You may ONLY enter 160 characters or less\"\n        }\n      }));\n    },\n    onChange: function onChange(setValue, name, value) {\n      // update react-hook-form value(s)\n      setValue(name, value, {\n        shouldValidate: true\n      });\n    },\n    placeholder: \"Example: No programming experience needed. You will learn everything you need to know\",\n    type: \"text\"\n  };\n  var courseDesignedForChecks = {\n    check: function check(register, name) {\n      return _objectSpread({}, register(name, {\n        required: {\n          value: true,\n          message: \"You MUST enter AT least 25 characters to 160 characters\"\n        },\n        minLength: {\n          value: 25,\n          message: \"You must enter AT Least 25 characters\"\n        },\n        maxLength: {\n          value: 160,\n          message: \"You may ONLY enter 160 characters or less\"\n        },\n        onBlur: function onBlur(e) {// code here...\n        }\n      }));\n    },\n    onChange: function onChange(setValue, name, value) {\n      // update react-hook-form value(s)\n      setValue(name, value, {\n        shouldValidate: true\n      });\n    },\n    placeholder: \"Example: Beginner Python developers curious about data science\",\n    type: \"text\",\n    label: \"Course Title\"\n  };\n  var courseCategory = {\n    check: function check(setError, register, clearErrors) {\n      return _objectSpread({}, register(\"courseCategory\", {\n        required: {\n          value: true,\n          message: \"You MUST select a 'category' option before proceeding forward\"\n        },\n        onBlur: function onBlur(e) {\n          // code here...\n          console.log(\"blur - e\", e); // current value from this input\n\n          var value = e.target.value; // timeout to delay for state change(s)\n\n          setTimeout(function () {\n            // clear error after proper selection\n            if (typeof value !== \"undefined\" && Object.keys(value).length > 0) {\n              clearErrors(\"courseCategory\");\n            } else {\n              // set error as nothing was selected (blank 'click-off' selection of selector)\n              setError(\"courseCategory\", {\n                type: \"manual\",\n                message: \"You MUST select a 'category' option before proceeding forward\"\n              });\n            }\n          }, 50);\n        }\n      }));\n    },\n    onChange: function onChange(selectedOption, setValue, clearErrors) {\n      console.log(\"value changed...:\", selectedOption);\n      setValue(\"courseCategory\", selectedOption, {\n        shouldValidate: false\n      });\n      setTimeout(function () {\n        clearErrors(\"courseCategory\");\n      }, 75);\n    },\n    name: \"courseCategory\",\n    placeholder: \"Select a category/group type\",\n    label: \"Select a category for your course\"\n  };\n  var pricing = {\n    check: function check(setError, register, clearErrors) {\n      return _objectSpread({}, register(\"pricing\", {\n        required: {\n          value: true,\n          message: \"You MUST select a 'pricing' option before proceeding forward\"\n        },\n        onBlur: function onBlur(e) {\n          // code here...\n          console.log(\"blur - e\", e); // current value from this input\n\n          var value = e.target.value; // timeout to delay for state change(s)\n\n          setTimeout(function () {\n            // clear error after proper selection\n            if (typeof value !== \"undefined\" && Object.keys(value).length > 0) {\n              clearErrors(\"pricing\");\n            } else {\n              // set error as nothing was selected (blank 'click-off' selection of selector)\n              setError(\"pricing\", {\n                type: \"manual\",\n                message: \"You MUST select a 'pricing' option before proceeding forward\"\n              });\n            }\n          }, 50);\n        }\n      }));\n    },\n    onChange: function onChange(selectedOption, setValue, clearErrors) {\n      console.log(\"value changed...:\", selectedOption);\n      setValue(\"pricing\", selectedOption, {\n        shouldValidate: false\n      });\n      setTimeout(function () {\n        clearErrors(\"pricing\");\n      }, 75);\n    },\n    name: \"pricing\",\n    placeholder: \"Select a pricing option...\",\n    label: \"Select a 'pricing option' for your course\"\n  };\n  var hashtagsChecker = {\n    check: function check(register, name) {\n      return _objectSpread({}, register(name, {\n        required: {\n          value: true,\n          message: \"You MUST enter AT least 5 hashtags/tags before attempting to continue\"\n        }\n      }));\n    },\n    onBlurred: function onBlurred(tags, setValue, clearErrors, setError) {\n      setValue(\"courseHashtags\", tags, {\n        shouldValidate: true\n      }); // timeout to delay for state change(s)\n\n      setTimeout(function () {\n        // clear error after proper selection\n        if (typeof tags !== \"undefined\" && tags.length >= 5 && tags.length <= 15) {\n          clearErrors(\"courseHashtags\");\n        } else {\n          // set error as nothing was selected (blank 'click-off' selection of selector)\n          setError(\"courseHashtags\", {\n            type: \"manual\",\n            message: \"You MUST enter BETWEEN 5-15 hashtags/tags before attempting to continue\"\n          });\n        }\n      }, 100);\n    },\n    placeholder: \"Enter between 5-15 hashtags/tags...\",\n    type: \"text\",\n    label: \"Enter BETWEEN 5-15 hashtags to proceed forward - people will use these to find your specific course...\"\n  };\n  var descriptionChecks = {\n    check: function check(clearErrors, register, setError, currentValues, wordCount) {\n      return _objectSpread({}, register(\"description\", {\n        required: {\n          value: true,\n          message: \"You must enter AT least 1000 characters OR 200 words to proceed\"\n        },\n        minLength: {\n          value: 1000,\n          message: \"You must enter AT least 1000 characters OR 200 words to proceed\"\n        },\n        maxLength: {\n          value: 6000,\n          message: \"You may only enter up to a max of 6000 characters or 475 words\"\n        }\n      }));\n    },\n    onBlur: function onBlur(clearErrors, setError, currentValues, wordCount) {\n      console.log(\"blurred dynamic description\");\n      var description = currentValues.description;\n      setTimeout(function () {\n        if (typeof description !== \"undefined\" && description.length >= 1000 && description.length <= 6000) {\n          clearErrors(\"description\");\n        } else {\n          if (typeof description !== \"undefined\" && description.length !== 0) {\n            if (wordCount >= 200 || typeof description !== \"undefined\" && description.length <= 1000 && description.length >= 0) {\n              console.log(\"one ran!\");\n              setError(\"description\", {\n                type: \"manual\",\n                message: \"You must enter AT least 1000 characters OR 200 words to proceed\"\n              });\n            } else if (wordCount >= 475 && typeof description !== \"undefined\" && description.length >= 6000) {\n              console.log(\"two ran!\");\n              setError(\"description\", {\n                type: \"manual\",\n                message: \"You may only enter up to a max of 6000 characters OR a maximum of 475 words\"\n              });\n            } else {\n              console.log(\"three ran!\");\n              setError(\"description\", {\n                type: \"manual\",\n                message: \"You must enter between 1000-6000 characters to proceed or a minimum of 200 words\"\n              });\n            }\n          } else {\n            setError(\"description\", {\n              type: \"manual\",\n              message: \"You must enter a valid value for this input - we have detected that no data is currently in the input\"\n            });\n          }\n        }\n      }, 50);\n    },\n    placeholder: \"Enter your text here... (You can use MARKUP & various text styling tools with the bar above)\",\n    name: \"description\"\n  };\n  return {\n    courseTitle: courseTitle,\n    courseCategory: courseCategory,\n    hashtagsChecker: hashtagsChecker,\n    descriptionChecks: descriptionChecks,\n    pricing: pricing,\n    objectiveChecks: objectiveChecks,\n    prerequisitesChecks: prerequisitesChecks,\n    courseDesignedForChecks: courseDesignedForChecks\n  };\n};\n\nexport default HookHelpers;","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/src/components/dashboard/learning/educationalCoursesSeminars/createCourse/helpers/pages/pageOne/helpers/reduxFormHelpers.js"],"names":["HookHelpers","courseTitle","check","setError","register","required","value","message","minLength","maxLength","onChange","e","setValue","target","shouldValidate","name","placeholder","type","label","objectiveChecks","prerequisitesChecks","courseDesignedForChecks","onBlur","courseCategory","clearErrors","console","log","setTimeout","Object","keys","length","selectedOption","pricing","hashtagsChecker","onBlurred","tags","descriptionChecks","currentValues","wordCount","description"],"mappings":"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","sourcesContent":["// helpers logic related to mainly to redux-hook-form\nconst HookHelpers = () => {\n    \n    const courseTitle = {\n        check: (setError, register) => {\n            return (\n                {...register(\"courseTitle\", { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 25 characters to 100 characters\"\n                }, minLength: {\n                    value: 25,\n                    message: \"You must enter AT Least 25 characters\"\n                }, maxLength: {\n                    value: 100,\n                    message: \"You may ONLY enter 100 characters or less\"\n                }})}\n            )\n        },\n        onChange: (e, setValue) => {\n            const value = e.target.value;\n\n            setValue(\"courseTitle\", value, { shouldValidate: true });\n        },\n        name: \"courseTitle\",\n        placeholder: \"Enter a 'Course Title'\",\n        type: \"text\",\n        label: \"Course Title\"\n    };\n    const objectiveChecks = {\n        check: (register, name) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 25 characters to 160 characters\"\n                }, minLength: {\n                    value: 25,\n                    message: \"You must enter AT Least 25 characters\"\n                }, maxLength: {\n                    value: 160,\n                    message: \"You may ONLY enter 160 characters or less\"\n                }})}\n            )\n        },\n        onChange: (setValue, name, value) => {\n            // update react-hook-form value(s)\n            setValue(name, value, { shouldValidate: true });\n        },\n        placeholder: \"Example: Define the roles and responsibilities of a project manager\",\n        type: \"text\"\n    };\n    const prerequisitesChecks = {\n        check: (register, name) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 25 characters to 160 characters\"\n                }, minLength: {\n                    value: 25,\n                    message: \"You must enter AT Least 25 characters\"\n                }, maxLength: {\n                    value: 160,\n                    message: \"You may ONLY enter 160 characters or less\"\n                }})}\n            )\n        },\n        onChange: (setValue, name, value) => {\n            // update react-hook-form value(s)\n            setValue(name, value, { shouldValidate: true });\n        },\n        placeholder: \"Example: No programming experience needed. You will learn everything you need to know\",\n        type: \"text\"\n    };\n    const courseDesignedForChecks = {\n        check: (register, name) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 25 characters to 160 characters\"\n                }, minLength: {\n                    value: 25,\n                    message: \"You must enter AT Least 25 characters\"\n                }, maxLength: {\n                    value: 160,\n                    message: \"You may ONLY enter 160 characters or less\"\n                }, onBlur: (e) => {\n                    // code here...\n                }})}\n            )\n        },\n        onChange: (setValue, name, value) => {\n            // update react-hook-form value(s)\n            setValue(name, value, { shouldValidate: true });\n        },\n        placeholder: \"Example: Beginner Python developers curious about data science\",\n        type: \"text\",\n        label: \"Course Title\"\n    }\n    const courseCategory = {\n        check: (setError, register, clearErrors) => {\n            return (\n                {...register(\"courseCategory\", { required: {\n                    value: true,\n                    message: \"You MUST select a 'category' option before proceeding forward\"\n                }, onBlur: (e) => {\n                    // code here...\n                    console.log(\"blur - e\", e);\n                    // current value from this input\n                    const value = e.target.value;\n                    // timeout to delay for state change(s)\n                    setTimeout(() => {\n                        // clear error after proper selection\n                        if ((typeof value !== \"undefined\") && (Object.keys(value).length > 0)) {\n                            clearErrors(\"courseCategory\");\n                        } else {\n                            // set error as nothing was selected (blank 'click-off' selection of selector)\n                            setError(\"courseCategory\", {\n                                type: \"manual\",\n                                message: \"You MUST select a 'category' option before proceeding forward\",\n                            });\n                        }\n                    }, 50);\n                }})}\n            )\n        },\n        onChange: (selectedOption, setValue, clearErrors) => {\n            console.log(\"value changed...:\", selectedOption);\n            \n            setValue(\"courseCategory\", selectedOption, { shouldValidate: false });\n\n            setTimeout(() => {\n                clearErrors(\"courseCategory\");\n            }, 75)\n        },\n        name: \"courseCategory\",\n        placeholder: \"Select a category/group type\",\n        label: \"Select a category for your course\"\n    };\n    const pricing = {\n        check: (setError, register, clearErrors) => {\n            return (\n                {...register(\"pricing\", { required: {\n                    value: true,\n                    message: \"You MUST select a 'pricing' option before proceeding forward\"\n                }, onBlur: (e) => {\n                    // code here...\n                    console.log(\"blur - e\", e);\n                    // current value from this input\n                    const value = e.target.value;\n                    // timeout to delay for state change(s)\n                    setTimeout(() => {\n                        // clear error after proper selection\n                        if ((typeof value !== \"undefined\") && (Object.keys(value).length > 0)) {\n                            clearErrors(\"pricing\");\n                        } else {\n                            // set error as nothing was selected (blank 'click-off' selection of selector)\n                            setError(\"pricing\", {\n                                type: \"manual\",\n                                message: \"You MUST select a 'pricing' option before proceeding forward\",\n                            });\n                        }\n                    }, 50);\n                }})}\n            )\n        },\n        onChange: (selectedOption, setValue, clearErrors) => {\n            console.log(\"value changed...:\", selectedOption);\n            \n            setValue(\"pricing\", selectedOption, { shouldValidate: false });\n\n            setTimeout(() => {\n                clearErrors(\"pricing\");\n            }, 75)\n        },\n        name: \"pricing\",\n        placeholder: \"Select a pricing option...\",\n        label: \"Select a 'pricing option' for your course\"\n    };\n    const hashtagsChecker = {\n        check: (register, name) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 5 hashtags/tags before attempting to continue\"\n                }})}\n            )\n        },\n        onBlurred: (tags, setValue, clearErrors, setError) => {\n            setValue(\"courseHashtags\", tags, { shouldValidate: true });\n            // timeout to delay for state change(s)\n            setTimeout(() => {\n                // clear error after proper selection\n                if ((typeof tags !== \"undefined\") && (tags.length >= 5 && tags.length <= 15)) {\n                    clearErrors(\"courseHashtags\");\n                } else {\n                    // set error as nothing was selected (blank 'click-off' selection of selector)\n                    setError(\"courseHashtags\", {\n                        type: \"manual\",\n                        message: \"You MUST enter BETWEEN 5-15 hashtags/tags before attempting to continue\",\n                    });\n                }\n            }, 100);\n        },\n        placeholder: \"Enter between 5-15 hashtags/tags...\",\n        type: \"text\",\n        label: \"Enter BETWEEN 5-15 hashtags to proceed forward - people will use these to find your specific course...\"\n    };\n    const descriptionChecks = {\n        check: (clearErrors, register, setError, currentValues, wordCount) => {\n            return (\n                {...register(\"description\", { required: {\n                    value: true,\n                    message: \"You must enter AT least 1000 characters OR 200 words to proceed\"\n                }, minLength: {\n                    value: 1000,\n                    message: \"You must enter AT least 1000 characters OR 200 words to proceed\"\n                }, maxLength: {\n                    value: 6000,\n                    message: \"You may only enter up to a max of 6000 characters or 475 words\"\n                }})}\n            );\n        },\n        onBlur: (clearErrors, setError, currentValues, wordCount) => {\n\n            console.log(\"blurred dynamic description\");\n\n            const description = currentValues.description;\n\n            setTimeout(() => {\n                if ((typeof description !== \"undefined\") && ((description.length >= 1000) && (description.length <= 6000))) {\n                    clearErrors(\"description\");\n                } else {\n                    if ((typeof description !== \"undefined\") && description.length !== 0) {\n                        if ((wordCount >= 200) || ((typeof description !== \"undefined\" && description.length <= 1000) && (description.length >= 0))) {\n                            console.log(\"one ran!\");\n\n                            setError(\"description\", {\n                                type: \"manual\",\n                                message: \"You must enter AT least 1000 characters OR 200 words to proceed\",\n                            });\n                        } else if ((wordCount >= 475) && ((typeof description !== \"undefined\" && description.length >= 6000))) {\n                            console.log(\"two ran!\");\n\n                            setError(\"description\", {\n                                type: \"manual\",\n                                message: \"You may only enter up to a max of 6000 characters OR a maximum of 475 words\",\n                            });\n                        } else {\n                            console.log(\"three ran!\");\n\n                            setError(\"description\", {\n                                type: \"manual\",\n                                message: \"You must enter between 1000-6000 characters to proceed or a minimum of 200 words\",\n                            });\n                        }\n                    } else {\n                        setError(\"description\", {\n                            type: \"manual\",\n                            message: \"You must enter a valid value for this input - we have detected that no data is currently in the input\",\n                        });\n                    }\n                }\n            }, 50)\n        },\n        placeholder: \"Enter your text here... (You can use MARKUP & various text styling tools with the bar above)\",\n        name: \"description\"\n    }\n\n    return {\n        courseTitle,\n        courseCategory,\n        hashtagsChecker,\n        descriptionChecks,\n        pricing,\n        objectiveChecks,\n        prerequisitesChecks,\n        courseDesignedForChecks\n    }\n}\n\n\nexport default HookHelpers;"]},"metadata":{},"sourceType":"module"}