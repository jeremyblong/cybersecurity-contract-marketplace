{"ast":null,"code":"// helpers logic related to mainly to redux-hook-form\nconst HookCourseCreationHelpers = () => {\n  const subtitleChecks = {\n    check: (setError, register) => {\n      return { ...register(\"subtitle\", {\n          required: {\n            value: true,\n            message: \"You MUST enter AT least 25 characters to 160 characters\"\n          },\n          minLength: {\n            value: 25,\n            message: \"You must enter AT Least 25 characters\"\n          },\n          maxLength: {\n            value: 160,\n            message: \"You may ONLY enter 160 characters or less\"\n          }\n        })\n      };\n    },\n    onChange: (e, setValue) => {\n      const value = e.target.value;\n      setValue(\"subtitle\", value, {\n        shouldValidate: true\n      });\n    },\n    name: \"subtitle\",\n    placeholder: \"Enter a course 'Sub-Title' for your course...\",\n    type: \"text\",\n    label: \"Enter a course 'Sub-Title' for your course (this will be displayed right under your main description...)\"\n  }; // const courseCategory = {\n  //     check: (setError, register, clearErrors) => {\n  //         return (\n  //             {...register(\"courseCategory\", { required: {\n  //                 value: true,\n  //                 message: \"You MUST select a 'category' option before proceeding forward\"\n  //             }, onBlur: (e) => {\n  //                 // code here...\n  //                 console.log(\"blur - e\", e);\n  //                 // current value from this input\n  //                 const value = e.target.value;\n  //                 // timeout to delay for state change(s)\n  //                 setTimeout(() => {\n  //                     // clear error after proper selection\n  //                     if ((typeof value !== \"undefined\") && (Object.keys(value).length > 0)) {\n  //                         clearErrors(\"courseCategory\");\n  //                     } else {\n  //                         // set error as nothing was selected (blank 'click-off' selection of selector)\n  //                         setError(\"courseCategory\", {\n  //                             type: \"manual\",\n  //                             message: \"You MUST select a 'category' option before proceeding forward\",\n  //                         });\n  //                     }\n  //                 }, 50);\n  //             }})}\n  //         )\n  //     },\n  //     onChange: (selectedOption, setValue, clearErrors) => {\n  //         console.log(\"value changed...:\", selectedOption);\n  //         setValue(\"courseCategory\", selectedOption, { shouldValidate: false });\n  //         setTimeout(() => {\n  //             clearErrors(\"courseCategory\");\n  //         }, 75)\n  //     },\n  //     name: \"courseCategory\",\n  //     placeholder: \"Select a category/group type\",\n  //     label: \"Select a category for your course\"\n  // };\n\n  return {\n    subtitleChecks\n  };\n};\n\nexport default HookCourseCreationHelpers;","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/learning/educationalCoursesSeminars/createCourse/helpers/pages/pageThree/helpers/helperFunctions/hookFormHelpers.js"],"names":["HookCourseCreationHelpers","subtitleChecks","check","setError","register","required","value","message","minLength","maxLength","onChange","e","setValue","target","shouldValidate","name","placeholder","type","label"],"mappings":"AAAA;AACA,MAAMA,yBAAyB,GAAG,MAAM;AAEpC,QAAMC,cAAc,GAAG;AACnBC,IAAAA,KAAK,EAAE,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC3B,aACI,EAAC,GAAGA,QAAQ,CAAC,UAAD,EAAa;AAAEC,UAAAA,QAAQ,EAAE;AACjCC,YAAAA,KAAK,EAAE,IAD0B;AAEjCC,YAAAA,OAAO,EAAE;AAFwB,WAAZ;AAGtBC,UAAAA,SAAS,EAAE;AACVF,YAAAA,KAAK,EAAE,EADG;AAEVC,YAAAA,OAAO,EAAE;AAFC,WAHW;AAMtBE,UAAAA,SAAS,EAAE;AACVH,YAAAA,KAAK,EAAE,GADG;AAEVC,YAAAA,OAAO,EAAE;AAFC;AANW,SAAb;AAAZ,OADJ;AAYH,KAdkB;AAenBG,IAAAA,QAAQ,EAAE,CAACC,CAAD,EAAIC,QAAJ,KAAiB;AACvB,YAAMN,KAAK,GAAGK,CAAC,CAACE,MAAF,CAASP,KAAvB;AAEAM,MAAAA,QAAQ,CAAC,UAAD,EAAaN,KAAb,EAAoB;AAAEQ,QAAAA,cAAc,EAAE;AAAlB,OAApB,CAAR;AACH,KAnBkB;AAoBnBC,IAAAA,IAAI,EAAE,UApBa;AAqBnBC,IAAAA,WAAW,EAAE,+CArBM;AAsBnBC,IAAAA,IAAI,EAAE,MAtBa;AAuBnBC,IAAAA,KAAK,EAAE;AAvBY,GAAvB,CAFoC,CA2BpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAO;AACHjB,IAAAA;AADG,GAAP;AAGH,CAvED;;AA0EA,eAAeD,yBAAf","sourcesContent":["// helpers logic related to mainly to redux-hook-form\nconst HookCourseCreationHelpers = () => {\n    \n    const subtitleChecks = {\n        check: (setError, register) => {\n            return (\n                {...register(\"subtitle\", { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 25 characters to 160 characters\"\n                }, minLength: {\n                    value: 25,\n                    message: \"You must enter AT Least 25 characters\"\n                }, maxLength: {\n                    value: 160,\n                    message: \"You may ONLY enter 160 characters or less\"\n                }})}\n            )\n        },\n        onChange: (e, setValue) => {\n            const value = e.target.value;\n\n            setValue(\"subtitle\", value, { shouldValidate: true });\n        },\n        name: \"subtitle\",\n        placeholder: \"Enter a course 'Sub-Title' for your course...\",\n        type: \"text\",\n        label: \"Enter a course 'Sub-Title' for your course (this will be displayed right under your main description...)\"\n    };\n    // const courseCategory = {\n    //     check: (setError, register, clearErrors) => {\n    //         return (\n    //             {...register(\"courseCategory\", { required: {\n    //                 value: true,\n    //                 message: \"You MUST select a 'category' option before proceeding forward\"\n    //             }, onBlur: (e) => {\n    //                 // code here...\n    //                 console.log(\"blur - e\", e);\n    //                 // current value from this input\n    //                 const value = e.target.value;\n    //                 // timeout to delay for state change(s)\n    //                 setTimeout(() => {\n    //                     // clear error after proper selection\n    //                     if ((typeof value !== \"undefined\") && (Object.keys(value).length > 0)) {\n    //                         clearErrors(\"courseCategory\");\n    //                     } else {\n    //                         // set error as nothing was selected (blank 'click-off' selection of selector)\n    //                         setError(\"courseCategory\", {\n    //                             type: \"manual\",\n    //                             message: \"You MUST select a 'category' option before proceeding forward\",\n    //                         });\n    //                     }\n    //                 }, 50);\n    //             }})}\n    //         )\n    //     },\n    //     onChange: (selectedOption, setValue, clearErrors) => {\n    //         console.log(\"value changed...:\", selectedOption);\n            \n    //         setValue(\"courseCategory\", selectedOption, { shouldValidate: false });\n\n    //         setTimeout(() => {\n    //             clearErrors(\"courseCategory\");\n    //         }, 75)\n    //     },\n    //     name: \"courseCategory\",\n    //     placeholder: \"Select a category/group type\",\n    //     label: \"Select a category for your course\"\n    // };\n\n    return {\n        subtitleChecks\n    }\n}\n\n\nexport default HookCourseCreationHelpers;"]},"metadata":{},"sourceType":"module"}