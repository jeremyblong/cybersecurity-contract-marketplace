{"ast":null,"code":"import _objectSpread from \"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/src/components/dashboard/jobManagement/employers/manageHiredHackers/paymentRelated/mainSelection/sheetHelpers/partialPaymentClear/clearPaymentsOrPartial.js\";\n\nimport React, { Fragment, useState, useEffect } from 'react';\nimport \"./styles.css\";\nimport Breadcrumb from '../../../../../../../../../layout/breadcrumb';\nimport { Container, Row, Col, Card, CardBody, CardFooter, CardHeader, ListGroup, ListGroupItem, Popover, PopoverHeader, PopoverBody, Button } from \"reactstrap\";\nimport axios from 'axios';\nimport { Link } from \"react-router-dom\";\nimport Sheet from 'react-modal-sheet';\nimport { connect } from \"react-redux\";\nimport { NotificationManager } from 'react-notifications';\nimport Skeleton, { SkeletonTheme } from 'react-loading-skeleton';\nimport { confirmAlert } from 'react-confirm-alert';\nimport moment from \"moment\";\nimport Slider from 'rc-slider';\n\nvar ClearPaymentsOrPartialPane = function ClearPaymentsOrPartialPane(_ref) {\n  var listing = _ref.listing,\n      setCurrentApplication = _ref.setCurrentApplication,\n      currentApplication = _ref.currentApplication,\n      userData = _ref.userData,\n      isOpen = _ref.isOpen,\n      setIsOpenState = _ref.setIsOpenState;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      cards = _useState2[0],\n      setCards = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      activeCard = _useState4[0],\n      setActiveCard = _useState4[1];\n\n  var _useState5 = useState(50),\n      _useState6 = _slicedToArray(_useState5, 2),\n      percentageToBePaid = _useState6[0],\n      setPercentageToBePaid = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      cost = _useState8[0],\n      setCost = _useState8[1];\n\n  var _useState9 = useState({\n    0: {\n      style: {\n        color: \"blue\"\n      },\n      label: \"0%\"\n    },\n    10: {\n      style: {\n        color: \"blue\"\n      },\n      label: \"10%\"\n    },\n    20: {\n      style: {\n        color: \"blue\"\n      },\n      label: \"20%\"\n    },\n    30: {\n      style: {\n        color: \"blue\"\n      },\n      label: \"30%\"\n    },\n    40: {\n      style: {\n        color: \"blue\"\n      },\n      label: \"40%\"\n    },\n    50: {\n      style: {\n        color: \"blue\"\n      },\n      label: \"50%\"\n    },\n    60: {\n      style: {\n        color: \"blue\"\n      },\n      label: \"60%\"\n    },\n    70: {\n      style: {\n        color: \"blue\"\n      },\n      label: \"70%\"\n    },\n    80: {\n      style: {\n        color: \"blue\"\n      },\n      label: \"80%\"\n    },\n    90: {\n      style: {\n        color: \"blue\"\n      },\n      label: \"90%\"\n    },\n    100: {\n      style: {\n        color: \"blue\"\n      },\n      label: \"100%\"\n    }\n  }),\n      _useState10 = _slicedToArray(_useState9, 2),\n      marks = _useState10[0],\n      setMarks = _useState10[1];\n\n  useEffect(function () {\n    var configuration = {\n      params: {\n        id: userData.uniqueId\n      }\n    };\n    axios.get(\"\".concat(process.env.REACT_APP_BASE_URL, \"/gather/employer/payment/methods/cards/only\"), configuration).then(function (res) {\n      if (res.data.message === \"Gathered employer payment cards!\") {\n        console.log(res.data);\n        var _cards = res.data.cards;\n        setCards(_cards.data);\n      } else {\n        console.log(\"Err\", res.data);\n      }\n    }).catch(function (err) {\n      console.log(\"Critical errror...:\", err);\n    });\n  }, []);\n\n  var handlePaymentInitialization = function handlePaymentInitialization() {\n    confirmAlert({\n      title: \"Are you SURE you'd like to deposit a partial deposit of \".concat(cost.toFixed(2), \"?\"),\n      message: \"This is NOT completely permanent, IF the contracted hacker does NOT complete the required work or is incompetent, you have the ABILITY to RETRIEVE your un-used funds at a later point. Confirmed transfers/payments will ALSO need to be confirmed by you prior to any money being transferred throughout accounts.\",\n      buttons: [{\n        label: 'Yes, Deposit Partial Funds!',\n        onClick: function onClick() {\n          console.log(\"yes notify and run logic!\");\n\n          if (activeCard !== null) {\n            var config = {\n              userID: userData.uniqueId,\n              depositAmount: Number(cost),\n              hackerID: currentApplication.applicantId,\n              activeCard: activeCard,\n              publicCompanyName: listing.publicCompanyName,\n              jobID: currentApplication.generatedID\n            };\n            axios.post(\"\".concat(process.env.REACT_APP_BASE_URL, \"/deposit/funds/specific/hacker/initialization/process/partial/specific\"), config).then(function (res) {\n              if (res.data.message === \"Successfully deposited funds and notified hacker!\") {\n                console.log(res.data);\n                var employer = res.data.employer;\n                setIsOpenState(false);\n                setActiveCard(null);\n                setPercentageToBePaid(50);\n                var findIndexJobUpdated = employer.activeHiredHackers.findIndex(function (x) {\n                  return x.id === currentApplication.id;\n                });\n                var promises = [];\n                var foundRelated = employer.activeHiredHackers[findIndexJobUpdated];\n\n                var _loop = function _loop(index) {\n                  var payment = foundRelated.paymentHistory[index];\n\n                  if (payment.recurring === true) {\n                    // fetch the payment data..\n                    var price = payment.completedPayment.phases[0].items[0].price;\n                    promises.push(new Promise(function (resolve, reject) {\n                      axios.get(\"\".concat(process.env.REACT_APP_BASE_URL, \"/fetch/price/by/id/quick\"), {\n                        params: {\n                          priceID: price\n                        }\n                      }).then(function (res) {\n                        var _res$data = res.data,\n                            priceData = _res$data.priceData,\n                            message = _res$data.message;\n\n                        if (message === \"Success!\") {\n                          var newPriceObj = _objectSpread(_objectSpread({}, payment), {}, {\n                            paymentData: priceData\n                          });\n\n                          resolve(newPriceObj);\n                        } else {\n                          resolve(null);\n                        }\n                      }).catch(function (err) {\n                        reject(err);\n                      });\n                    }));\n                  } else {\n                    // just return the item - payment data already exists\n                    promises.push(new Promise(function (resolve) {\n                      resolve(payment);\n                    }));\n                  }\n                };\n\n                for (var index = 0; index < foundRelated.paymentHistory.length; index++) {\n                  _loop(index);\n                }\n\n                Promise.all(promises).then(function (passedData) {\n                  console.log(\"passedData\", passedData);\n                  setCurrentApplication(_objectSpread(_objectSpread({}, foundRelated), {}, {\n                    paymentHistory: passedData\n                  }));\n                });\n                NotificationManager.success(\"We've successfully deposited the funds into \".concat(process.env.REACT_APP_APPLICATION_NAME, \" & your contracted hacker is now READY to go and should start working immediately (within 1 business day)! Congrats on your new hire!\"), \"Succesfully processed request & notified hacker!\", 4750);\n              } else if (res.data.message === \"Listing/job is already complete, cannot make payment!\") {\n                console.log(\"Err - already paid and job has ended..\", res.data);\n                setIsOpenState(false);\n                setActiveCard(null);\n                setPercentageToBePaid(50);\n                NotificationManager.info(\"This listing has ALREADY ended & the recipient of your payment transaction WILL NOT receive these funds, therefore we have declined to accept your payment & no charge was made.\", \"NO CHARGE WAS MADE/INITIATED!\", 4750);\n              } else {\n                console.log(\"Err\", res.data);\n                setIsOpenState(false);\n                setActiveCard(null);\n                setPercentageToBePaid(50);\n                NotificationManager.error(\"An error occurred while attempting to make changes, update the hacker hiree and process overall related logic - if this problem persists, please contact support or try this action again!\", \"An error occurred while attempting to notifiy related hacker!\", 4750);\n              }\n            }).catch(function (err) {\n              console.log(\"Critical err\", err);\n              setIsOpenState(false);\n              setActiveCard(null);\n              setPercentageToBePaid(50);\n              NotificationManager.error(\"An error occurred while attempting to make changes, update the hacker hiree and process overall related logic - if this problem persists, please contact support or try this action again!\", \"An error occurred while attempting to notifiy related hacker!\", 4750);\n            });\n          } else {\n            setIsOpenState(false);\n            setActiveCard(null);\n            setPercentageToBePaid(50);\n            NotificationManager.warning(\"You MUST select a 'payment card' to take the desired funds from, We will bill/draw funds from this account so check your balance prior to running this command to avoid errors!\", \"Please select a 'payment card' before continuing!\", 4750);\n          }\n        }\n      }, {\n        label: 'No, Cancel/Exit.',\n        onClick: function onClick() {\n          console.log(\"canelled/don't run logic\");\n        }\n      }]\n    });\n  };\n\n  var handleSliderValueChange = function handleSliderValueChange(percentage) {\n    console.log(\"handleSliderValueChange percentage\", percentage);\n    setPercentageToBePaid(percentage);\n  };\n\n  var onAfterChange = function onAfterChange(percentage) {\n    console.log(\"onAfterChange percentage\", percentage);\n    var totalCost = Math.round(Number(currentApplication.amountOfMoneyUponCompletion));\n    var perc = parseFloat(percentage) / 100.0;\n    var converted = totalCost * perc;\n    setCost(converted);\n  };\n\n  var calculateCurrentSelectedCost = function calculateCurrentSelectedCost(percentage) {\n    var totalCost = Math.round(Number(currentApplication.amountOfMoneyUponCompletion));\n    var perc = parseFloat(percentage) / 100.0;\n    var converted = totalCost * perc;\n    return \"$\".concat(converted.toFixed(2), \" currently selected to be paid\");\n  };\n\n  console.log(\"Cost\", cost);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Sheet, {\n    disableDrag: true,\n    className: \"my-sheet-container-price-wrapper\",\n    draggable: false,\n    isOpen: isOpen,\n    onClose: function onClose() {\n      setIsOpenState(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Sheet.Container, {\n    className: \"my-sheet-container-price\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Sheet.Header, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      margin: \"12.5px\"\n    },\n    className: \"centered-both-ways\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: function onClick() {\n      setActiveCard(null);\n      setIsOpenState(false);\n    },\n    className: \"btn-square-danger\",\n    outline: true,\n    color: \"danger-2x\",\n    style: {\n      width: \"100%\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 29\n    }\n  }, \"Exit/Close This Pane\"))), /*#__PURE__*/React.createElement(Sheet.Content, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"breadcrumb-full-payment\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Breadcrumb, {\n    id: \"breadcrumb-full-payment\",\n    parent: \"Make FULL Payment\",\n    title: currentApplication !== null ? \"Make a full deposit/payment to this contractor (\".concat(currentApplication.applicantName, \")\") : \"Loading Data...\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    className: \"container-pane-full-payment\",\n    fluid: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 29\n    }\n  }, currentApplication !== null ? /*#__PURE__*/React.createElement(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 64\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    className: \"card-payment-entirely-halved\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"make-full-payment-header\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 49\n    }\n  }, \"Make \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 95\n    }\n  }, \"PARTIAL\"), \" payments with the logic below, you may decide to only pay a portion - use this to pay fractions of a overall full payment\"), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 49\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 49\n    }\n  }, \"You can choose ANY amount below in which you'd like to deposit with our \", /*#__PURE__*/React.createElement(\"strong\", {\n    style: {\n      color: \"#7366ff\",\n      textDecorationLine: \"underline\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 141\n    }\n  }, \"escrow style stripe payment system.\"), \" Use the progress bar to adjust your overall payment.\"), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 49\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 49\n    }\n  }, \"This is essentially an 'escrow' type service with \", /*#__PURE__*/React.createElement(\"em\", {\n    style: {\n      textDecorationLine: \"underline\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 119\n    }\n  }, \"stripe\"), \" that deposit's funds PRIOR to a hacker starting a contract to assure both \", process.env.REACT_APP_APPLICATION_NAME, \" AND the hacker themselves that once the \", /*#__PURE__*/React.createElement(\"strong\", {\n    style: {\n      color: \"#7366ff\",\n      textDecorationLine: \"underline\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 334\n    }\n  }, \"contract is successfully completed, the funds will be released..\"))), /*#__PURE__*/React.createElement(CardBody, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"centered-both-ways\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    className: \"dotted-border-col\",\n    sm: \"12\",\n    md: \"6\",\n    lg: \"6\",\n    xl: \"6\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 61\n    }\n  }, \"Please select how much you'd like to pay out of the total \", /*#__PURE__*/React.createElement(\"strong\", {\n    style: {\n      color: \"darkred\",\n      textDecorationLine: \"underline\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 123\n    }\n  }, \"$\", Number(currentApplication.amountOfMoneyUponCompletion).toFixed(2), \" (USD-$)\"), \" amount to the hacker named \", /*#__PURE__*/React.createElement(\"strong\", {\n    style: {\n      color: \"darkred\",\n      textDecorationLine: \"underline\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 306\n    }\n  }, currentApplication.applicantName)), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 61\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"center-slider-adjustment-bar\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 61\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 65\n    }\n  }, \"Please drag the marker to the appropriate position marking 'how much' you'd like to pay on this overall payment..\"), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 65\n    }\n  }), /*#__PURE__*/React.createElement(Slider, {\n    value: percentageToBePaid,\n    startPoint: 0,\n    onAfterChange: onAfterChange,\n    onChange: handleSliderValueChange,\n    marks: marks,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 65\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"centered-both-ways\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 65\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"current-selected-cost\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 69\n    }\n  }, calculateCurrentSelectedCost(percentageToBePaid))))), /*#__PURE__*/React.createElement(Col, {\n    className: \"dotted-border-col\",\n    sm: \"12\",\n    md: \"6\",\n    lg: \"6\",\n    xl: \"6\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 61\n    }\n  }, \"Select a card that you wish to make this payment with..\"), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 61\n    }\n  }), typeof cards !== \"undefined\" && cards.length > 0 ? cards.slice(0, 3).map(function (payment, idx) {\n    return /*#__PURE__*/React.createElement(Fragment, {\n      key: idx,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(ListGroupItem, {\n      onClick: function onClick() {\n        return setActiveCard(payment);\n      },\n      className: activeCard !== null && activeCard.id === payment.id ? \"list-group-item-action listitem-pricing-card flex-column align-items-start active active-picked\" : \"list-group-item-action listitem-pricing-card flex-column align-items-start\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex w-100 justify-content-between\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"mb-1\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 81\n      }\n    }, \"ID: \", payment.id.slice(0, 7), \"...\"), /*#__PURE__*/React.createElement(\"small\", {\n      style: {\n        color: \"#f73164\"\n      },\n      className: \"text-secondary\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 138\n      }\n    }, \"Added/Created: \", moment(payment.created * 1000).fromNow())), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"mb-1\",\n      style: {\n        color: \"#51bb25\",\n        fontWeight: \"bold\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 77\n      }\n    }, \"**** **** **** \".concat(payment.card.last4)), /*#__PURE__*/React.createElement(\"small\", {\n      className: \"text-muted\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 77\n      }\n    }, \"Exp. \".concat(payment.card.exp_month, \"/\").concat(payment.card.exp_year), \" \", /*#__PURE__*/React.createElement(\"small\", {\n      className: \"float-right\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 167\n      }\n    }, \"Card Type: \", payment.card.brand))));\n  }) : /*#__PURE__*/React.createElement(Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 66\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    style: {\n      color: \"blue\",\n      textDecorationLine: \"underline\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 65\n    }\n  }, \"You don't have any availiable cards on file..\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: \"27.5px\"\n    },\n    className: \"centered-both-ways\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 65\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: require(\"../../../../../../../../../assets/images/credit-cards.jpg\"),\n    className: \"credit-cards-placeholder\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 69\n    }\n  })))))), /*#__PURE__*/React.createElement(Button, {\n    onClick: function onClick() {\n      handlePaymentInitialization();\n    },\n    className: \"btn-square-success\",\n    outline: true,\n    color: \"success-2x\",\n    style: {\n      width: \"100%\",\n      marginTop: \"17.5px\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 49\n    }\n  }, \"Make Payment (will need to double confirm)\")), /*#__PURE__*/React.createElement(CardFooter, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 49\n    }\n  }, \"If you're confused or would like more information on \", /*#__PURE__*/React.createElement(Link, {\n    className: \"payment-linky\",\n    to: \"/frequently/asked/questions/main/employer\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 106\n    }\n  }, \"escrow services\"), \", you can find a plethorea of information between the \", /*#__PURE__*/React.createElement(\"a\", {\n    target: \"_blank\",\n    href: \"https://en.wikipedia.org/wiki/Escrow\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 265\n    }\n  }, \"wiki page\"), \" or by clicking \", /*#__PURE__*/React.createElement(Link, {\n    className: \"payment-linky\",\n    to: \"/frequently/asked/questions/main/employer\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 359\n    }\n  }, \"here\"), \" to see exactly how \", /*#__PURE__*/React.createElement(\"strong\", {\n    style: {\n      textDecorationLine: \"underline\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 473\n    }\n  }, \"WE\"), \" implement escrow type services!\"))))) : /*#__PURE__*/React.createElement(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 42\n    }\n  }, /*#__PURE__*/React.createElement(SkeletonTheme, {\n    baseColor: \"#c9c9c9\",\n    highlightColor: \"#444\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Skeleton, {\n    count: 45,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 41\n    }\n  })))))))), /*#__PURE__*/React.createElement(Sheet.Backdrop, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 17\n    }\n  })));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    userData: state.auth.data\n  };\n};\n\nexport default connect(mapStateToProps, {})(ClearPaymentsOrPartialPane);","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/src/components/dashboard/jobManagement/employers/manageHiredHackers/paymentRelated/mainSelection/sheetHelpers/partialPaymentClear/clearPaymentsOrPartial.js"],"names":["React","Fragment","useState","useEffect","Breadcrumb","Container","Row","Col","Card","CardBody","CardFooter","CardHeader","ListGroup","ListGroupItem","Popover","PopoverHeader","PopoverBody","Button","axios","Link","Sheet","connect","NotificationManager","Skeleton","SkeletonTheme","confirmAlert","moment","Slider","ClearPaymentsOrPartialPane","listing","setCurrentApplication","currentApplication","userData","isOpen","setIsOpenState","cards","setCards","activeCard","setActiveCard","percentageToBePaid","setPercentageToBePaid","cost","setCost","style","color","label","marks","setMarks","configuration","params","id","uniqueId","get","process","env","REACT_APP_BASE_URL","then","res","data","message","console","log","catch","err","handlePaymentInitialization","title","toFixed","buttons","onClick","config","userID","depositAmount","Number","hackerID","applicantId","publicCompanyName","jobID","generatedID","post","employer","findIndexJobUpdated","activeHiredHackers","findIndex","x","promises","foundRelated","index","payment","paymentHistory","recurring","price","completedPayment","phases","items","push","Promise","resolve","reject","priceID","priceData","newPriceObj","paymentData","length","all","passedData","success","REACT_APP_APPLICATION_NAME","info","error","warning","handleSliderValueChange","percentage","onAfterChange","totalCost","Math","round","amountOfMoneyUponCompletion","perc","parseFloat","converted","calculateCurrentSelectedCost","margin","width","applicantName","textDecorationLine","slice","map","idx","created","fromNow","fontWeight","card","last4","exp_month","exp_year","brand","padding","require","marginTop","mapStateToProps","state","auth"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport \"./styles.css\";\nimport Breadcrumb from '../../../../../../../../../layout/breadcrumb'\nimport { Container, Row, Col, Card, CardBody, CardFooter, CardHeader, ListGroup, ListGroupItem, Popover, PopoverHeader, PopoverBody, Button } from \"reactstrap\"\nimport axios from 'axios';\nimport { Link } from \"react-router-dom\";\nimport Sheet from 'react-modal-sheet';\nimport { connect } from \"react-redux\";\nimport { NotificationManager } from 'react-notifications';\nimport Skeleton, { SkeletonTheme } from 'react-loading-skeleton';\nimport { confirmAlert } from 'react-confirm-alert';\nimport moment from \"moment\";\nimport Slider from 'rc-slider';\n\n\nconst ClearPaymentsOrPartialPane = ({ listing, setCurrentApplication, currentApplication, userData, isOpen, setIsOpenState }) => {\n\n    const [ cards, setCards ] = useState([]);\n    const [ activeCard, setActiveCard ] = useState(null);\n    const [ percentageToBePaid, setPercentageToBePaid ] = useState(50);\n    const [ cost, setCost ] = useState(0);\n    const [ marks, setMarks ] = useState({\n        0: { style: { color: \"blue\" }, label: \"0%\" },\n        10: { style: { color: \"blue\" }, label: \"10%\" },\n        20: { style: { color: \"blue\" }, label: \"20%\" },\n        30: { style: { color: \"blue\" }, label: \"30%\" },\n        40: { style: { color: \"blue\" }, label: \"40%\" },\n        50: { style: { color: \"blue\" }, label: \"50%\" },\n        60: { style: { color: \"blue\" }, label: \"60%\" },\n        70: { style: { color: \"blue\" }, label: \"70%\" },\n        80: { style: { color: \"blue\" }, label: \"80%\" },\n        90: { style: { color: \"blue\" }, label: \"90%\" },\n        100: { style: { color: \"blue\" }, label: \"100%\" }\n    });\n\n    useEffect(() => {\n        const configuration = {\n            params: {\n                id: userData.uniqueId\n            }\n        }\n        axios.get(`${process.env.REACT_APP_BASE_URL}/gather/employer/payment/methods/cards/only`, configuration).then((res) => {\n            if (res.data.message === \"Gathered employer payment cards!\") {\n                console.log(res.data);\n\n                const { cards } = res.data;\n\n                setCards(cards.data);\n            } else {\n                console.log(\"Err\", res.data);\n            }\n        }).catch((err) => {\n            console.log(\"Critical errror...:\", err);\n        })\n    }, [])\n\n    const handlePaymentInitialization = () => {\n        confirmAlert({\n            title: `Are you SURE you'd like to deposit a partial deposit of ${cost.toFixed(2)}?`,\n            message: `This is NOT completely permanent, IF the contracted hacker does NOT complete the required work or is incompetent, you have the ABILITY to RETRIEVE your un-used funds at a later point. Confirmed transfers/payments will ALSO need to be confirmed by you prior to any money being transferred throughout accounts.`,\n            buttons: [\n              {\n                label: 'Yes, Deposit Partial Funds!',\n                onClick: () => {\n                    console.log(\"yes notify and run logic!\");\n\n                    if (activeCard !== null) {\n                        const config = {\n                            userID: userData.uniqueId,\n                            depositAmount: Number(cost),\n                            hackerID: currentApplication.applicantId,\n                            activeCard,\n                            publicCompanyName: listing.publicCompanyName,\n                            jobID: currentApplication.generatedID\n                        };\n                \n                        axios.post(`${process.env.REACT_APP_BASE_URL}/deposit/funds/specific/hacker/initialization/process/partial/specific`, config).then((res) => {\n                            if (res.data.message === \"Successfully deposited funds and notified hacker!\") {\n                                console.log(res.data);\n\n                                const { employer } = res.data;\n    \n                                setIsOpenState(false);\n                                setActiveCard(null);\n                                setPercentageToBePaid(50);\n\n                                const findIndexJobUpdated = employer.activeHiredHackers.findIndex((x) => x.id === currentApplication.id);\n                                \n                                const promises = [];\n                                const foundRelated = employer.activeHiredHackers[findIndexJobUpdated];\n\n                                for (let index = 0; index < foundRelated.paymentHistory.length; index++) {\n                                    const payment = foundRelated.paymentHistory[index];\n\n                                    if (payment.recurring === true) {\n                                        // fetch the payment data..\n                                        const { price } = payment.completedPayment.phases[0].items[0];\n\n                                        promises.push(new Promise((resolve, reject) => {\n                                            axios.get(`${process.env.REACT_APP_BASE_URL}/fetch/price/by/id/quick`, {\n                                                params: {\n                                                    priceID: price\n                                                }\n                                            }).then((res) => {\n                                                const { priceData, message } = res.data;\n\n                                                if (message === \"Success!\") {\n                                                    const newPriceObj = {\n                                                        ...payment,\n                                                        paymentData: priceData\n                                                    }\n                                                    resolve(newPriceObj);\n                                                } else {\n                                                    resolve(null);\n                                                }\n                                            }).catch((err) => {\n                                                reject(err);\n                                            })\n                                        }));\n                                    } else {\n                                        // just return the item - payment data already exists\n                                        promises.push(new Promise((resolve) => {\n                                            resolve(payment);\n                                        }));\n                                    }\n                                }\n\n                                Promise.all(promises).then((passedData) => {\n                                    console.log(\"passedData\", passedData);\n\n                                    setCurrentApplication({\n                                        ...foundRelated,\n                                        paymentHistory: passedData\n                                    });\n                                })\n    \n                                NotificationManager.success(`We've successfully deposited the funds into ${process.env.REACT_APP_APPLICATION_NAME} & your contracted hacker is now READY to go and should start working immediately (within 1 business day)! Congrats on your new hire!`, \"Succesfully processed request & notified hacker!\", 4750);\n                            } else if (res.data.message === \"Listing/job is already complete, cannot make payment!\") {\n                                console.log(\"Err - already paid and job has ended..\", res.data);\n\n                                setIsOpenState(false);\n                                setActiveCard(null);\n                                setPercentageToBePaid(50);\n    \n                                NotificationManager.info(\"This listing has ALREADY ended & the recipient of your payment transaction WILL NOT receive these funds, therefore we have declined to accept your payment & no charge was made.\", \"NO CHARGE WAS MADE/INITIATED!\", 4750);\n                            } else {\n                                console.log(\"Err\", res.data);\n\n                                setIsOpenState(false);\n                                setActiveCard(null);\n                                setPercentageToBePaid(50);\n    \n                                NotificationManager.error(\"An error occurred while attempting to make changes, update the hacker hiree and process overall related logic - if this problem persists, please contact support or try this action again!\", \"An error occurred while attempting to notifiy related hacker!\", 4750);\n                            }\n                        }).catch((err) => {\n                            console.log(\"Critical err\", err);\n                            \n                            setIsOpenState(false);\n                            setActiveCard(null);\n                            setPercentageToBePaid(50);\n    \n                            NotificationManager.error(\"An error occurred while attempting to make changes, update the hacker hiree and process overall related logic - if this problem persists, please contact support or try this action again!\", \"An error occurred while attempting to notifiy related hacker!\", 4750);\n                        })\n                    } else {\n                        setIsOpenState(false);\n                        setActiveCard(null);\n                        setPercentageToBePaid(50);\n\n                        NotificationManager.warning(\"You MUST select a 'payment card' to take the desired funds from, We will bill/draw funds from this account so check your balance prior to running this command to avoid errors!\", \"Please select a 'payment card' before continuing!\", 4750);\n                    }\n                }\n              },\n              {\n                label: 'No, Cancel/Exit.',\n                onClick: () => {\n                    console.log(\"canelled/don't run logic\");\n                }\n              }\n            ]\n        });\n    }\n    const handleSliderValueChange = (percentage) => {\n        console.log(\"handleSliderValueChange percentage\", percentage);\n\n        setPercentageToBePaid(percentage);\n    }\n    const onAfterChange = (percentage) => {\n        console.log(\"onAfterChange percentage\", percentage);\n\n        const totalCost = Math.round(Number(currentApplication.amountOfMoneyUponCompletion));\n        const perc = parseFloat(percentage) / 100.0;\n        const converted = totalCost * perc;\n        setCost(converted);\n    }\n    const calculateCurrentSelectedCost = (percentage) => {\n        const totalCost = Math.round(Number(currentApplication.amountOfMoneyUponCompletion));\n        const perc = parseFloat(percentage) / 100.0;\n        const converted = totalCost * perc;\n        return `$${converted.toFixed(2)} currently selected to be paid`;\n    }\n\n    console.log(\"Cost\", cost);\n\n    return (\n        <div>\n            <Sheet disableDrag={true} className={\"my-sheet-container-price-wrapper\"} draggable={false} isOpen={isOpen} onClose={() => {\n                setIsOpenState(false);\n            }}>\n                <Sheet.Container className={\"my-sheet-container-price\"}>\n                    <Sheet.Header>\n                        <div style={{ margin: \"12.5px\" }} className=\"centered-both-ways\">\n                            <Button onClick={() => {\n                                setActiveCard(null);\n                                setIsOpenState(false);\n                            }} className={\"btn-square-danger\"} outline color={\"danger-2x\"} style={{ width: \"100%\" }}>Exit/Close This Pane</Button>\n                        </div>\n                    </Sheet.Header>\n                    <Sheet.Content>\n                        <div id={\"breadcrumb-full-payment\"}>\n                            <Breadcrumb id={\"breadcrumb-full-payment\"} parent={\"Make FULL Payment\"} title={currentApplication !== null ? `Make a full deposit/payment to this contractor (${currentApplication.applicantName})` : \"Loading Data...\"} />\n                            <Container className='container-pane-full-payment' fluid={true}>\n                                {currentApplication !== null ? <Row>\n                                    <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                                        <Card className='card-payment-entirely-halved'>\n                                            <CardHeader>\n                                                <h3 className='make-full-payment-header'>Make <strong>PARTIAL</strong> payments with the logic below, you may decide to only pay a portion - use this to pay fractions of a overall full payment</h3>\n                                                <hr />\n                                                <p className='lead'>You can choose ANY amount below in which you'd like to deposit with our <strong style={{ color: \"#7366ff\", textDecorationLine: \"underline\" }}>escrow style stripe payment system.</strong> Use the progress bar to adjust your overall payment.</p>\n                                                <hr />\n                                                <p className='lead'>This is essentially an 'escrow' type service with <em style={{ textDecorationLine: \"underline\" }}>stripe</em> that deposit's funds PRIOR to a hacker starting a contract to assure both {process.env.REACT_APP_APPLICATION_NAME} AND the hacker themselves that once the <strong style={{ color: \"#7366ff\", textDecorationLine: \"underline\" }}>contract is successfully completed, the funds will be released..</strong></p>\n                                            </CardHeader>\n                                            <CardBody>\n                                                <Row>\n                                                    <div className='centered-both-ways'>\n                                                        <Col className='dotted-border-col' sm=\"12\" md=\"6\" lg=\"6\" xl=\"6\">\n                                                            <h3>Please select how much you'd like to pay out of the total <strong style={{ color: \"darkred\", textDecorationLine: \"underline\" }}>${Number(currentApplication.amountOfMoneyUponCompletion).toFixed(2)} (USD-$)</strong> amount to the hacker named <strong style={{ color: \"darkred\", textDecorationLine: \"underline\" }}>{currentApplication.applicantName}</strong></h3>\n                                                            <hr />\n                                                            <div className='center-slider-adjustment-bar'>\n                                                                <p className='lead'>Please drag the marker to the appropriate position marking 'how much' you'd like to pay on this overall payment..</p>\n                                                                <hr />\n                                                                <Slider value={percentageToBePaid} startPoint={0} onAfterChange={onAfterChange} onChange={handleSliderValueChange} marks={marks} />\n                                                                <div className='centered-both-ways'>\n                                                                    <h3 className='current-selected-cost'>{calculateCurrentSelectedCost(percentageToBePaid)}</h3>\n                                                                </div>\n                                                            </div>\n                                                        </Col>\n                                                        <Col className='dotted-border-col' sm=\"12\" md=\"6\" lg=\"6\" xl=\"6\">\n                                                            <h3>Select a card that you wish to make this payment with..</h3>\n                                                            <hr />\n                                                            {typeof cards !== \"undefined\" && cards.length > 0 ? cards.slice(0, 3).map((payment, idx) => {\n                                                                return (\n                                                                    <Fragment key={idx}>\n                                                                        <ListGroupItem onClick={() => setActiveCard(payment)} className={activeCard !== null && activeCard.id === payment.id ? \"list-group-item-action listitem-pricing-card flex-column align-items-start active active-picked\" : \"list-group-item-action listitem-pricing-card flex-column align-items-start\"}>\n                                                                            <div className=\"d-flex w-100 justify-content-between\">\n                                                                                <h5 className=\"mb-1\">ID: {payment.id.slice(0, 7)}...</h5><small style={{ color: \"#f73164\" }} className=\"text-secondary\">Added/Created: {moment(payment.created * 1000).fromNow()}</small>\n                                                                            </div>\n                                                                            <p className=\"mb-1\" style={{ color: \"#51bb25\", fontWeight: \"bold\" }}>{`**** **** **** ${payment.card.last4}`}</p>\n                                                                            <small className=\"text-muted\">{`Exp. ${payment.card.exp_month}/${payment.card.exp_year}`} <small className=\"float-right\">Card Type: {payment.card.brand}</small></small>\n                                                                        </ListGroupItem>\n                                                                    </Fragment>\n                                                                );\n                                                            }) : <Fragment>\n                                                                <h3 style={{ color: \"blue\", textDecorationLine: \"underline\" }}>You don't have any availiable cards on file..</h3>\n                                                                <div style={{ padding: \"27.5px\" }} className=\"centered-both-ways\">\n                                                                    <img src={require(\"../../../../../../../../../assets/images/credit-cards.jpg\")} className={\"credit-cards-placeholder\"} />\n                                                                </div>\n                                                            </Fragment>}\n                                                        </Col>\n                                                    </div>\n                                                </Row>\n                                                <Button onClick={() => {\n                                                    handlePaymentInitialization();\n                                                }} className={\"btn-square-success\"} outline color={\"success-2x\"} style={{ width: \"100%\", marginTop: \"17.5px\" }}>Make Payment (will need to double confirm)</Button>\n                                            </CardBody>\n                                            <CardFooter>\n                                                <h3>If you're confused or would like more information on <Link className={\"payment-linky\"} to={\"/frequently/asked/questions/main/employer\"}>escrow services</Link>, you can find a plethorea of information between the <a target=\"_blank\" href={\"https://en.wikipedia.org/wiki/Escrow\"}>wiki page</a> or by clicking <Link className={\"payment-linky\"} to={\"/frequently/asked/questions/main/employer\"}>here</Link> to see exactly how <strong style={{ textDecorationLine: \"underline\" }}>WE</strong> implement escrow type services!</h3>\n                                            </CardFooter>\n                                        </Card>\n                                    </Col>\n                                </Row> : <Row>\n                                <SkeletonTheme baseColor=\"#c9c9c9\" highlightColor=\"#444\">\n                                    <p>\n                                        <Skeleton count={45} />\n                                    </p>\n                                </SkeletonTheme>\n                                </Row>}\n                            </Container>\n                        </div>\n                    </Sheet.Content>\n                    </Sheet.Container>\n                <Sheet.Backdrop />\n            </Sheet>\n        </div>\n    );\n}\nconst mapStateToProps = (state) => {\n    return {\n        userData: state.auth.data\n    }\n}\nexport default connect(mapStateToProps, {  })(ClearPaymentsOrPartialPane);"]},"metadata":{},"sourceType":"module"}