{"ast":null,"code":"import React,{Fragment,useState,useEffect}from'react';import\"./styles.css\";import Breadcrumb from'../../../../../../../../../layout/breadcrumb';import{Container,Row,Col,Card,CardBody,CardFooter,CardHeader,FormGroup,ListGroup,ListGroupItem,Label,Input,Button}from\"reactstrap\";import axios from'axios';import{Link}from\"react-router-dom\";import Sheet from'react-modal-sheet';import{connect}from\"react-redux\";import{NotificationManager}from'react-notifications';import Skeleton,{SkeletonTheme}from'react-loading-skeleton';import{confirmAlert}from'react-confirm-alert';import moment from\"moment\";import Slider from'rc-slider';import{Calendar}from'react-date-range';import ReactPlayer from\"react-player\";import Select from'react-select';const daysOfWeekOptionsSelection=[{value:0,label:'Pay Every Sunday'},{value:1,label:'Pay Every Monday'},{value:2,label:'Pay Every Tuesday'},{value:3,label:'Pay Every Wednesday'},{value:4,label:'Pay Every Thursday'},{value:5,label:'Pay Every Friday'},{value:6,label:'Pay Every Saturday'}];const RecurringPaymentPaneHelper=_ref=>{let{incrementalPayentsPane,setIncrementalPaymentsOpen,userData,setCurrentApplication,listing,currentlyDue,setCurrentlyDue,currentApplication}=_ref;const[cards,setCards]=useState([]);const[activeCard,setActiveCard]=useState(null);const[percentageToBePaid,setPercentageToBePaid]=useState(50);const[interval,setInterval]=useState(null);const[cost,setCost]=useState(0);const[dateInterval,setDateInterval]=useState(new Date());const[selectedDayOfWeek,setSelectedDayOfWeekState]=useState({value:5,label:'Pay Every Friday'});const[paydays,setPaydayData]=useState([]);const[daysLength,setDaysLength]=useState(30);const[marks,setMarks]=useState({0:{style:{color:\"blue\"},label:\"0%\"},10:{style:{color:\"blue\"},label:\"10%\"},20:{style:{color:\"blue\"},label:\"20%\"},30:{style:{color:\"blue\"},label:\"30%\"},40:{style:{color:\"blue\"},label:\"40%\"},50:{style:{color:\"blue\"},label:\"50%\"},60:{style:{color:\"blue\"},label:\"60%\"},70:{style:{color:\"blue\"},label:\"70%\"},80:{style:{color:\"blue\"},label:\"80%\"},90:{style:{color:\"blue\"},label:\"90%\"},100:{style:{color:\"blue\"},label:\"100%\"}});useEffect(()=>{const configuration={params:{id:userData.uniqueId}};axios.get(\"\".concat(process.env.REACT_APP_BASE_URL,\"/gather/employer/payment/methods/cards/only\"),configuration).then(res=>{if(res.data.message===\"Gathered employer payment cards!\"){console.log(res.data);const{cards}=res.data;setCards(cards.data);}else{console.log(\"Err\",res.data);}}).catch(err=>{console.log(\"Critical errror...:\",err);});},[]);const handlePaymentInitialization=()=>{confirmAlert({title:\"Are you SURE you'd like to make a 'RECURRING-PAYMENT' of \".concat(cost.toFixed(2),\"?\"),message:\"This is NOT completely permanent, IF the contracted hacker does NOT complete the required work or is incompetent, you have the ABILITY to RETRIEVE your un-used funds at a later point. Confirmed transfers/payments will ALSO need to be confirmed by you prior to any money being transferred throughout accounts.\",buttons:[{label:'Yes, Initialize Recurring Payment!',onClick:()=>{console.log(\"yes notify and run logic!\");if(activeCard!==null){const config={userID:userData.uniqueId,paydayEachAmount:Number(cost),hackerID:currentApplication.applicantId,activeCard,publicCompanyName:listing.publicCompanyName,jobID:currentApplication.generatedID,daysToPay:paydays,selectedDayOfWeek:selectedDayOfWeek.value};axios.post(\"\".concat(process.env.REACT_APP_BASE_URL,\"/initialize/recurring/payment/contract/start\"),config).then(res=>{if(res.data.message===\"Successfully deposited funds and notified hacker!\"){console.log(res.data);const{employer}=res.data;setIncrementalPaymentsOpen(false);setActiveCard(null);setPercentageToBePaid(50);const findIndexJobUpdated=employer.activeHiredHackers.findIndex(x=>x.id===currentApplication.id);const promises=[];const foundRelated=employer.activeHiredHackers[findIndexJobUpdated];for(let index=0;index<foundRelated.paymentHistory.length;index++){const payment=foundRelated.paymentHistory[index];if(payment.recurring===true){// fetch the payment data..\nconst{price}=payment.completedPayment.phases[0].items[0];promises.push(new Promise((resolve,reject)=>{axios.get(\"\".concat(process.env.REACT_APP_BASE_URL,\"/fetch/price/by/id/quick\"),{params:{priceID:price}}).then(res=>{const{priceData,message}=res.data;if(message===\"Success!\"){const newPriceObj={...payment,paymentData:priceData};resolve(newPriceObj);}else{resolve(null);}}).catch(err=>{reject(err);});}));}else{// just return the item - payment data already exists\npromises.push(new Promise(resolve=>{resolve(payment);}));}}Promise.all(promises).then(passedData=>{console.log(\"passedData\",passedData);setCurrentApplication({...foundRelated,paymentHistory:passedData});});NotificationManager.success(\"We've successfully deposited the funds into \".concat(process.env.REACT_APP_APPLICATION_NAME,\" & your contracted hacker is now READY to go and should start working immediately (within 1 business day)! Congrats on your new hire!\"),\"Succesfully processed request & notified hacker!\",4750);}else{console.log(\"Err\",res.data);setIncrementalPaymentsOpen(false);setActiveCard(null);setPercentageToBePaid(50);NotificationManager.error(\"An error occurred while attempting to make changes, update the hacker hiree and process overall related logic - if this problem persists, please contact support or try this action again!\",\"An error occurred while attempting to notifiy related hacker!\",4750);}}).catch(err=>{console.log(\"Critical err\",err);setIncrementalPaymentsOpen(false);setActiveCard(null);setPercentageToBePaid(50);NotificationManager.error(\"An error occurred while attempting to make changes, update the hacker hiree and process overall related logic - if this problem persists, please contact support or try this action again!\",\"An error occurred while attempting to notifiy related hacker!\",4750);});}else{setIncrementalPaymentsOpen(false);setActiveCard(null);setPercentageToBePaid(50);NotificationManager.warning(\"You MUST select a 'payment card' to take the desired funds from, We will bill/draw funds from this account so check your balance prior to running this command to avoid errors!\",\"Please select a 'payment card' before continuing!\",4750);}}},{label:'No, Cancel/Exit.',onClick:()=>{console.log(\"canelled/don't run logic\");}}]});};const checkLoadedAndUpdateNumber=()=>{if(currentApplication!==null){const totalCost=Math.round(Number(currentApplication.amountOfMoneyUponCompletion));const perc=parseFloat(percentageToBePaid)/100.0;const converted=totalCost*perc;setCost(converted);clearInterval(interval);}};useEffect(()=>{let intervalId=setInterval(checkLoadedAndUpdateNumber,1250);setInterval(intervalId);},[]);const handleSliderValueChange=percentage=>{console.log(\"handleSliderValueChange percentage\",percentage);setPercentageToBePaid(percentage);};const onAfterChange=percentage=>{console.log(\"onAfterChange percentage\",percentage);const totalCost=Math.round(Number(currentApplication.amountOfMoneyUponCompletion));const perc=parseFloat(percentage)/100.0;const converted=totalCost*perc;setCost(converted);};const calculateCurrentSelectedCost=percentage=>{const totalCost=Math.round(Number(currentApplication.amountOfMoneyUponCompletion));const perc=parseFloat(percentage)/100.0;const converted=totalCost*perc;return\"$\".concat(converted.toFixed(2),\" currently selected to be paid on a recurring basis\");};const handleSelectionDateChange=dateee=>{const startDate=new Date(dateee).toISOString().split('T')[0];const recurringDatesArray=[];const daysFromNow=new Date(new Date(dateee).setDate(new Date(dateee).getDate()+Number(daysLength)));const startDateModified=new Date(new Date(startDate).setDate(new Date(startDate).getDate()+1));// week starts at 0 on sunday and saturday is 6\nfor(let d=startDateModified;d<=new Date(daysFromNow);d.setDate(d.getDate()+1)){const dayOfWeek=new Date(d).getDay();if(dayOfWeek===selectedDayOfWeek.value){recurringDatesArray.push(new Date(d));}}setPaydayData(recurringDatesArray);};return/*#__PURE__*/React.createElement(Fragment,null,/*#__PURE__*/React.createElement(Sheet,{className:\"my-sheet-container-price-wrapper\",draggable:false,isOpen:incrementalPayentsPane,onClose:()=>setIncrementalPaymentsOpen(false)},/*#__PURE__*/React.createElement(Sheet.Container,{className:\"my-sheet-container-price\"},/*#__PURE__*/React.createElement(Sheet.Header,null,/*#__PURE__*/React.createElement(\"div\",{style:{margin:\"12.5px\"},className:\"centered-both-ways\"},/*#__PURE__*/React.createElement(Button,{onClick:()=>setIncrementalPaymentsOpen(false),className:\"btn-square-danger\",outline:true,color:\"danger-2x\",style:{width:\"100%\"}},\"Exit/Close This Pane\"))),/*#__PURE__*/React.createElement(Sheet.Content,null,/*#__PURE__*/React.createElement(\"div\",{id:\"breadcrumb-full-payment\"},/*#__PURE__*/React.createElement(Breadcrumb,{id:\"breadcrumb-full-payment\",parent:\"Make FULL Payment\",title:currentApplication!==null?\"Make a full deposit/payment to this contractor (\".concat(currentApplication.applicantName,\")\"):\"Loading Data...\"}),/*#__PURE__*/React.createElement(Container,{className:\"container-pane-full-payment\",fluid:true},currentApplication!==null?/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{sm:\"12\",md:\"12\",lg:\"12\",xl:\"12\"},/*#__PURE__*/React.createElement(Card,{className:\"card-payment-entirely-halved\"},/*#__PURE__*/React.createElement(CardHeader,null,/*#__PURE__*/React.createElement(\"h3\",{className:\"make-full-payment-header\"},\"Set-up 'recurring' payments or payment's that'll automatically be made with your 'primary' card on a recurring/frequent basis..\"),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(\"p\",{className:\"lead\"},\"This is essentially an 'escrow' type service with \",/*#__PURE__*/React.createElement(\"em\",{style:{textDecorationLine:\"underline\"}},\"stripe\"),\" that deposit's funds PRIOR to a hacker starting a contract to assure both \",process.env.REACT_APP_APPLICATION_NAME,\" AND the hacker themselves that once the \",/*#__PURE__*/React.createElement(\"strong\",{style:{color:\"#7366ff\",textDecorationLine:\"underline\"}},\"contract is successfully completed\"),\", the funds will be released.. With this specific payment method you will charged the agreed amount on a \",/*#__PURE__*/React.createElement(\"strong\",{style:{color:\"#7366ff\",textDecorationLine:\"underline\"}},\"'recurring basis'\"),\" which means if you choose a saturday to make a $74.99 payment, \",/*#__PURE__*/React.createElement(\"strong\",{style:{color:\"#7366ff\",textDecorationLine:\"underline\"}},\"every\"),\" saturday this payment will be automatically made \",/*#__PURE__*/React.createElement(\"strong\",{style:{color:\"#7366ff\",textDecorationLine:\"underline\"}},\"UNTIL CANCELLED\"),\" or the peak/full payment is achieved\")),/*#__PURE__*/React.createElement(CardBody,null,/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(\"div\",{className:\"centered-both-ways\"},/*#__PURE__*/React.createElement(Col,{className:\"dotted-border-col-two-custom\",sm:\"12\",md:\"6\",lg:\"6\",xl:\"6\"},/*#__PURE__*/React.createElement(\"h3\",null,\"Please select a recurring payment value until the value of \",/*#__PURE__*/React.createElement(\"strong\",{style:{color:\"darkred\",textDecorationLine:\"underline\"}},\"$\",Number(currentApplication.amountOfMoneyUponCompletion).toFixed(2),\" (USD-$)\"),\" is completely paid off finalizing the balance between you and \",/*#__PURE__*/React.createElement(\"strong\",{style:{color:\"darkred\",textDecorationLine:\"underline\"}},currentApplication.applicantName),\".\"),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(\"div\",{className:\"center-slider-adjustment-bar\"},/*#__PURE__*/React.createElement(\"p\",{className:\"lead\"},\"Please drag the marker to the appropriate position marking 'how much' you'd like to pay on this overall payment..\"),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(Slider,{value:percentageToBePaid,startPoint:0,onAfterChange:onAfterChange,onChange:handleSliderValueChange,marks:marks}),/*#__PURE__*/React.createElement(\"div\",{className:\"centered-both-ways\"},/*#__PURE__*/React.createElement(\"h3\",{className:\"current-selected-cost\"},calculateCurrentSelectedCost(percentageToBePaid))))),/*#__PURE__*/React.createElement(Col,{className:\"dotted-border-col-two-custom\",sm:\"12\",md:\"6\",lg:\"6\",xl:\"6\"},/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(Label,{htmlFor:\"dayslength\"},\"Select how many DAYS (from selected date in calendar) to keep this payment active - once a week payment will be made (\",/*#__PURE__*/React.createElement(\"strong\",{style:{color:\"#7366ff\"}},\"will iterate through dates marking ONLY ONE DAY per week to make this payment\"),\")\"),/*#__PURE__*/React.createElement(Input,{pattern:\"[0-9]*\",value:daysLength,onChange:e=>setDaysLength(e.target.value),className:\"form-control\",type:\"number\",placeholder:\"Enter how many day's you'd like to make this payment for (Ex. 30 days, 45 days, etc... ONCE a week regardless of selection)\"}),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(Label,{htmlFor:\"dayslength\"},\"Day of week you'd like to make this recurring payment (payment will be billed EVERY choosen day until day count ends or total cost is paid per contract)\"),/*#__PURE__*/React.createElement(Select,{classNamePrefix:\"put-above\",className:\"put-above\",value:selectedDayOfWeek,onChange:selectedOption=>setSelectedDayOfWeekState(selectedOption),options:daysOfWeekOptionsSelection})),/*#__PURE__*/React.createElement(\"div\",{className:\"centered-both-ways\"},/*#__PURE__*/React.createElement(Calendar,{date:dateInterval,onChange:date=>handleSelectionDateChange(date),shownDate:new Date(),className:\"custom-date-range-picker\",showMonthAndYearPickers:false,staticRanges:[],direction:\"horizontal\",showMonthArrow:true,months:2,showDateDisplay:false,inputRanges:[],rangeColors:[\"#f73164\",\"#a927f9\",\"#f73164\",\"#a927f9\",\"#f73164\",\"#a927f9\"]}))))),/*#__PURE__*/React.createElement(Row,{style:{marginTop:\"22.5px\",marginBottom:\"22.5px\"}},/*#__PURE__*/React.createElement(Col,{sm:\"12\",md:\"6\",lg:\"6\",xl:\"6\"},/*#__PURE__*/React.createElement(\"h3\",null,\"Select a card that you wish to make this payment with..\"),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(ListGroup,null,typeof cards!==\"undefined\"&&cards.length>0?cards.slice(0,3).map((payment,idx)=>{return/*#__PURE__*/React.createElement(Fragment,{key:idx},/*#__PURE__*/React.createElement(ListGroupItem,{onClick:()=>setActiveCard(payment),className:activeCard!==null&&activeCard.id===payment.id?\"list-group-item-action listitem-pricing-card flex-column align-items-start active active-picked\":\"list-group-item-action listitem-pricing-card flex-column align-items-start\"},/*#__PURE__*/React.createElement(\"div\",{className:\"d-flex w-100 justify-content-between\"},/*#__PURE__*/React.createElement(\"h5\",{className:\"mb-1\"},\"ID: \",payment.id.slice(0,7),\"...\"),/*#__PURE__*/React.createElement(\"small\",{style:{color:\"#f73164\"},className:\"text-secondary\"},\"Added/Created: \",moment(payment.created*1000).fromNow())),/*#__PURE__*/React.createElement(\"p\",{className:\"mb-1\",style:{color:\"#51bb25\",fontWeight:\"bold\"}},\"**** **** **** \".concat(payment.card.last4)),/*#__PURE__*/React.createElement(\"small\",{className:\"text-muted\"},\"Exp. \".concat(payment.card.exp_month,\"/\").concat(payment.card.exp_year),\" \",/*#__PURE__*/React.createElement(\"small\",{className:\"float-right\"},\"Card Type: \",payment.card.brand))));}):/*#__PURE__*/React.createElement(Fragment,null,/*#__PURE__*/React.createElement(\"h3\",{style:{color:\"blue\",textDecorationLine:\"underline\"}},\"You don't have any availiable cards on file..\"),/*#__PURE__*/React.createElement(\"div\",{style:{padding:\"27.5px\"},className:\"centered-both-ways\"},/*#__PURE__*/React.createElement(\"img\",{src:require(\"../../../../../../../../../assets/images/credit-cards.jpg\"),className:\"credit-cards-placeholder\"}))))),/*#__PURE__*/React.createElement(Col,{sm:\"12\",md:\"6\",lg:\"6\",xl:\"6\"},/*#__PURE__*/React.createElement(\"h3\",null,\"These are your selected payment dates for recurring payments (typically every friday at midnight)\"),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(ListGroup,null,typeof paydays!==\"undefined\"&&paydays.length>0?paydays.map((payday,index)=>{return/*#__PURE__*/React.createElement(ListGroupItem,{key:index},\"Automatic payment on: \",/*#__PURE__*/React.createElement(\"strong\",{style:{color:\"#7366ff\",textDecorationLine:\"underline\"}},moment(payday).format(\"MM-DD-YYYY\"),\" (MM/DD/YYYY)\"));}):/*#__PURE__*/React.createElement(Fragment,null,/*#__PURE__*/React.createElement(ReactPlayer,{playing:true,loop:true,muted:true,width:\"100%\",className:\"no-dates-selected-video-payment\",wrapper:\"div\",url:require(\"../../../../../../../../../assets/video/nothing-selected-pending.mp4\")}))))),/*#__PURE__*/React.createElement(Button,{onClick:()=>{handlePaymentInitialization();},className:\"btn-square-success\",outline:true,color:\"success-2x\",style:{width:\"100%\",marginTop:\"17.5px\"}},\"Make Payment (will need to double confirm)\")),/*#__PURE__*/React.createElement(CardFooter,null,/*#__PURE__*/React.createElement(\"h3\",null,\"If you're confused or would like more information on \",/*#__PURE__*/React.createElement(Link,{className:\"payment-linky\",to:\"/frequently/asked/questions/main/employer\"},\"escrow services\"),\", you can find a plethorea of information between the \",/*#__PURE__*/React.createElement(\"a\",{target:\"_blank\",href:\"https://en.wikipedia.org/wiki/Escrow\"},\"wiki page\"),\" or by clicking \",/*#__PURE__*/React.createElement(Link,{className:\"payment-linky\",to:\"/frequently/asked/questions/main/employer\"},\"here\"),\" to see exactly how \",/*#__PURE__*/React.createElement(\"strong\",{style:{textDecorationLine:\"underline\"}},\"WE\"),\" implement escrow type services!\"))))):/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(SkeletonTheme,{baseColor:\"#c9c9c9\",highlightColor:\"#444\"},/*#__PURE__*/React.createElement(\"p\",null,/*#__PURE__*/React.createElement(Skeleton,{count:45})))))))),/*#__PURE__*/React.createElement(Sheet.Backdrop,null)));};const mapStateToProps=state=>{return{userData:state.auth.data};};export default connect(mapStateToProps,{})(RecurringPaymentPaneHelper);","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/src/components/dashboard/jobManagement/employers/manageHiredHackers/paymentRelated/mainSelection/sheetHelpers/recurring/recurringPaymentPane.js"],"names":["React","Fragment","useState","useEffect","Breadcrumb","Container","Row","Col","Card","CardBody","CardFooter","CardHeader","FormGroup","ListGroup","ListGroupItem","Label","Input","Button","axios","Link","Sheet","connect","NotificationManager","Skeleton","SkeletonTheme","confirmAlert","moment","Slider","Calendar","ReactPlayer","Select","daysOfWeekOptionsSelection","value","label","RecurringPaymentPaneHelper","incrementalPayentsPane","setIncrementalPaymentsOpen","userData","setCurrentApplication","listing","currentlyDue","setCurrentlyDue","currentApplication","cards","setCards","activeCard","setActiveCard","percentageToBePaid","setPercentageToBePaid","interval","setInterval","cost","setCost","dateInterval","setDateInterval","Date","selectedDayOfWeek","setSelectedDayOfWeekState","paydays","setPaydayData","daysLength","setDaysLength","marks","setMarks","style","color","configuration","params","id","uniqueId","get","process","env","REACT_APP_BASE_URL","then","res","data","message","console","log","catch","err","handlePaymentInitialization","title","toFixed","buttons","onClick","config","userID","paydayEachAmount","Number","hackerID","applicantId","publicCompanyName","jobID","generatedID","daysToPay","post","employer","findIndexJobUpdated","activeHiredHackers","findIndex","x","promises","foundRelated","index","paymentHistory","length","payment","recurring","price","completedPayment","phases","items","push","Promise","resolve","reject","priceID","priceData","newPriceObj","paymentData","all","passedData","success","REACT_APP_APPLICATION_NAME","error","warning","checkLoadedAndUpdateNumber","totalCost","Math","round","amountOfMoneyUponCompletion","perc","parseFloat","converted","clearInterval","intervalId","handleSliderValueChange","percentage","onAfterChange","calculateCurrentSelectedCost","handleSelectionDateChange","dateee","startDate","toISOString","split","recurringDatesArray","daysFromNow","setDate","getDate","startDateModified","d","dayOfWeek","getDay","margin","width","applicantName","textDecorationLine","e","target","selectedOption","date","marginTop","marginBottom","slice","map","idx","created","fromNow","fontWeight","card","last4","exp_month","exp_year","brand","padding","require","payday","format","mapStateToProps","state","auth"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,QAA1B,CAAoCC,SAApC,KAAqD,OAArD,CACA,MAAO,cAAP,CACA,MAAOC,CAAAA,UAAP,KAAuB,8CAAvB,CACA,OAASC,SAAT,CAAoBC,GAApB,CAAyBC,GAAzB,CAA8BC,IAA9B,CAAoCC,QAApC,CAA8CC,UAA9C,CAA0DC,UAA1D,CAAsEC,SAAtE,CAAiFC,SAAjF,CAA4FC,aAA5F,CAA2GC,KAA3G,CAAkHC,KAAlH,CAAyHC,MAAzH,KAAuI,YAAvI,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,IAAT,KAAqB,kBAArB,CACA,MAAOC,CAAAA,KAAP,KAAkB,mBAAlB,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,OAASC,mBAAT,KAAoC,qBAApC,CACA,MAAOC,CAAAA,QAAP,EAAmBC,aAAnB,KAAwC,wBAAxC,CACA,OAASC,YAAT,KAA6B,qBAA7B,CACA,MAAOC,CAAAA,MAAP,KAAmB,QAAnB,CACA,MAAOC,CAAAA,MAAP,KAAmB,WAAnB,CACA,OAASC,QAAT,KAAyB,kBAAzB,CACA,MAAOC,CAAAA,WAAP,KAAwB,cAAxB,CACA,MAAOC,CAAAA,MAAP,KAAmB,cAAnB,CAGA,KAAMC,CAAAA,0BAA0B,CAAG,CAC/B,CAAEC,KAAK,CAAE,CAAT,CAAYC,KAAK,CAAE,kBAAnB,CAD+B,CAE/B,CAAED,KAAK,CAAE,CAAT,CAAYC,KAAK,CAAE,kBAAnB,CAF+B,CAG/B,CAAED,KAAK,CAAE,CAAT,CAAYC,KAAK,CAAE,mBAAnB,CAH+B,CAI/B,CAAED,KAAK,CAAE,CAAT,CAAYC,KAAK,CAAE,qBAAnB,CAJ+B,CAK/B,CAAED,KAAK,CAAE,CAAT,CAAYC,KAAK,CAAE,oBAAnB,CAL+B,CAM/B,CAAED,KAAK,CAAE,CAAT,CAAYC,KAAK,CAAE,kBAAnB,CAN+B,CAO/B,CAAED,KAAK,CAAE,CAAT,CAAYC,KAAK,CAAE,oBAAnB,CAP+B,CAAnC,CAWA,KAAMC,CAAAA,0BAA0B,CAAG,MAAyJ,IAAxJ,CAAEC,sBAAF,CAA0BC,0BAA1B,CAAsDC,QAAtD,CAAgEC,qBAAhE,CAAuFC,OAAvF,CAAgGC,YAAhG,CAA8GC,eAA9G,CAA+HC,kBAA/H,CAAwJ,MAExL,KAAM,CAAEC,KAAF,CAASC,QAAT,EAAsB1C,QAAQ,CAAC,EAAD,CAApC,CACA,KAAM,CAAE2C,UAAF,CAAcC,aAAd,EAAgC5C,QAAQ,CAAC,IAAD,CAA9C,CACA,KAAM,CAAE6C,kBAAF,CAAsBC,qBAAtB,EAAgD9C,QAAQ,CAAC,EAAD,CAA9D,CACA,KAAM,CAAE+C,QAAF,CAAYC,WAAZ,EAA4BhD,QAAQ,CAAC,IAAD,CAA1C,CACA,KAAM,CAAEiD,IAAF,CAAQC,OAAR,EAAoBlD,QAAQ,CAAC,CAAD,CAAlC,CACA,KAAM,CAAEmD,YAAF,CAAgBC,eAAhB,EAAoCpD,QAAQ,CAAC,GAAIqD,CAAAA,IAAJ,EAAD,CAAlD,CACA,KAAM,CAAEC,iBAAF,CAAqBC,yBAArB,EAAmDvD,QAAQ,CAAC,CAAE8B,KAAK,CAAE,CAAT,CAAYC,KAAK,CAAE,kBAAnB,CAAD,CAAjE,CACA,KAAM,CAAEyB,OAAF,CAAWC,aAAX,EAA6BzD,QAAQ,CAAC,EAAD,CAA3C,CACA,KAAM,CAAE0D,UAAF,CAAcC,aAAd,EAAgC3D,QAAQ,CAAC,EAAD,CAA9C,CACA,KAAM,CAAE4D,KAAF,CAASC,QAAT,EAAsB7D,QAAQ,CAAC,CACjC,EAAG,CAAE8D,KAAK,CAAE,CAAEC,KAAK,CAAE,MAAT,CAAT,CAA4BhC,KAAK,CAAE,IAAnC,CAD8B,CAEjC,GAAI,CAAE+B,KAAK,CAAE,CAAEC,KAAK,CAAE,MAAT,CAAT,CAA4BhC,KAAK,CAAE,KAAnC,CAF6B,CAGjC,GAAI,CAAE+B,KAAK,CAAE,CAAEC,KAAK,CAAE,MAAT,CAAT,CAA4BhC,KAAK,CAAE,KAAnC,CAH6B,CAIjC,GAAI,CAAE+B,KAAK,CAAE,CAAEC,KAAK,CAAE,MAAT,CAAT,CAA4BhC,KAAK,CAAE,KAAnC,CAJ6B,CAKjC,GAAI,CAAE+B,KAAK,CAAE,CAAEC,KAAK,CAAE,MAAT,CAAT,CAA4BhC,KAAK,CAAE,KAAnC,CAL6B,CAMjC,GAAI,CAAE+B,KAAK,CAAE,CAAEC,KAAK,CAAE,MAAT,CAAT,CAA4BhC,KAAK,CAAE,KAAnC,CAN6B,CAOjC,GAAI,CAAE+B,KAAK,CAAE,CAAEC,KAAK,CAAE,MAAT,CAAT,CAA4BhC,KAAK,CAAE,KAAnC,CAP6B,CAQjC,GAAI,CAAE+B,KAAK,CAAE,CAAEC,KAAK,CAAE,MAAT,CAAT,CAA4BhC,KAAK,CAAE,KAAnC,CAR6B,CASjC,GAAI,CAAE+B,KAAK,CAAE,CAAEC,KAAK,CAAE,MAAT,CAAT,CAA4BhC,KAAK,CAAE,KAAnC,CAT6B,CAUjC,GAAI,CAAE+B,KAAK,CAAE,CAAEC,KAAK,CAAE,MAAT,CAAT,CAA4BhC,KAAK,CAAE,KAAnC,CAV6B,CAWjC,IAAK,CAAE+B,KAAK,CAAE,CAAEC,KAAK,CAAE,MAAT,CAAT,CAA4BhC,KAAK,CAAE,MAAnC,CAX4B,CAAD,CAApC,CAcA9B,SAAS,CAAC,IAAM,CACZ,KAAM+D,CAAAA,aAAa,CAAG,CAClBC,MAAM,CAAE,CACJC,EAAE,CAAE/B,QAAQ,CAACgC,QADT,CADU,CAAtB,CAKAnD,KAAK,CAACoD,GAAN,WAAaC,OAAO,CAACC,GAAR,CAAYC,kBAAzB,gDAA0FP,aAA1F,EAAyGQ,IAAzG,CAA+GC,GAAD,EAAS,CACnH,GAAIA,GAAG,CAACC,IAAJ,CAASC,OAAT,GAAqB,kCAAzB,CAA6D,CACzDC,OAAO,CAACC,GAAR,CAAYJ,GAAG,CAACC,IAAhB,EAEA,KAAM,CAAEjC,KAAF,EAAYgC,GAAG,CAACC,IAAtB,CAEAhC,QAAQ,CAACD,KAAK,CAACiC,IAAP,CAAR,CACH,CAND,IAMO,CACHE,OAAO,CAACC,GAAR,CAAY,KAAZ,CAAmBJ,GAAG,CAACC,IAAvB,EACH,CACJ,CAVD,EAUGI,KAVH,CAUUC,GAAD,EAAS,CACdH,OAAO,CAACC,GAAR,CAAY,qBAAZ,CAAmCE,GAAnC,EACH,CAZD,EAaH,CAnBQ,CAmBN,EAnBM,CAAT,CAqBA,KAAMC,CAAAA,2BAA2B,CAAG,IAAM,CACtCzD,YAAY,CAAC,CACT0D,KAAK,oEAA8DhC,IAAI,CAACiC,OAAL,CAAa,CAAb,CAA9D,KADI,CAETP,OAAO,uTAFE,CAGTQ,OAAO,CAAE,CACP,CACEpD,KAAK,CAAE,oCADT,CAEEqD,OAAO,CAAE,IAAM,CACXR,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAEA,GAAIlC,UAAU,GAAK,IAAnB,CAAyB,CACrB,KAAM0C,CAAAA,MAAM,CAAG,CACXC,MAAM,CAAEnD,QAAQ,CAACgC,QADN,CAEXoB,gBAAgB,CAAEC,MAAM,CAACvC,IAAD,CAFb,CAGXwC,QAAQ,CAAEjD,kBAAkB,CAACkD,WAHlB,CAIX/C,UAJW,CAKXgD,iBAAiB,CAAEtD,OAAO,CAACsD,iBALhB,CAMXC,KAAK,CAAEpD,kBAAkB,CAACqD,WANf,CAOXC,SAAS,CAAEtC,OAPA,CAQXF,iBAAiB,CAAEA,iBAAiB,CAACxB,KAR1B,CAAf,CAWAd,KAAK,CAAC+E,IAAN,WAAc1B,OAAO,CAACC,GAAR,CAAYC,kBAA1B,iDAA4Fc,MAA5F,EAAoGb,IAApG,CAA0GC,GAAD,EAAS,CAC9G,GAAIA,GAAG,CAACC,IAAJ,CAASC,OAAT,GAAqB,mDAAzB,CAA8E,CAC1EC,OAAO,CAACC,GAAR,CAAYJ,GAAG,CAACC,IAAhB,EAEA,KAAM,CAAEsB,QAAF,EAAevB,GAAG,CAACC,IAAzB,CAEAxC,0BAA0B,CAAC,KAAD,CAA1B,CACAU,aAAa,CAAC,IAAD,CAAb,CACAE,qBAAqB,CAAC,EAAD,CAArB,CAEA,KAAMmD,CAAAA,mBAAmB,CAAGD,QAAQ,CAACE,kBAAT,CAA4BC,SAA5B,CAAuCC,CAAD,EAAOA,CAAC,CAAClC,EAAF,GAAS1B,kBAAkB,CAAC0B,EAAzE,CAA5B,CAEA,KAAMmC,CAAAA,QAAQ,CAAG,EAAjB,CACA,KAAMC,CAAAA,YAAY,CAAGN,QAAQ,CAACE,kBAAT,CAA4BD,mBAA5B,CAArB,CAEA,IAAK,GAAIM,CAAAA,KAAK,CAAG,CAAjB,CAAoBA,KAAK,CAAGD,YAAY,CAACE,cAAb,CAA4BC,MAAxD,CAAgEF,KAAK,EAArE,CAAyE,CACrE,KAAMG,CAAAA,OAAO,CAAGJ,YAAY,CAACE,cAAb,CAA4BD,KAA5B,CAAhB,CAEA,GAAIG,OAAO,CAACC,SAAR,GAAsB,IAA1B,CAAgC,CAC5B;AACA,KAAM,CAAEC,KAAF,EAAYF,OAAO,CAACG,gBAAR,CAAyBC,MAAzB,CAAgC,CAAhC,EAAmCC,KAAnC,CAAyC,CAAzC,CAAlB,CAEAV,QAAQ,CAACW,IAAT,CAAc,GAAIC,CAAAA,OAAJ,CAAY,CAACC,OAAD,CAAUC,MAAV,GAAqB,CAC3CnG,KAAK,CAACoD,GAAN,WAAaC,OAAO,CAACC,GAAR,CAAYC,kBAAzB,6BAAuE,CACnEN,MAAM,CAAE,CACJmD,OAAO,CAAER,KADL,CAD2D,CAAvE,EAIGpC,IAJH,CAISC,GAAD,EAAS,CACb,KAAM,CAAE4C,SAAF,CAAa1C,OAAb,EAAyBF,GAAG,CAACC,IAAnC,CAEA,GAAIC,OAAO,GAAK,UAAhB,CAA4B,CACxB,KAAM2C,CAAAA,WAAW,CAAG,CAChB,GAAGZ,OADa,CAEhBa,WAAW,CAAEF,SAFG,CAApB,CAIAH,OAAO,CAACI,WAAD,CAAP,CACH,CAND,IAMO,CACHJ,OAAO,CAAC,IAAD,CAAP,CACH,CACJ,CAhBD,EAgBGpC,KAhBH,CAgBUC,GAAD,EAAS,CACdoC,MAAM,CAACpC,GAAD,CAAN,CACH,CAlBD,EAmBH,CApBa,CAAd,EAqBH,CAzBD,IAyBO,CACH;AACAsB,QAAQ,CAACW,IAAT,CAAc,GAAIC,CAAAA,OAAJ,CAAaC,OAAD,EAAa,CACnCA,OAAO,CAACR,OAAD,CAAP,CACH,CAFa,CAAd,EAGH,CACJ,CAEDO,OAAO,CAACO,GAAR,CAAYnB,QAAZ,EAAsB7B,IAAtB,CAA4BiD,UAAD,EAAgB,CACvC7C,OAAO,CAACC,GAAR,CAAY,YAAZ,CAA0B4C,UAA1B,EAEArF,qBAAqB,CAAC,CAClB,GAAGkE,YADe,CAElBE,cAAc,CAAEiB,UAFE,CAAD,CAArB,CAIH,CAPD,EASArG,mBAAmB,CAACsG,OAApB,uDAA2ErD,OAAO,CAACC,GAAR,CAAYqD,0BAAvF,0IAA0P,kDAA1P,CAA8S,IAA9S,EACH,CA5DD,IA4DO,CACH/C,OAAO,CAACC,GAAR,CAAY,KAAZ,CAAmBJ,GAAG,CAACC,IAAvB,EAEAxC,0BAA0B,CAAC,KAAD,CAA1B,CACAU,aAAa,CAAC,IAAD,CAAb,CACAE,qBAAqB,CAAC,EAAD,CAArB,CAEA1B,mBAAmB,CAACwG,KAApB,CAA0B,4LAA1B,CAAwN,+DAAxN,CAAyR,IAAzR,EACH,CACJ,CAtED,EAsEG9C,KAtEH,CAsEUC,GAAD,EAAS,CACdH,OAAO,CAACC,GAAR,CAAY,cAAZ,CAA4BE,GAA5B,EAEA7C,0BAA0B,CAAC,KAAD,CAA1B,CACAU,aAAa,CAAC,IAAD,CAAb,CACAE,qBAAqB,CAAC,EAAD,CAArB,CAEA1B,mBAAmB,CAACwG,KAApB,CAA0B,4LAA1B,CAAwN,+DAAxN,CAAyR,IAAzR,EACH,CA9ED,EA+EH,CA3FD,IA2FO,CACH1F,0BAA0B,CAAC,KAAD,CAA1B,CACAU,aAAa,CAAC,IAAD,CAAb,CACAE,qBAAqB,CAAC,EAAD,CAArB,CAEA1B,mBAAmB,CAACyG,OAApB,CAA4B,iLAA5B,CAA+M,mDAA/M,CAAoQ,IAApQ,EACH,CACJ,CAvGH,CADO,CA0GP,CACE9F,KAAK,CAAE,kBADT,CAEEqD,OAAO,CAAE,IAAM,CACXR,OAAO,CAACC,GAAR,CAAY,0BAAZ,EACH,CAJH,CA1GO,CAHA,CAAD,CAAZ,CAqHH,CAtHD,CAwHA,KAAMiD,CAAAA,0BAA0B,CAAG,IAAM,CACrC,GAAItF,kBAAkB,GAAK,IAA3B,CAAiC,CAC7B,KAAMuF,CAAAA,SAAS,CAAGC,IAAI,CAACC,KAAL,CAAWzC,MAAM,CAAChD,kBAAkB,CAAC0F,2BAApB,CAAjB,CAAlB,CACA,KAAMC,CAAAA,IAAI,CAAGC,UAAU,CAACvF,kBAAD,CAAV,CAAiC,KAA9C,CACA,KAAMwF,CAAAA,SAAS,CAAGN,SAAS,CAAGI,IAA9B,CACAjF,OAAO,CAACmF,SAAD,CAAP,CAEAC,aAAa,CAACvF,QAAD,CAAb,CACH,CACJ,CATD,CAWA9C,SAAS,CAAC,IAAM,CAEZ,GAAIsI,CAAAA,UAAU,CAAGvF,WAAW,CAAC8E,0BAAD,CAA6B,IAA7B,CAA5B,CAEA9E,WAAW,CAACuF,UAAD,CAAX,CACH,CALQ,CAKN,EALM,CAAT,CAOA,KAAMC,CAAAA,uBAAuB,CAAIC,UAAD,EAAgB,CAC5C7D,OAAO,CAACC,GAAR,CAAY,oCAAZ,CAAkD4D,UAAlD,EAEA3F,qBAAqB,CAAC2F,UAAD,CAArB,CACH,CAJD,CAKA,KAAMC,CAAAA,aAAa,CAAID,UAAD,EAAgB,CAClC7D,OAAO,CAACC,GAAR,CAAY,0BAAZ,CAAwC4D,UAAxC,EAEA,KAAMV,CAAAA,SAAS,CAAGC,IAAI,CAACC,KAAL,CAAWzC,MAAM,CAAChD,kBAAkB,CAAC0F,2BAApB,CAAjB,CAAlB,CACA,KAAMC,CAAAA,IAAI,CAAGC,UAAU,CAACK,UAAD,CAAV,CAAyB,KAAtC,CACA,KAAMJ,CAAAA,SAAS,CAAGN,SAAS,CAAGI,IAA9B,CACAjF,OAAO,CAACmF,SAAD,CAAP,CACH,CAPD,CAQA,KAAMM,CAAAA,4BAA4B,CAAIF,UAAD,EAAgB,CACjD,KAAMV,CAAAA,SAAS,CAAGC,IAAI,CAACC,KAAL,CAAWzC,MAAM,CAAChD,kBAAkB,CAAC0F,2BAApB,CAAjB,CAAlB,CACA,KAAMC,CAAAA,IAAI,CAAGC,UAAU,CAACK,UAAD,CAAV,CAAyB,KAAtC,CACA,KAAMJ,CAAAA,SAAS,CAAGN,SAAS,CAAGI,IAA9B,CACA,iBAAWE,SAAS,CAACnD,OAAV,CAAkB,CAAlB,CAAX,wDACH,CALD,CAMA,KAAM0D,CAAAA,yBAAyB,CAAIC,MAAD,EAAY,CAE1C,KAAMC,CAAAA,SAAS,CAAG,GAAIzF,CAAAA,IAAJ,CAASwF,MAAT,EAAiBE,WAAjB,GAA+BC,KAA/B,CAAqC,GAArC,EAA0C,CAA1C,CAAlB,CAEA,KAAMC,CAAAA,mBAAmB,CAAG,EAA5B,CAEA,KAAMC,CAAAA,WAAW,CAAG,GAAI7F,CAAAA,IAAJ,CAAS,GAAIA,CAAAA,IAAJ,CAASwF,MAAT,EAAiBM,OAAjB,CAAyB,GAAI9F,CAAAA,IAAJ,CAASwF,MAAT,EAAiBO,OAAjB,GAA6B5D,MAAM,CAAC9B,UAAD,CAA5D,CAAT,CAApB,CACA,KAAM2F,CAAAA,iBAAiB,CAAG,GAAIhG,CAAAA,IAAJ,CAAS,GAAIA,CAAAA,IAAJ,CAASyF,SAAT,EAAoBK,OAApB,CAA4B,GAAI9F,CAAAA,IAAJ,CAASyF,SAAT,EAAoBM,OAApB,GAAgC,CAA5D,CAAT,CAA1B,CAEA;AAEA,IAAK,GAAIE,CAAAA,CAAC,CAAGD,iBAAb,CAAgCC,CAAC,EAAI,GAAIjG,CAAAA,IAAJ,CAAS6F,WAAT,CAArC,CAA4DI,CAAC,CAACH,OAAF,CAAUG,CAAC,CAACF,OAAF,GAAc,CAAxB,CAA5D,CAAwF,CACpF,KAAMG,CAAAA,SAAS,CAAG,GAAIlG,CAAAA,IAAJ,CAASiG,CAAT,EAAYE,MAAZ,EAAlB,CAEA,GAAID,SAAS,GAAKjG,iBAAiB,CAACxB,KAApC,CAA2C,CACvCmH,mBAAmB,CAACjC,IAApB,CAAyB,GAAI3D,CAAAA,IAAJ,CAASiG,CAAT,CAAzB,EACH,CACJ,CAED7F,aAAa,CAACwF,mBAAD,CAAb,CACH,CApBD,CAqBA,mBACI,oBAAC,QAAD,mBACI,oBAAC,KAAD,EAAO,SAAS,CAAE,kCAAlB,CAAsD,SAAS,CAAE,KAAjE,CAAwE,MAAM,CAAEhH,sBAAhF,CAAwG,OAAO,CAAE,IAAMC,0BAA0B,CAAC,KAAD,CAAjJ,eACI,oBAAC,KAAD,CAAO,SAAP,EAAiB,SAAS,CAAE,0BAA5B,eACI,oBAAC,KAAD,CAAO,MAAP,mBACI,2BAAK,KAAK,CAAE,CAAEuH,MAAM,CAAE,QAAV,CAAZ,CAAkC,SAAS,CAAC,oBAA5C,eACI,oBAAC,MAAD,EAAQ,OAAO,CAAE,IAAMvH,0BAA0B,CAAC,KAAD,CAAjD,CAA0D,SAAS,CAAE,mBAArE,CAA0F,OAAO,KAAjG,CAAkG,KAAK,CAAE,WAAzG,CAAsH,KAAK,CAAE,CAAEwH,KAAK,CAAE,MAAT,CAA7H,yBADJ,CADJ,CADJ,cAMI,oBAAC,KAAD,CAAO,OAAP,mBACI,2BAAK,EAAE,CAAE,yBAAT,eACI,oBAAC,UAAD,EAAY,EAAE,CAAE,yBAAhB,CAA2C,MAAM,CAAE,mBAAnD,CAAwE,KAAK,CAAElH,kBAAkB,GAAK,IAAvB,2DAAiFA,kBAAkB,CAACmH,aAApG,MAAuH,iBAAtM,EADJ,cAEI,oBAAC,SAAD,EAAW,SAAS,CAAC,6BAArB,CAAmD,KAAK,CAAE,IAA1D,EACKnH,kBAAkB,GAAK,IAAvB,cAA8B,oBAAC,GAAD,mBAC3B,oBAAC,GAAD,EAAK,EAAE,CAAC,IAAR,CAAa,EAAE,CAAC,IAAhB,CAAqB,EAAE,CAAC,IAAxB,CAA6B,EAAE,CAAC,IAAhC,eACI,oBAAC,IAAD,EAAM,SAAS,CAAC,8BAAhB,eACI,oBAAC,UAAD,mBACI,0BAAI,SAAS,CAAC,0BAAd,oIADJ,cAEI,8BAFJ,cAGI,yBAAG,SAAS,CAAC,MAAb,oEAAsE,0BAAI,KAAK,CAAE,CAAEoH,kBAAkB,CAAE,WAAtB,CAAX,WAAtE,+EAA6MvF,OAAO,CAACC,GAAR,CAAYqD,0BAAzN,0DAA6R,8BAAQ,KAAK,CAAE,CAAE5D,KAAK,CAAE,SAAT,CAAoB6F,kBAAkB,CAAE,WAAxC,CAAf,uCAA7R,0HAAuf,8BAAQ,KAAK,CAAE,CAAE7F,KAAK,CAAE,SAAT,CAAoB6F,kBAAkB,CAAE,WAAxC,CAAf,sBAAvf,iFAAupB,8BAAQ,KAAK,CAAE,CAAE7F,KAAK,CAAE,SAAT,CAAoB6F,kBAAkB,CAAE,WAAxC,CAAf,UAAvpB,mEAA6xB,8BAAQ,KAAK,CAAE,CAAE7F,KAAK,CAAE,SAAT,CAAoB6F,kBAAkB,CAAE,WAAxC,CAAf,oBAA7xB,yCAHJ,CADJ,cAMI,oBAAC,QAAD,mBACI,oBAAC,GAAD,mBACI,2BAAK,SAAS,CAAC,oBAAf,eACI,oBAAC,GAAD,EAAK,SAAS,CAAC,8BAAf,CAA8C,EAAE,CAAC,IAAjD,CAAsD,EAAE,CAAC,GAAzD,CAA6D,EAAE,CAAC,GAAhE,CAAoE,EAAE,CAAC,GAAvE,eACI,yGAA+D,8BAAQ,KAAK,CAAE,CAAE7F,KAAK,CAAE,SAAT,CAAoB6F,kBAAkB,CAAE,WAAxC,CAAf,MAAwEpE,MAAM,CAAChD,kBAAkB,CAAC0F,2BAApB,CAAN,CAAuDhD,OAAvD,CAA+D,CAA/D,CAAxE,YAA/D,gFAAyR,8BAAQ,KAAK,CAAE,CAAEnB,KAAK,CAAE,SAAT,CAAoB6F,kBAAkB,CAAE,WAAxC,CAAf,EAAuEpH,kBAAkB,CAACmH,aAA1F,CAAzR,KADJ,cAEI,8BAFJ,cAGI,2BAAK,SAAS,CAAC,8BAAf,eACI,yBAAG,SAAS,CAAC,MAAb,sHADJ,cAEI,8BAFJ,cAGI,oBAAC,MAAD,EAAQ,KAAK,CAAE9G,kBAAf,CAAmC,UAAU,CAAE,CAA/C,CAAkD,aAAa,CAAE6F,aAAjE,CAAgF,QAAQ,CAAEF,uBAA1F,CAAmH,KAAK,CAAE5E,KAA1H,EAHJ,cAII,2BAAK,SAAS,CAAC,oBAAf,eACI,0BAAI,SAAS,CAAC,uBAAd,EAAuC+E,4BAA4B,CAAC9F,kBAAD,CAAnE,CADJ,CAJJ,CAHJ,CADJ,cAaI,oBAAC,GAAD,EAAK,SAAS,CAAC,8BAAf,CAA8C,EAAE,CAAC,IAAjD,CAAsD,EAAE,CAAC,GAAzD,CAA6D,EAAE,CAAC,GAAhE,CAAoE,EAAE,CAAC,GAAvE,eACI,oBAAC,SAAD,mBACI,oBAAC,KAAD,EAAO,OAAO,CAAC,YAAf,wIAAkJ,8BAAQ,KAAK,CAAE,CAAEkB,KAAK,CAAE,SAAT,CAAf,kFAAlJ,KADJ,cAEI,oBAAC,KAAD,EAAO,OAAO,CAAC,QAAf,CAAwB,KAAK,CAAEL,UAA/B,CAA2C,QAAQ,CAAGmG,CAAD,EAAOlG,aAAa,CAACkG,CAAC,CAACC,MAAF,CAAShI,KAAV,CAAzE,CAA2F,SAAS,CAAC,cAArG,CAAoH,IAAI,CAAC,QAAzH,CAAkI,WAAW,CAAC,6HAA9I,EAFJ,cAGI,8BAHJ,cAII,oBAAC,KAAD,EAAO,OAAO,CAAC,YAAf,6JAJJ,cAKI,oBAAC,MAAD,EACI,eAAe,CAAE,WADrB,CAEI,SAAS,CAAE,WAFf,CAGI,KAAK,CAAEwB,iBAHX,CAII,QAAQ,CAAGyG,cAAD,EAAoBxG,yBAAyB,CAACwG,cAAD,CAJ3D,CAKI,OAAO,CAAElI,0BALb,EALJ,CADJ,cAcI,2BAAK,SAAS,CAAC,oBAAf,eACI,oBAAC,QAAD,EACI,IAAI,CAAEsB,YADV,CAEI,QAAQ,CAAG6G,IAAD,EAAUpB,yBAAyB,CAACoB,IAAD,CAFjD,CAGI,SAAS,CAAE,GAAI3G,CAAAA,IAAJ,EAHf,CAII,SAAS,CAAE,0BAJf,CAKI,uBAAuB,CAAE,KAL7B,CAMI,YAAY,CAAE,EANlB,CAOI,SAAS,CAAE,YAPf,CAQI,cAAc,CAAE,IARpB,CASI,MAAM,CAAE,CATZ,CAUI,eAAe,CAAE,KAVrB,CAWI,WAAW,CAAE,EAXjB,CAYI,WAAW,CAAE,CAAC,SAAD,CAAY,SAAZ,CAAuB,SAAvB,CAAkC,SAAlC,CAA6C,SAA7C,CAAwD,SAAxD,CAZjB,EADJ,CAdJ,CAbJ,CADJ,CADJ,cAgDI,oBAAC,GAAD,EAAK,KAAK,CAAE,CAAE4G,SAAS,CAAE,QAAb,CAAuBC,YAAY,CAAE,QAArC,CAAZ,eACI,oBAAC,GAAD,EAAK,EAAE,CAAC,IAAR,CAAa,EAAE,CAAC,GAAhB,CAAoB,EAAE,CAAC,GAAvB,CAA2B,EAAE,CAAC,GAA9B,eACI,wFADJ,cAEI,8BAFJ,cAGI,oBAAC,SAAD,MACK,MAAOzH,CAAAA,KAAP,GAAiB,WAAjB,EAAgCA,KAAK,CAACgE,MAAN,CAAe,CAA/C,CAAmDhE,KAAK,CAAC0H,KAAN,CAAY,CAAZ,CAAe,CAAf,EAAkBC,GAAlB,CAAsB,CAAC1D,OAAD,CAAU2D,GAAV,GAAkB,CACxF,mBACI,oBAAC,QAAD,EAAU,GAAG,CAAEA,GAAf,eACI,oBAAC,aAAD,EAAe,OAAO,CAAE,IAAMzH,aAAa,CAAC8D,OAAD,CAA3C,CAAsD,SAAS,CAAE/D,UAAU,GAAK,IAAf,EAAuBA,UAAU,CAACuB,EAAX,GAAkBwC,OAAO,CAACxC,EAAjD,CAAsD,iGAAtD,CAA0J,4EAA3N,eACI,2BAAK,SAAS,CAAC,sCAAf,eACI,0BAAI,SAAS,CAAC,MAAd,SAA0BwC,OAAO,CAACxC,EAAR,CAAWiG,KAAX,CAAiB,CAAjB,CAAoB,CAApB,CAA1B,OADJ,cAC6D,6BAAO,KAAK,CAAE,CAAEpG,KAAK,CAAE,SAAT,CAAd,CAAoC,SAAS,CAAC,gBAA9C,oBAA+EvC,MAAM,CAACkF,OAAO,CAAC4D,OAAR,CAAkB,IAAnB,CAAN,CAA+BC,OAA/B,EAA/E,CAD7D,CADJ,cAII,yBAAG,SAAS,CAAC,MAAb,CAAoB,KAAK,CAAE,CAAExG,KAAK,CAAE,SAAT,CAAoByG,UAAU,CAAE,MAAhC,CAA3B,2BAAwF9D,OAAO,CAAC+D,IAAR,CAAaC,KAArG,EAJJ,cAKI,6BAAO,SAAS,CAAC,YAAjB,iBAAuChE,OAAO,CAAC+D,IAAR,CAAaE,SAApD,aAAiEjE,OAAO,CAAC+D,IAAR,CAAaG,QAA9E,mBAA0F,6BAAO,SAAS,CAAC,aAAjB,gBAA2ClE,OAAO,CAAC+D,IAAR,CAAaI,KAAxD,CAA1F,CALJ,CADJ,CADJ,CAWH,CAZmD,CAAnD,cAYI,oBAAC,QAAD,mBACD,0BAAI,KAAK,CAAE,CAAE9G,KAAK,CAAE,MAAT,CAAiB6F,kBAAkB,CAAE,WAArC,CAAX,kDADC,cAED,2BAAK,KAAK,CAAE,CAAEkB,OAAO,CAAE,QAAX,CAAZ,CAAmC,SAAS,CAAC,oBAA7C,eACI,2BAAK,GAAG,CAAEC,OAAO,CAAC,2DAAD,CAAjB,CAAgF,SAAS,CAAE,0BAA3F,EADJ,CAFC,CAbT,CAHJ,CADJ,cAyBI,oBAAC,GAAD,EAAK,EAAE,CAAC,IAAR,CAAa,EAAE,CAAC,GAAhB,CAAoB,EAAE,CAAC,GAAvB,CAA2B,EAAE,CAAC,GAA9B,eACI,kIADJ,cAEI,8BAFJ,cAGI,oBAAC,SAAD,MACK,MAAOvH,CAAAA,OAAP,GAAmB,WAAnB,EAAkCA,OAAO,CAACiD,MAAR,CAAiB,CAAnD,CAAuDjD,OAAO,CAAC4G,GAAR,CAAY,CAACY,MAAD,CAASzE,KAAT,GAAmB,CACnF,mBACI,oBAAC,aAAD,EAAe,GAAG,CAAEA,KAApB,wCAAiD,8BAAQ,KAAK,CAAE,CAAExC,KAAK,CAAE,SAAT,CAAoB6F,kBAAkB,CAAE,WAAxC,CAAf,EAAuEpI,MAAM,CAACwJ,MAAD,CAAN,CAAeC,MAAf,CAAsB,YAAtB,CAAvE,iBAAjD,CADJ,CAGH,CAJuD,CAAvD,cAII,oBAAC,QAAD,mBACD,oBAAC,WAAD,EAAa,OAAO,CAAE,IAAtB,CAA4B,IAAI,CAAE,IAAlC,CAAwC,KAAK,CAAE,IAA/C,CAAqD,KAAK,CAAE,MAA5D,CAAoE,SAAS,CAAE,iCAA/E,CAAkH,OAAO,CAAE,KAA3H,CAAkI,GAAG,CAAEF,OAAO,CAAC,sEAAD,CAA9I,EADC,CALT,CAHJ,CAzBJ,CAhDJ,cAuFI,oBAAC,MAAD,EAAQ,OAAO,CAAE,IAAM,CACnB/F,2BAA2B,GAC9B,CAFD,CAEG,SAAS,CAAE,oBAFd,CAEoC,OAAO,KAF3C,CAE4C,KAAK,CAAE,YAFnD,CAEiE,KAAK,CAAE,CAAE0E,KAAK,CAAE,MAAT,CAAiBO,SAAS,CAAE,QAA5B,CAFxE,+CAvFJ,CANJ,cAiGI,oBAAC,UAAD,mBACI,mGAAyD,oBAAC,IAAD,EAAM,SAAS,CAAE,eAAjB,CAAkC,EAAE,CAAE,2CAAtC,oBAAzD,uEAAwN,yBAAG,MAAM,CAAC,QAAV,CAAmB,IAAI,CAAE,sCAAzB,cAAxN,iCAAsT,oBAAC,IAAD,EAAM,SAAS,CAAE,eAAjB,CAAkC,EAAE,CAAE,2CAAtC,SAAtT,qCAAwa,8BAAQ,KAAK,CAAE,CAAEL,kBAAkB,CAAE,WAAtB,CAAf,OAAxa,oCADJ,CAjGJ,CADJ,CAD2B,CAA9B,cAwGQ,oBAAC,GAAD,mBACT,oBAAC,aAAD,EAAe,SAAS,CAAC,SAAzB,CAAmC,cAAc,CAAC,MAAlD,eACI,0CACI,oBAAC,QAAD,EAAU,KAAK,CAAE,EAAjB,EADJ,CADJ,CADS,CAzGb,CAFJ,CADJ,CANJ,CADJ,cA8HI,oBAAC,KAAD,CAAO,QAAP,MA9HJ,CADJ,CADJ,CAoIH,CApWD,CAqWA,KAAMsB,CAAAA,eAAe,CAAIC,KAAD,EAAW,CAC/B,MAAO,CACHhJ,QAAQ,CAAEgJ,KAAK,CAACC,IAAN,CAAW1G,IADlB,CAAP,CAGH,CAJD,CAKA,cAAevD,CAAAA,OAAO,CAAC+J,eAAD,CAAkB,EAAlB,CAAP,CAA+BlJ,0BAA/B,CAAf","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport \"./styles.css\";\nimport Breadcrumb from '../../../../../../../../../layout/breadcrumb'\nimport { Container, Row, Col, Card, CardBody, CardFooter, CardHeader, FormGroup, ListGroup, ListGroupItem, Label, Input, Button } from \"reactstrap\"\nimport axios from 'axios';\nimport { Link } from \"react-router-dom\";\nimport Sheet from 'react-modal-sheet';\nimport { connect } from \"react-redux\";\nimport { NotificationManager } from 'react-notifications';\nimport Skeleton, { SkeletonTheme } from 'react-loading-skeleton';\nimport { confirmAlert } from 'react-confirm-alert';\nimport moment from \"moment\";\nimport Slider from 'rc-slider';\nimport { Calendar } from 'react-date-range';\nimport ReactPlayer from \"react-player\";\nimport Select from 'react-select';\n\n\nconst daysOfWeekOptionsSelection = [\n    { value: 0, label: 'Pay Every Sunday' },\n    { value: 1, label: 'Pay Every Monday' },\n    { value: 2, label: 'Pay Every Tuesday' },\n    { value: 3, label: 'Pay Every Wednesday' },\n    { value: 4, label: 'Pay Every Thursday' },\n    { value: 5, label: 'Pay Every Friday' },\n    { value: 6, label: 'Pay Every Saturday' }\n];\n\n\nconst RecurringPaymentPaneHelper = ({ incrementalPayentsPane, setIncrementalPaymentsOpen, userData, setCurrentApplication, listing, currentlyDue, setCurrentlyDue, currentApplication }) => {\n\n    const [ cards, setCards ] = useState([]);\n    const [ activeCard, setActiveCard ] = useState(null);\n    const [ percentageToBePaid, setPercentageToBePaid ] = useState(50);\n    const [ interval, setInterval ] = useState(null);\n    const [ cost, setCost ] = useState(0);\n    const [ dateInterval, setDateInterval ] = useState(new Date());\n    const [ selectedDayOfWeek, setSelectedDayOfWeekState ] = useState({ value: 5, label: 'Pay Every Friday' });\n    const [ paydays, setPaydayData ] = useState([]);\n    const [ daysLength, setDaysLength ] = useState(30);\n    const [ marks, setMarks ] = useState({\n        0: { style: { color: \"blue\" }, label: \"0%\" },\n        10: { style: { color: \"blue\" }, label: \"10%\" },\n        20: { style: { color: \"blue\" }, label: \"20%\" },\n        30: { style: { color: \"blue\" }, label: \"30%\" },\n        40: { style: { color: \"blue\" }, label: \"40%\" },\n        50: { style: { color: \"blue\" }, label: \"50%\" },\n        60: { style: { color: \"blue\" }, label: \"60%\" },\n        70: { style: { color: \"blue\" }, label: \"70%\" },\n        80: { style: { color: \"blue\" }, label: \"80%\" },\n        90: { style: { color: \"blue\" }, label: \"90%\" },\n        100: { style: { color: \"blue\" }, label: \"100%\" }\n    });\n\n    useEffect(() => {\n        const configuration = {\n            params: {\n                id: userData.uniqueId\n            }\n        }\n        axios.get(`${process.env.REACT_APP_BASE_URL}/gather/employer/payment/methods/cards/only`, configuration).then((res) => {\n            if (res.data.message === \"Gathered employer payment cards!\") {\n                console.log(res.data);\n\n                const { cards } = res.data;\n\n                setCards(cards.data);\n            } else {\n                console.log(\"Err\", res.data);\n            }\n        }).catch((err) => {\n            console.log(\"Critical errror...:\", err);\n        })\n    }, []);\n\n    const handlePaymentInitialization = () => {\n        confirmAlert({\n            title: `Are you SURE you'd like to make a 'RECURRING-PAYMENT' of ${cost.toFixed(2)}?`,\n            message: `This is NOT completely permanent, IF the contracted hacker does NOT complete the required work or is incompetent, you have the ABILITY to RETRIEVE your un-used funds at a later point. Confirmed transfers/payments will ALSO need to be confirmed by you prior to any money being transferred throughout accounts.`,\n            buttons: [\n              {\n                label: 'Yes, Initialize Recurring Payment!',\n                onClick: () => {\n                    console.log(\"yes notify and run logic!\");\n\n                    if (activeCard !== null) {\n                        const config = {\n                            userID: userData.uniqueId,\n                            paydayEachAmount: Number(cost),\n                            hackerID: currentApplication.applicantId,\n                            activeCard,\n                            publicCompanyName: listing.publicCompanyName,\n                            jobID: currentApplication.generatedID,\n                            daysToPay: paydays,\n                            selectedDayOfWeek: selectedDayOfWeek.value\n                        };\n                \n                        axios.post(`${process.env.REACT_APP_BASE_URL}/initialize/recurring/payment/contract/start`, config).then((res) => {\n                            if (res.data.message === \"Successfully deposited funds and notified hacker!\") {\n                                console.log(res.data);\n\n                                const { employer } = res.data;\n    \n                                setIncrementalPaymentsOpen(false);\n                                setActiveCard(null);\n                                setPercentageToBePaid(50);\n\n                                const findIndexJobUpdated = employer.activeHiredHackers.findIndex((x) => x.id === currentApplication.id);\n\n                                const promises = [];\n                                const foundRelated = employer.activeHiredHackers[findIndexJobUpdated];\n\n                                for (let index = 0; index < foundRelated.paymentHistory.length; index++) {\n                                    const payment = foundRelated.paymentHistory[index];\n\n                                    if (payment.recurring === true) {\n                                        // fetch the payment data..\n                                        const { price } = payment.completedPayment.phases[0].items[0];\n\n                                        promises.push(new Promise((resolve, reject) => {\n                                            axios.get(`${process.env.REACT_APP_BASE_URL}/fetch/price/by/id/quick`, {\n                                                params: {\n                                                    priceID: price\n                                                }\n                                            }).then((res) => {\n                                                const { priceData, message } = res.data;\n\n                                                if (message === \"Success!\") {\n                                                    const newPriceObj = {\n                                                        ...payment,\n                                                        paymentData: priceData\n                                                    }\n                                                    resolve(newPriceObj);\n                                                } else {\n                                                    resolve(null);\n                                                }\n                                            }).catch((err) => {\n                                                reject(err);\n                                            })\n                                        }));\n                                    } else {\n                                        // just return the item - payment data already exists\n                                        promises.push(new Promise((resolve) => {\n                                            resolve(payment);\n                                        }));\n                                    }\n                                }\n\n                                Promise.all(promises).then((passedData) => {\n                                    console.log(\"passedData\", passedData);\n\n                                    setCurrentApplication({\n                                        ...foundRelated,\n                                        paymentHistory: passedData\n                                    });\n                                })\n    \n                                NotificationManager.success(`We've successfully deposited the funds into ${process.env.REACT_APP_APPLICATION_NAME} & your contracted hacker is now READY to go and should start working immediately (within 1 business day)! Congrats on your new hire!`, \"Succesfully processed request & notified hacker!\", 4750);\n                            } else {\n                                console.log(\"Err\", res.data);\n\n                                setIncrementalPaymentsOpen(false);\n                                setActiveCard(null);\n                                setPercentageToBePaid(50);\n    \n                                NotificationManager.error(\"An error occurred while attempting to make changes, update the hacker hiree and process overall related logic - if this problem persists, please contact support or try this action again!\", \"An error occurred while attempting to notifiy related hacker!\", 4750);\n                            }\n                        }).catch((err) => {\n                            console.log(\"Critical err\", err);\n                            \n                            setIncrementalPaymentsOpen(false);\n                            setActiveCard(null);\n                            setPercentageToBePaid(50);\n    \n                            NotificationManager.error(\"An error occurred while attempting to make changes, update the hacker hiree and process overall related logic - if this problem persists, please contact support or try this action again!\", \"An error occurred while attempting to notifiy related hacker!\", 4750);\n                        })\n                    } else {\n                        setIncrementalPaymentsOpen(false);\n                        setActiveCard(null);\n                        setPercentageToBePaid(50);\n\n                        NotificationManager.warning(\"You MUST select a 'payment card' to take the desired funds from, We will bill/draw funds from this account so check your balance prior to running this command to avoid errors!\", \"Please select a 'payment card' before continuing!\", 4750);\n                    }\n                }\n              },\n              {\n                label: 'No, Cancel/Exit.',\n                onClick: () => {\n                    console.log(\"canelled/don't run logic\");\n                }\n              }\n            ]\n        });\n    }\n\n    const checkLoadedAndUpdateNumber = () => {\n        if (currentApplication !== null) {\n            const totalCost = Math.round(Number(currentApplication.amountOfMoneyUponCompletion));\n            const perc = parseFloat(percentageToBePaid) / 100.0;\n            const converted = totalCost * perc;\n            setCost(converted);\n\n            clearInterval(interval);\n        }\n    }\n\n    useEffect(() => {\n\n        let intervalId = setInterval(checkLoadedAndUpdateNumber, 1250);\n\n        setInterval(intervalId);\n    }, [])\n\n    const handleSliderValueChange = (percentage) => {\n        console.log(\"handleSliderValueChange percentage\", percentage);\n\n        setPercentageToBePaid(percentage);\n    }\n    const onAfterChange = (percentage) => {\n        console.log(\"onAfterChange percentage\", percentage);\n\n        const totalCost = Math.round(Number(currentApplication.amountOfMoneyUponCompletion));\n        const perc = parseFloat(percentage) / 100.0;\n        const converted = totalCost * perc;\n        setCost(converted);\n    }\n    const calculateCurrentSelectedCost = (percentage) => {\n        const totalCost = Math.round(Number(currentApplication.amountOfMoneyUponCompletion));\n        const perc = parseFloat(percentage) / 100.0;\n        const converted = totalCost * perc;\n        return `$${converted.toFixed(2)} currently selected to be paid on a recurring basis`;\n    }\n    const handleSelectionDateChange = (dateee) => {\n\n        const startDate = new Date(dateee).toISOString().split('T')[0];\n\n        const recurringDatesArray = [];\n\n        const daysFromNow = new Date(new Date(dateee).setDate(new Date(dateee).getDate() + Number(daysLength)));\n        const startDateModified = new Date(new Date(startDate).setDate(new Date(startDate).getDate() + 1));\n\n        // week starts at 0 on sunday and saturday is 6\n\n        for (let d = startDateModified; d <= new Date(daysFromNow); d.setDate(d.getDate() + 1)) {\n            const dayOfWeek = new Date(d).getDay();\n\n            if (dayOfWeek === selectedDayOfWeek.value) {\n                recurringDatesArray.push(new Date(d));\n            }\n        }\n\n        setPaydayData(recurringDatesArray);\n    }\n    return (\n        <Fragment>\n            <Sheet className={\"my-sheet-container-price-wrapper\"} draggable={false} isOpen={incrementalPayentsPane} onClose={() => setIncrementalPaymentsOpen(false)}>\n                <Sheet.Container className={\"my-sheet-container-price\"}>\n                    <Sheet.Header>\n                        <div style={{ margin: \"12.5px\" }} className=\"centered-both-ways\">\n                            <Button onClick={() => setIncrementalPaymentsOpen(false)} className={\"btn-square-danger\"} outline color={\"danger-2x\"} style={{ width: \"100%\" }}>Exit/Close This Pane</Button>\n                        </div>\n                    </Sheet.Header>\n                    <Sheet.Content>\n                        <div id={\"breadcrumb-full-payment\"}>\n                            <Breadcrumb id={\"breadcrumb-full-payment\"} parent={\"Make FULL Payment\"} title={currentApplication !== null ? `Make a full deposit/payment to this contractor (${currentApplication.applicantName})` : \"Loading Data...\"} />\n                            <Container className='container-pane-full-payment' fluid={true}>\n                                {currentApplication !== null ? <Row>\n                                    <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                                        <Card className='card-payment-entirely-halved'>\n                                            <CardHeader>\n                                                <h3 className='make-full-payment-header'>Set-up 'recurring' payments or payment's that'll automatically be made with your 'primary' card on a recurring/frequent basis..</h3>\n                                                <hr />\n                                                <p className='lead'>This is essentially an 'escrow' type service with <em style={{ textDecorationLine: \"underline\" }}>stripe</em> that deposit's funds PRIOR to a hacker starting a contract to assure both {process.env.REACT_APP_APPLICATION_NAME} AND the hacker themselves that once the <strong style={{ color: \"#7366ff\", textDecorationLine: \"underline\" }}>contract is successfully completed</strong>, the funds will be released.. With this specific payment method you will charged the agreed amount on a <strong style={{ color: \"#7366ff\", textDecorationLine: \"underline\" }}>'recurring basis'</strong> which means if you choose a saturday to make a $74.99 payment, <strong style={{ color: \"#7366ff\", textDecorationLine: \"underline\" }}>every</strong> saturday this payment will be automatically made <strong style={{ color: \"#7366ff\", textDecorationLine: \"underline\" }}>UNTIL CANCELLED</strong> or the peak/full payment is achieved</p>\n                                            </CardHeader>\n                                            <CardBody>\n                                                <Row>\n                                                    <div className='centered-both-ways'>\n                                                        <Col className='dotted-border-col-two-custom' sm=\"12\" md=\"6\" lg=\"6\" xl=\"6\">\n                                                            <h3>Please select a recurring payment value until the value of <strong style={{ color: \"darkred\", textDecorationLine: \"underline\" }}>${Number(currentApplication.amountOfMoneyUponCompletion).toFixed(2)} (USD-$)</strong> is completely paid off finalizing the balance between you and <strong style={{ color: \"darkred\", textDecorationLine: \"underline\" }}>{currentApplication.applicantName}</strong>.</h3>\n                                                            <hr />\n                                                            <div className='center-slider-adjustment-bar'>\n                                                                <p className='lead'>Please drag the marker to the appropriate position marking 'how much' you'd like to pay on this overall payment..</p>\n                                                                <hr />\n                                                                <Slider value={percentageToBePaid} startPoint={0} onAfterChange={onAfterChange} onChange={handleSliderValueChange} marks={marks} />\n                                                                <div className='centered-both-ways'>\n                                                                    <h3 className='current-selected-cost'>{calculateCurrentSelectedCost(percentageToBePaid)}</h3>\n                                                                </div>\n                                                            </div>\n                                                        </Col>\n                                                        <Col className='dotted-border-col-two-custom' sm=\"12\" md=\"6\" lg=\"6\" xl=\"6\">\n                                                            <FormGroup>\n                                                                <Label htmlFor=\"dayslength\">Select how many DAYS (from selected date in calendar) to keep this payment active - once a week payment will be made (<strong style={{ color: \"#7366ff\" }}>will iterate through dates marking ONLY ONE DAY per week to make this payment</strong>)</Label>\n                                                                <Input pattern=\"[0-9]*\" value={daysLength} onChange={(e) => setDaysLength(e.target.value)} className=\"form-control\" type=\"number\" placeholder=\"Enter how many day's you'd like to make this payment for (Ex. 30 days, 45 days, etc... ONCE a week regardless of selection)\" />\n                                                                <hr />\n                                                                <Label htmlFor=\"dayslength\">Day of week you'd like to make this recurring payment (payment will be billed EVERY choosen day until day count ends or total cost is paid per contract)</Label>\n                                                                <Select\n                                                                    classNamePrefix={\"put-above\"}\n                                                                    className={\"put-above\"}\n                                                                    value={selectedDayOfWeek}\n                                                                    onChange={(selectedOption) => setSelectedDayOfWeekState(selectedOption)}\n                                                                    options={daysOfWeekOptionsSelection}\n                                                                />\n                                                            </FormGroup>\n                                                            <div className='centered-both-ways'>\n                                                                <Calendar \n                                                                    date={dateInterval}\n                                                                    onChange={(date) => handleSelectionDateChange(date)}\n                                                                    shownDate={new Date()}\n                                                                    className={\"custom-date-range-picker\"}\n                                                                    showMonthAndYearPickers={false}\n                                                                    staticRanges={[]}\n                                                                    direction={\"horizontal\"}\n                                                                    showMonthArrow={true}\n                                                                    months={2}\n                                                                    showDateDisplay={false}\n                                                                    inputRanges={[]}\n                                                                    rangeColors={[\"#f73164\", \"#a927f9\", \"#f73164\", \"#a927f9\", \"#f73164\", \"#a927f9\"]}\n                                                                />\n                                                            </div>\n                                                        </Col>\n                                                    </div>\n                                                </Row>\n                                                <Row style={{ marginTop: \"22.5px\", marginBottom: \"22.5px\" }}>\n                                                    <Col sm=\"12\" md=\"6\" lg=\"6\" xl=\"6\">\n                                                        <h3>Select a card that you wish to make this payment with..</h3>\n                                                        <hr />\n                                                        <ListGroup>\n                                                            {typeof cards !== \"undefined\" && cards.length > 0 ? cards.slice(0, 3).map((payment, idx) => {\n                                                                return (\n                                                                    <Fragment key={idx}>\n                                                                        <ListGroupItem onClick={() => setActiveCard(payment)} className={activeCard !== null && activeCard.id === payment.id ? \"list-group-item-action listitem-pricing-card flex-column align-items-start active active-picked\" : \"list-group-item-action listitem-pricing-card flex-column align-items-start\"}>\n                                                                            <div className=\"d-flex w-100 justify-content-between\">\n                                                                                <h5 className=\"mb-1\">ID: {payment.id.slice(0, 7)}...</h5><small style={{ color: \"#f73164\" }} className=\"text-secondary\">Added/Created: {moment(payment.created * 1000).fromNow()}</small>\n                                                                            </div>\n                                                                            <p className=\"mb-1\" style={{ color: \"#51bb25\", fontWeight: \"bold\" }}>{`**** **** **** ${payment.card.last4}`}</p>\n                                                                            <small className=\"text-muted\">{`Exp. ${payment.card.exp_month}/${payment.card.exp_year}`} <small className=\"float-right\">Card Type: {payment.card.brand}</small></small>\n                                                                        </ListGroupItem>\n                                                                    </Fragment>\n                                                                );\n                                                            }) : <Fragment>\n                                                                <h3 style={{ color: \"blue\", textDecorationLine: \"underline\" }}>You don't have any availiable cards on file..</h3>\n                                                                <div style={{ padding: \"27.5px\" }} className=\"centered-both-ways\">\n                                                                    <img src={require(\"../../../../../../../../../assets/images/credit-cards.jpg\")} className={\"credit-cards-placeholder\"} />\n                                                                </div>\n                                                            </Fragment>}\n                                                        </ListGroup>\n                                                    </Col>\n                                                    <Col sm=\"12\" md=\"6\" lg=\"6\" xl=\"6\">\n                                                        <h3>These are your selected payment dates for recurring payments (typically every friday at midnight)</h3>\n                                                        <hr />\n                                                        <ListGroup>\n                                                            {typeof paydays !== \"undefined\" && paydays.length > 0 ? paydays.map((payday, index) => {\n                                                                return (\n                                                                    <ListGroupItem key={index}>Automatic payment on: <strong style={{ color: \"#7366ff\", textDecorationLine: \"underline\" }}>{moment(payday).format(\"MM-DD-YYYY\")} (MM/DD/YYYY)</strong></ListGroupItem>\n                                                                );\n                                                            }) : <Fragment>\n                                                                <ReactPlayer playing={true} loop={true} muted={true} width={\"100%\"} className={\"no-dates-selected-video-payment\"} wrapper={\"div\"} url={require(\"../../../../../../../../../assets/video/nothing-selected-pending.mp4\")} />\n                                                            </Fragment>}\n                                                        </ListGroup>\n                                                    </Col>\n                                                </Row>\n                                                <Button onClick={() => {\n                                                    handlePaymentInitialization();\n                                                }} className={\"btn-square-success\"} outline color={\"success-2x\"} style={{ width: \"100%\", marginTop: \"17.5px\" }}>Make Payment (will need to double confirm)</Button>\n                                            </CardBody>\n                                            <CardFooter>\n                                                <h3>If you're confused or would like more information on <Link className={\"payment-linky\"} to={\"/frequently/asked/questions/main/employer\"}>escrow services</Link>, you can find a plethorea of information between the <a target=\"_blank\" href={\"https://en.wikipedia.org/wiki/Escrow\"}>wiki page</a> or by clicking <Link className={\"payment-linky\"} to={\"/frequently/asked/questions/main/employer\"}>here</Link> to see exactly how <strong style={{ textDecorationLine: \"underline\" }}>WE</strong> implement escrow type services!</h3>\n                                            </CardFooter>\n                                        </Card>\n                                    </Col>\n                                </Row> : <Row>\n                                <SkeletonTheme baseColor=\"#c9c9c9\" highlightColor=\"#444\">\n                                    <p>\n                                        <Skeleton count={45} />\n                                    </p>\n                                </SkeletonTheme>\n                                </Row>}\n                            </Container>\n                        </div>\n                    </Sheet.Content>\n                    </Sheet.Container>\n                <Sheet.Backdrop />\n            </Sheet>\n        </Fragment>\n    );\n}\nconst mapStateToProps = (state) => {\n    return {\n        userData: state.auth.data\n    }\n}\nexport default connect(mapStateToProps, {  })(RecurringPaymentPaneHelper);"]},"metadata":{},"sourceType":"module"}