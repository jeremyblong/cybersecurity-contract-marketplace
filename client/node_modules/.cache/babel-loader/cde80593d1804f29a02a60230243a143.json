{"ast":null,"code":"// helpers logic related to mainly to redux-hook-form\nconst HookHelpers = () => {\n  const startBidCheck = {\n    check: (setError, register) => {\n      return { ...register(\"startBid\", {\n          required: {\n            value: true,\n            message: \"You MUST enter AT least 1 characters to 10 characters\"\n          },\n          minLength: {\n            value: 1,\n            message: \"You must enter AT Least 1 characters\"\n          },\n          maxLength: {\n            value: 10,\n            message: \"You may ONLY enter 10 characters or less\"\n          },\n          onBlur: e => {// code here...\n          }\n        })\n      };\n    },\n    name: \"startBid\",\n    placeholder: \"Enter a starting bid...\",\n    type: \"number\",\n    label: \"Enter a starting bid\"\n  };\n  const reservePrice = {\n    check: (setError, register, values) => {\n      return { ...register(\"reservePrice\", {\n          required: {\n            value: true,\n            message: \"You MUST enter AT least 1 characters to 10 characters\"\n          },\n          minLength: {\n            value: 1,\n            message: \"You must enter AT Least 1 characters\"\n          },\n          maxLength: {\n            value: 10,\n            message: \"You may ONLY enter 10 characters or less\"\n          },\n          onBlur: e => {\n            // code here...\n            console.log(\"blur - e\", e); // current value from this input\n\n            const current = e.target.value; // starting bid\n\n            const startingBid = values.startBid; // compare to make sure reserve is greater than starting bid\n\n            if (Number(current) <= Number(startingBid)) {\n              setError(\"reservePrice\", {\n                type: \"manual\",\n                message: \"You MUST enter a 'reserve price' GREATER than your starting bid price!\"\n              });\n            }\n          }\n        })\n      };\n    },\n    name: \"reservePrice\",\n    placeholder: \"Enter a reserve price...\",\n    type: \"number\",\n    label: \"Enter a reserve price\"\n  };\n  const whatsIncludedInfoListing = {\n    check: (setError, register) => {\n      return { ...register(\"whatsIncluded\", {\n          required: {\n            value: true,\n            message: \"You MUST enter AT least 75 characters to 750 characters\"\n          },\n          minLength: {\n            value: 75,\n            message: \"You must enter AT Least 75 characters\"\n          },\n          maxLength: {\n            value: 750,\n            message: \"You may ONLY enter 750 characters or less\"\n          },\n          onBlur: e => {// code here...\n          }\n        })\n      };\n    },\n    name: \"whatsIncluded\",\n    placeholder: `Please elaborate on \"what's included\" in this listing such as specifics of various features/functionality such as 4 files, 1 README document, 15 pictures and a GitHub repository link...`,\n    type: \"text\",\n    label: `Enter a DETAILED description of \"what's included\" in this listing - be as SPECIFIC as possible in reference to fine details.`\n  };\n  const biddingIncrementIntervalHelper = {\n    label: \"Listing Timespan/Length - Please select a listing length (up-to a maximum of 10 days however we suggest 7 days on average)\",\n    check: (setError, register, clearErrors) => {\n      return { ...register(\"biddingIncrementInterval\", {\n          required: {\n            value: true,\n            message: \"You must select a value before proceeding\"\n          },\n          onBlur: e => {\n            // log to check whats returned\n            console.log(\"onBlur...!\", e);\n            const value = e.target.value;\n            setTimeout(() => {\n              // clear error after proper selection\n              if (typeof value !== \"undefined\" && Object.keys(value).length > 0) {\n                clearErrors(\"biddingIncrementInterval\");\n              } else {\n                // set error as nothing was selected (blank 'click-off' selection of selector)\n                setError(\"biddingIncrementInterval\", {\n                  type: \"manual\",\n                  message: \"You haven't selected a 'bidding interval' & a selection is required before proceeding\"\n                });\n              }\n            }, 50);\n          }\n        })\n      };\n    },\n    name: \"biddingIncrementInterval\",\n    placeholder: \"Select a 'bid-increment interval' (next required minimum bid from active bidders)\"\n  };\n  return {\n    startBidCheck,\n    reservePrice,\n    biddingIncrementIntervalHelper,\n    whatsIncludedInfoListing\n  };\n};\n\nexport default HookHelpers;","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/softwareHardwareExchanges/software/createListing/multiStepPages/pageThree/helpers/slideUpPane/helpers/reactHookFormRelated.js"],"names":["HookHelpers","startBidCheck","check","setError","register","required","value","message","minLength","maxLength","onBlur","e","name","placeholder","type","label","reservePrice","values","console","log","current","target","startingBid","startBid","Number","whatsIncludedInfoListing","biddingIncrementIntervalHelper","clearErrors","setTimeout","Object","keys","length"],"mappings":"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","sourcesContent":["// helpers logic related to mainly to redux-hook-form\nconst HookHelpers = () => {\n    \n    const startBidCheck = {\n        check: (setError, register) => {\n            return (\n                {...register(\"startBid\", { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 1 characters to 10 characters\"\n                }, minLength: {\n                    value: 1,\n                    message: \"You must enter AT Least 1 characters\"\n                }, maxLength: {\n                    value: 10,\n                    message: \"You may ONLY enter 10 characters or less\"\n                }, onBlur: (e) => {\n                    // code here...\n                }})}\n            )\n        },\n        name: \"startBid\",\n        placeholder: \"Enter a starting bid...\",\n        type: \"number\",\n        label: \"Enter a starting bid\"\n    };\n    const reservePrice = {\n        check: (setError, register, values) => {\n            return (\n                {...register(\"reservePrice\", { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 1 characters to 10 characters\"\n                }, minLength: {\n                    value: 1,\n                    message: \"You must enter AT Least 1 characters\"\n                }, maxLength: {\n                    value: 10,\n                    message: \"You may ONLY enter 10 characters or less\"\n                }, onBlur: (e) => {\n                    // code here...\n                    console.log(\"blur - e\", e);\n                    // current value from this input\n                    const current = e.target.value;\n                    // starting bid\n                    const startingBid = values.startBid;\n                    // compare to make sure reserve is greater than starting bid\n                    if (Number(current) <= Number(startingBid)) {\n                        setError(\"reservePrice\", {\n                            type: \"manual\",\n                            message: \"You MUST enter a 'reserve price' GREATER than your starting bid price!\",\n                        });\n                    }\n                }})}\n            )\n        },\n        name: \"reservePrice\",\n        placeholder: \"Enter a reserve price...\",\n        type: \"number\",\n        label: \"Enter a reserve price\"\n    };\n    const whatsIncludedInfoListing = {\n        check: (setError, register) => {\n            return (\n                {...register(\"whatsIncluded\", { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 75 characters to 750 characters\"\n                }, minLength: {\n                    value: 75,\n                    message: \"You must enter AT Least 75 characters\"\n                }, maxLength: {\n                    value: 750,\n                    message: \"You may ONLY enter 750 characters or less\"\n                }, onBlur: (e) => {\n                    // code here...\n                }})}\n            )\n        },\n        name: \"whatsIncluded\",\n        placeholder: `Please elaborate on \"what's included\" in this listing such as specifics of various features/functionality such as 4 files, 1 README document, 15 pictures and a GitHub repository link...`,\n        type: \"text\",\n        label: `Enter a DETAILED description of \"what's included\" in this listing - be as SPECIFIC as possible in reference to fine details.`\n    };\n    const biddingIncrementIntervalHelper = {\n        label: \"Listing Timespan/Length - Please select a listing length (up-to a maximum of 10 days however we suggest 7 days on average)\",\n        check: (setError, register, clearErrors) => {\n            return (\n                {...register(\"biddingIncrementInterval\", { required: {\n                    value: true,\n                    message: \"You must select a value before proceeding\"\n                }, onBlur: (e) => {\n                    // log to check whats returned\n                    console.log(\"onBlur...!\", e);\n\n                    const value = e.target.value;\n\n                    setTimeout(() => {\n                        // clear error after proper selection\n                        if ((typeof value !== \"undefined\") && (Object.keys(value).length > 0)) {\n                            clearErrors(\"biddingIncrementInterval\");\n                        } else {\n                            // set error as nothing was selected (blank 'click-off' selection of selector)\n                            setError(\"biddingIncrementInterval\", {\n                                type: \"manual\",\n                                message: \"You haven't selected a 'bidding interval' & a selection is required before proceeding\",\n                            });\n                        }\n                    }, 50);\n                }})}\n            );\n        },\n        name: \"biddingIncrementInterval\",\n        placeholder: \"Select a 'bid-increment interval' (next required minimum bid from active bidders)\"\n    }\n\n    return {\n        startBidCheck,\n        reservePrice,\n        biddingIncrementIntervalHelper,\n        whatsIncludedInfoListing\n    }\n}\n\n\nexport default HookHelpers;"]},"metadata":{},"sourceType":"module"}