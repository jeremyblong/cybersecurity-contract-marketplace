{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport * as SendBird from \"sendbird\";\nimport { connect } from \"react-redux\";\nimport { saveSendbirdInitialData } from \"./redux/actions/messaging/initialization/initSBLogic.js\";\nimport _ from \"lodash\";\nconst sb = new SendBird({\n  appId: process.env.REACT_APP_SENDBIRD_APP_ID,\n  localCacheEnabled: true\n});\n\nconst MountingLogicRedux = _ref => {\n  let {\n    saveSendbirdInitialData,\n    authenticated,\n    accountData\n  } = _ref;\n  const [mounted, setMountedState] = useState(false);\n  useEffect(() => {\n    // save sendbird \"sb\" data/obj globally accessible\n    saveSendbirdInitialData(sb);\n  }, []); // run other SENDBIRD Logic init\n\n  if (authenticated === true && mounted === false) {\n    console.log(\"validating - connecting user MESSAGING logic...\");\n    sb.connect(accountData.uniqueId, (user, error) => {\n      if (error) {\n        // Handle error.\n        console.log(\"Messaging connection error... :\", error);\n      } // The user is connected to Sendbird server.\n\n\n      console.log(`The user - ${accountData.uniqueId} - is connected to Sendbird server`); // change mounted state to prevent further renders (will revert back to FALSE upon page refresh)\n\n      setMountedState(true);\n    });\n  } else {\n    console.log(\"not authenticated...\", accountData, authenticated);\n  }\n\n  return null;\n};\n\nconst mapStateToProps = state => {\n  return {\n    authenticated: _.has(state.auth.data, \"accountType\") ? true : false,\n    accountData: state.auth.data\n  };\n};\n\nexport default connect(mapStateToProps, {\n  saveSendbirdInitialData\n})(MountingLogicRedux);","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/mountingLogicRedux.js"],"names":["React","useState","useEffect","SendBird","connect","saveSendbirdInitialData","_","sb","appId","process","env","REACT_APP_SENDBIRD_APP_ID","localCacheEnabled","MountingLogicRedux","authenticated","accountData","mounted","setMountedState","console","log","uniqueId","user","error","mapStateToProps","state","has","auth","data"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,KAAKC,QAAZ,MAA0B,UAA1B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,uBAAT,QAAwC,yDAAxC;AACA,OAAOC,CAAP,MAAc,QAAd;AAGA,MAAMC,EAAE,GAAG,IAAIJ,QAAJ,CAAa;AAAEK,EAAAA,KAAK,EAAEC,OAAO,CAACC,GAAR,CAAYC,yBAArB;AAAgDC,EAAAA,iBAAiB,EAAE;AAAnE,CAAb,CAAX;;AAEA,MAAMC,kBAAkB,GAAG,QAA6D;AAAA,MAA5D;AAAER,IAAAA,uBAAF;AAA2BS,IAAAA,aAA3B;AAA0CC,IAAAA;AAA1C,GAA4D;AAEpF,QAAM,CAAEC,OAAF,EAAWC,eAAX,IAA+BhB,QAAQ,CAAC,KAAD,CAA7C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ;AACAG,IAAAA,uBAAuB,CAACE,EAAD,CAAvB;AACH,GAHQ,EAGN,EAHM,CAAT,CAJoF,CASpF;;AACA,MAAIO,aAAa,KAAK,IAAlB,IAA0BE,OAAO,KAAK,KAA1C,EAAiD;AAC7CE,IAAAA,OAAO,CAACC,GAAR,CAAY,iDAAZ;AAEAZ,IAAAA,EAAE,CAACH,OAAH,CAAWW,WAAW,CAACK,QAAvB,EAAiC,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC9C,UAAIA,KAAJ,EAAW;AACP;AACAJ,QAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CG,KAA/C;AACH,OAJ6C,CAK9C;;;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAa,cAAaJ,WAAW,CAACK,QAAS,oCAA/C,EAN8C,CAO9C;;AACAH,MAAAA,eAAe,CAAC,IAAD,CAAf;AACH,KATD;AAUH,GAbD,MAaO;AACHC,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCJ,WAApC,EAAiDD,aAAjD;AACH;;AAED,SAAO,IAAP;AACH,CA5BD;;AA6BA,MAAMS,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHV,IAAAA,aAAa,EAAER,CAAC,CAACmB,GAAF,CAAMD,KAAK,CAACE,IAAN,CAAWC,IAAjB,EAAuB,aAAvB,IAAwC,IAAxC,GAA+C,KAD3D;AAEHZ,IAAAA,WAAW,EAAES,KAAK,CAACE,IAAN,CAAWC;AAFrB,GAAP;AAIH,CALD;;AAMA,eAAevB,OAAO,CAACmB,eAAD,EAAkB;AAAElB,EAAAA;AAAF,CAAlB,CAAP,CAAsDQ,kBAAtD,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport * as SendBird from \"sendbird\";\nimport { connect } from \"react-redux\";\nimport { saveSendbirdInitialData } from \"./redux/actions/messaging/initialization/initSBLogic.js\";\nimport _ from \"lodash\";\n\n\nconst sb = new SendBird({ appId: process.env.REACT_APP_SENDBIRD_APP_ID, localCacheEnabled: true });\n\nconst MountingLogicRedux = ({ saveSendbirdInitialData, authenticated, accountData }) => {\n\n    const [ mounted, setMountedState ] = useState(false);\n\n    useEffect(() => {\n        // save sendbird \"sb\" data/obj globally accessible\n        saveSendbirdInitialData(sb);\n    }, []);\n\n    // run other SENDBIRD Logic init\n    if (authenticated === true && mounted === false) {\n        console.log(\"validating - connecting user MESSAGING logic...\");\n        \n        sb.connect(accountData.uniqueId, (user, error) => {\n            if (error) {\n                // Handle error.\n                console.log(\"Messaging connection error... :\", error);\n            }\n            // The user is connected to Sendbird server.\n            console.log(`The user - ${accountData.uniqueId} - is connected to Sendbird server`);\n            // change mounted state to prevent further renders (will revert back to FALSE upon page refresh)\n            setMountedState(true);\n        });\n    } else {\n        console.log(\"not authenticated...\", accountData, authenticated)\n    }\n\n    return null;\n}\nconst mapStateToProps = (state) => {\n    return {\n        authenticated: _.has(state.auth.data, \"accountType\") ? true : false,\n        accountData: state.auth.data\n    }\n}\nexport default connect(mapStateToProps, { saveSendbirdInitialData })(MountingLogicRedux);"]},"metadata":{},"sourceType":"module"}