{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _get from 'babel-runtime/helpers/get';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport ReactDragListView from './ReactDragListView';\nvar UNIT_PX = 'px';\nvar DRAG_LIND_STYLE = 'width:0;margin-left:-1px;margin-top:0;' + 'border-bottom:0 none;border-left:dashed 2px red;';\nvar DIRECTIONS = {\n  RIGHT: 2,\n  LEFT: 4\n};\n\nvar ReactDragColumnView = function (_ReactDragListView) {\n  _inherits(ReactDragColumnView, _ReactDragListView);\n\n  function ReactDragColumnView() {\n    _classCallCheck(this, ReactDragColumnView);\n\n    return _possibleConstructorReturn(this, (ReactDragColumnView.__proto__ || Object.getPrototypeOf(ReactDragColumnView)).apply(this, arguments));\n  }\n\n  _createClass(ReactDragColumnView, [{\n    key: 'getDragLine',\n    value: function getDragLine() {\n      if (!this.dragLine) {\n        _get(ReactDragColumnView.prototype.__proto__ || Object.getPrototypeOf(ReactDragColumnView.prototype), 'getDragLine', this).call(this);\n\n        this.dragLine.setAttribute('style', this.dragLine.getAttribute('style') + DRAG_LIND_STYLE);\n      }\n\n      return this.dragLine;\n    }\n  }, {\n    key: 'resolveAutoScroll',\n    value: function resolveAutoScroll(e, target) {\n      if (!this.scrollElement) {\n        return;\n      }\n\n      var _scrollElement$getBou = this.scrollElement.getBoundingClientRect(),\n          left = _scrollElement$getBou.left,\n          width = _scrollElement$getBou.width;\n\n      var targetWidth = target.offsetWidth;\n      var pageX = e.pageX;\n      var compatibleWidth = targetWidth * 2 / 3;\n      this.direction = 0;\n\n      if (pageX > left + width - compatibleWidth) {\n        this.direction = DIRECTIONS.RIGHT;\n      } else if (pageX < left + compatibleWidth) {\n        this.direction = DIRECTIONS.LEFT;\n      }\n\n      if (this.direction) {\n        if (this.scrollTimerId < 0) {\n          this.scrollTimerId = setInterval(this.autoScroll, 20);\n        }\n      } else {\n        this.stopAutoScroll();\n      }\n    }\n  }, {\n    key: 'autoScroll',\n    value: function autoScroll() {\n      var scrollLeft = this.scrollElement.scrollLeft;\n\n      if (this.direction === DIRECTIONS.RIGHT) {\n        this.scrollElement.scrollLeft = scrollLeft + this.props.scrollSpeed;\n\n        if (scrollLeft === this.scrollElement.scrollLeft) {\n          this.stopAutoScroll();\n        }\n      } else if (this.direction === DIRECTIONS.LEFT) {\n        this.scrollElement.scrollLeft = scrollLeft - this.props.scrollSpeed;\n\n        if (this.scrollElement.scrollLeft <= 0) {\n          this.stopAutoScroll();\n        }\n      } else {\n        this.stopAutoScroll();\n      }\n    }\n  }, {\n    key: 'fixDragLine',\n    value: function fixDragLine(target) {\n      var dragLine = this.getDragLine();\n\n      if (!target || this.state.fromIndex < 0 || this.state.fromIndex === this.state.toIndex) {\n        this.hideDragLine();\n        return;\n      }\n\n      var _target$getBoundingCl = target.getBoundingClientRect(),\n          left = _target$getBoundingCl.left,\n          top = _target$getBoundingCl.top,\n          width = _target$getBoundingCl.width,\n          height = _target$getBoundingCl.height;\n\n      var lineLeft = this.state.toIndex < this.state.fromIndex ? left : left + width;\n\n      if (this.props.enableScroll && this.scrollElement) {\n        var _scrollElement$getBou2 = this.scrollElement.getBoundingClientRect(),\n            scrollWidth = _scrollElement$getBou2.width,\n            scrollLeft = _scrollElement$getBou2.left;\n\n        if (lineLeft < scrollLeft - 2 || lineLeft > scrollLeft + scrollWidth + 2) {\n          this.hideDragLine();\n          return;\n        }\n      }\n\n      dragLine.style.top = top + UNIT_PX;\n      dragLine.style.height = height + UNIT_PX;\n      dragLine.style.left = lineLeft + UNIT_PX;\n      dragLine.style.display = 'block';\n    }\n  }]);\n\n  return ReactDragColumnView;\n}(ReactDragListView);\n\nexport default ReactDragColumnView;","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/node_modules/react-drag-listview/es/ReactDragColumnView.js"],"names":["_classCallCheck","_createClass","_possibleConstructorReturn","_get","_inherits","ReactDragListView","UNIT_PX","DRAG_LIND_STYLE","DIRECTIONS","RIGHT","LEFT","ReactDragColumnView","_ReactDragListView","__proto__","Object","getPrototypeOf","apply","arguments","key","value","getDragLine","dragLine","prototype","call","setAttribute","getAttribute","resolveAutoScroll","e","target","scrollElement","_scrollElement$getBou","getBoundingClientRect","left","width","targetWidth","offsetWidth","pageX","compatibleWidth","direction","scrollTimerId","setInterval","autoScroll","stopAutoScroll","scrollLeft","props","scrollSpeed","fixDragLine","state","fromIndex","toIndex","hideDragLine","_target$getBoundingCl","top","height","lineLeft","enableScroll","_scrollElement$getBou2","scrollWidth","style","display"],"mappings":"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","sourcesContent":["import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _get from 'babel-runtime/helpers/get';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport ReactDragListView from './ReactDragListView';\n\nvar UNIT_PX = 'px';\nvar DRAG_LIND_STYLE = 'width:0;margin-left:-1px;margin-top:0;' + 'border-bottom:0 none;border-left:dashed 2px red;';\nvar DIRECTIONS = {\n  RIGHT: 2,\n  LEFT: 4\n};\n\nvar ReactDragColumnView = function (_ReactDragListView) {\n  _inherits(ReactDragColumnView, _ReactDragListView);\n\n  function ReactDragColumnView() {\n    _classCallCheck(this, ReactDragColumnView);\n\n    return _possibleConstructorReturn(this, (ReactDragColumnView.__proto__ || Object.getPrototypeOf(ReactDragColumnView)).apply(this, arguments));\n  }\n\n  _createClass(ReactDragColumnView, [{\n    key: 'getDragLine',\n    value: function getDragLine() {\n      if (!this.dragLine) {\n        _get(ReactDragColumnView.prototype.__proto__ || Object.getPrototypeOf(ReactDragColumnView.prototype), 'getDragLine', this).call(this);\n        this.dragLine.setAttribute('style', this.dragLine.getAttribute('style') + DRAG_LIND_STYLE);\n      }\n      return this.dragLine;\n    }\n  }, {\n    key: 'resolveAutoScroll',\n    value: function resolveAutoScroll(e, target) {\n      if (!this.scrollElement) {\n        return;\n      }\n\n      var _scrollElement$getBou = this.scrollElement.getBoundingClientRect(),\n          left = _scrollElement$getBou.left,\n          width = _scrollElement$getBou.width;\n\n      var targetWidth = target.offsetWidth;\n      var pageX = e.pageX;\n\n      var compatibleWidth = targetWidth * 2 / 3;\n      this.direction = 0;\n      if (pageX > left + width - compatibleWidth) {\n        this.direction = DIRECTIONS.RIGHT;\n      } else if (pageX < left + compatibleWidth) {\n        this.direction = DIRECTIONS.LEFT;\n      }\n      if (this.direction) {\n        if (this.scrollTimerId < 0) {\n          this.scrollTimerId = setInterval(this.autoScroll, 20);\n        }\n      } else {\n        this.stopAutoScroll();\n      }\n    }\n  }, {\n    key: 'autoScroll',\n    value: function autoScroll() {\n      var scrollLeft = this.scrollElement.scrollLeft;\n\n      if (this.direction === DIRECTIONS.RIGHT) {\n        this.scrollElement.scrollLeft = scrollLeft + this.props.scrollSpeed;\n        if (scrollLeft === this.scrollElement.scrollLeft) {\n          this.stopAutoScroll();\n        }\n      } else if (this.direction === DIRECTIONS.LEFT) {\n        this.scrollElement.scrollLeft = scrollLeft - this.props.scrollSpeed;\n        if (this.scrollElement.scrollLeft <= 0) {\n          this.stopAutoScroll();\n        }\n      } else {\n        this.stopAutoScroll();\n      }\n    }\n  }, {\n    key: 'fixDragLine',\n    value: function fixDragLine(target) {\n      var dragLine = this.getDragLine();\n      if (!target || this.state.fromIndex < 0 || this.state.fromIndex === this.state.toIndex) {\n        this.hideDragLine();\n        return;\n      }\n\n      var _target$getBoundingCl = target.getBoundingClientRect(),\n          left = _target$getBoundingCl.left,\n          top = _target$getBoundingCl.top,\n          width = _target$getBoundingCl.width,\n          height = _target$getBoundingCl.height;\n\n      var lineLeft = this.state.toIndex < this.state.fromIndex ? left : left + width;\n      if (this.props.enableScroll && this.scrollElement) {\n        var _scrollElement$getBou2 = this.scrollElement.getBoundingClientRect(),\n            scrollWidth = _scrollElement$getBou2.width,\n            scrollLeft = _scrollElement$getBou2.left;\n\n        if (lineLeft < scrollLeft - 2 || lineLeft > scrollLeft + scrollWidth + 2) {\n          this.hideDragLine();\n          return;\n        }\n      }\n      dragLine.style.top = top + UNIT_PX;\n      dragLine.style.height = height + UNIT_PX;\n      dragLine.style.left = lineLeft + UNIT_PX;\n      dragLine.style.display = 'block';\n    }\n  }]);\n\n  return ReactDragColumnView;\n}(ReactDragListView);\n\nexport default ReactDragColumnView;"]},"metadata":{},"sourceType":"module"}