{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport * as SendBird from \"sendbird\";\nimport { connect } from \"react-redux\";\nimport { saveSendbirdInitialData } from \"./redux/actions/messaging/initialization/initSBLogic.js\";\nimport _ from \"lodash\";\nconst sb = new SendBird({\n  appId: process.env.REACT_APP_SENDBIRD_APP_ID,\n  localCacheEnabled: true\n});\n\nconst MountingLogicRedux = _ref => {\n  let {\n    saveSendbirdInitialData,\n    authenticated,\n    accountData\n  } = _ref;\n  useEffect(() => {\n    // save sendbird \"sb\" data/obj globally accessible\n    saveSendbirdInitialData(sb); // run other SENDBIRD Logic init\n\n    if (authenticated === true) {\n      console.log(\"validating - connecting user MESSAGING logic...\");\n      sb.connect(accountData.uniqueId, (user, error) => {\n        if (error) {\n          // Handle error.\n          console.log(\"Messaging connection error... :\", error);\n        }\n\n        console.log(`The user - ${accountData.uniqueId} - is connected to Sendbird server`); // The user is connected to Sendbird server.\n      });\n    }\n  }, []);\n  return null;\n};\n\nconst mapStateToProps = state => {\n  return {\n    authenticated: _.has(state.auth.data, \"accountType\") ? true : false,\n    accountData: state.auth.data\n  };\n};\n\nexport default connect(mapStateToProps, {\n  saveSendbirdInitialData\n})(MountingLogicRedux);","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/mountingLogicRedux.js"],"names":["React","useState","useEffect","SendBird","connect","saveSendbirdInitialData","_","sb","appId","process","env","REACT_APP_SENDBIRD_APP_ID","localCacheEnabled","MountingLogicRedux","authenticated","accountData","console","log","uniqueId","user","error","mapStateToProps","state","has","auth","data"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,KAAKC,QAAZ,MAA0B,UAA1B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,uBAAT,QAAwC,yDAAxC;AACA,OAAOC,CAAP,MAAc,QAAd;AAGA,MAAMC,EAAE,GAAG,IAAIJ,QAAJ,CAAa;AAAEK,EAAAA,KAAK,EAAEC,OAAO,CAACC,GAAR,CAAYC,yBAArB;AAAgDC,EAAAA,iBAAiB,EAAE;AAAnE,CAAb,CAAX;;AAEA,MAAMC,kBAAkB,GAAG,QAA6D;AAAA,MAA5D;AAAER,IAAAA,uBAAF;AAA2BS,IAAAA,aAA3B;AAA0CC,IAAAA;AAA1C,GAA4D;AAEpFb,EAAAA,SAAS,CAAC,MAAM;AACZ;AACAG,IAAAA,uBAAuB,CAACE,EAAD,CAAvB,CAFY,CAGZ;;AACA,QAAIO,aAAa,KAAK,IAAtB,EAA4B;AACxBE,MAAAA,OAAO,CAACC,GAAR,CAAY,iDAAZ;AAEAV,MAAAA,EAAE,CAACH,OAAH,CAAWW,WAAW,CAACG,QAAvB,EAAiC,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC9C,YAAIA,KAAJ,EAAW;AACP;AACAJ,UAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CG,KAA/C;AACH;;AACDJ,QAAAA,OAAO,CAACC,GAAR,CAAa,cAAaF,WAAW,CAACG,QAAS,oCAA/C,EAL8C,CAM9C;AACH,OAPD;AAQH;AACJ,GAhBQ,EAgBN,EAhBM,CAAT;AAkBA,SAAO,IAAP;AACH,CArBD;;AAsBA,MAAMG,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHR,IAAAA,aAAa,EAAER,CAAC,CAACiB,GAAF,CAAMD,KAAK,CAACE,IAAN,CAAWC,IAAjB,EAAuB,aAAvB,IAAwC,IAAxC,GAA+C,KAD3D;AAEHV,IAAAA,WAAW,EAAEO,KAAK,CAACE,IAAN,CAAWC;AAFrB,GAAP;AAIH,CALD;;AAMA,eAAerB,OAAO,CAACiB,eAAD,EAAkB;AAAEhB,EAAAA;AAAF,CAAlB,CAAP,CAAsDQ,kBAAtD,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport * as SendBird from \"sendbird\";\nimport { connect } from \"react-redux\";\nimport { saveSendbirdInitialData } from \"./redux/actions/messaging/initialization/initSBLogic.js\";\nimport _ from \"lodash\";\n\n\nconst sb = new SendBird({ appId: process.env.REACT_APP_SENDBIRD_APP_ID, localCacheEnabled: true });\n\nconst MountingLogicRedux = ({ saveSendbirdInitialData, authenticated, accountData }) => {\n\n    useEffect(() => {\n        // save sendbird \"sb\" data/obj globally accessible\n        saveSendbirdInitialData(sb);\n        // run other SENDBIRD Logic init\n        if (authenticated === true) {\n            console.log(\"validating - connecting user MESSAGING logic...\");\n            \n            sb.connect(accountData.uniqueId, (user, error) => {\n                if (error) {\n                    // Handle error.\n                    console.log(\"Messaging connection error... :\", error);\n                }\n                console.log(`The user - ${accountData.uniqueId} - is connected to Sendbird server`);\n                // The user is connected to Sendbird server.\n            });\n        }\n    }, []);\n\n    return null;\n}\nconst mapStateToProps = (state) => {\n    return {\n        authenticated: _.has(state.auth.data, \"accountType\") ? true : false,\n        accountData: state.auth.data\n    }\n}\nexport default connect(mapStateToProps, { saveSendbirdInitialData })(MountingLogicRedux);"]},"metadata":{},"sourceType":"module"}