{"ast":null,"code":"var _jsxFileName = \"/home/kali/Documents/cybersecurity/client/src/components/dashboard/learning/educationalCoursesSeminars/createCourse/helpers/pages/pageTwo/helpers/paneSheet.js\";\nimport React, { Fragment, useState, useRef } from 'react';\nimport Sheet from 'react-modal-sheet';\nimport helpers from \"./miscFunctions.js\";\nimport FileViewer from 'react-file-viewer';\nimport { Button, Row, Col, Card, CardBody, FormGroup, Label, Input, Media, InputGroup, InputGroupAddon, InputGroupText, ListGroup, ListGroupItem } from 'reactstrap';\nimport Dropzone from 'react-dropzone-uploader';\nconst {\n  renderCustomButtonDropzone,\n  onSubmitHelper,\n  calculateFileType\n} = helpers;\n\nconst SheetHelperPaneUploadCourseContent = _ref => {\n  let {\n    isOpen,\n    setIsOpen,\n    setChangeOptions,\n    setProgress\n  } = _ref;\n  const dropzoneRef = useRef(null);\n  const [fileReady, setFileReadyStatus] = useState(false);\n  const [currentFileSelectedUpload, setCurrentUploadFileStatus] = useState(null);\n  const [filePathData, setCurrentFilePathData] = useState(null);\n  const [fileMetaData, setMetaFileData] = useState(null);\n\n  const renderPreviewOfFile = data => {\n    const file = data.fileWithMeta.file; // return preview data via FileViewer (to not exclude documents such as .docx and such...);\n\n    if (fileReady === true) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"filereader-preview-dropzone\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(FileViewer, {\n        fileType: calculateFileType(file.type),\n        filePath: filePathData,\n        onError: err => console.log(\"fileviewer error - \", err),\n        key: file.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 21\n        }\n      }));\n    } else {\n      return null;\n    }\n  };\n\n  const CustomInputHelper = _ref2 => {\n    let {\n      accept,\n      onFiles\n    } = _ref2;\n    const text = \"Drop a file OR select to browse local data\";\n    return /*#__PURE__*/React.createElement(\"label\", {\n      className: \"custom-input-dropzone-copy\",\n      style: {\n        backgroundColor: '#007bff',\n        color: '#fff',\n        cursor: 'pointer',\n        padding: 15,\n        borderRadius: 3\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }\n    }, text, /*#__PURE__*/React.createElement(\"input\", {\n      style: {\n        display: 'none'\n      },\n      type: \"file\",\n      accept: accept,\n      multiple: false,\n      className: \"custom-dropzone-input-actual-input\",\n      onChange: e => {\n        const file = e.target.files[0]; // set current file path to convert to readable URL later\n\n        setCurrentFilePathData(URL.createObjectURL(file)); // set status update for current file\n\n        setCurrentUploadFileStatus(file); // mark file as READY \n\n        setFileReadyStatus(true); // update \"Dropzone\" component state (NOT this react component state).\n\n        onFiles([file]);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Sheet, {\n    isOpen: isOpen,\n    onClose: () => setIsOpen(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Sheet.Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Sheet.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Sheet.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    style: {\n      marginBottom: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 41\n    }\n  }, \"This is the form that is \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 70\n    }\n  }, \"primarily\"), \" used to upload/change content related to \\\"course content\\\". Use the form below to upload video's to each course \\\"clip/section\\\" and enter a description if you'd like...\"))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Dropzone, {\n    ref: dropzoneRef,\n    PreviewComponent: data => renderPreviewOfFile(data),\n    maxFiles: 1,\n    autoUpload: true,\n    onChangeStatus: functions => {\n      setChangeOptions(functions);\n    },\n    submitButtonDisabled: false,\n    InputComponent: CustomInputHelper,\n    getFilesFromEvent: null,\n    onSubmit: onSubmitHelper,\n    accept: \"video/*\",\n    SubmitButtonComponent: data => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"absolutely-position-submit-btn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 49\n        }\n      }, renderCustomButtonDropzone(data, setMetaFileData, currentFileSelectedUpload, fileMetaData, fileReady, setFileReadyStatus, setProgress, setCurrentUploadFileStatus));\n    },\n    multiple: false,\n    canCancel: false,\n    styles: {\n      dropzone: {\n        height: 350\n      },\n      dropzoneActive: {\n        borderColor: 'green'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(FormGroup, {\n    className: \" m-form__group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 41\n    }\n  }, \"Course Section/Segment Description\"), /*#__PURE__*/React.createElement(InputGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    className: \"form-control\",\n    rows: 6,\n    type: \"textarea\",\n    placeholder: \"Enter a description for your segment/section of this chunk of your course...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 45\n    }\n  })))), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 33\n    }\n  })))))), /*#__PURE__*/React.createElement(Sheet.Backdrop, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default SheetHelperPaneUploadCourseContent;","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/learning/educationalCoursesSeminars/createCourse/helpers/pages/pageTwo/helpers/paneSheet.js"],"names":["React","Fragment","useState","useRef","Sheet","helpers","FileViewer","Button","Row","Col","Card","CardBody","FormGroup","Label","Input","Media","InputGroup","InputGroupAddon","InputGroupText","ListGroup","ListGroupItem","Dropzone","renderCustomButtonDropzone","onSubmitHelper","calculateFileType","SheetHelperPaneUploadCourseContent","isOpen","setIsOpen","setChangeOptions","setProgress","dropzoneRef","fileReady","setFileReadyStatus","currentFileSelectedUpload","setCurrentUploadFileStatus","filePathData","setCurrentFilePathData","fileMetaData","setMetaFileData","renderPreviewOfFile","data","file","fileWithMeta","type","err","console","log","id","CustomInputHelper","accept","onFiles","text","backgroundColor","color","cursor","padding","borderRadius","display","e","target","files","URL","createObjectURL","marginBottom","functions","dropzone","height","dropzoneActive","borderColor"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useRef } from 'react';\nimport Sheet from 'react-modal-sheet';\nimport helpers from \"./miscFunctions.js\";\nimport FileViewer from 'react-file-viewer';\nimport { Button, Row, Col, Card, CardBody, FormGroup, Label, Input, Media, InputGroup, InputGroupAddon, InputGroupText, ListGroup, ListGroupItem } from 'reactstrap';\nimport Dropzone from 'react-dropzone-uploader';\n\nconst { renderCustomButtonDropzone, onSubmitHelper, calculateFileType } = helpers;\n\n\nconst SheetHelperPaneUploadCourseContent = ({ isOpen, setIsOpen, setChangeOptions, setProgress }) => {\n    const dropzoneRef = useRef(null);\n    const [fileReady, setFileReadyStatus] = useState(false);\n    const [currentFileSelectedUpload, setCurrentUploadFileStatus] = useState(null);\n    const [filePathData, setCurrentFilePathData] = useState(null);\n    const [fileMetaData, setMetaFileData] = useState(null);\n\n    const renderPreviewOfFile = (data) => {\n\n        const file = data.fileWithMeta.file;\n        // return preview data via FileViewer (to not exclude documents such as .docx and such...);\n        if (fileReady === true) {\n            return (\n                <div className=\"filereader-preview-dropzone\">\n                    <FileViewer\n                        fileType={calculateFileType(file.type)}\n                        filePath={filePathData}\n                        onError={(err) => console.log(\"fileviewer error - \", err)}\n                        key={file.id}\n                    />\n                </div>\n            );\n        } else {\n            return null;\n        }\n    }\n    const CustomInputHelper = ({ accept, onFiles }) => {\n\n        const text = \"Drop a file OR select to browse local data\";\n    \n        return (\n            <label className=\"custom-input-dropzone-copy\" style={{ backgroundColor: '#007bff', color: '#fff', cursor: 'pointer', padding: 15, borderRadius: 3 }}>\n                {text}\n                <input\n                    style={{ display: 'none' }}\n                    type=\"file\"\n                    accept={accept}\n                    multiple={false}\n                    className={\"custom-dropzone-input-actual-input\"}\n                    onChange={e => {\n                        const file = e.target.files[0];\n                        // set current file path to convert to readable URL later\n                        setCurrentFilePathData(URL.createObjectURL(file));\n                        // set status update for current file\n                        setCurrentUploadFileStatus(file);\n                        // mark file as READY \n                        setFileReadyStatus(true);\n                        // update \"Dropzone\" component state (NOT this react component state).\n                        onFiles([file])\n                    }}\n                />\n            </label>\n        );\n    }\n    return (\n        <Fragment>\n            <Sheet isOpen={isOpen} onClose={() => setIsOpen(false)}>\n                <Sheet.Container>\n                <Sheet.Header />\n                <Sheet.Content>\n                    <Row>\n                        <Card>\n                            <CardBody>\n                                <Row style={{ marginBottom: \"20px\" }}>\n                                    <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                                        <h3>This is the form that is <strong>primarily</strong> used to upload/change content related to \"course content\". Use the form below to upload video's to each course \"clip/section\" and enter a description if you'd like...</h3>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Dropzone\n                                        ref={dropzoneRef}\n                                        PreviewComponent={(data) => renderPreviewOfFile(data)}\n                                        maxFiles={1}\n                                        autoUpload={true}\n                                        onChangeStatus={(functions) => {\n                                            setChangeOptions(functions);\n                                        }}\n                                        submitButtonDisabled={false}\n                                        InputComponent={CustomInputHelper}\n                                        getFilesFromEvent={null}\n                                        onSubmit={onSubmitHelper}\n                                        accept=\"video/*\"\n                                        SubmitButtonComponent={(data) => {\n                                            return (\n                                                <div className=\"absolutely-position-submit-btn\">\n                                                    {renderCustomButtonDropzone(data, setMetaFileData, currentFileSelectedUpload, fileMetaData, fileReady, setFileReadyStatus, setProgress, setCurrentUploadFileStatus)}\n                                                </div>\n                                            );\n                                        }}\n                                        multiple={false}\n                                        canCancel={false}\n                                        styles={{\n                                            dropzone: { height: 350 },\n                                            dropzoneActive: { borderColor: 'green' },\n                                        }}\n                                    />\n                                    <hr />\n                                    <FormGroup className=\" m-form__group\">\n                                        <Label>Course Section/Segment Description</Label>\n                                        <InputGroup>\n                                            <Input className=\"form-control\" rows={6} type=\"textarea\" placeholder={\"Enter a description for your segment/section of this chunk of your course...\"}/>\n                                        </InputGroup>\n                                    </FormGroup>\n                                </Row>\n                                <hr />\n                            </CardBody>\n                        </Card>\n                    </Row>\n                </Sheet.Content>\n                </Sheet.Container>\n\n                <Sheet.Backdrop />\n            </Sheet>\n        </Fragment>\n    );\n}\nexport default SheetHelperPaneUploadCourseContent;"]},"metadata":{},"sourceType":"module"}