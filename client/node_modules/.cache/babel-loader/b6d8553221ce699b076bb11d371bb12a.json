{"ast":null,"code":"// helpers logic related to mainly to redux-hook-form\nconst CreateNewPostReduxFormHelpers=()=>{const typesOfLanguagesUsed={check:(setError,register,name,clearErrors)=>{return{...register(name,{required:{value:true,message:\"You MUST select an option before proceeding with your new post\"},onBlur:e=>{// log to check whats returned\nconst value=e.target.value;// timeout to delay for state change(s)\nsetTimeout(()=>{// clear error after proper selection\nif(typeof value!==\"undefined\"&&Object.keys(value).length>0){clearErrors(name);}else{// set error as nothing was selected (blank 'click-off' selection of selector)\nsetError(name,{type:\"manual\",message:\"You MUST select an option before proceeding with your new post\"});}},50);}})};},name:\"typeOfPost\",placeholder:\"Select which language's are being used in this post...\",type:\"text\",label:\"Select what 'coding language(s)' that're being used, talked about or taught in this post (if applicable)\"};const descriptionChecker={check:(register,setTyping)=>{return{...register(\"description\",{required:{value:true,message:\"You MUST enter AT least 35 characters to 850 characters\"},minLength:{value:35,message:\"You MUST enter AT Least 35 characters\"},maxLength:{value:850,message:\"You may ONLY enter 850 characters or less\"},onBlur:data=>{console.log(\"blurrred... data :\",data);setTyping(\"\");}})};},onChange:(value,setValue)=>{setValue(\"description\",value,{shouldValidate:true});},name:\"description\",placeholder:\"Enter the 'Main Descriptive' text/information for this specific post, enter anywhere from 35-850 charectors in total - be as descriptive as you'd like or as breif as you'd like... up to you!\",type:\"textarea\",label:\"Enter a description or details about what your post is about or write about the contents of the file(s) you've uploaded (if applicable)\"};const titleChecker={check:(register,setTyping)=>{return{...register(\"title\",{required:{value:true,message:\"You MUST enter AT least 15 characters to 125 characters\"},minLength:{value:15,message:\"You MUST enter AT Least 15 characters\"},maxLength:{value:125,message:\"You may ONLY enter 125 characters or less\"},onBlur:data=>{console.log(\"blurrred... data :\",data);setTyping(\"\");}})};},onChange:(value,setValue)=>{setValue(\"title\",value,{shouldValidate:true});},name:\"title\",placeholder:\"Enter a title for your new post (be descriptive up to 125 charectors)...\",type:\"text\",label:\"Enter a descriptive title that'll give your viewer's or anyone seeing this a good general idea of the contents of this post at a glance (accurate/detailed post's w/good titles get more responses...)\"};// return values to other component\nreturn{descriptionChecker,typesOfLanguagesUsed,titleChecker};};export default CreateNewPostReduxFormHelpers;","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/src/components/dashboard/people/hackers/individualProfile/wallData/postNewData/helpers/reactHookFormHelpers.js"],"names":["CreateNewPostReduxFormHelpers","typesOfLanguagesUsed","check","setError","register","name","clearErrors","required","value","message","onBlur","e","target","setTimeout","Object","keys","length","type","placeholder","label","descriptionChecker","setTyping","minLength","maxLength","data","console","log","onChange","setValue","shouldValidate","titleChecker"],"mappings":"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","sourcesContent":["// helpers logic related to mainly to redux-hook-form\nconst CreateNewPostReduxFormHelpers = () => {\n    \n    const typesOfLanguagesUsed = {\n        check: (setError, register, name, clearErrors) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: \"You MUST select an option before proceeding with your new post\"\n                }, onBlur: (e) => {\n                    // log to check whats returned\n                    const value = e.target.value;\n                    // timeout to delay for state change(s)\n                    setTimeout(() => {\n                        // clear error after proper selection\n                        if ((typeof value !== \"undefined\") && (Object.keys(value).length > 0)) {\n                            clearErrors(name);\n                        } else {\n                            // set error as nothing was selected (blank 'click-off' selection of selector)\n                            setError(name, {\n                                type: \"manual\",\n                                message: \"You MUST select an option before proceeding with your new post\",\n                            });\n                        }\n                    }, 50);\n                }})}\n            )\n        },\n        name: \"typeOfPost\",\n        placeholder: \"Select which language's are being used in this post...\",\n        type: \"text\",\n        label: \"Select what 'coding language(s)' that're being used, talked about or taught in this post (if applicable)\"\n    };\n    const descriptionChecker = {\n        check: (register, setTyping) => {\n            return (\n                {...register(\"description\", { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 35 characters to 850 characters\"\n                }, minLength: {\n                    value: 35,\n                    message: \"You MUST enter AT Least 35 characters\"\n                }, maxLength: {\n                    value: 850,\n                    message: \"You may ONLY enter 850 characters or less\"\n                }, onBlur: (data) => {\n                    console.log(\"blurrred... data :\", data);\n\n                    setTyping(\"\");\n                }})}\n            )\n        },\n        onChange: (value, setValue) => {\n            setValue(\"description\", value, { shouldValidate: true });\n        },\n        name: \"description\",\n        placeholder: \"Enter the 'Main Descriptive' text/information for this specific post, enter anywhere from 35-850 charectors in total - be as descriptive as you'd like or as breif as you'd like... up to you!\",\n        type: \"textarea\",\n        label: \"Enter a description or details about what your post is about or write about the contents of the file(s) you've uploaded (if applicable)\"\n    };\n    const titleChecker = {\n        check: (register, setTyping) => {\n            return (\n                {...register(\"title\", { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 15 characters to 125 characters\"\n                }, minLength: {\n                    value: 15,\n                    message: \"You MUST enter AT Least 15 characters\"\n                }, maxLength: {\n                    value: 125,\n                    message: \"You may ONLY enter 125 characters or less\"\n                }, onBlur: (data) => {\n                    console.log(\"blurrred... data :\", data);\n                    setTyping(\"\");\n                }})}\n            )\n        },\n        onChange: (value, setValue) => {\n            setValue(\"title\", value, { shouldValidate: true });\n        },\n        name: \"title\",\n        placeholder: \"Enter a title for your new post (be descriptive up to 125 charectors)...\",\n        type: \"text\",\n        label: \"Enter a descriptive title that'll give your viewer's or anyone seeing this a good general idea of the contents of this post at a glance (accurate/detailed post's w/good titles get more responses...)\"\n    };\n    // return values to other component\n    return {\n        descriptionChecker,\n        typesOfLanguagesUsed,\n        titleChecker\n    }\n}\n\nexport default CreateNewPostReduxFormHelpers;"]},"metadata":{},"sourceType":"module"}