{"ast":null,"code":"var _jsxFileName = \"/home/kali/Documents/cybersecurity/client/src/components/dashboard/learning/educationalCoursesSeminars/createCourse/helpers/pages/pageTwo/index.js\";\nimport React, { Fragment, useRef } from \"react\";\nimport \"./styles.css\";\nimport { connect } from \"react-redux\";\nimport Dropzone from 'react-dropzone-uploader';\nimport helpers from \"./helpers/miscFunctions.js\";\nconst {\n  renderCustomButtonDropzone,\n  handleSubmit\n} = helpers;\n\nconst CreateNewCoursePageTwo = () => {\n  const dropzoneRef = useRef(null); // state initialization\n\n  const [changeOptions, setChangeOptions] = useState(null);\n  const [fileMetaData, setMetaFileData] = useState(null);\n  const [currentFileSelectedUpload, setCurrentUploadFileStatus] = useState(null);\n\n  const getUploadParams = _ref => {\n    let {\n      meta\n    } = _ref;\n    return {\n      url: 'https://httpbin.org/post'\n    };\n  }; // called every time a file's `status` changes\n\n\n  const handleChangeStatus = (_ref2, status) => {\n    let {\n      meta,\n      file\n    } = _ref2;\n    console.log(\"handleChangeStatus ran...\", meta, file, status);\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Dropzone, {\n    ref: dropzoneRef,\n    PreviewComponent: data => renderPreviewOfFile(data),\n    maxFiles: 1,\n    autoUpload: true,\n    onChangeStatus: functions => {\n      setChangeOptions(functions);\n    },\n    submitButtonDisabled: false,\n    InputComponent: CustomInputHelper,\n    getFilesFromEvent: getFilesFromEvent,\n    onSubmit: onSubmitHelper,\n    SubmitButtonComponent: (data, e) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"absolutely-position-submit-btn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 41\n        }\n      }, renderCustomButtonDropzone(data, setMetaFileData, currentFileSelectedUpload));\n    },\n    multiple: false,\n    canCancel: false,\n    styles: {\n      dropzone: {\n        height: 375\n      },\n      dropzoneActive: {\n        borderColor: 'green'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 29\n    }\n  }))))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    userData: state.auth.data\n  };\n};\n\nexport default connect(mapStateToProps, {})(CreateNewCoursePageTwo);","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/learning/educationalCoursesSeminars/createCourse/helpers/pages/pageTwo/index.js"],"names":["React","Fragment","useRef","connect","Dropzone","helpers","renderCustomButtonDropzone","handleSubmit","CreateNewCoursePageTwo","dropzoneRef","changeOptions","setChangeOptions","useState","fileMetaData","setMetaFileData","currentFileSelectedUpload","setCurrentUploadFileStatus","getUploadParams","meta","url","handleChangeStatus","status","file","console","log","data","renderPreviewOfFile","functions","CustomInputHelper","getFilesFromEvent","onSubmitHelper","e","dropzone","height","dropzoneActive","borderColor","mapStateToProps","state","userData","auth"],"mappings":"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","sourcesContent":["import React, { Fragment, useRef } from \"react\";\nimport \"./styles.css\";\nimport { connect } from \"react-redux\";\nimport Dropzone from 'react-dropzone-uploader';\nimport helpers from \"./helpers/miscFunctions.js\";\n\n\nconst { \n    renderCustomButtonDropzone,\n    handleSubmit \n} = helpers;\n\nconst CreateNewCoursePageTwo = () => {\n\n    const dropzoneRef = useRef(null);\n    // state initialization\n    const [ changeOptions, setChangeOptions ] = useState(null);\n    const [ fileMetaData, setMetaFileData ] = useState(null);\n    const [ currentFileSelectedUpload, setCurrentUploadFileStatus ] = useState(null);\n\n    const getUploadParams = ({ meta }) => { \n        return { \n          url: 'https://httpbin.org/post' \n        }\n    }\n    \n\n    // called every time a file's `status` changes\n    const handleChangeStatus = ({ meta, file }, status) => {\n        console.log(\"handleChangeStatus ran...\", meta, file, status);\n    }\n\n    return (\n        <Fragment>\n            <Row>\n                <Col sm=\"12\">\n                    <Card>\n                        <CardBody>\n                            <Dropzone\n                                ref={dropzoneRef}\n                                PreviewComponent={(data) => renderPreviewOfFile(data)}\n                                maxFiles={1}\n                                autoUpload={true}\n                                onChangeStatus={(functions) => {\n                                    setChangeOptions(functions);\n                                }}\n                                submitButtonDisabled={false}\n                                InputComponent={CustomInputHelper}\n                                getFilesFromEvent={getFilesFromEvent}\n                                onSubmit={onSubmitHelper}\n                                SubmitButtonComponent={(data, e) => {\n                                    return (\n                                        <div className=\"absolutely-position-submit-btn\">\n                                            {renderCustomButtonDropzone(data, setMetaFileData, currentFileSelectedUpload)}\n                                        </div>\n                                    );\n                                }}\n                                multiple={false}\n                                canCancel={false}\n                                styles={{\n                                    dropzone: { height: 375 },\n                                    dropzoneActive: { borderColor: 'green' },\n                                }}\n                            />\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n        </Fragment>\n    );\n}\nconst mapStateToProps = (state) => {\n    return {\n        userData: state.auth.data\n    }\n}\nexport default connect(mapStateToProps, { })(CreateNewCoursePageTwo);"]},"metadata":{},"sourceType":"module"}