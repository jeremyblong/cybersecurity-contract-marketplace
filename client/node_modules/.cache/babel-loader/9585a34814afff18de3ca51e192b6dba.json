{"ast":null,"code":"var _jsxFileName = \"/home/kali/Documents/cybersecurity/client/src/components/dashboard/opportunities/employers/createListing/create/createEmployerListing.js\";\nimport React, { Fragment, useState, useEffect } from 'react';\nimport Breadcrumb from '../../../../../../layout/breadcrumb';\nimport one from '../../../../../../assets/images/job-search/1.jpg';\nimport { Container, Row, Col, Card, CardBody, Media, Button, Form, FormGroup, Label, Input, InputGroup, InputGroupAddon, ListGroup, ListGroupItem, InputGroupText, Popover, PopoverBody, PopoverHeader } from 'reactstrap';\nimport { Submit, Cancel } from \"../../../../../../constant\";\nimport Select from 'react-select';\nimport uuid from \"react-uuid\";\nimport _ from \"lodash\";\nimport { MultiSelect } from \"react-multi-select-component\";\nimport CKEditors from \"react-ckeditor-component\";\nimport CreateHashtagsListingComponent from \"./helpers/hashtags/createHashtagsListing.js\";\nimport LocationSearchInput from \"./helpers/location/searchAddress.js\";\nimport { XCircle } from \"react-feather\";\nimport \"./styles.css\";\nimport SimpleMDE from \"react-simplemde-editor\";\nimport { DateRangePicker } from 'react-date-range';\nimport Dropzone from 'react-dropzone-uploader';\nimport { connect } from \"react-redux\";\nimport { saveListingData } from \"../../../../../../redux/actions/employer/listings/listingData.js\";\nimport { experienceOptions, idealTimespanOptions, desiredSkillsOptions, rankOptions, maxNumberOfHackersOptions, tokensApplyOptions, disclosureOptions, physicalOptions, visibilityOptions } from \"./helpers/options/selectionOptions.js\";\nimport { NotificationManager } from 'react-notifications';\nimport axios from \"axios\";\nimport LoadingBar from 'react-top-loading-bar';\n\nconst CreateJobListingMainHelper = props => {\n  const [assetArray, setAssetArray] = useState([]);\n  const [timespan, setTimespan] = useState(null);\n  const [data, setData] = useState({});\n  const [requiredRankToApply, setRequiredRankToApply] = useState(null);\n  const [experienceAndCost, setExperienceAndCost] = useState(null);\n  const [desiredSkills, setDesiredSkills] = useState([]);\n  const [content, setContent] = useState('Enter your content here...');\n  const [maxNumberOfApplicants, setMaxNumberOfApplicants] = useState(null);\n  const [popoverOpen, setPopoverOpen] = useState(false);\n  const [tokensRequiredToApply, setTokensRequiredToApply] = useState(null);\n  const [disclosureVisibility, setDisclosureVisibility] = useState(null);\n  const [typeOfHack, setTypeOfHack] = useState(null);\n  const [rules, setRules] = useState(\"\");\n  const [outOfScope, setOutOfScope] = useState(\"\");\n  const [progress, setProgress] = useState(0);\n  const [selectionRange, setSelectionRange] = useState({\n    startDate: new Date(),\n    endDate: new Date(),\n    key: 'selection'\n  });\n  const [availiableHackerDates, handleHackerDates] = useState([{\n    startDate: new Date(),\n    endDate: new Date(),\n    key: 'selection'\n  }]);\n  const [listingVisibility, setListingVisibility] = useState(null);\n\n  const onChangeDescription = evt => {\n    const newContent = evt.editor.getData();\n    setContent(newContent);\n    props.saveListingData({ ...props.previousData,\n      listingDescription: newContent\n    });\n  };\n\n  const handleChangeInput = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setData(prevState => {\n      return { ...prevState,\n        [name]: value\n      };\n    });\n    props.saveListingData({ ...props.previousData,\n      [name]: value\n    });\n  };\n\n  const handleAssetAddition = e => {\n    e.preventDefault(); // assetName\n\n    setAssetArray(prevState => {\n      props.saveListingData({ ...props.previousData,\n        assetArray: [...prevState, {\n          id: uuid(),\n          name: data.assetName\n        }]\n      });\n      return [...prevState, {\n        id: uuid(),\n        name: data.assetName\n      }];\n    });\n    setData(prevState => {\n      return { ...prevState,\n        assetName: \"\"\n      };\n    });\n  };\n\n  const changeBountyPrices = (e, rewardLevel, asset) => {\n    const {\n      value\n    } = e.target;\n    setAssetArray(prevState => {\n      props.saveListingData({ ...props.previousData,\n        assetArray: prevState.map((item, i) => {\n          if (item.id === asset.id) {\n            return { ...item,\n              [rewardLevel]: Number(value)\n            };\n          } else {\n            return item;\n          }\n        })\n      });\n      return prevState.map((item, i) => {\n        if (item.id === asset.id) {\n          return { ...item,\n            [rewardLevel]: Number(value)\n          };\n        } else {\n          return item;\n        }\n      });\n    });\n  };\n\n  const renderBusinessLocationPortion = () => {\n    if (typeOfHack !== null && typeOfHack.value === \"physical-hack\") {\n      return /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"h6\", {\n        className: \"mb-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }\n      }, \"Location - Physical Hacking (Only Provided To \", /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 88\n        }\n      }, \"SELECTED/HIRED\"), \" Applicants)\"), /*#__PURE__*/React.createElement(Form, {\n        className: \"theme-form\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        sm: \"12\",\n        lg: \"12\",\n        md: \"12\",\n        xl: \"12\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Label, {\n        htmlFor: \"exampleFormControlInput1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 37\n        }\n      }, \"Enter your company business address (the address that your hackers will be testing at):\", /*#__PURE__*/React.createElement(\"span\", {\n        className: \"font-danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 166\n        }\n      }, \"*\")), /*#__PURE__*/React.createElement(LocationSearchInput, {\n        props: props,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 37\n        }\n      }))))));\n    }\n  };\n\n  const renderPhysicalHackingDates = () => {\n    if (typeOfHack !== null && typeOfHack.value === \"physical-hack\") {\n      return /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Label, {\n        htmlFor: \"exampleFormControlInput1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }\n      }, \"Dates Availiable To Hackers To Test Physical/Digital Assets:\", /*#__PURE__*/React.createElement(\"span\", {\n        className: \"font-danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 123\n        }\n      }, \"*\")), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }\n      }, \"These are the days that will be available to the \", /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 73\n        }\n      }, \"hired/selected\"), \" hacker canidates to choose from when deciding which days they will attempt to infiltrate your company. This is only relevant for \", /*#__PURE__*/React.createElement(\"strong\", {\n        style: {\n          color: \"blue\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 234\n        }\n      }, \"PHYSICAL\"), \" hacking requirements.\"), /*#__PURE__*/React.createElement(\"p\", {\n        style: {\n          paddingBottom: \"20px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(DateRangePicker, {\n        ranges: availiableHackerDates,\n        onChange: handleDatesSelectable,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }\n      }));\n    }\n  };\n\n  const handleDeadlineSelect = ranges => {\n    setSelectionRange(ranges.selection);\n    props.saveListingData({ ...props.previousData,\n      estimatedCompletionDate: ranges.selection\n    });\n  };\n\n  useEffect(() => {\n    props.saveListingData({});\n  }, []);\n\n  const handleDatesSelectable = ranges => {\n    handleHackerDates(prevState => {\n      props.saveListingData({ ...props.previousData,\n        testingDatesHackers: [...prevState, ranges.selection]\n      });\n      return [...prevState, ranges.selection];\n    });\n  };\n\n  const getUploadParams = _ref => {\n    let {\n      meta\n    } = _ref;\n    return {\n      url: 'https://httpbin.org/post'\n    };\n  };\n\n  const handleChangeStatus = (_ref2, status) => {\n    let {\n      meta,\n      file\n    } = _ref2;\n    console.log(status, meta, file);\n\n    if (status === \"done\") {\n      const data = new FormData();\n      data.append(\"file\", file);\n      data.append(\"meta\", meta);\n      const config = {\n        onUploadProgress: function (progressEvent) {\n          let percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n          console.log(\"percentCompleted\", percentCompleted);\n          setProgress(percentCompleted);\n        },\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      };\n      axios.post(`${process.env.REACT_APP_BASE_URL}/upload/file/upon/selection/employer/listing`, data, config).then(res => {\n        if (res.data.message === \"Successfully uploaded content!\") {\n          console.log(res.data);\n          const {\n            file\n          } = res.data;\n          NotificationManager.success(`We've successfully uploaded your file! Please proceed filling out your information or add more files.`, 'Successfully uploaded file!', 4500);\n        } else {\n          console.log(\"err\", res.data);\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  };\n\n  const handleListingSubmission = e => {\n    e.preventDefault();\n    const {\n      assetArray,\n      typeOfHack,\n      testingDatesHackers,\n      rulesOfEngagement,\n      publicCompanyName,\n      outOfScopeVulnerabilities,\n      listingDescription,\n      hashtags,\n      businessAddress,\n      requiredRankToApply,\n      experienceAndCost,\n      desiredSkills,\n      maxNumberOfApplicants,\n      disclosureVisibility,\n      tokensRequiredToApply,\n      timespan,\n      listingVisibility,\n      estimatedCompletionDate\n    } = this.props.previousData; // const data = {\n    //     requiredRankToApply,\n    //     publicCompanyName: data.publicCompanyName,\n    //     experienceAndCost,\n    //     desiredSkills,\n    //     maxNumberOfApplicants,\n    //     tokensRequiredToApply,\n    //     disclosureVisibility,\n    //     typeOfHack,\n    //     allowedTimespan: timespan,\n    //     listingVisibility,\n    //     expectedDateOfCompletion: selectionRange,\n    //     availiableDatesToHackers: availiableHackerDates\n    // }\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Breadcrumb, {\n    parent: \"Create Listing\",\n    title: \"Create a public employer listing\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(LoadingBar, {\n    color: \"#f11946\",\n    progress: progress,\n    onLoaderFinished: () => setProgress(0),\n    className: \"loadingBarRaise\",\n    containerClassName: \"loadingBarRaise\",\n    height: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xl: \"12 xl-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"job-search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(CardBody, {\n    className: \"pb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Media, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"img-40 img-fluid m-r-20\",\n    src: one,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 41\n    }\n  }), /*#__PURE__*/React.createElement(Media, {\n    body: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"f-w-600\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"#\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 49\n    }\n  }, \"Create an employer listing\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"pull-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 49\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 45\n    }\n  }, \"Create a listing requesting for your company to be hacked (this will be public visible information to our database of hackers)\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"job-description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 41\n    }\n  }, \"General Details\"), /*#__PURE__*/React.createElement(Form, {\n    className: \"theme-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: \"6\",\n    lg: \"6\",\n    sm: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"exampleFormControlInput1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 57\n    }\n  }, \"Public Company Name:\", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"font-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 119\n    }\n  }, \"*\")), /*#__PURE__*/React.createElement(Input, {\n    value: data.publicCompanyName,\n    onChange: handleChangeInput,\n    className: \"form-control\",\n    id: \"exampleFormControlInput1\",\n    name: \"publicCompanyName\",\n    type: \"text\",\n    placeholder: \"Enter your company's publically known name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 57\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    md: \"6\",\n    lg: \"6\",\n    sm: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"exampleFormControlInput1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 57\n    }\n  }, \"Preferred Rank/Level Required To Apply:\", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"font-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 138\n    }\n  }, \"*\")), /*#__PURE__*/React.createElement(Select, {\n    value: requiredRankToApply,\n    onChange: value => {\n      setRequiredRankToApply(value);\n      props.saveListingData({ ...props.previousData,\n        requiredRankToApply: value\n      });\n    },\n    options: rankOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 57\n    }\n  })))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"exampleFormControlInput3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 57\n    }\n  }, \"Experience Rewarded To Winner + Cost To Post:\", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"font-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 144\n    }\n  }, \"*\")), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      paddingTop: \"7px\",\n      paddingBottom: \"7px\"\n    },\n    className: \"text-left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 57\n    }\n  }, \"Experience is rewarded to the hacker winner. Hackers level up their accounts with XP points and can redeem the XP for cash ($-USD) after reaching certain ranks/levels. Having a \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 311\n    }\n  }, \"higher\"), \" XP reward will incentivize hackers to pick your company over others - however it \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 416\n    }\n  }, \"costs more\"), \".\"), /*#__PURE__*/React.createElement(Select, {\n    value: experienceAndCost,\n    onChange: value => {\n      setExperienceAndCost(value);\n      props.saveListingData({ ...props.previousData,\n        experienceAndCost: value\n      });\n    },\n    options: experienceOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 57\n    }\n  })))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"exampleFormControlpassword\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 57\n    }\n  }, \"Required/Desired Skills From Hackers:\", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"font-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 138\n    }\n  }, \"*\")), /*#__PURE__*/React.createElement(MultiSelect, {\n    options: desiredSkillsOptions,\n    value: desiredSkills,\n    onChange: value => {\n      setDesiredSkills(value);\n      props.saveListingData({ ...props.previousData,\n        desiredSkills: value\n      });\n    },\n    labelledBy: \"Select\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 57\n    }\n  })))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"exampleFormControlpassword1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 57\n    }\n  }, \"HashTags/Tags (Hackers will use these to find your listing):\", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"font-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 162\n    }\n  }, \"*\")), /*#__PURE__*/React.createElement(CreateHashtagsListingComponent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 57\n    }\n  })))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-form-label pt-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 90\n    }\n  }, \"MAX\"), \" Number Of Required Hackers:\"), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    value: maxNumberOfApplicants,\n    onChange: value => {\n      setMaxNumberOfApplicants(value);\n      props.saveListingData({ ...props.previousData,\n        maxNumberOfApplicants: value\n      });\n    },\n    options: maxNumberOfHackersOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 57\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    sm: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    onMouseEnter: () => {\n      setPopoverOpen(true);\n    },\n    id: \"PopoverID\",\n    className: \"col-form-label pt-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 53\n    }\n  }, \"Amount Of Tokens Required To Apply (hover for info):\"), /*#__PURE__*/React.createElement(Popover, {\n    placement: \"top\",\n    isOpen: popoverOpen,\n    target: \"PopoverID\",\n    toggle: () => {\n      setPopoverOpen(!popoverOpen);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(PopoverHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 57\n    }\n  }, \"Tokens are required from hackers to apply to this job\"), /*#__PURE__*/React.createElement(PopoverBody, {\n    onMouseLeave: () => {\n      setPopoverOpen(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 57\n    }\n  }, \"Hackers purchase tokens in which they then use to apply to your listing(s). These are \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 147\n    }\n  }, \"REQUIRED\"), \" to apply to listings so please choose the amount you charge proportionally to the work required from your company and the reward given to successful hackers.\")), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    value: tokensRequiredToApply,\n    onChange: value => {\n      setTokensRequiredToApply(value);\n      props.saveListingData({ ...props.previousData,\n        tokensRequiredToApply: value\n      });\n    },\n    options: tokensApplyOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 57\n    }\n  })))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"6\",\n    lg: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"exampleFormControlInput4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 57\n    }\n  }, \"Public Or Private Vulnerability Disclosures (Upon Successful Hack):\"), /*#__PURE__*/React.createElement(Select, {\n    value: disclosureVisibility,\n    onChange: value => {\n      setDisclosureVisibility(value);\n      props.saveListingData({ ...props.previousData,\n        disclosureVisibility: value\n      });\n    },\n    options: disclosureOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 57\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"6\",\n    lg: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"exampleFormControlInput4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 57\n    }\n  }, \"Type Of Hack Required (Physical/in-person \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 141\n    }\n  }, \"OR\"), \" digital/online assets):\"), /*#__PURE__*/React.createElement(Select, {\n    value: typeOfHack,\n    onChange: value => {\n      setTypeOfHack(value);\n      props.saveListingData({ ...props.previousData,\n        typeOfHack: value\n      });\n    },\n    options: physicalOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 57\n    }\n  }))))), /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 41\n    }\n  }, \"Timespan & Timeline Information + Visibility Type\"), /*#__PURE__*/React.createElement(Form, {\n    className: \"theme-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: \"6\",\n    lg: \"6\",\n    xl: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12 xl-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"exampleFormControlInput1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 61\n    }\n  }, \"Timespan allocated for hackers to test/exploit (Maximum - from posted date):\", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"font-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 179\n    }\n  }, \"*\")), /*#__PURE__*/React.createElement(Select, {\n    value: timespan,\n    onChange: value => {\n      setTimespan(value);\n      props.saveListingData({ ...props.previousData,\n        timespan: value\n      });\n    },\n    options: idealTimespanOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 61\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12 xl-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"exampleFormControlInput1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 61\n    }\n  }, \"Visibility Type (Who Can See Your Listing Or Apply Once Live):\", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"font-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 165\n    }\n  }, \"*\")), /*#__PURE__*/React.createElement(Select, {\n    value: listingVisibility,\n    onChange: value => {\n      setListingVisibility(value);\n      props.saveListingData({ ...props.previousData,\n        listingVisibility: value\n      });\n    },\n    options: visibilityOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 61\n    }\n  })), renderPhysicalHackingDates())), /*#__PURE__*/React.createElement(Col, {\n    md: \"12\",\n    lg: \"12\",\n    xl: \"6 xl-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 500,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"exampleFormControlInput1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 57\n    }\n  }, \"Estimated/Expected Day Of Completion (Must Be Successfully Hacked By This Day For Full Payment):\", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"font-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 195\n    }\n  }, \"*\")), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      paddingBottom: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 57\n    }\n  }, \"These are the days in which you expect the hired hackers/contractors to have \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 171\n    }\n  }, \"successfully\"), \" completed any hacks or attacks (digital or physical) against your company. Disclosures will occurr shortly after whichever days are selected and any further testing or reporting shall proceed at that point.\"), /*#__PURE__*/React.createElement(DateRangePicker, {\n    ranges: [selectionRange],\n    onChange: handleDeadlineSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 503,\n      columnNumber: 57\n    }\n  }))))), renderBusinessLocationPortion(), /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 62\n    }\n  }, \"DIGITAL\"), \" Assets & Payment/Reward Information - Digital Scope\"), /*#__PURE__*/React.createElement(Form, {\n    className: \"theme-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xl: \"12 xl-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 516,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"exampleFormControlInput7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 517,\n      columnNumber: 57\n    }\n  }, \"Asset Endpoint Or URL:\", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"font-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 517,\n      columnNumber: 121\n    }\n  }, \"*\")), /*#__PURE__*/React.createElement(InputGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    onChange: handleChangeInput,\n    value: data.assetName,\n    className: \"form-control\",\n    id: \"exampleFormControlInput7\",\n    name: \"assetName\",\n    type: \"text\",\n    placeholder: \"Eg.'s - api.yourcompany.com OR https://www.yourcompanywebsite.com\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 519,\n      columnNumber: 61\n    }\n  }), /*#__PURE__*/React.createElement(InputGroupAddon, {\n    addonType: \"append\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 61\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: handleAssetAddition,\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 97\n    }\n  }, \"Add Asset\"))))), /*#__PURE__*/React.createElement(ListGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 49\n    }\n  }, typeof assetArray !== \"undefined\" && assetArray.length > 0 ? assetArray.map((asset, index) => {\n    return /*#__PURE__*/React.createElement(ListGroupItem, {\n      key: index,\n      className: \"list-group-item flex-column align-items-start\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      style: {\n        paddingBottom: \"12px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(ListGroupItem, {\n      active: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 65\n      }\n    }, asset.name, /*#__PURE__*/React.createElement(\"div\", {\n      onClick: () => {\n        setAssetArray(prevState => {\n          props.saveListingData({ ...props.previousData,\n            assetArray: prevState.filter((item, index) => {\n              if (item.id !== asset.id) {\n                return item;\n              }\n            })\n          });\n          return prevState.filter((item, index) => {\n            if (item.id !== asset.id) {\n              return item;\n            }\n          });\n        });\n      },\n      id: \"float-right-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 99\n      }\n    }, /*#__PURE__*/React.createElement(XCircle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 90\n      }\n    })))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      lg: \"3\",\n      sm: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: \"#ffc800\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 80\n      }\n    }, \"Low\"), \" Severity Bounty Reward\"), /*#__PURE__*/React.createElement(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      onChange: e => {\n        changeBountyPrices(e, \"lowSeverity\", asset);\n      },\n      className: \"form-control\",\n      type: \"text\",\n      placeholder: \"Average Cash($) Reward Price\",\n      \"aria-label\": \"Average Cash($) Reward Price\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 73\n      }\n    })))), /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      lg: \"3\",\n      sm: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: \"#ed3824\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 80\n      }\n    }, \"Medium\"), \" Severity Bounty Reward\"), /*#__PURE__*/React.createElement(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      onChange: e => {\n        changeBountyPrices(e, \"mediumSeverity\", asset);\n      },\n      className: \"form-control\",\n      type: \"text\",\n      placeholder: \"Average Cash($) Reward Price\",\n      \"aria-label\": \"Average Cash($) Reward Price\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 73\n      }\n    })))), /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      lg: \"3\",\n      sm: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: \"#8f0091\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 80\n      }\n    }, \"High\"), \" Severity Bounty Reward\"), /*#__PURE__*/React.createElement(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      onChange: e => {\n        changeBountyPrices(e, \"highSeverity\", asset);\n      },\n      className: \"form-control\",\n      type: \"text\",\n      placeholder: \"Average Cash($) Reward Price\",\n      \"aria-label\": \"Average Cash($) Reward Price\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 73\n      }\n    })))), /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      lg: \"3\",\n      sm: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: \"#b30211\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580,\n        columnNumber: 80\n      }\n    }, \"Critical\"), \" Severity Bounty Reward\"), /*#__PURE__*/React.createElement(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      onChange: e => {\n        changeBountyPrices(e, \"criticalSeverity\", asset);\n      },\n      className: \"form-control\",\n      type: \"text\",\n      placeholder: \"Average Cash($) Reward Price\",\n      \"aria-label\": \"Average Cash($) Reward Price\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 73\n      }\n    }))))));\n  }) : null))), /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 595,\n      columnNumber: 41\n    }\n  }, \"Upload Any Supporting Documents/Files\"), /*#__PURE__*/React.createElement(Form, {\n    className: \"theme-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 596,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 597,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 598,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 599,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    className: \"col-form-label pt-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 600,\n      columnNumber: 57\n    }\n  }, \"Upload File(s):\", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"font-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 600,\n      columnNumber: 111\n    }\n  }, \"*\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dz-message needsclick\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 601,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(Dropzone, {\n    getUploadParams: getUploadParams,\n    onChangeStatus: handleChangeStatus,\n    maxFiles: 5,\n    multiple: true,\n    canCancel: false,\n    inputContent: \"Drop A File(s)\",\n    styles: {\n      dropzone: {\n        height: 225\n      },\n      dropzoneActive: {\n        borderColor: 'green'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 61\n    }\n  })))))), /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"mb-0\",\n    style: {\n      paddingBottom: \"15px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 619,\n      columnNumber: 41\n    }\n  }, \"Listing Description/Information\"), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      paddingBottom: \"25px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 620,\n      columnNumber: 41\n    }\n  }, \"Include as detailed of a description as you possibly can so our hackers will know what they're being asked to attempt/hack. This can be \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 620,\n      columnNumber: 214\n    }\n  }, \"general\"), \" information as well as any other information that you'd like to include. Strong/detailed listing descriptions generally always have higher response/application rates compared to minimal detail listings.\"), /*#__PURE__*/React.createElement(CKEditors, {\n    activeclassName: \"p10\",\n    content: content,\n    events: {\n      \"change\": onChangeDescription\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 621,\n      columnNumber: 41\n    }\n  }), /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"mb-0\",\n    style: {\n      paddingBottom: \"15px\",\n      paddingTop: \"25px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 628,\n      columnNumber: 41\n    }\n  }, \"Program/Listing Rules & Conditions Of Engagement\"), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      paddingBottom: \"25px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 629,\n      columnNumber: 41\n    }\n  }, \"Please include an \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 629,\n      columnNumber: 96\n    }\n  }, \"exhaustive list\"), \" of specific \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 629,\n      columnNumber: 141\n    }\n  }, \"RULES\"), \" our hackers should follow and abide by while applying allowed hacks to avoid \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 629,\n      columnNumber: 241\n    }\n  }, \"termination or suspension\"), \" from our platform for misuse (referring to our hackers). We stand by our rules and proceedures so please be as detailed and clear as possible while outlines what you expect from potential hacker candiates and the conditions in place once hired.\"), /*#__PURE__*/React.createElement(SimpleMDE, {\n    id: \"editor_container\",\n    onChange: value => {\n      setRules(value);\n      props.saveListingData({ ...props.previousData,\n        rulesOfEngagement: value\n      });\n    },\n    value: rules,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 630,\n      columnNumber: 41\n    }\n  }), /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"mb-0\",\n    style: {\n      paddingBottom: \"15px\",\n      paddingTop: \"25px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 642,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 642,\n      columnNumber: 116\n    }\n  }, \"OUT OF SCOPE\"), \" Vulnerabilities & Boundaries\"), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      paddingBottom: \"25px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 643,\n      columnNumber: 41\n    }\n  }, \"Please include an exhaustive list of which vulnerabilities are \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 643,\n      columnNumber: 141\n    }\n  }, \"NOT\"), \" included as acceptable reports as well as anything you would like our hackers to \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 643,\n      columnNumber: 243\n    }\n  }, \"abstain\"), \" from testing or tampering with such as texting accounts, unauthenticated tests, etc... \", /*#__PURE__*/React.createElement(\"em\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 643,\n      columnNumber: 355\n    }\n  }, \"BE AS SPECIFIC AS POSSIBLE.\")), /*#__PURE__*/React.createElement(SimpleMDE, {\n    id: \"editor_container_two\",\n    onChange: value => {\n      setOutOfScope(value);\n      props.saveListingData({ ...props.previousData,\n        outOfScopeVulnerabilities: value\n      });\n    },\n    value: outOfScope,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 644,\n      columnNumber: 41\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 658,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: handleListingSubmission,\n    color: \"primary mr-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 659,\n      columnNumber: 37\n    }\n  }, Submit), /*#__PURE__*/React.createElement(Button, {\n    color: \"light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 660,\n      columnNumber: 37\n    }\n  }, Cancel))))))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    previousData: _.has(state.listingData, \"listingData\") ? state.listingData.listingData : {}\n  };\n};\n\nexport default connect(mapStateToProps, {\n  saveListingData\n})(CreateJobListingMainHelper);","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/opportunities/employers/createListing/create/createEmployerListing.js"],"names":["React","Fragment","useState","useEffect","Breadcrumb","one","Container","Row","Col","Card","CardBody","Media","Button","Form","FormGroup","Label","Input","InputGroup","InputGroupAddon","ListGroup","ListGroupItem","InputGroupText","Popover","PopoverBody","PopoverHeader","Submit","Cancel","Select","uuid","_","MultiSelect","CKEditors","CreateHashtagsListingComponent","LocationSearchInput","XCircle","SimpleMDE","DateRangePicker","Dropzone","connect","saveListingData","experienceOptions","idealTimespanOptions","desiredSkillsOptions","rankOptions","maxNumberOfHackersOptions","tokensApplyOptions","disclosureOptions","physicalOptions","visibilityOptions","NotificationManager","axios","LoadingBar","CreateJobListingMainHelper","props","assetArray","setAssetArray","timespan","setTimespan","data","setData","requiredRankToApply","setRequiredRankToApply","experienceAndCost","setExperienceAndCost","desiredSkills","setDesiredSkills","content","setContent","maxNumberOfApplicants","setMaxNumberOfApplicants","popoverOpen","setPopoverOpen","tokensRequiredToApply","setTokensRequiredToApply","disclosureVisibility","setDisclosureVisibility","typeOfHack","setTypeOfHack","rules","setRules","outOfScope","setOutOfScope","progress","setProgress","selectionRange","setSelectionRange","startDate","Date","endDate","key","availiableHackerDates","handleHackerDates","listingVisibility","setListingVisibility","onChangeDescription","evt","newContent","editor","getData","previousData","listingDescription","handleChangeInput","e","name","value","target","prevState","handleAssetAddition","preventDefault","id","assetName","changeBountyPrices","rewardLevel","asset","map","item","i","Number","renderBusinessLocationPortion","renderPhysicalHackingDates","color","paddingBottom","handleDatesSelectable","handleDeadlineSelect","ranges","selection","estimatedCompletionDate","testingDatesHackers","getUploadParams","meta","url","handleChangeStatus","status","file","console","log","FormData","append","config","onUploadProgress","progressEvent","percentCompleted","Math","round","loaded","total","headers","post","process","env","REACT_APP_BASE_URL","then","res","message","success","catch","err","handleListingSubmission","rulesOfEngagement","publicCompanyName","outOfScopeVulnerabilities","hashtags","businessAddress","paddingTop","length","index","filter","dropzone","height","dropzoneActive","borderColor","mapStateToProps","state","has","listingData"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,QAAzB,EAAmCC,SAAnC,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,qCAAvB;AACA,OAAOC,GAAP,MAAgB,kDAAhB;AACA,SAAQC,SAAR,EAAkBC,GAAlB,EAAsBC,GAAtB,EAA0BC,IAA1B,EAA+BC,QAA/B,EAAwCC,KAAxC,EAA8CC,MAA9C,EAAqDC,IAArD,EAA0DC,SAA1D,EAAoEC,KAApE,EAA0EC,KAA1E,EAAgFC,UAAhF,EAA2FC,eAA3F,EAA2GC,SAA3G,EAAqHC,aAArH,EAAmIC,cAAnI,EAAkJC,OAAlJ,EAA0JC,WAA1J,EAAsKC,aAAtK,QAA0L,YAA1L;AACA,SAASC,MAAT,EAAgBC,MAAhB,QAA8B,4BAA9B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,8BAAP,MAA2C,6CAA3C;AACA,OAAOC,mBAAP,MAAgC,qCAAhC;AACA,SAASC,OAAT,QAAwB,eAAxB;AACA,OAAO,cAAP;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SAASC,eAAT,QAAgC,kBAAhC;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,eAAT,QAAgC,kEAAhC;AACA,SACIC,iBADJ,EAEIC,oBAFJ,EAGIC,oBAHJ,EAIIC,WAJJ,EAKIC,yBALJ,EAMIC,kBANJ,EAOIC,iBAPJ,EAQIC,eARJ,EASIC,iBATJ,QAUO,uCAVP;AAWA,SAASC,mBAAT,QAAoC,qBAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;;AAEA,MAAMC,0BAA0B,GAAIC,KAAD,IAAW;AAC1C,QAAM,CAAEC,UAAF,EAAcC,aAAd,IAAgCrD,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAAEsD,QAAF,EAAYC,WAAZ,IAA4BvD,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAAEwD,IAAF,EAAQC,OAAR,IAAoBzD,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAAE0D,mBAAF,EAAuBC,sBAAvB,IAAkD3D,QAAQ,CAAC,IAAD,CAAhE;AACA,QAAM,CAAE4D,iBAAF,EAAqBC,oBAArB,IAA8C7D,QAAQ,CAAC,IAAD,CAA5D;AACA,QAAM,CAAE8D,aAAF,EAAiBC,gBAAjB,IAAsC/D,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAAEgE,OAAF,EAAUC,UAAV,IAAyBjE,QAAQ,CAAC,4BAAD,CAAvC;AACA,QAAM,CAAEkE,qBAAF,EAAyBC,wBAAzB,IAAsDnE,QAAQ,CAAC,IAAD,CAApE;AACA,QAAM,CAAEoE,WAAF,EAAeC,cAAf,IAAkCrE,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAAEsE,qBAAF,EAAyBC,wBAAzB,IAAsDvE,QAAQ,CAAC,IAAD,CAApE;AACA,QAAM,CAAEwE,oBAAF,EAAwBC,uBAAxB,IAAoDzE,QAAQ,CAAC,IAAD,CAAlE;AACA,QAAM,CAAE0E,UAAF,EAAcC,aAAd,IAAgC3E,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAAE4E,KAAF,EAASC,QAAT,IAAsB7E,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAAE8E,UAAF,EAAcC,aAAd,IAAgC/E,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAAEgF,QAAF,EAAYC,WAAZ,IAA4BjF,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAAEkF,cAAF,EAAkBC,iBAAlB,IAAwCnF,QAAQ,CAAC;AACnDoF,IAAAA,SAAS,EAAE,IAAIC,IAAJ,EADwC;AAEnDC,IAAAA,OAAO,EAAE,IAAID,IAAJ,EAF0C;AAGnDE,IAAAA,GAAG,EAAE;AAH8C,GAAD,CAAtD;AAKA,QAAM,CAAEC,qBAAF,EAAyBC,iBAAzB,IAA+CzF,QAAQ,CAAC,CAAC;AAC3DoF,IAAAA,SAAS,EAAE,IAAIC,IAAJ,EADgD;AAE3DC,IAAAA,OAAO,EAAE,IAAID,IAAJ,EAFkD;AAG3DE,IAAAA,GAAG,EAAE;AAHsD,GAAD,CAAD,CAA7D;AAKA,QAAM,CAAEG,iBAAF,EAAqBC,oBAArB,IAA8C3F,QAAQ,CAAC,IAAD,CAA5D;;AAEA,QAAM4F,mBAAmB,GAAIC,GAAD,IAAS;AACjC,UAAMC,UAAU,GAAGD,GAAG,CAACE,MAAJ,CAAWC,OAAX,EAAnB;AACA/B,IAAAA,UAAU,CAAC6B,UAAD,CAAV;AAEA3C,IAAAA,KAAK,CAACd,eAAN,CAAsB,EAClB,GAAGc,KAAK,CAAC8C,YADS;AAElBC,MAAAA,kBAAkB,EAAEJ;AAFF,KAAtB;AAIH,GARD;;AASA,QAAMK,iBAAiB,GAAIC,CAAD,IAAO;AAC7B,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,CAAC,CAACG,MAA1B;AAEA9C,IAAAA,OAAO,CAAC+C,SAAS,IAAI;AACjB,aAAO,EACH,GAAGA,SADA;AAEH,SAACH,IAAD,GAAQC;AAFL,OAAP;AAIH,KALM,CAAP;AAOAnD,IAAAA,KAAK,CAACd,eAAN,CAAsB,EAClB,GAAGc,KAAK,CAAC8C,YADS;AAElB,OAACI,IAAD,GAAQC;AAFU,KAAtB;AAIH,GAdD;;AAeA,QAAMG,mBAAmB,GAAIL,CAAD,IAAO;AAC/BA,IAAAA,CAAC,CAACM,cAAF,GAD+B,CAE/B;;AAEArD,IAAAA,aAAa,CAACmD,SAAS,IAAI;AACvBrD,MAAAA,KAAK,CAACd,eAAN,CAAsB,EAClB,GAAGc,KAAK,CAAC8C,YADS;AAElB7C,QAAAA,UAAU,EAAE,CAAC,GAAGoD,SAAJ,EAAe;AACvBG,UAAAA,EAAE,EAAEjF,IAAI,EADe;AAEvB2E,UAAAA,IAAI,EAAE7C,IAAI,CAACoD;AAFY,SAAf;AAFM,OAAtB;AAOA,aAAO,CAAC,GAAGJ,SAAJ,EAAe;AAClBG,QAAAA,EAAE,EAAEjF,IAAI,EADU;AAElB2E,QAAAA,IAAI,EAAE7C,IAAI,CAACoD;AAFO,OAAf,CAAP;AAIH,KAZY,CAAb;AAaAnD,IAAAA,OAAO,CAAC+C,SAAS,IAAI;AACjB,aAAO,EACH,GAAGA,SADA;AAEHI,QAAAA,SAAS,EAAE;AAFR,OAAP;AAIH,KALM,CAAP;AAMH,GAvBD;;AAwBA,QAAMC,kBAAkB,GAAG,CAACT,CAAD,EAAIU,WAAJ,EAAiBC,KAAjB,KAA2B;AAClD,UAAM;AAAET,MAAAA;AAAF,QAAYF,CAAC,CAACG,MAApB;AAEAlD,IAAAA,aAAa,CAACmD,SAAS,IAAI;AACvBrD,MAAAA,KAAK,CAACd,eAAN,CAAsB,EAClB,GAAGc,KAAK,CAAC8C,YADS;AAElB7C,QAAAA,UAAU,EAAEoD,SAAS,CAACQ,GAAV,CAAc,CAACC,IAAD,EAAOC,CAAP,KAAa;AACnC,cAAID,IAAI,CAACN,EAAL,KAAYI,KAAK,CAACJ,EAAtB,EAA0B;AACtB,mBAAO,EACH,GAAGM,IADA;AAEH,eAACH,WAAD,GAAeK,MAAM,CAACb,KAAD;AAFlB,aAAP;AAIH,WALD,MAKO;AACH,mBAAOW,IAAP;AACH;AACJ,SATW;AAFM,OAAtB;AAaA,aAAOT,SAAS,CAACQ,GAAV,CAAc,CAACC,IAAD,EAAOC,CAAP,KAAa;AAC9B,YAAID,IAAI,CAACN,EAAL,KAAYI,KAAK,CAACJ,EAAtB,EAA0B;AACtB,iBAAO,EACH,GAAGM,IADA;AAEH,aAACH,WAAD,GAAeK,MAAM,CAACb,KAAD;AAFlB,WAAP;AAIH,SALD,MAKO;AACH,iBAAOW,IAAP;AACH;AACJ,OATM,CAAP;AAUH,KAxBY,CAAb;AAyBH,GA5BD;;AA6BA,QAAMG,6BAA6B,GAAG,MAAM;AACxC,QAAI1C,UAAU,KAAK,IAAf,IAAuBA,UAAU,CAAC4B,KAAX,KAAqB,eAAhD,EAAiE;AAC7D,0BACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAI,QAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wEAAmE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAnE,iBADJ,eAEI,oBAAC,IAAD;AAAM,QAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAC,IAAR;AAAa,QAAA,EAAE,EAAC,IAAhB;AAAqB,QAAA,EAAE,EAAC,IAAxB;AAA6B,QAAA,EAAE,EAAC,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,KAAD;AAAO,QAAA,OAAO,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iHAAiI;AAAM,QAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAjI,CADJ,eAEI,oBAAC,mBAAD;AAAqB,QAAA,KAAK,EAAEnD,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADJ,CADJ,CADJ,CAFJ,CADJ;AAeH;AACJ,GAlBD;;AAmBA,QAAMkE,0BAA0B,GAAG,MAAM;AACrC,QAAI3C,UAAU,KAAK,IAAf,IAAuBA,UAAU,CAAC4B,KAAX,KAAqB,eAAhD,EAAiE;AAC7D,0BACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,KAAD;AAAO,QAAA,OAAO,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sFAAsG;AAAM,QAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAtG,CADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2EAAoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAApD,qJAAqN;AAAQ,QAAA,KAAK,EAAE;AAAEgB,UAAAA,KAAK,EAAE;AAAT,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAArN,2BAFJ,eAGI;AAAG,QAAA,KAAK,EAAE;AAAEC,UAAAA,aAAa,EAAE;AAAjB,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,eAII,oBAAC,eAAD;AACI,QAAA,MAAM,EAAE/B,qBADZ;AAEI,QAAA,QAAQ,EAAEgC,qBAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,CADJ;AAWH;AACJ,GAdD;;AAeA,QAAMC,oBAAoB,GAAIC,MAAD,IAAY;AACrCvC,IAAAA,iBAAiB,CAACuC,MAAM,CAACC,SAAR,CAAjB;AAEAxE,IAAAA,KAAK,CAACd,eAAN,CAAsB,EAClB,GAAGc,KAAK,CAAC8C,YADS;AAElB2B,MAAAA,uBAAuB,EAAEF,MAAM,CAACC;AAFd,KAAtB;AAIH,GAPD;;AAQA1H,EAAAA,SAAS,CAAC,MAAM;AACZkD,IAAAA,KAAK,CAACd,eAAN,CAAsB,EAAtB;AACH,GAFQ,EAEN,EAFM,CAAT;;AAGA,QAAMmF,qBAAqB,GAAIE,MAAD,IAAY;AACtCjC,IAAAA,iBAAiB,CAACe,SAAS,IAAI;AAC3BrD,MAAAA,KAAK,CAACd,eAAN,CAAsB,EAClB,GAAGc,KAAK,CAAC8C,YADS;AAElB4B,QAAAA,mBAAmB,EAAE,CAAC,GAAGrB,SAAJ,EAAekB,MAAM,CAACC,SAAtB;AAFH,OAAtB;AAIA,aAAO,CAAC,GAAGnB,SAAJ,EAAekB,MAAM,CAACC,SAAtB,CAAP;AACH,KANgB,CAAjB;AAOH,GARD;;AASA,QAAMG,eAAe,GAAG,QAAc;AAAA,QAAb;AAAEC,MAAAA;AAAF,KAAa;AAClC,WAAO;AACHC,MAAAA,GAAG,EAAE;AADF,KAAP;AAGH,GAJD;;AAMA,QAAMC,kBAAkB,GAAG,QAAiBC,MAAjB,KAA4B;AAAA,QAA3B;AAAEH,MAAAA,IAAF;AAAQI,MAAAA;AAAR,KAA2B;AACnDC,IAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ,EAAoBH,IAApB,EAA0BI,IAA1B;;AAEA,QAAID,MAAM,KAAK,MAAf,EAAuB;AACnB,YAAM1E,IAAI,GAAG,IAAI8E,QAAJ,EAAb;AAEA9E,MAAAA,IAAI,CAAC+E,MAAL,CAAY,MAAZ,EAAoBJ,IAApB;AACA3E,MAAAA,IAAI,CAAC+E,MAAL,CAAY,MAAZ,EAAoBR,IAApB;AAEA,YAAMS,MAAM,GAAG;AACXC,QAAAA,gBAAgB,EAAE,UAASC,aAAT,EAAwB;AACtC,cAAIC,gBAAgB,GAAGC,IAAI,CAACC,KAAL,CAAYH,aAAa,CAACI,MAAd,GAAuB,GAAxB,GAA+BJ,aAAa,CAACK,KAAxD,CAAvB;AAEAX,UAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCM,gBAAhC;AAEA1D,UAAAA,WAAW,CAAC0D,gBAAD,CAAX;AACH,SAPU;AAQXK,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX;AARE,OAAf;AAaAhG,MAAAA,KAAK,CAACiG,IAAN,CAAY,GAAEC,OAAO,CAACC,GAAR,CAAYC,kBAAmB,8CAA7C,EAA4F5F,IAA5F,EAAkGgF,MAAlG,EAA0Ga,IAA1G,CAAgHC,GAAD,IAAS;AACpH,YAAIA,GAAG,CAAC9F,IAAJ,CAAS+F,OAAT,KAAqB,gCAAzB,EAA2D;AACvDnB,UAAAA,OAAO,CAACC,GAAR,CAAYiB,GAAG,CAAC9F,IAAhB;AAEA,gBAAM;AAAE2E,YAAAA;AAAF,cAAWmB,GAAG,CAAC9F,IAArB;AAEAT,UAAAA,mBAAmB,CAACyG,OAApB,CAA6B,uGAA7B,EAAqI,6BAArI,EAAoK,IAApK;AACH,SAND,MAMO;AACHpB,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBiB,GAAG,CAAC9F,IAAvB;AACH;AACJ,OAVD,EAUGiG,KAVH,CAUUC,GAAD,IAAS;AACdtB,QAAAA,OAAO,CAACC,GAAR,CAAYqB,GAAZ;AACH,OAZD;AAaH;AACJ,GApCD;;AAqCA,QAAMC,uBAAuB,GAAIvD,CAAD,IAAO;AAEnCA,IAAAA,CAAC,CAACM,cAAF;AAEA,UAAM;AAAEtD,MAAAA,UAAF;AAAcsB,MAAAA,UAAd;AAA0BmD,MAAAA,mBAA1B;AAA+C+B,MAAAA,iBAA/C;AAAkEC,MAAAA,iBAAlE;AAAqFC,MAAAA,yBAArF;AAAgH5D,MAAAA,kBAAhH;AAAoI6D,MAAAA,QAApI;AAA8IC,MAAAA,eAA9I;AAA+JtG,MAAAA,mBAA/J;AAAoLE,MAAAA,iBAApL;AAAuME,MAAAA,aAAvM;AAAsNI,MAAAA,qBAAtN;AAA6OM,MAAAA,oBAA7O;AAAmQF,MAAAA,qBAAnQ;AAA0RhB,MAAAA,QAA1R;AAAoSoC,MAAAA,iBAApS;AAAuTkC,MAAAA;AAAvT,QAAmV,KAAKzE,KAAL,CAAW8C,YAApW,CAJmC,CAMnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GApBD;;AAqBA,sBACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,UAAD;AAAY,IAAA,MAAM,EAAC,gBAAnB;AAAoC,IAAA,KAAK,EAAC,kCAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI,oBAAC,UAAD;AACI,IAAA,KAAK,EAAC,SADV;AAEI,IAAA,QAAQ,EAAEjB,QAFd;AAGI,IAAA,gBAAgB,EAAE,MAAMC,WAAW,CAAC,CAAD,CAHvC;AAII,IAAA,SAAS,EAAC,iBAJd;AAKI,IAAA,kBAAkB,EAAC,iBALvB;AAMI,IAAA,MAAM,EAAE,CANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,eAUI,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAE,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAC,WAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,QAAD;AAAU,IAAA,SAAS,EAAC,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,yBAAf;AAAyC,IAAA,GAAG,EAAE9E,GAA9C;AAAmD,IAAA,GAAG,EAAC,EAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI,oBAAC,KAAD;AAAO,IAAA,IAAI,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAI,IAAA,SAAS,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAG,IAAA,IAAI,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADJ,eAEI;AAAM,IAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,eAYI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sIAZJ,CAFJ,CADJ,eAkBI;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAI,IAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,eAEI,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAC,GAAR;AAAY,IAAA,EAAE,EAAC,GAAf;AAAmB,IAAA,EAAE,EAAC,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAA8D;AAAM,IAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA9D,CADJ,eAEI,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEqD,IAAI,CAACqG,iBAAnB;AAAsC,IAAA,QAAQ,EAAE1D,iBAAhD;AAAmE,IAAA,SAAS,EAAC,cAA7E;AAA4F,IAAA,EAAE,EAAC,0BAA/F;AAA0H,IAAA,IAAI,EAAC,mBAA/H;AAAmJ,IAAA,IAAI,EAAC,MAAxJ;AAA+J,IAAA,WAAW,EAAC,4CAA3K;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,CADJ,eAOI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAC,GAAR;AAAY,IAAA,EAAE,EAAC,GAAf;AAAmB,IAAA,EAAE,EAAC,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6DAAiF;AAAM,IAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAjF,CADJ,eAEI,oBAAC,MAAD;AACI,IAAA,KAAK,EAAEzC,mBADX;AAEI,IAAA,QAAQ,EAAG4C,KAAD,IAAW;AACjB3C,MAAAA,sBAAsB,CAAC2C,KAAD,CAAtB;AAEAnD,MAAAA,KAAK,CAACd,eAAN,CAAsB,EAClB,GAAGc,KAAK,CAAC8C,YADS;AAElBvC,QAAAA,mBAAmB,EAAE4C;AAFH,OAAtB;AAIH,KATL;AAUI,IAAA,OAAO,EAAE7D,WAVb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,CAPJ,CADJ,eA0BI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mEAAuF;AAAM,IAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAvF,CADJ,eAEI;AAAG,IAAA,KAAK,EAAE;AAAEwH,MAAAA,UAAU,EAAE,KAAd;AAAqB1C,MAAAA,aAAa,EAAE;AAApC,KAAV;AAAuD,IAAA,SAAS,EAAC,WAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uMAA8P;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAA9P,qGAAuW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAvW,MAFJ,eAGI,oBAAC,MAAD;AACI,IAAA,KAAK,EAAE3D,iBADX;AAEI,IAAA,QAAQ,EAAG0C,KAAD,IAAW;AACjBzC,MAAAA,oBAAoB,CAACyC,KAAD,CAApB;AAEAnD,MAAAA,KAAK,CAACd,eAAN,CAAsB,EAClB,GAAGc,KAAK,CAAC8C,YADS;AAElBrC,QAAAA,iBAAiB,EAAE0C;AAFD,OAAtB;AAIH,KATL;AAUI,IAAA,OAAO,EAAEhE,iBAVb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADJ,CADJ,CA1BJ,eA8CI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2DAAiF;AAAM,IAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAjF,CADJ,eAEI,oBAAC,WAAD;AACI,IAAA,OAAO,EAAEE,oBADb;AAEI,IAAA,KAAK,EAAEsB,aAFX;AAGI,IAAA,QAAQ,EAAGwC,KAAD,IAAW;AACjBvC,MAAAA,gBAAgB,CAACuC,KAAD,CAAhB;AAEAnD,MAAAA,KAAK,CAACd,eAAN,CAAsB,EAClB,GAAGc,KAAK,CAAC8C,YADS;AAElBnC,QAAAA,aAAa,EAAEwC;AAFG,OAAtB;AAIH,KAVL;AAWI,IAAA,UAAU,EAAC,QAXf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,CADJ,CA9CJ,eAkEI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAC,6BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kFAAyG;AAAM,IAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAzG,CADJ,eAEI,oBAAC,8BAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,CADJ,CAlEJ,eA0EI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAArC,iCADJ,eAEI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AACI,IAAA,KAAK,EAAEpC,qBADX;AAEI,IAAA,QAAQ,EAAGoC,KAAD,IAAW;AACjBnC,MAAAA,wBAAwB,CAACmC,KAAD,CAAxB;AAEAnD,MAAAA,KAAK,CAACd,eAAN,CAAsB,EAClB,GAAGc,KAAK,CAAC8C,YADS;AAElB/B,QAAAA,qBAAqB,EAAEoC;AAFL,OAAtB;AAIH,KATL;AAUI,IAAA,OAAO,EAAE5D,yBAVb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAFJ,CADJ,eAkBI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,YAAY,EAAE,MAAM;AACrB2B,MAAAA,cAAc,CAAC,IAAD,CAAd;AACH,KAFD;AAEG,IAAA,EAAE,EAAC,WAFN;AAEkB,IAAA,SAAS,EAAC,qBAF5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4DADJ,eAII,oBAAC,OAAD;AACI,IAAA,SAAS,EAAE,KADf;AAEI,IAAA,MAAM,EAAED,WAFZ;AAGI,IAAA,MAAM,EAAE,WAHZ;AAII,IAAA,MAAM,EAAE,MAAM;AACVC,MAAAA,cAAc,CAAC,CAACD,WAAF,CAAd;AACH,KANL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAQI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6DARJ,eASI,oBAAC,WAAD;AAAa,IAAA,YAAY,EAAE,MAAM;AAC7BC,MAAAA,cAAc,CAAC,KAAD,CAAd;AACH,KAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4GAG0F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAH1F,mKATJ,CAJJ,eAmBI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AACI,IAAA,KAAK,EAAEC,qBADX;AAEI,IAAA,QAAQ,EAAGgC,KAAD,IAAW;AACjB/B,MAAAA,wBAAwB,CAAC+B,KAAD,CAAxB;AAEAnD,MAAAA,KAAK,CAACd,eAAN,CAAsB,EAClB,GAAGc,KAAK,CAAC8C,YADS;AAElB3B,QAAAA,qBAAqB,EAAEgC;AAFL,OAAtB;AAIH,KATL;AAUI,IAAA,OAAO,EAAE3D,kBAVb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAnBJ,CAlBJ,CA1EJ,eA+HI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAC,IAAR;AAAa,IAAA,EAAE,EAAC,GAAhB;AAAoB,IAAA,EAAE,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2EADJ,eAEI,oBAAC,MAAD;AACI,IAAA,KAAK,EAAE6B,oBADX;AAEI,IAAA,QAAQ,EAAG8B,KAAD,IAAW;AACjB7B,MAAAA,uBAAuB,CAAC6B,KAAD,CAAvB;AAEAnD,MAAAA,KAAK,CAACd,eAAN,CAAsB,EAClB,GAAGc,KAAK,CAAC8C,YADS;AAElBzB,QAAAA,oBAAoB,EAAE8B;AAFJ,OAAtB;AAIH,KATL;AAUI,IAAA,OAAO,EAAE1D,iBAVb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,CADJ,eAkBI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAC,IAAR;AAAa,IAAA,EAAE,EAAC,GAAhB;AAAoB,IAAA,EAAE,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gEAAoF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAApF,6BADJ,eAEI,oBAAC,MAAD;AACI,IAAA,KAAK,EAAE8B,UADX;AAEI,IAAA,QAAQ,EAAG4B,KAAD,IAAW;AACjB3B,MAAAA,aAAa,CAAC2B,KAAD,CAAb;AAEAnD,MAAAA,KAAK,CAACd,eAAN,CAAsB,EAClB,GAAGc,KAAK,CAAC8C,YADS;AAElBvB,QAAAA,UAAU,EAAE4B;AAFM,OAAtB;AAIH,KATL;AAUI,IAAA,OAAO,EAAEzD,eAVb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,CAlBJ,CA/HJ,CAFJ,eAsKI;AAAI,IAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDAtKJ,eAuKI,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAC,GAAR;AAAY,IAAA,EAAE,EAAC,GAAf;AAAmB,IAAA,EAAE,EAAC,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAC,IAAR;AAAa,IAAA,EAAE,EAAC,IAAhB;AAAqB,IAAA,EAAE,EAAC,IAAxB;AAA6B,IAAA,EAAE,EAAC,WAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kGAAsH;AAAM,IAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAtH,CADJ,eAEI,oBAAC,MAAD;AACI,IAAA,KAAK,EAAES,QADX;AAEI,IAAA,QAAQ,EAAGgD,KAAD,IAAW;AACjB/C,MAAAA,WAAW,CAAC+C,KAAD,CAAX;AAEAnD,MAAAA,KAAK,CAACd,eAAN,CAAsB,EAClB,GAAGc,KAAK,CAAC8C,YADS;AAElB3C,QAAAA,QAAQ,EAAEgD;AAFQ,OAAtB;AAIH,KATL;AAUI,IAAA,OAAO,EAAE/D,oBAVb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,CADJ,eAkBI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAC,IAAR;AAAa,IAAA,EAAE,EAAC,IAAhB;AAAqB,IAAA,EAAE,EAAC,IAAxB;AAA6B,IAAA,EAAE,EAAC,WAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oFAAwG;AAAM,IAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAxG,CADJ,eAEI,oBAAC,MAAD;AACI,IAAA,KAAK,EAAEmD,iBADX;AAEI,IAAA,QAAQ,EAAGY,KAAD,IAAW;AACjBX,MAAAA,oBAAoB,CAACW,KAAD,CAApB;AAEAnD,MAAAA,KAAK,CAACd,eAAN,CAAsB,EAClB,GAAGc,KAAK,CAAC8C,YADS;AAElBP,QAAAA,iBAAiB,EAAEY;AAFD,OAAtB;AAIH,KATL;AAUI,IAAA,OAAO,EAAExD,iBAVb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,EAgBKuE,0BAA0B,EAhB/B,CAlBJ,CADJ,eAsCI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAC,IAAR;AAAa,IAAA,EAAE,EAAC,IAAhB;AAAqB,IAAA,EAAE,EAAC,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sHAA0I;AAAM,IAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA1I,CADJ,eAEI;AAAG,IAAA,KAAK,EAAE;AAAEE,MAAAA,aAAa,EAAE;AAAjB,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mGAAkH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAlH,oNAFJ,eAGI,oBAAC,eAAD;AACI,IAAA,MAAM,EAAE,CAACrC,cAAD,CADZ;AAEI,IAAA,QAAQ,EAAEuC,oBAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADJ,CAtCJ,CADJ,CAvKJ,EA0NKL,6BAA6B,EA1NlC,eA2NI;AAAI,IAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAArB,yDA3NJ,eA4NI,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAC,WAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAAgE;AAAM,IAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAhE,CADJ,eAEI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD;AAAO,IAAA,QAAQ,EAAEjB,iBAAjB;AAAoC,IAAA,KAAK,EAAE3C,IAAI,CAACoD,SAAhD;AAA2D,IAAA,SAAS,EAAC,cAArE;AAAoF,IAAA,EAAE,EAAC,0BAAvF;AAAkH,IAAA,IAAI,EAAC,WAAvH;AAAmI,IAAA,IAAI,EAAC,MAAxI;AAA+I,IAAA,WAAW,EAAC,mEAA3J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI,oBAAC,eAAD;AAAiB,IAAA,SAAS,EAAC,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAoC,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEH,mBAAjB;AAAsC,IAAA,KAAK,EAAC,WAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAApC,CAFJ,CAFJ,CADJ,CADJ,eAUI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,OAAOrD,UAAP,KAAsB,WAAtB,IAAqCA,UAAU,CAAC8G,MAAX,GAAoB,CAAzD,GAA6D9G,UAAU,CAAC4D,GAAX,CAAe,CAACD,KAAD,EAAQoD,KAAR,KAAkB;AAC3F,wBACI,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAEA,KAApB;AAA2B,MAAA,SAAS,EAAC,+CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,KAAK,EAAE;AAAE5C,QAAAA,aAAa,EAAE;AAAjB,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,aAAD;AAAe,MAAA,MAAM,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAuBR,KAAK,CAACV,IAA7B,eAAkC;AAAK,MAAA,OAAO,EAAE,MAAM;AAClDhD,QAAAA,aAAa,CAACmD,SAAS,IAAI;AACvBrD,UAAAA,KAAK,CAACd,eAAN,CAAsB,EAClB,GAAGc,KAAK,CAAC8C,YADS;AAElB7C,YAAAA,UAAU,EAAEoD,SAAS,CAAC4D,MAAV,CAAiB,CAACnD,IAAD,EAAOkD,KAAP,KAAiB;AAC1C,kBAAIlD,IAAI,CAACN,EAAL,KAAYI,KAAK,CAACJ,EAAtB,EAA0B;AACtB,uBAAOM,IAAP;AACH;AACJ,aAJW;AAFM,WAAtB;AAQA,iBAAOT,SAAS,CAAC4D,MAAV,CAAiB,CAACnD,IAAD,EAAOkD,KAAP,KAAiB;AACrC,gBAAIlD,IAAI,CAACN,EAAL,KAAYI,KAAK,CAACJ,EAAtB,EAA0B;AACtB,qBAAOM,IAAP;AACH;AACJ,WAJM,CAAP;AAKH,SAdY,CAAb;AAeH,OAhBiC;AAgB/B,MAAA,EAAE,EAAC,kBAhB4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAgBT,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhBS,CAAlC,CADJ,CADJ,eAoBI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAC,GAAR;AAAY,MAAA,EAAE,EAAC,GAAf;AAAmB,MAAA,EAAE,EAAC,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAO;AAAM,MAAA,KAAK,EAAE;AAAEK,QAAAA,KAAK,EAAE;AAAT,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP,4BADJ,eAEI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,KAAD;AAAO,MAAA,QAAQ,EAAGlB,CAAD,IAAO;AACpBS,QAAAA,kBAAkB,CAACT,CAAD,EAAI,aAAJ,EAAmBW,KAAnB,CAAlB;AACH,OAFD;AAEG,MAAA,SAAS,EAAC,cAFb;AAE4B,MAAA,IAAI,EAAC,MAFjC;AAEwC,MAAA,WAAW,EAAC,8BAFpD;AAEmF,oBAAW,8BAF9F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CAFJ,CADJ,CADJ,eAWI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAC,GAAR;AAAY,MAAA,EAAE,EAAC,GAAf;AAAmB,MAAA,EAAE,EAAC,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAO;AAAM,MAAA,KAAK,EAAE;AAAEO,QAAAA,KAAK,EAAE;AAAT,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP,4BADJ,eAEI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,KAAD;AAAO,MAAA,QAAQ,EAAGlB,CAAD,IAAO;AACpBS,QAAAA,kBAAkB,CAACT,CAAD,EAAI,gBAAJ,EAAsBW,KAAtB,CAAlB;AACH,OAFD;AAEG,MAAA,SAAS,EAAC,cAFb;AAE4B,MAAA,IAAI,EAAC,MAFjC;AAEwC,MAAA,WAAW,EAAC,8BAFpD;AAEmF,oBAAW,8BAF9F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CAFJ,CADJ,CAXJ,eAqBI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAC,GAAR;AAAY,MAAA,EAAE,EAAC,GAAf;AAAmB,MAAA,EAAE,EAAC,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAO;AAAM,MAAA,KAAK,EAAE;AAAEO,QAAAA,KAAK,EAAE;AAAT,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP,4BADJ,eAEI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,KAAD;AAAO,MAAA,QAAQ,EAAGlB,CAAD,IAAO;AACpBS,QAAAA,kBAAkB,CAACT,CAAD,EAAI,cAAJ,EAAoBW,KAApB,CAAlB;AACH,OAFD;AAEG,MAAA,SAAS,EAAC,cAFb;AAE4B,MAAA,IAAI,EAAC,MAFjC;AAEwC,MAAA,WAAW,EAAC,8BAFpD;AAEmF,oBAAW,8BAF9F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CAFJ,CADJ,CArBJ,eA+BI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAC,GAAR;AAAY,MAAA,EAAE,EAAC,GAAf;AAAmB,MAAA,EAAE,EAAC,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAO;AAAM,MAAA,KAAK,EAAE;AAAEO,QAAAA,KAAK,EAAE;AAAT,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP,4BADJ,eAEI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,KAAD;AAAO,MAAA,QAAQ,EAAGlB,CAAD,IAAO;AACpBS,QAAAA,kBAAkB,CAACT,CAAD,EAAI,kBAAJ,EAAwBW,KAAxB,CAAlB;AACH,OAFD;AAEG,MAAA,SAAS,EAAC,cAFb;AAE4B,MAAA,IAAI,EAAC,MAFjC;AAEwC,MAAA,WAAW,EAAC,8BAFpD;AAEmF,oBAAW,8BAF9F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CAFJ,CADJ,CA/BJ,CApBJ,CADJ;AAiEH,GAlE6D,CAA7D,GAkEI,IAnEL,CAVJ,CADJ,CA5NJ,eA8SI;AAAI,IAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CA9SJ,eA+SI,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD;AAAO,IAAA,SAAS,EAAC,qBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAsD;AAAM,IAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAtD,CADJ,eAEI;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,QAAD;AACI,IAAA,eAAe,EAAEe,eADrB;AAEI,IAAA,cAAc,EAAEG,kBAFpB;AAGI,IAAA,QAAQ,EAAE,CAHd;AAII,IAAA,QAAQ,EAAE,IAJd;AAKI,IAAA,SAAS,EAAE,KALf;AAMI,IAAA,YAAY,EAAC,gBANjB;AAOI,IAAA,MAAM,EAAE;AACJoC,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,MAAM,EAAE;AAAV,OADN;AAEJC,MAAAA,cAAc,EAAE;AAAEC,QAAAA,WAAW,EAAE;AAAf;AAFZ,KAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAFJ,CADJ,CADJ,CADJ,CA/SJ,eAsUI;AAAI,IAAA,SAAS,EAAC,MAAd;AAAqB,IAAA,KAAK,EAAE;AAAEjD,MAAAA,aAAa,EAAE;AAAjB,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAtUJ,eAuUI;AAAG,IAAA,KAAK,EAAE;AAAEA,MAAAA,aAAa,EAAE;AAAjB,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8JAA6K;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAA7K,gNAvUJ,eAwUI,oBAAC,SAAD;AACI,IAAA,eAAe,EAAC,KADpB;AAEI,IAAA,OAAO,EAAEvD,OAFb;AAGI,IAAA,MAAM,EAAE;AACJ,gBAAU4B;AADN,KAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAxUJ,eA+UI;AAAI,IAAA,SAAS,EAAC,MAAd;AAAqB,IAAA,KAAK,EAAE;AAAE2B,MAAAA,aAAa,EAAE,MAAjB;AAAyB0C,MAAAA,UAAU,EAAE;AAArC,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wDA/UJ,eAgVI;AAAG,IAAA,KAAK,EAAE;AAAE1C,MAAAA,aAAa,EAAE;AAAjB,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAAuD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAvD,gCAAoG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAApG,iGAAwM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAxM,0PAhVJ,eAiVI,oBAAC,SAAD;AACI,IAAA,EAAE,EAAC,kBADP;AAEI,IAAA,QAAQ,EAAGjB,KAAD,IAAW;AACjBzB,MAAAA,QAAQ,CAACyB,KAAD,CAAR;AAEAnD,MAAAA,KAAK,CAACd,eAAN,CAAsB,EAClB,GAAGc,KAAK,CAAC8C,YADS;AAElB2D,QAAAA,iBAAiB,EAAEtD;AAFD,OAAtB;AAIH,KATL;AAUI,IAAA,KAAK,EAAE1B,KAVX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjVJ,eA6VI;AAAI,IAAA,SAAS,EAAC,MAAd;AAAqB,IAAA,KAAK,EAAE;AAAE2C,MAAAA,aAAa,EAAE,MAAjB;AAAyB0C,MAAAA,UAAU,EAAE;AAArC,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA2E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA3E,kCA7VJ,eA8VI;AAAG,IAAA,KAAK,EAAE;AAAE1C,MAAAA,aAAa,EAAE;AAAjB,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qFAAoG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAApG,qGAA0M;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAA1M,2GAA0T;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAA1T,CA9VJ,eA+VI,oBAAC,SAAD;AACI,IAAA,EAAE,EAAC,sBADP;AAEI,IAAA,QAAQ,EAAGjB,KAAD,IAAW;AACjBvB,MAAAA,aAAa,CAACuB,KAAD,CAAb;AAEAnD,MAAAA,KAAK,CAACd,eAAN,CAAsB,EAClB,GAAGc,KAAK,CAAC8C,YADS;AAElB6D,QAAAA,yBAAyB,EAAExD;AAFT,OAAtB;AAIH,KATL;AAUI,IAAA,KAAK,EAAExB,UAVX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA/VJ,CAlBJ,CADJ,eAgYI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAE6E,uBAAjB;AAA0C,IAAA,KAAK,EAAC,cAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgEpI,MAAhE,CADJ,eAEI,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuBC,MAAvB,CAFJ,CAhYJ,CADJ,CADJ,CAFJ,CADJ,CAVJ,CADJ;AA2ZH,CA1nBD;;AA2nBA,MAAMiJ,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHzE,IAAAA,YAAY,EAAEtE,CAAC,CAACgJ,GAAF,CAAMD,KAAK,CAACE,WAAZ,EAAyB,aAAzB,IAA0CF,KAAK,CAACE,WAAN,CAAkBA,WAA5D,GAA0E;AADrF,GAAP;AAGH,CAJD;;AAKA,eAAexI,OAAO,CAACqI,eAAD,EAAkB;AAAEpI,EAAAA;AAAF,CAAlB,CAAP,CAA8Ca,0BAA9C,CAAf","sourcesContent":["import React, {Fragment, useState, useEffect} from 'react';\nimport Breadcrumb from '../../../../../../layout/breadcrumb';\nimport one from '../../../../../../assets/images/job-search/1.jpg';\nimport {Container,Row,Col,Card,CardBody,Media,Button,Form,FormGroup,Label,Input,InputGroup,InputGroupAddon,ListGroup,ListGroupItem,InputGroupText,Popover,PopoverBody,PopoverHeader} from 'reactstrap';\nimport { Submit,Cancel } from \"../../../../../../constant\";\nimport Select from 'react-select';\nimport uuid from \"react-uuid\";\nimport _ from \"lodash\";\nimport { MultiSelect } from \"react-multi-select-component\";\nimport CKEditors from \"react-ckeditor-component\";\nimport CreateHashtagsListingComponent from \"./helpers/hashtags/createHashtagsListing.js\";\nimport LocationSearchInput from \"./helpers/location/searchAddress.js\";\nimport { XCircle } from \"react-feather\";\nimport \"./styles.css\";\nimport SimpleMDE from \"react-simplemde-editor\";\nimport { DateRangePicker } from 'react-date-range';\nimport Dropzone from 'react-dropzone-uploader';\nimport { connect } from \"react-redux\";\nimport { saveListingData } from \"../../../../../../redux/actions/employer/listings/listingData.js\";\nimport {\n    experienceOptions,\n    idealTimespanOptions,\n    desiredSkillsOptions,\n    rankOptions,\n    maxNumberOfHackersOptions,\n    tokensApplyOptions,\n    disclosureOptions,\n    physicalOptions,\n    visibilityOptions\n} from \"./helpers/options/selectionOptions.js\";\nimport { NotificationManager } from 'react-notifications';\nimport axios from \"axios\";\nimport LoadingBar from 'react-top-loading-bar';\n\nconst CreateJobListingMainHelper = (props) => {\n    const [ assetArray, setAssetArray ] = useState([]);\n    const [ timespan, setTimespan ] = useState(null);\n    const [ data, setData ] = useState({});\n    const [ requiredRankToApply, setRequiredRankToApply ] = useState(null);\n    const [ experienceAndCost, setExperienceAndCost ] = useState(null);\n    const [ desiredSkills, setDesiredSkills ] = useState([]);\n    const [ content,setContent ] = useState('Enter your content here...');\n    const [ maxNumberOfApplicants, setMaxNumberOfApplicants ] = useState(null);\n    const [ popoverOpen, setPopoverOpen ] = useState(false);\n    const [ tokensRequiredToApply, setTokensRequiredToApply ] = useState(null);\n    const [ disclosureVisibility, setDisclosureVisibility ] = useState(null);\n    const [ typeOfHack, setTypeOfHack ] = useState(null);\n    const [ rules, setRules ] = useState(\"\");\n    const [ outOfScope, setOutOfScope ] = useState(\"\");\n    const [ progress, setProgress ] = useState(0);\n    const [ selectionRange, setSelectionRange ] = useState({\n        startDate: new Date(),\n        endDate: new Date(),\n        key: 'selection',\n    });\n    const [ availiableHackerDates, handleHackerDates ] = useState([{\n        startDate: new Date(),\n        endDate: new Date(),\n        key: 'selection',\n    }]);\n    const [ listingVisibility, setListingVisibility ] = useState(null);\n\n    const onChangeDescription = (evt) => {\n        const newContent = evt.editor.getData();\n        setContent(newContent);\n\n        props.saveListingData({\n            ...props.previousData,\n            listingDescription: newContent\n        })\n    }\n    const handleChangeInput = (e) => {\n        const { name, value } = e.target;\n\n        setData(prevState => {\n            return {\n                ...prevState,\n                [name]: value\n            }\n        })\n\n        props.saveListingData({\n            ...props.previousData,\n            [name]: value\n        })\n    }\n    const handleAssetAddition = (e) => {\n        e.preventDefault();\n        // assetName\n\n        setAssetArray(prevState => {\n            props.saveListingData({\n                ...props.previousData,\n                assetArray: [...prevState, {\n                    id: uuid(),\n                    name: data.assetName\n                }]\n            })\n            return [...prevState, {\n                id: uuid(),\n                name: data.assetName\n            }]\n        });\n        setData(prevState => {\n            return {\n                ...prevState,\n                assetName: \"\"\n            }\n        })\n    }\n    const changeBountyPrices = (e, rewardLevel, asset) => {\n        const { value } = e.target;\n\n        setAssetArray(prevState => {\n            props.saveListingData({\n                ...props.previousData,\n                assetArray: prevState.map((item, i) => {\n                    if (item.id === asset.id) {\n                        return {\n                            ...item,\n                            [rewardLevel]: Number(value)\n                        }\n                    } else {\n                        return item;\n                    }\n                })\n            })\n            return prevState.map((item, i) => {\n                if (item.id === asset.id) {\n                    return {\n                        ...item,\n                        [rewardLevel]: Number(value)\n                    }\n                } else {\n                    return item;\n                }\n            });\n        });\n    }\n    const renderBusinessLocationPortion = () => {\n        if (typeOfHack !== null && typeOfHack.value === \"physical-hack\") {\n            return (\n                <Fragment>\n                    <h6 className=\"mb-0\">Location - Physical Hacking (Only Provided To <strong>SELECTED/HIRED</strong> Applicants)</h6>\n                    <Form className=\"theme-form\">\n                        <Row>\n                            <Col sm=\"12\" lg=\"12\" md=\"12\" xl=\"12\">\n                                <FormGroup>\n                                    <Label htmlFor=\"exampleFormControlInput1\">Enter your company business address (the address that your hackers will be testing at):<span className=\"font-danger\">*</span></Label>\n                                    <LocationSearchInput props={props} />\n                                </FormGroup>\n                            </Col>\n                        </Row>\n                    </Form>\n                </Fragment>\n            );\n        }\n    }\n    const renderPhysicalHackingDates = () => {\n        if (typeOfHack !== null && typeOfHack.value === \"physical-hack\") {\n            return (\n                <Fragment>\n                    <Label htmlFor=\"exampleFormControlInput1\">Dates Availiable To Hackers To Test Physical/Digital Assets:<span className=\"font-danger\">*</span></Label>\n                    <p>These are the days that will be available to the <strong>hired/selected</strong> hacker canidates to choose from when deciding which days they will attempt to infiltrate your company. This is only relevant for <strong style={{ color: \"blue\" }}>PHYSICAL</strong> hacking requirements.</p>\n                    <p style={{ paddingBottom: \"20px\" }}></p>\n                    <DateRangePicker\n                        ranges={availiableHackerDates}\n                        onChange={handleDatesSelectable}\n                    />\n                </Fragment>\n            );\n        }\n    }\n    const handleDeadlineSelect = (ranges) => {\n        setSelectionRange(ranges.selection);\n\n        props.saveListingData({\n            ...props.previousData,\n            estimatedCompletionDate: ranges.selection\n        });\n    }\n    useEffect(() => {\n        props.saveListingData({});\n    }, [])\n    const handleDatesSelectable = (ranges) => {\n        handleHackerDates(prevState => {\n            props.saveListingData({\n                ...props.previousData,\n                testingDatesHackers: [...prevState, ranges.selection]\n            });\n            return [...prevState, ranges.selection];\n        });\n    }\n    const getUploadParams = ({ meta }) => { \n        return { \n            url: 'https://httpbin.org/post' \n        } \n    };\n\n    const handleChangeStatus = ({ meta, file }, status) => { \n        console.log(status, meta, file);\n\n        if (status === \"done\") {\n            const data = new FormData();\n    \n            data.append(\"file\", file);\n            data.append(\"meta\", meta);\n\n            const config = {\n                onUploadProgress: function(progressEvent) {\n                    let percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n\n                    console.log(\"percentCompleted\", percentCompleted);\n\n                    setProgress(percentCompleted);\n                },\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                }\n            };\n\n            axios.post(`${process.env.REACT_APP_BASE_URL}/upload/file/upon/selection/employer/listing`, data, config).then((res) => {\n                if (res.data.message === \"Successfully uploaded content!\") {\n                    console.log(res.data);\n\n                    const { file } = res.data;\n\n                    NotificationManager.success(`We've successfully uploaded your file! Please proceed filling out your information or add more files.`, 'Successfully uploaded file!', 4500);\n                } else {\n                    console.log(\"err\", res.data);\n                }\n            }).catch((err) => {\n                console.log(err);\n            })\n        }\n    };\n    const handleListingSubmission = (e) => {\n\n        e.preventDefault();\n\n        const { assetArray, typeOfHack, testingDatesHackers, rulesOfEngagement, publicCompanyName, outOfScopeVulnerabilities, listingDescription, hashtags, businessAddress, requiredRankToApply, experienceAndCost, desiredSkills, maxNumberOfApplicants, disclosureVisibility, tokensRequiredToApply, timespan, listingVisibility, estimatedCompletionDate } = this.props.previousData;\n\n        // const data = {\n        //     requiredRankToApply,\n        //     publicCompanyName: data.publicCompanyName,\n        //     experienceAndCost,\n        //     desiredSkills,\n        //     maxNumberOfApplicants,\n        //     tokensRequiredToApply,\n        //     disclosureVisibility,\n        //     typeOfHack,\n        //     allowedTimespan: timespan,\n        //     listingVisibility,\n        //     expectedDateOfCompletion: selectionRange,\n        //     availiableDatesToHackers: availiableHackerDates\n        // }\n    }\n    return (\n        <Fragment>\n            <Breadcrumb parent=\"Create Listing\" title=\"Create a public employer listing\"/>\n            <LoadingBar\n                color='#f11946'\n                progress={progress}\n                onLoaderFinished={() => setProgress(0)}\n                className=\"loadingBarRaise\"\n                containerClassName=\"loadingBarRaise\"\n                height={5}\n            />\n            <Container fluid={true}>\n                <Row>\n                    {/* <JobFilter /> */}\n                    <Col xl=\"12 xl-100\">\n                        <Card>\n                            <div className=\"job-search\">\n                                <CardBody className=\"pb-0\">\n                                    <Media>\n                                        <img className=\"img-40 img-fluid m-r-20\" src={one} alt=\"\" />\n                                        <Media body>\n                                            <h6 className=\"f-w-600\">\n                                                <a href=\"#\">Create an employer listing</a>\n                                                <span className=\"pull-right\">\n                                                {/* <Button color=\"primary\">\n                                                    <span>\n                                                        <i className=\"fa fa-check text-white\">\n                                                        </i>\n                                                    </span>{\"Save this job\"}\n                                                </Button> */}\n                                                </span>\n                                            </h6>\n                                            <p>Create a listing requesting for your company to be hacked (this will be public visible information to our database of hackers)</p>\n                                        </Media>\n                                    </Media>\n                                    <div className=\"job-description\">\n                                        <h6 className=\"mb-0\">General Details</h6>\n                                        <Form className=\"theme-form\">\n                                            <Row>\n                                                <Col md=\"6\" lg=\"6\" sm=\"12\">\n                                                    <FormGroup>\n                                                        <Label htmlFor=\"exampleFormControlInput1\">Public Company Name:<span className=\"font-danger\">*</span></Label>\n                                                        <Input value={data.publicCompanyName} onChange={handleChangeInput} className=\"form-control\" id=\"exampleFormControlInput1\" name=\"publicCompanyName\" type=\"text\" placeholder=\"Enter your company's publically known name\" />\n                                                    </FormGroup>\n                                                </Col>\n                                                <Col md=\"6\" lg=\"6\" sm=\"12\">\n                                                    <FormGroup>\n                                                        <Label htmlFor=\"exampleFormControlInput1\">Preferred Rank/Level Required To Apply:<span className=\"font-danger\">*</span></Label>\n                                                        <Select\n                                                            value={requiredRankToApply}\n                                                            onChange={(value) => {\n                                                                setRequiredRankToApply(value);\n\n                                                                props.saveListingData({\n                                                                    ...props.previousData,\n                                                                    requiredRankToApply: value\n                                                                })\n                                                            }}\n                                                            options={rankOptions}\n                                                        />\n                                                    </FormGroup>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col>\n                                                    <FormGroup>\n                                                        <Label htmlFor=\"exampleFormControlInput3\">Experience Rewarded To Winner + Cost To Post:<span className=\"font-danger\">*</span></Label>\n                                                        <p style={{ paddingTop: \"7px\", paddingBottom: \"7px\" }} className=\"text-left\">Experience is rewarded to the hacker winner. Hackers level up their accounts with XP points and can redeem the XP for cash ($-USD) after reaching certain ranks/levels. Having a <strong>higher</strong> XP reward will incentivize hackers to pick your company over others - however it <strong>costs more</strong>.</p>\n                                                        <Select\n                                                            value={experienceAndCost}\n                                                            onChange={(value) => {\n                                                                setExperienceAndCost(value);\n\n                                                                props.saveListingData({\n                                                                    ...props.previousData,\n                                                                    experienceAndCost: value\n                                                                })\n                                                            }}\n                                                            options={experienceOptions}\n                                                        />\n                                                    </FormGroup>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col>\n                                                    <FormGroup>\n                                                        <Label htmlFor=\"exampleFormControlpassword\">Required/Desired Skills From Hackers:<span className=\"font-danger\">*</span></Label>\n                                                        <MultiSelect\n                                                            options={desiredSkillsOptions}\n                                                            value={desiredSkills}\n                                                            onChange={(value) => {\n                                                                setDesiredSkills(value);\n\n                                                                props.saveListingData({\n                                                                    ...props.previousData,\n                                                                    desiredSkills: value\n                                                                })\n                                                            }}\n                                                            labelledBy=\"Select\"\n                                                        />\n                                                    </FormGroup>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col>\n                                                    <FormGroup>\n                                                        <Label htmlFor=\"exampleFormControlpassword1\">HashTags/Tags (Hackers will use these to find your listing):<span className=\"font-danger\">*</span></Label>\n                                                        <CreateHashtagsListingComponent />\n                                                    </FormGroup>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col sm=\"6\">\n                                                    <div className=\"col-form-label pt-0\"><strong>MAX</strong> Number Of Required Hackers:</div>\n                                                    <FormGroup>\n                                                        <Select\n                                                            value={maxNumberOfApplicants}\n                                                            onChange={(value) => {\n                                                                setMaxNumberOfApplicants(value);\n\n                                                                props.saveListingData({\n                                                                    ...props.previousData,\n                                                                    maxNumberOfApplicants: value\n                                                                })\n                                                            }}\n                                                            options={maxNumberOfHackersOptions}\n                                                        />\n                                                    </FormGroup>\n                                                </Col>\n                                                <Col sm=\"6\">\n                                                    <div onMouseEnter={() => {\n                                                        setPopoverOpen(true);\n                                                    }} id=\"PopoverID\" className=\"col-form-label pt-0\">Amount Of Tokens Required To Apply (hover for info):</div>\n                                                    <Popover\n                                                        placement={\"top\"}\n                                                        isOpen={popoverOpen}\n                                                        target={\"PopoverID\"}\n                                                        toggle={() => {\n                                                            setPopoverOpen(!popoverOpen);\n                                                        }}\n                                                    >\n                                                        <PopoverHeader>Tokens are required from hackers to apply to this job</PopoverHeader>\n                                                        <PopoverBody onMouseLeave={() => {\n                                                            setPopoverOpen(false);\n                                                        }}>\n                                                            Hackers purchase tokens in which they then use to apply to your listing(s). These are <strong>REQUIRED</strong> to apply to listings so please choose the amount you charge proportionally to the work required from your company and the reward given to successful hackers.\n                                                        </PopoverBody>\n                                                    </Popover>\n                                                    <FormGroup>\n                                                        <Select\n                                                            value={tokensRequiredToApply}\n                                                            onChange={(value) => {\n                                                                setTokensRequiredToApply(value);\n\n                                                                props.saveListingData({\n                                                                    ...props.previousData,\n                                                                    tokensRequiredToApply: value\n                                                                })\n                                                            }}\n                                                            options={tokensApplyOptions}\n                                                        />\n                                                    </FormGroup>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col sm=\"12\" md=\"6\" lg=\"6\">\n                                                    <FormGroup>\n                                                        <Label htmlFor=\"exampleFormControlInput4\">Public Or Private Vulnerability Disclosures (Upon Successful Hack):</Label>\n                                                        <Select\n                                                            value={disclosureVisibility}\n                                                            onChange={(value) => {\n                                                                setDisclosureVisibility(value);\n\n                                                                props.saveListingData({\n                                                                    ...props.previousData,\n                                                                    disclosureVisibility: value\n                                                                })\n                                                            }}\n                                                            options={disclosureOptions}\n                                                        />\n                                                    </FormGroup>\n                                                </Col>\n                                                <Col sm=\"12\" md=\"6\" lg=\"6\">\n                                                    <FormGroup>\n                                                        <Label htmlFor=\"exampleFormControlInput4\">Type Of Hack Required (Physical/in-person <strong>OR</strong> digital/online assets):</Label>\n                                                        <Select\n                                                            value={typeOfHack}\n                                                            onChange={(value) => {\n                                                                setTypeOfHack(value);\n\n                                                                props.saveListingData({\n                                                                    ...props.previousData,\n                                                                    typeOfHack: value\n                                                                })\n                                                            }}\n                                                            options={physicalOptions}\n                                                        />\n                                                    </FormGroup>\n                                                </Col>\n                                            </Row>\n                                        </Form>\n                                        <h6 className=\"mb-0\">Timespan & Timeline Information + Visibility Type</h6>\n                                        <Form className=\"theme-form\">\n                                            <Row>\n                                                <Col md=\"6\" lg=\"6\" xl=\"6\">\n                                                    <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12 xl-100\">\n                                                        <FormGroup>\n                                                            <Label htmlFor=\"exampleFormControlInput1\">Timespan allocated for hackers to test/exploit (Maximum - from posted date):<span className=\"font-danger\">*</span></Label>\n                                                            <Select\n                                                                value={timespan}\n                                                                onChange={(value) => {\n                                                                    setTimespan(value);\n\n                                                                    props.saveListingData({\n                                                                        ...props.previousData,\n                                                                        timespan: value\n                                                                    })\n                                                                }}\n                                                                options={idealTimespanOptions}\n                                                            />\n                                                        </FormGroup>\n                                                    </Col>\n                                                    <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12 xl-100\">\n                                                        <FormGroup>\n                                                            <Label htmlFor=\"exampleFormControlInput1\">Visibility Type (Who Can See Your Listing Or Apply Once Live):<span className=\"font-danger\">*</span></Label>\n                                                            <Select\n                                                                value={listingVisibility}\n                                                                onChange={(value) => {\n                                                                    setListingVisibility(value);\n\n                                                                    props.saveListingData({\n                                                                        ...props.previousData,\n                                                                        listingVisibility: value\n                                                                    })\n                                                                }}\n                                                                options={visibilityOptions}\n                                                            />\n                                                        </FormGroup>\n                                                        {renderPhysicalHackingDates()}\n                                                    </Col>\n                                                </Col>\n                                                <Col md=\"12\" lg=\"12\" xl=\"6 xl-100\">\n                                                    <FormGroup>\n                                                        <Label htmlFor=\"exampleFormControlInput1\">Estimated/Expected Day Of Completion (Must Be Successfully Hacked By This Day For Full Payment):<span className=\"font-danger\">*</span></Label>\n                                                        <p style={{ paddingBottom: \"20px\" }}>These are the days in which you expect the hired hackers/contractors to have <strong>successfully</strong> completed any hacks or attacks (digital or physical) against your company. Disclosures will occurr shortly after whichever days are selected and any further testing or reporting shall proceed at that point.</p>\n                                                        <DateRangePicker\n                                                            ranges={[selectionRange]}\n                                                            onChange={handleDeadlineSelect}\n                                                        />\n                                                    </FormGroup>\n                                                </Col>\n                                            </Row>\n                                        </Form>\n                                        {renderBusinessLocationPortion()}\n                                        <h6 className=\"mb-0\"><strong>DIGITAL</strong> Assets & Payment/Reward Information - Digital Scope</h6>\n                                        <Form className=\"theme-form\">\n                                            <Row>\n                                                <Col xl=\"12 xl-100\">\n                                                    <FormGroup>\n                                                        <Label htmlFor=\"exampleFormControlInput7\">Asset Endpoint Or URL:<span className=\"font-danger\">*</span></Label>\n                                                        <InputGroup>\n                                                            <Input onChange={handleChangeInput} value={data.assetName} className=\"form-control\" id=\"exampleFormControlInput7\" name=\"assetName\" type=\"text\" placeholder=\"Eg.'s - api.yourcompany.com OR https://www.yourcompanywebsite.com\" />\n                                                            <InputGroupAddon addonType=\"append\"><Button onClick={handleAssetAddition} color=\"secondary\">Add Asset</Button></InputGroupAddon>\n                                                        </InputGroup>\n                                                    </FormGroup>\n                                                </Col>\n                                                <ListGroup>\n                                                {typeof assetArray !== \"undefined\" && assetArray.length > 0 ? assetArray.map((asset, index) => {\n                                                    return (\n                                                        <ListGroupItem key={index} className=\"list-group-item flex-column align-items-start\">\n                                                            <Row style={{ paddingBottom: \"12px\" }}>\n                                                                <ListGroupItem active>{asset.name}<div onClick={() => {\n                                                                    setAssetArray(prevState => {\n                                                                        props.saveListingData({\n                                                                            ...props.previousData,\n                                                                            assetArray: prevState.filter((item, index) => {\n                                                                                if (item.id !== asset.id) {\n                                                                                    return item;\n                                                                                }\n                                                                            })\n                                                                        }) \n                                                                        return prevState.filter((item, index) => {\n                                                                            if (item.id !== asset.id) {\n                                                                                return item;\n                                                                            }\n                                                                        });\n                                                                    });  \n                                                                }} id=\"float-right-icon\"><XCircle /></div></ListGroupItem>\n                                                            </Row>\n                                                            <Row>\n                                                                <Col md=\"3\" lg=\"3\" sm=\"6\">\n                                                                    <FormGroup>\n                                                                        <Label><span style={{ color: \"#ffc800\" }}>Low</span> Severity Bounty Reward</Label>\n                                                                        <InputGroup>\n                                                                        <Input onChange={(e) => {\n                                                                            changeBountyPrices(e, \"lowSeverity\", asset);\n                                                                        }} className=\"form-control\" type=\"text\" placeholder=\"Average Cash($) Reward Price\" aria-label=\"Average Cash($) Reward Price\"/>\n                                                                        </InputGroup>\n                                                                    </FormGroup>\n                                                                </Col>\n                                                                <Col md=\"3\" lg=\"3\" sm=\"6\">\n                                                                    <FormGroup>\n                                                                        <Label><span style={{ color: \"#ed3824\" }}>Medium</span> Severity Bounty Reward</Label>\n                                                                        <InputGroup>\n                                                                        <Input onChange={(e) => {\n                                                                            changeBountyPrices(e, \"mediumSeverity\", asset);\n                                                                        }} className=\"form-control\" type=\"text\" placeholder=\"Average Cash($) Reward Price\" aria-label=\"Average Cash($) Reward Price\"/>\n                                                                        </InputGroup>\n                                                                    </FormGroup>\n                                                                </Col>\n                                                                <Col md=\"3\" lg=\"3\" sm=\"6\">\n                                                                    <FormGroup>\n                                                                        <Label><span style={{ color: \"#8f0091\" }}>High</span> Severity Bounty Reward</Label>\n                                                                        <InputGroup>\n                                                                        <Input onChange={(e) => {\n                                                                            changeBountyPrices(e, \"highSeverity\", asset);\n                                                                        }} className=\"form-control\" type=\"text\" placeholder=\"Average Cash($) Reward Price\" aria-label=\"Average Cash($) Reward Price\"/>\n                                                                        </InputGroup>\n                                                                    </FormGroup>\n                                                                </Col>\n                                                                <Col md=\"3\" lg=\"3\" sm=\"6\">\n                                                                    <FormGroup>\n                                                                        <Label><span style={{ color: \"#b30211\" }}>Critical</span> Severity Bounty Reward</Label>\n                                                                        <InputGroup>\n                                                                        <Input onChange={(e) => {\n                                                                            changeBountyPrices(e, \"criticalSeverity\", asset);\n                                                                        }} className=\"form-control\" type=\"text\" placeholder=\"Average Cash($) Reward Price\" aria-label=\"Average Cash($) Reward Price\"/>\n                                                                        </InputGroup>\n                                                                    </FormGroup>\n                                                                </Col>\n                                                            </Row>\n                                                        </ListGroupItem>\n                                                    );\n                                                }) : null}\n                                                </ListGroup>\n                                            </Row>\n                                        </Form>\n                                        <h6 className=\"mb-0\">Upload Any Supporting Documents/Files</h6>\n                                        <Form className=\"theme-form\">\n                                            <Row>\n                                                <Col>\n                                                    <FormGroup>\n                                                        <Label className=\"col-form-label pt-0\">Upload File(s):<span className=\"font-danger\">*</span></Label>\n                                                        <div className=\"dz-message needsclick\">\n                                                            <Dropzone\n                                                                getUploadParams={getUploadParams}\n                                                                onChangeStatus={handleChangeStatus}\n                                                                maxFiles={5}\n                                                                multiple={true}\n                                                                canCancel={false}\n                                                                inputContent=\"Drop A File(s)\"\n                                                                styles={{\n                                                                    dropzone: { height: 225 },\n                                                                    dropzoneActive: { borderColor: 'green' },\n                                                                }}\n                                                            />\n                                                        </div>\n                                                    </FormGroup>\n                                                </Col>\n                                            </Row>\n                                        </Form>\n                                        <h6 className=\"mb-0\" style={{ paddingBottom: \"15px\" }}>Listing Description/Information</h6>\n                                        <p style={{ paddingBottom: \"25px\" }}>Include as detailed of a description as you possibly can so our hackers will know what they're being asked to attempt/hack. This can be <strong>general</strong> information as well as any other information that you'd like to include. Strong/detailed listing descriptions generally always have higher response/application rates compared to minimal detail listings.</p>\n                                        <CKEditors\n                                            activeclassName=\"p10\"\n                                            content={content}\n                                            events={{\n                                                \"change\": onChangeDescription\n                                            }}\n                                        />\n                                        <h6 className=\"mb-0\" style={{ paddingBottom: \"15px\", paddingTop: \"25px\" }}>Program/Listing Rules & Conditions Of Engagement</h6>\n                                        <p style={{ paddingBottom: \"25px\" }}>Please include an <strong>exhaustive list</strong> of specific <strong>RULES</strong> our hackers should follow and abide by while applying allowed hacks to avoid <strong>termination or suspension</strong> from our platform for misuse (referring to our hackers). We stand by our rules and proceedures so please be as detailed and clear as possible while outlines what you expect from potential hacker candiates and the conditions in place once hired.</p>\n                                        <SimpleMDE\n                                            id=\"editor_container\"\n                                            onChange={(value) => {\n                                                setRules(value);\n\n                                                props.saveListingData({\n                                                    ...props.previousData,\n                                                    rulesOfEngagement: value\n                                                })\n                                            }}\n                                            value={rules}\n                                        />\n                                        <h6 className=\"mb-0\" style={{ paddingBottom: \"15px\", paddingTop: \"25px\" }}><strong>OUT OF SCOPE</strong> Vulnerabilities & Boundaries</h6>\n                                        <p style={{ paddingBottom: \"25px\" }}>Please include an exhaustive list of which vulnerabilities are <strong>NOT</strong> included as acceptable reports as well as anything you would like our hackers to <strong>abstain</strong> from testing or tampering with such as texting accounts, unauthenticated tests, etc... <em>BE AS SPECIFIC AS POSSIBLE.</em></p>\n                                        <SimpleMDE\n                                            id=\"editor_container_two\"\n                                            onChange={(value) => {\n                                                setOutOfScope(value);\n\n                                                props.saveListingData({\n                                                    ...props.previousData,\n                                                    outOfScopeVulnerabilities: value\n                                                })\n                                            }}\n                                            value={outOfScope}\n                                        />\n                                    </div>\n                                </CardBody>\n                                <div className=\"card-footer\">\n                                    <Button onClick={handleListingSubmission} color=\"primary mr-1\">{Submit}</Button>\n                                    <Button color=\"light\">{Cancel}</Button>\n                                </div>\n                            </div>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n        </Fragment>\n    );\n};\nconst mapStateToProps = (state) => {\n    return {\n        previousData: _.has(state.listingData, \"listingData\") ? state.listingData.listingData : {}\n    }\n}\nexport default connect(mapStateToProps, { saveListingData })(CreateJobListingMainHelper);"]},"metadata":{},"sourceType":"module"}