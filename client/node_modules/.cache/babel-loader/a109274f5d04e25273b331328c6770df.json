{"ast":null,"code":"var _jsxFileName = \"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/src/components/dashboard/leaderboards/homepage/index.js\";\nimport React, { Fragment, useMemo, useCallback } from 'react';\nimport { useTable, useExpanded } from 'react-table';\n\nconst TableHelper = _ref => {\n  let {\n    columns: userColumns,\n    data,\n    renderRowSubComponent\n  } = _ref;\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    visibleColumns,\n    state: {\n      expanded\n    }\n  } = useTable({\n    columns: userColumns,\n    data\n  }, useExpanded // We can useExpanded to track the expanded state\n  // for sub components too!\n  );\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, JSON.stringify({\n    expanded: expanded\n  }, null, 2))), /*#__PURE__*/React.createElement(\"table\", Object.assign({}, getTableProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, headerGroups.map(headerGroup => /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }), headerGroup.headers.map(column => /*#__PURE__*/React.createElement(\"th\", Object.assign({}, column.getHeaderProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }\n  }), column.render('Header')))))), /*#__PURE__*/React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }), rows.map((row, i) => {\n    prepareRow(row);\n    return (\n      /*#__PURE__*/\n      // Use a React.Fragment here so the table markup is still valid\n      React.createElement(React.Fragment, Object.assign({}, row.getRowProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 17\n        }\n      }, row.cells.map(cell => {\n        return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, cell.getCellProps(), {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 25\n          }\n        }), cell.render('Cell'));\n      })), row.isExpanded ? /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        colSpan: visibleColumns.length,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }\n      }, renderRowSubComponent({\n        row\n      }))) : null)\n    );\n  }))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, \"Showing the first 20 results of \", rows.length, \" rows\"));\n};\n\nconst LeaderboardHomepageHelper = props => {\n  const columns = useMemo(() => [{\n    // Make an expander cell\n    Header: () => null,\n    // No header\n    id: 'expander',\n    // It needs an ID\n    Cell: _ref2 => {\n      let {\n        row\n      } = _ref2;\n      return (\n        /*#__PURE__*/\n        // Use Cell to render an expander for each row.\n        // We can use the getToggleRowExpandedProps prop-getter\n        // to build the expander.\n        React.createElement(\"span\", Object.assign({}, row.getToggleRowExpandedProps(), {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }\n        }), row.isExpanded ? 'ðŸ‘‡' : 'ðŸ‘‰')\n      );\n    }\n  }, {\n    Header: 'Name',\n    columns: [{\n      Header: 'First Name',\n      accessor: 'firstName'\n    }, {\n      Header: 'Last Name',\n      accessor: 'lastName'\n    }]\n  }, {\n    Header: 'Info',\n    columns: [{\n      Header: 'Age',\n      accessor: 'age'\n    }, {\n      Header: 'Visits',\n      accessor: 'visits'\n    }, {\n      Header: 'Status',\n      accessor: 'status'\n    }, {\n      Header: 'Profile Progress',\n      accessor: 'progress'\n    }]\n  }], []);\n  const data = useMemo(() => makeData(10), []); // Create a function that will render our row sub components\n\n  const renderRowSubComponent = useCallback(_ref3 => {\n    let {\n      row\n    } = _ref3;\n    return /*#__PURE__*/React.createElement(\"pre\", {\n      style: {\n        fontSize: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }\n    }, JSON.stringify({\n      values: row.values\n    }, null, 2)));\n  }, []);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    columns: columns,\n    data: data,\n    renderRowSubComponent: renderRowSubComponent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default LeaderboardHomepageHelper;","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/src/components/dashboard/leaderboards/homepage/index.js"],"names":["React","Fragment","useMemo","useCallback","useTable","useExpanded","TableHelper","columns","userColumns","data","renderRowSubComponent","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","visibleColumns","state","expanded","JSON","stringify","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps","isExpanded","length","LeaderboardHomepageHelper","props","Header","id","Cell","getToggleRowExpandedProps","accessor","makeData","fontSize","values"],"mappings":"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","sourcesContent":["import React, { Fragment, useMemo, useCallback } from 'react';\nimport { useTable, useExpanded } from 'react-table'\n\n\nconst TableHelper = ({ columns: userColumns, data, renderRowSubComponent }) => {\n    const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    visibleColumns,\n    state: { expanded },\n    } = useTable(\n    {\n        columns: userColumns,\n        data,\n    },\n    useExpanded // We can useExpanded to track the expanded state\n    // for sub components too!\n    )\n\n    return (\n    <>\n        <pre>\n        <code>{JSON.stringify({ expanded: expanded }, null, 2)}</code>\n        </pre>\n        <table {...getTableProps()}>\n        <thead>\n            {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n                ))}\n            </tr>\n            ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n            {rows.map((row, i) => {\n            prepareRow(row)\n            return (\n                // Use a React.Fragment here so the table markup is still valid\n                <React.Fragment {...row.getRowProps()}>\n                <tr>\n                    {row.cells.map(cell => {\n                    return (\n                        <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                    )\n                    })}\n                </tr>\n                {/*\n                    If the row is in an expanded state, render a row with a\n                    column that fills the entire length of the table.\n                    */}\n                {row.isExpanded ? (\n                    <tr>\n                    <td colSpan={visibleColumns.length}>\n                        {/*\n                            Inside it, call our renderRowSubComponent function. In reality,\n                            you could pass whatever you want as props to\n                            a component like this, including the entire\n                            table instance. But for this example, we'll just\n                            pass the row\n                        */}\n                        {renderRowSubComponent({ row })}\n                    </td>\n                    </tr>\n                ) : null}\n                </React.Fragment>\n            )\n            })}\n        </tbody>\n        </table>\n        <br />\n        <div>Showing the first 20 results of {rows.length} rows</div>\n    </>\n    )\n}\n  \n\nconst LeaderboardHomepageHelper = (props) => {\n\n    const columns = useMemo(\n        () => [\n        {\n            // Make an expander cell\n            Header: () => null, // No header\n            id: 'expander', // It needs an ID\n            Cell: ({ row }) => (\n            // Use Cell to render an expander for each row.\n            // We can use the getToggleRowExpandedProps prop-getter\n            // to build the expander.\n            <span {...row.getToggleRowExpandedProps()}>\n                {row.isExpanded ? 'ðŸ‘‡' : 'ðŸ‘‰'}\n            </span>\n            ),\n        },\n        {\n            Header: 'Name',\n            columns: [\n            {\n                Header: 'First Name',\n                accessor: 'firstName',\n            },\n            {\n                Header: 'Last Name',\n                accessor: 'lastName',\n            },\n            ],\n        },\n        {\n            Header: 'Info',\n            columns: [\n            {\n                Header: 'Age',\n                accessor: 'age',\n            },\n            {\n                Header: 'Visits',\n                accessor: 'visits',\n            },\n            {\n                Header: 'Status',\n                accessor: 'status',\n            },\n            {\n                Header: 'Profile Progress',\n                accessor: 'progress',\n            },\n            ],\n        },\n        ],\n        []\n    )\n    \n    const data = useMemo(() => makeData(10), [])\n    \n    // Create a function that will render our row sub components\n    const renderRowSubComponent = useCallback(\n        ({ row }) => (\n        <pre\n            style={{\n            fontSize: '10px',\n            }}\n        >\n            <code>{JSON.stringify({ values: row.values }, null, 2)}</code>\n        </pre>\n        ),\n        []\n    );\n    return (\n        <Fragment>\n            <Table\n                columns={columns}\n                data={data}\n                renderRowSubComponent={renderRowSubComponent}\n            />\n        </Fragment>\n    );\n}\n\nexport default LeaderboardHomepageHelper;"]},"metadata":{},"sourceType":"module"}