{"ast":null,"code":"var _jsxFileName = \"/home/kali/Documents/cybersecurity/client/src/components/dashboard/learning/educationalCoursesSeminars/createCourse/helpers/pages/pageThree/helpers/helperFunctions/helpers.js\";\nimport React, { Fragment } from 'react';\nimport axios from \"axios\";\nimport { NotificationManager } from 'react-notifications';\nimport FileViewer from 'react-file-viewer';\nimport _ from \"lodash\";\nimport { Button } from 'reactstrap';\n\nconst CustomInputHelper = (accept, onFiles, setCurrentFilePathData, setCurrentUploadFileStatus, setFileReadyStatus) => {\n  const text = \"Drop a file OR select to browse local data\";\n  return /*#__PURE__*/React.createElement(\"label\", {\n    className: \"custom-input-dropzone-copy\",\n    style: {\n      backgroundColor: '#007bff',\n      color: '#fff',\n      cursor: 'pointer',\n      padding: 15,\n      borderRadius: 3\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, text, /*#__PURE__*/React.createElement(\"input\", {\n    style: {\n      display: 'none'\n    },\n    type: \"file\",\n    accept: accept,\n    multiple: false,\n    className: \"custom-dropzone-input-actual-input\",\n    onChange: e => {\n      const file = e.target.files[0]; // set current file path to convert to readable URL later\n\n      setCurrentFilePathData(imageChangeAndConversion(file)); // set status update for current file\n\n      setCurrentUploadFileStatus(file); // mark file as READY \n\n      setFileReadyStatus(true); // update \"Dropzone\" component state (NOT this react component state).\n\n      onFiles([file]);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }));\n};\n\nconst handleSubmit = (runSubmit, currentFileSelectedUpload, fileMetaData, setProgress, setMetaFileData, setFileReadyStatus, setCurrentUploadFileStatus, setPromotionalDemoFile) => {\n  console.log(\"submitted!\", currentFileSelectedUpload, fileMetaData);\n  const data = new FormData();\n  data.append(\"file\", currentFileSelectedUpload);\n  data.append(\"meta\", fileMetaData);\n  const config = {\n    onUploadProgress: progressEvent => {\n      let percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n      setProgress(percentCompleted);\n    },\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  };\n  axios.post(`${process.env.REACT_APP_BASE_URL}/upload/misc/file/softare/listing/sale`, data, config).then(res => {\n    if (res.data.message === \"Successfully uploaded file!\") {\n      console.log(res.data);\n      const {\n        file\n      } = res.data; // update current file in main component\n\n      NotificationManager.success(`We've successfully uploaded your file! Please proceed filling out your information or add more files.`, 'Successfully uploaded file!', 4500);\n      setPromotionalDemoFile(file);\n      setMetaFileData(null);\n      setFileReadyStatus(false);\n      setCurrentUploadFileStatus(null);\n      runSubmit();\n    } else {\n      console.log(\"Err\", res.data);\n    }\n  }).catch(err => {\n    console.log(err);\n  });\n};\n\nconst calculateFileType = type => {\n  switch (type) {\n    case \"video/mp4\":\n      return \"mp4\";\n      break;\n\n    case \"image/png\":\n      return \"png\";\n      break;\n\n    case \"image/jpeg\":\n      return \"jpeg\";\n      break;\n\n    case \"image/jpg\":\n      return \"jpg\";\n      break;\n\n    case \"image/gif\":\n      return \"gif\";\n      break;\n\n    case \"image/bmp\":\n      return \"bmp\";\n      break;\n\n    case \"application/pdf\":\n      return \"pdf\";\n      break;\n\n    case \"text/csv\":\n      return \"csv\";\n      break;\n\n    case \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\":\n      return \"xlsx\";\n      break;\n\n    case \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\":\n      return \"docx\";\n      break;\n\n    case \"video/webm\":\n      return \"webm\";\n      break;\n\n    case \"audio/mpeg\":\n      return \"mp3\";\n      break;\n\n    default:\n      break;\n  }\n};\n\nconst renderCustomButtonDropzone = (data, e, currentFileSelectedUpload, setMetaFileData, setFileReadyStatus, fileMetaData, setProgress, setCurrentUploadFileStatus, fileReady, setPromotionalDemoFile) => {\n  const {\n    meta\n  } = data.files[0];\n\n  if (currentFileSelectedUpload === null) {\n    return null;\n  } else {\n    if (fileReady === true) {\n      return /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        style: {\n          marginTop: \"25px\"\n        },\n        onClick: e => {\n          e.preventDefault(); // file meta data for next action\n\n          setMetaFileData(meta); // set file status as ready or prepared.\n\n          setFileReadyStatus(false);\n          const runSubmit = data.onSubmit;\n          handleSubmit(runSubmit, currentFileSelectedUpload, fileMetaData, setProgress, setMetaFileData, setFileReadyStatus, setCurrentUploadFileStatus, setPromotionalDemoFile);\n        },\n        className: \"btn-air-secondary\",\n        color: \"secondary\",\n        size: \"md\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }\n      }, \"Submit & Upload New File!\"));\n    } else {\n      return /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        style: {\n          marginTop: \"25px\"\n        },\n        onClick: () => {\n          NotificationManager.warning(`File is NOT ready to upload yet! Please wait for the preparation steps to complete before submitting.`, 'Still preparing!', 4500);\n        },\n        className: \"btn-air-light\",\n        color: \"light\",\n        size: \"md\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }\n      }, \"Submit & Upload New File!\"));\n    }\n  }\n};\n\nconst renderPreviewOfFile = (data, fileReady, filePathData) => {\n  const file = data.fileWithMeta.file; // return preview data via FileViewer (to not exclude documents such as .docx and such...);\n\n  if (fileReady === true) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"filereader-preview-dropzone\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FileViewer, {\n      fileType: calculateFileType(file.type),\n      filePath: filePathData,\n      onError: err => NotificationManager.warning(`Error 'loading' your recently selected 'preview' file - please select another file & try again...`, 'File loading error!', 4500),\n      key: file.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }\n    }));\n  } else {\n    return null;\n  }\n};\n\nconst imageChangeAndConversion = file => {\n  return URL.createObjectURL(file);\n};\n\nconst onSubmitHelper = (files, allFiles) => {\n  allFiles.forEach(file => {\n    file.remove();\n  });\n};\n\nconst onDroppedImage = (e, data) => {\n  console.log(\"dropped image...:\", e, data);\n};\n\nexport default {\n  renderPreviewOfFile,\n  imageChangeAndConversion,\n  onSubmitHelper,\n  handleSubmit,\n  CustomInputHelper,\n  renderCustomButtonDropzone,\n  calculateFileType,\n  onDroppedImage\n};","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/learning/educationalCoursesSeminars/createCourse/helpers/pages/pageThree/helpers/helperFunctions/helpers.js"],"names":["React","Fragment","axios","NotificationManager","FileViewer","_","Button","CustomInputHelper","accept","onFiles","setCurrentFilePathData","setCurrentUploadFileStatus","setFileReadyStatus","text","backgroundColor","color","cursor","padding","borderRadius","display","e","file","target","files","imageChangeAndConversion","handleSubmit","runSubmit","currentFileSelectedUpload","fileMetaData","setProgress","setMetaFileData","setPromotionalDemoFile","console","log","data","FormData","append","config","onUploadProgress","progressEvent","percentCompleted","Math","round","loaded","total","headers","post","process","env","REACT_APP_BASE_URL","then","res","message","success","catch","err","calculateFileType","type","renderCustomButtonDropzone","fileReady","meta","marginTop","preventDefault","onSubmit","warning","renderPreviewOfFile","filePathData","fileWithMeta","id","URL","createObjectURL","onSubmitHelper","allFiles","forEach","remove","onDroppedImage"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport axios from \"axios\";\nimport { NotificationManager } from 'react-notifications';\nimport FileViewer from 'react-file-viewer';\nimport _ from \"lodash\";\nimport { Button } from 'reactstrap';\n\n\nconst CustomInputHelper = (accept, onFiles, setCurrentFilePathData, setCurrentUploadFileStatus, setFileReadyStatus) => {\n\n    const text = \"Drop a file OR select to browse local data\";\n\n    return (\n        <label className=\"custom-input-dropzone-copy\" style={{ backgroundColor: '#007bff', color: '#fff', cursor: 'pointer', padding: 15, borderRadius: 3 }}>\n            {text}\n            <input\n                style={{ display: 'none' }}\n                type=\"file\"\n                accept={accept}\n                multiple={false}\n                className={\"custom-dropzone-input-actual-input\"}\n                onChange={e => {\n                    const file = e.target.files[0];\n                    // set current file path to convert to readable URL later\n                    setCurrentFilePathData(imageChangeAndConversion(file));\n                    // set status update for current file\n                    setCurrentUploadFileStatus(file);\n                    // mark file as READY \n                    setFileReadyStatus(true);\n                    // update \"Dropzone\" component state (NOT this react component state).\n                    onFiles([file])\n                }}\n            />\n        </label>\n    );\n}\nconst handleSubmit = (runSubmit, currentFileSelectedUpload, fileMetaData, setProgress, setMetaFileData, setFileReadyStatus, setCurrentUploadFileStatus, setPromotionalDemoFile) => {\n\n    console.log(\"submitted!\", currentFileSelectedUpload, fileMetaData);\n\n    const data = new FormData();\n\n    data.append(\"file\", currentFileSelectedUpload);\n    data.append(\"meta\", fileMetaData);\n\n    const config = {\n        onUploadProgress: (progressEvent) => {\n            let percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n\n            setProgress(percentCompleted);\n        },\n        headers: {\n            'Content-Type': 'multipart/form-data'\n        }\n    };\n\n    axios.post(`${process.env.REACT_APP_BASE_URL}/upload/misc/file/softare/listing/sale`, data, config).then((res) => {\n        if (res.data.message === \"Successfully uploaded file!\") {\n            console.log(res.data);\n\n            const { file } = res.data;\n\n            // update current file in main component\n            NotificationManager.success(`We've successfully uploaded your file! Please proceed filling out your information or add more files.`, 'Successfully uploaded file!', 4500);\n\n            setPromotionalDemoFile(file);\n            setMetaFileData(null);\n            setFileReadyStatus(false);\n            setCurrentUploadFileStatus(null);\n\n            runSubmit();\n        } else {\n            console.log(\"Err\", res.data);\n        }\n    }).catch((err) => {\n        console.log(err);\n    })\n};\nconst calculateFileType = (type) => {\n    switch (type) {\n        case \"video/mp4\":\n            return \"mp4\";\n            break;\n        case \"image/png\":\n            return \"png\";\n            break;\n        case \"image/jpeg\":\n            return \"jpeg\";\n            break;\n        case \"image/jpg\":\n            return \"jpg\";\n            break;\n        case \"image/gif\":\n            return \"gif\";\n            break;\n        case \"image/bmp\":\n            return \"bmp\";\n            break;\n        case \"application/pdf\":\n            return \"pdf\";\n            break;\n        case \"text/csv\":\n            return \"csv\";\n            break;\n        case \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\":\n            return \"xlsx\";\n            break;\n        case \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\":\n            return \"docx\";\n            break;\n        case \"video/webm\":\n            return \"webm\";\n            break;\n        case \"audio/mpeg\":\n            return \"mp3\";\n            break;\n        default:\n            break;\n    }\n}\nconst renderCustomButtonDropzone = (data, e, currentFileSelectedUpload, setMetaFileData, setFileReadyStatus, fileMetaData, setProgress, setCurrentUploadFileStatus, fileReady, setPromotionalDemoFile) => {\n\n    const { meta } = data.files[0];\n\n    if (currentFileSelectedUpload === null) {\n        return null;\n    } else {\n        if (fileReady === true) {\n            return (\n                <Fragment>\n                    <Button style={{ marginTop: \"25px\" }} onClick={(e) => {\n                        e.preventDefault();\n                        // file meta data for next action\n                        setMetaFileData(meta);\n                        // set file status as ready or prepared.\n                        setFileReadyStatus(false);\n\n                        const runSubmit = data.onSubmit;\n\n                        handleSubmit(runSubmit, currentFileSelectedUpload, fileMetaData, setProgress, setMetaFileData, setFileReadyStatus, setCurrentUploadFileStatus, setPromotionalDemoFile);\n                    }} className=\"btn-air-secondary\" color=\"secondary\" size=\"md\">Submit & Upload New File!</Button>\n                </Fragment>\n            );\n        } else {\n            return (\n                <Fragment>\n                    <Button style={{ marginTop: \"25px\" }} onClick={() => {\n                        NotificationManager.warning(`File is NOT ready to upload yet! Please wait for the preparation steps to complete before submitting.`, 'Still preparing!', 4500);\n                    }} className=\"btn-air-light\" color=\"light\" size=\"md\">Submit & Upload New File!</Button>\n                </Fragment>\n            );\n        }\n    }\n}\nconst renderPreviewOfFile = (data, fileReady, filePathData) => {\n\n    const file = data.fileWithMeta.file;\n    // return preview data via FileViewer (to not exclude documents such as .docx and such...);\n    if (fileReady === true) {\n        return (\n            <div className=\"filereader-preview-dropzone\">\n                <FileViewer\n                    fileType={calculateFileType(file.type)}\n                    filePath={filePathData}\n                    onError={(err) => NotificationManager.warning(`Error 'loading' your recently selected 'preview' file - please select another file & try again...`, 'File loading error!', 4500)}\n                    key={file.id}\n                />\n            </div>\n        );\n    } else {\n        return null;\n    }\n}\nconst imageChangeAndConversion = (file) => {\n    return URL.createObjectURL(file);\n}\nconst onSubmitHelper = (files, allFiles) => {\n    allFiles.forEach((file) => {\n        file.remove();\n    })\n}\nconst onDroppedImage = (e, data) => {\n    console.log(\"dropped image...:\", e, data);\n}\nexport default {\n    renderPreviewOfFile,\n    imageChangeAndConversion,\n    onSubmitHelper,\n    handleSubmit,\n    CustomInputHelper,\n    renderCustomButtonDropzone,\n    calculateFileType,\n    onDroppedImage\n};"]},"metadata":{},"sourceType":"module"}