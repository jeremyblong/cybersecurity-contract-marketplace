{"ast":null,"code":"// helpers logic related to mainly to redux-hook-form\nconst HookHelpers = () => {\n  const courseTitle = {\n    check: (setError, register) => {\n      return { ...register(\"courseTitle\", {\n          required: {\n            value: true,\n            message: \"You MUST enter AT least 25 characters to 100 characters\"\n          },\n          minLength: {\n            value: 25,\n            message: \"You must enter AT Least 25 characters\"\n          },\n          maxLength: {\n            value: 100,\n            message: \"You may ONLY enter 100 characters or less\"\n          },\n          onBlur: e => {// code here...\n          }\n        })\n      };\n    },\n    onChange: (e, setValue) => {\n      const value = e.target.value;\n      setValue(\"courseTitle\", value, {\n        shouldValidate: true\n      });\n    },\n    name: \"courseTitle\",\n    placeholder: \"Enter a 'Course Title'\",\n    type: \"text\",\n    label: \"Course Title\"\n  };\n  const courseCategory = {\n    check: (setError, register, clearErrors) => {\n      return { ...register(\"courseCategory\", {\n          required: {\n            value: true,\n            message: \"You MUST select a 'category' option before proceeding forward\"\n          },\n          onBlur: e => {\n            // code here...\n            console.log(\"blur - e\", e); // current value from this input\n\n            const value = e.target.value; // timeout to delay for state change(s)\n\n            setTimeout(() => {\n              // clear error after proper selection\n              if (typeof value !== \"undefined\" && Object.keys(value).length > 0) {\n                clearErrors(\"courseCategory\");\n              } else {\n                // set error as nothing was selected (blank 'click-off' selection of selector)\n                setError(\"courseCategory\", {\n                  type: \"manual\",\n                  message: \"You MUST select a 'category' option before proceeding forward\"\n                });\n              }\n            }, 50);\n          }\n        })\n      };\n    },\n    onChange: (selectedOption, setValue, clearErrors) => {\n      console.log(\"value changed...:\", selectedOption);\n      setValue(\"courseCategory\", selectedOption, {\n        shouldValidate: false\n      });\n      setTimeout(() => {\n        clearErrors(\"courseCategory\");\n      }, 75);\n    },\n    name: \"courseCategory\",\n    placeholder: \"Select a category/group type\",\n    label: \"Select a category for your course\"\n  };\n  const hashtagsChecker = {\n    check: (register, name) => {\n      return { ...register(name, {\n          required: {\n            value: true,\n            message: \"You MUST enter AT least 5 hashtags/tags before attempting to continue\"\n          }\n        })\n      };\n    },\n    onBlurred: (tags, setValue, clearErrors, setError) => {\n      setValue(\"courseHashtags\", tags, {\n        shouldValidate: true\n      }); // timeout to delay for state change(s)\n\n      setTimeout(() => {\n        // clear error after proper selection\n        if (typeof tags !== \"undefined\" && tags.length >= 5 && tags.length <= 15) {\n          clearErrors(\"courseHashtags\");\n        } else {\n          // set error as nothing was selected (blank 'click-off' selection of selector)\n          setError(\"courseHashtags\", {\n            type: \"manual\",\n            message: \"You MUST enter BETWEEN 5-15 hashtags/tags before attempting to continue\"\n          });\n        }\n      }, 100);\n    },\n    placeholder: \"Enter between 5-15 hashtags/tags...\",\n    type: \"text\",\n    label: \"Enter BETWEEN 5-15 hashtags to proceed forward - people will use these to find your course...\"\n  };\n  return {\n    courseTitle,\n    courseCategory,\n    hashtagsChecker\n  };\n};\n\nexport default HookHelpers;","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/learning/educationalCoursesSeminars/createCourse/helpers/pages/pageOne/helpers/reduxFormHelpers.js"],"names":["HookHelpers","courseTitle","check","setError","register","required","value","message","minLength","maxLength","onBlur","e","onChange","setValue","target","shouldValidate","name","placeholder","type","label","courseCategory","clearErrors","console","log","setTimeout","Object","keys","length","selectedOption","hashtagsChecker","onBlurred","tags"],"mappings":"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","sourcesContent":["// helpers logic related to mainly to redux-hook-form\nconst HookHelpers = () => {\n    \n    const courseTitle = {\n        check: (setError, register) => {\n            return (\n                {...register(\"courseTitle\", { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 25 characters to 100 characters\"\n                }, minLength: {\n                    value: 25,\n                    message: \"You must enter AT Least 25 characters\"\n                }, maxLength: {\n                    value: 100,\n                    message: \"You may ONLY enter 100 characters or less\"\n                }, onBlur: (e) => {\n                    // code here...\n                }})}\n            )\n        },\n        onChange: (e, setValue) => {\n            const value = e.target.value;\n\n            setValue(\"courseTitle\", value, { shouldValidate: true });\n        },\n        name: \"courseTitle\",\n        placeholder: \"Enter a 'Course Title'\",\n        type: \"text\",\n        label: \"Course Title\"\n    };\n    const courseCategory = {\n        check: (setError, register, clearErrors) => {\n            return (\n                {...register(\"courseCategory\", { required: {\n                    value: true,\n                    message: \"You MUST select a 'category' option before proceeding forward\"\n                }, onBlur: (e) => {\n                    // code here...\n                    console.log(\"blur - e\", e);\n                    // current value from this input\n                    const value = e.target.value;\n                    // timeout to delay for state change(s)\n                    setTimeout(() => {\n                        // clear error after proper selection\n                        if ((typeof value !== \"undefined\") && (Object.keys(value).length > 0)) {\n                            clearErrors(\"courseCategory\");\n                        } else {\n                            // set error as nothing was selected (blank 'click-off' selection of selector)\n                            setError(\"courseCategory\", {\n                                type: \"manual\",\n                                message: \"You MUST select a 'category' option before proceeding forward\",\n                            });\n                        }\n                    }, 50);\n                }})}\n            )\n        },\n        onChange: (selectedOption, setValue, clearErrors) => {\n            console.log(\"value changed...:\", selectedOption);\n            \n            setValue(\"courseCategory\", selectedOption, { shouldValidate: false });\n\n            setTimeout(() => {\n                clearErrors(\"courseCategory\");\n            }, 75)\n        },\n        name: \"courseCategory\",\n        placeholder: \"Select a category/group type\",\n        label: \"Select a category for your course\"\n    };\n    const hashtagsChecker = {\n        check: (register, name) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 5 hashtags/tags before attempting to continue\"\n                }})}\n            )\n        },\n        onBlurred: (tags, setValue, clearErrors, setError) => {\n            setValue(\"courseHashtags\", tags, { shouldValidate: true });\n            // timeout to delay for state change(s)\n            setTimeout(() => {\n                // clear error after proper selection\n                if ((typeof tags !== \"undefined\") && (tags.length >= 5 && tags.length <= 15)) {\n                    clearErrors(\"courseHashtags\");\n                } else {\n                    // set error as nothing was selected (blank 'click-off' selection of selector)\n                    setError(\"courseHashtags\", {\n                        type: \"manual\",\n                        message: \"You MUST enter BETWEEN 5-15 hashtags/tags before attempting to continue\",\n                    });\n                }\n            }, 100);\n        },\n        placeholder: \"Enter between 5-15 hashtags/tags...\",\n        type: \"text\",\n        label: \"Enter BETWEEN 5-15 hashtags to proceed forward - people will use these to find your course...\"\n    };\n\n    return {\n        courseTitle,\n        courseCategory,\n        hashtagsChecker\n    }\n}\n\n\nexport default HookHelpers;"]},"metadata":{},"sourceType":"module"}