{"ast":null,"code":"import React,{Fragment,useState,useEffect}from'react';import\"./styles.css\";import Cards from'react-credit-cards';import{Row,Col,Button,Card,CardBody,Input,FormGroup,Form,CardHeader,TabContent,TabPane,Nav,NavItem,NavLink,Container,ListGroup,ListGroupItem,Popover,PopoverHeader,PopoverBody}from'reactstrap';import axios from\"axios\";import{connect}from\"react-redux\";import{NotificationManager}from'react-notifications';import{useHistory}from\"react-router-dom\";import crypto from\"../../../../../../../utils/crypto.js\";const{encryptObject}=crypto;const BottomAddNewPaymentMethodTabbedHelper=_ref=>{let{currentlyDue,setCurrentlyDue,setModalOpenToDo,setPaymentMethods,userData,handleInputChange,cardInfo,setCardInfo}=_ref;const[activeTab,setActiveTab]=useState('1');const[valid,setValidness]=useState(false);const[capabilities,setCapabilities]=useState([]);const[popover,setPopover]=useState({capability0:false,capability1:false,capability2:false});const history=useHistory();useEffect(()=>{const configuration={params:{hackerID:userData.uniqueId}};axios.get(\"\".concat(process.env.REACT_APP_BASE_URL,\"/list/employer/capabilities/payments\"),configuration).then(res=>{if(res.data.message===\"Successfully gathered payment capabilities!\"){console.log(res.data);const{capabilities}=res.data;const arr=[];if(typeof capabilities.data!==\"undefined\"&&capabilities.data.length>0){for(let index=0;index<capabilities.data.length;index++){const el=capabilities.data[index];if(el.id===\"card_payments\"||el.id===\"us_bank_account_ach_payments\"||el.id===\"link_payments\"){arr.push(el);}}}console.log(\"arr\",arr);setCapabilities(arr);}else{console.log(\"Err\",res.data);}}).catch(err=>{console.log(\"Critical errror...:\",err);});},[]);const calculateType=type=>{switch(type){case\"card_payments\":return\"Card Payment's\";break;case\"link_payments\":return\"Link Payment's\";break;case\"us_bank_account_ach_payments\":return\"US Bank Account ACH Payment's\";break;default:break;}};const handleActivation=(element,idx)=>{const{id,status}=element;if(status===\"active\"){NotificationManager.info(\"You've ALREADY activated this option/capability & it is currently set as 'active'. Please try this action again with a 'innactive' or 'unrequested' status types..\",\"Already activated this payment method!\",4750);}else{const configuration={params:{hackerID:userData.uniqueId,elementID:id}};axios.get(\"\".concat(process.env.REACT_APP_BASE_URL,\"/modify/employer/capabilities/payments\"),configuration).then(res=>{if(res.data.message===\"Successfully modified payment capabilities!\"){console.log(res.data);const{capability,elementID}=res.data;const findIndexMatch=capabilities.findIndex(x=>x.id===elementID);const shallowCopy=[...capabilities];shallowCopy[findIndexMatch]=capability;setCapabilities(shallowCopy);setPopover(prevState=>{return{...prevState,[\"capability\".concat(idx)]:false};});NotificationManager.success(\"Successfully modified the desired capabilities & updated stripe information! You're capability \".concat(elementID,\" is now ACTIVE!\"),\"Changed \".concat(elementID,\" and is now ACTIVE!\"),4750);}else if(res.data.message===\"You must enable further 'onboarding settings' before activating this setting..\"){const{currentlyDue}=res.data;setCurrentlyDue(currentlyDue);setTimeout(()=>{setModalOpenToDo(true);},625);}else{console.log(\"Err\",res.data);NotificationManager.error(\"An unknown error has occurred while attempting to update the desired information and/or capability, Please try this action again and contact support if the problem persists!\",\"Unknown error has occurred!\",4750);}}).catch(err=>{console.log(\"Critical errror...:\",err);NotificationManager.error(\"An unknown error has occurred while attempting to update the desired information and/or capability, Please try this action again and contact support if the problem persists!\",\"Unknown error has occurred!\",4750);});}};console.log(\"capabilities\",capabilities);console.log(\"popover\",popover);const calculateReadiness=()=>{const{number,name,expiry,cvc}=cardInfo;if(valid===true&&typeof name!==\"undefined\"&&name.length>0&&typeof expiry!==\"undefined\"&&expiry.length>=4&&typeof cvc!==\"undefined\"&&cvc.length>=3){return false;}else{return true;}};const addNewCardToAccount=()=>{const encryptedCardInfo=encryptObject(cardInfo);const config={hackerID:userData.uniqueId,encryptedCardInfo};axios.post(\"\".concat(process.env.REACT_APP_BASE_URL,\"/add/new/payment/method/hacker\"),config).then(res=>{if(res.data.message===\"Successfully added a new payment method!\"){console.log(res.data);const{account}=res.data;setCardInfo({cvc:\"\",expiry:\"\",focus:\"\",name:\"\",number:\"\",cardType:\"\"});setPaymentMethods(prevState=>[...prevState,account]);}else if(res.data.err===\"This card doesn't appear to be a debit card.\"){setCardInfo({cvc:\"\",expiry:\"\",focus:\"\",name:\"\",number:\"\",cardType:\"\"});NotificationManager.error(\"This card type (Anything outside of DEBIT) is NOT allowed! You MUST enter a debit card if you wish to enter a valid card payment type...\",\"Enter a DEBIT card ONLY! This is NOT a debit card.\",4750);}else if(res.data.err===\"This card doesn't appear to support payouts.\"){NotificationManager.warning(\"This card does NOT support 'payouts' (payments sent to YOUR account/card after receiving funds via our platform). Please note that you will NOT be able to receive payouts to this card though!\",\"Payouts NOT allowed with this card!\",4750);}else{console.log(\"err\",res.data);NotificationManager.error(\"An unknown error has occurred, please reload this page or contact support if this problem persists...\",\"An unknown error has occurred!\",4750);}}).catch(err=>{console.log(err);NotificationManager.error(\"An unknown error has occurred, please reload this page or contact support if this problem persists...\",\"An unknown error has occurred!\",4750);});};return/*#__PURE__*/React.createElement(Fragment,null,/*#__PURE__*/React.createElement(Card,{className:\"card-shadow-card-add\"},/*#__PURE__*/React.createElement(Row,{className:\"product-page-main m-0\"},/*#__PURE__*/React.createElement(Col,{sm:\"12\"},/*#__PURE__*/React.createElement(Nav,{tabs:true,className:\"border-tab\"},/*#__PURE__*/React.createElement(NavItem,{id:\"myTab\",role:\"tablist\"},/*#__PURE__*/React.createElement(NavLink,{href:\"#\",className:activeTab==='1'?'active':'',onClick:()=>setActiveTab('1')},\"Add New Card Payment Method\"),/*#__PURE__*/React.createElement(\"div\",{className:\"material-border\"})),/*#__PURE__*/React.createElement(NavItem,{id:\"myTab\",role:\"tablist\"},/*#__PURE__*/React.createElement(NavLink,{href:\"#\",className:activeTab==='2'?'active':'',onClick:()=>setActiveTab('2')},\"Manage Your Payment Account Capabilities\"),/*#__PURE__*/React.createElement(\"div\",{className:\"material-border\"}))),/*#__PURE__*/React.createElement(TabContent,{activeTab:activeTab},/*#__PURE__*/React.createElement(TabPane,{tabId:\"1\"},/*#__PURE__*/React.createElement(Col,{lg:\"12\",sm:\"12\",md:\"12\",xl:\"12 xl-100\"},/*#__PURE__*/React.createElement(Card,{className:\"height-equal credit-form\"},/*#__PURE__*/React.createElement(CardHeader,{className:\"py-4\"},/*#__PURE__*/React.createElement(\"h5\",null,\"Add a Credit/Debit Card\")),/*#__PURE__*/React.createElement(CardBody,null,/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:\"7\"},/*#__PURE__*/React.createElement(Form,{className:\"theme-form mega-form\"},/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(Input,{className:\"form-control\",type:\"text\",name:\"name\",value:cardInfo.name,placeholder:\"Name (Full Name - First/Last)\",onChange:e=>handleInputChange(e)})),/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(Input,{className:\"form-control\",type:\"text\",name:\"number\",value:cardInfo.number,placeholder:\"Enter your card number..\",onChange:e=>handleInputChange(e)})),/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(\"select\",{onChange:e=>{const value=e.target.value;if(value!==\"\"){cardInfo.expiry=value+cardInfo.expiry.substring(2,5);setCardInfo(prevState=>{return{...prevState,expiry:cardInfo.expiry};});}},style:{marginLeft:\"15px\"},className:\"form-control digits year-date-format\",name:\"expireMM\",id:\"expireMM\"},/*#__PURE__*/React.createElement(\"option\",{value:\"\"},\"Select a month\"),/*#__PURE__*/React.createElement(\"option\",{value:\"01\"},\"January\"),/*#__PURE__*/React.createElement(\"option\",{value:\"02\"},\"February\"),/*#__PURE__*/React.createElement(\"option\",{value:\"03\"},\"March\"),/*#__PURE__*/React.createElement(\"option\",{value:\"04\"},\"April\"),/*#__PURE__*/React.createElement(\"option\",{value:\"05\"},\"May\"),/*#__PURE__*/React.createElement(\"option\",{value:\"06\"},\"June\"),/*#__PURE__*/React.createElement(\"option\",{value:\"07\"},\"July\"),/*#__PURE__*/React.createElement(\"option\",{value:\"08\"},\"August\"),/*#__PURE__*/React.createElement(\"option\",{value:\"09\"},\"September\"),/*#__PURE__*/React.createElement(\"option\",{value:\"10\"},\"October\"),/*#__PURE__*/React.createElement(\"option\",{value:\"11\"},\"November\"),/*#__PURE__*/React.createElement(\"option\",{value:\"12\"},\"December\")),/*#__PURE__*/React.createElement(\"select\",{onChange:e=>{const value=e.target.value;if(value!==\"\"){cardInfo.expiry=cardInfo.expiry.substring(0,2)+value;setCardInfo(prevState=>{return{...prevState,expiry:cardInfo.expiry};});}},className:\"form-control digits year-date-format\",name:\"expireYY\",id:\"expireYY\"},/*#__PURE__*/React.createElement(\"option\",{value:\"\"},\"Select a year\"),/*#__PURE__*/React.createElement(\"option\",{value:\"20\"},\"2020\"),/*#__PURE__*/React.createElement(\"option\",{value:\"21\"},\"2021\"),/*#__PURE__*/React.createElement(\"option\",{value:\"22\"},\"2022\"),/*#__PURE__*/React.createElement(\"option\",{value:\"23\"},\"2023\"),/*#__PURE__*/React.createElement(\"option\",{value:\"24\"},\"2024\"),/*#__PURE__*/React.createElement(\"option\",{value:\"25\"},\"2025\"),/*#__PURE__*/React.createElement(\"option\",{value:\"26\"},\"2026\"),/*#__PURE__*/React.createElement(\"option\",{value:\"27\"},\"2027\"),/*#__PURE__*/React.createElement(\"option\",{value:\"28\"},\"2028\"),/*#__PURE__*/React.createElement(\"option\",{value:\"29\"},\"2029\"),/*#__PURE__*/React.createElement(\"option\",{value:\"30\"},\"2030\"),/*#__PURE__*/React.createElement(\"option\",{value:\"31\"},\"2031\"),/*#__PURE__*/React.createElement(\"option\",{value:\"32\"},\"2032\"),/*#__PURE__*/React.createElement(\"option\",{value:\"33\"},\"2033\"),/*#__PURE__*/React.createElement(\"option\",{value:\"34\"},\"2034\"),/*#__PURE__*/React.createElement(\"option\",{value:\"35\"},\"2035\"),/*#__PURE__*/React.createElement(\"option\",{value:\"36\"},\"2036\")))),/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(Input,{className:\"form-control\",type:\"text\",name:\"cvc\",placeholder:\"CVC... (Security Code On Back)\",value:cardInfo.cvc,onChange:e=>handleInputChange(e)})))),/*#__PURE__*/React.createElement(Col,{md:\"5\",className:\"text-center\"},/*#__PURE__*/React.createElement(Cards,{callback:(type,isValid)=>{setCardInfo(prevState=>{return{...prevState,cardType:type.issuer};});setValidness(isValid);},cvc:cardInfo.cvc,expiry:cardInfo.expiry,focused:cardInfo.focus,name:cardInfo.name,number:cardInfo.number})))),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{sm:\"12\",md:\"12\",lg:\"12\",xl:\"12\"},/*#__PURE__*/React.createElement(Button,{onClick:addNewCardToAccount,disabled:calculateReadiness(),style:{width:\"100%\"},color:\"success\",className:\"btn-square-success\"},/*#__PURE__*/React.createElement(\"i\",{className:\"fa fa-submit mr-1\"}),\" Submit New Payment Method\")))))),/*#__PURE__*/React.createElement(TabPane,{tabId:\"2\"},/*#__PURE__*/React.createElement(Container,{fluid:true},/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{sm:\"12\",md:\"12\",lg:\"12\",xl:\"12\"},/*#__PURE__*/React.createElement(Card,{className:\"card-payment-entirely-halved\"},/*#__PURE__*/React.createElement(CardHeader,null,/*#__PURE__*/React.createElement(\"h3\",{className:\"capabilities-header\"},\"Capabilities related to payment method's\"),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(\"p\",{className:\"lead\"},\"Capabilities are the 'activated/enabled' various payment features and/or functionality on your account. The below table will display what features ARE ENABLED and which ones are NOT enabled but can be enabled by clicking the animated 'plus sign' image..\")),/*#__PURE__*/React.createElement(CardBody,null,/*#__PURE__*/React.createElement(ListGroup,{className:\"list-group-flush\"},typeof capabilities!==\"undefined\"&&capabilities.length>0?capabilities.map((element,idx)=>{return/*#__PURE__*/React.createElement(ListGroupItem,{key:idx},/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{sm:\"12\",md:\"4\",lg:\"4\",xl:\"4\"},/*#__PURE__*/React.createElement(\"strong\",null,\"Payment Type:\")),/*#__PURE__*/React.createElement(Col,{sm:\"12\",md:\"4\",lg:\"4\",xl:\"4\"},/*#__PURE__*/React.createElement(\"strong\",{style:{color:\"#f73164\",textDecorationLine:\"underline\"}},calculateType(element.id))),/*#__PURE__*/React.createElement(Col,{className:\"target-me\",sm:\"12\",md:\"4\",lg:\"4\",xl:\"4\"},/*#__PURE__*/React.createElement(\"div\",{className:\"create-row-capability\"},/*#__PURE__*/React.createElement(\"strong\",{style:{color:\"#7366ff\",textDecorationLine:\"underline\"}},element.status),/*#__PURE__*/React.createElement(\"img\",{id:\"capability\".concat(idx),onClick:()=>{setPopover(prevState=>{return{...prevState,[\"capability\".concat(idx)]:true};});},src:require(\"../../../../../../../assets/gifs/add.gif\"),className:\"gif-add-capability\"}),/*#__PURE__*/React.createElement(\"div\",{onMouseLeave:()=>{setPopover(prevState=>{return{...prevState,[\"capability\".concat(idx)]:false};});},className:\"zindex-pop-me\"},/*#__PURE__*/React.createElement(Popover,{className:\"elevate-popover\",placement:\"bottom\",isOpen:popover[\"capability\".concat(idx)],target:\"capability\".concat(idx),toggle:()=>{setPopover(prevState=>{return{...prevState,[\"capability\".concat(idx)]:!popover[\"capability\".concat(idx)]};});}},/*#__PURE__*/React.createElement(PopoverHeader,null,\"Update/Activate Capability\"),/*#__PURE__*/React.createElement(PopoverBody,null,\"Would you like to update and 'activate' this capability? You MUST have previously completed the 'onboarding-flow'.\",/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(Button,{onClick:()=>handleActivation(element,idx),className:\"btn-square-success\",outline:true,color:\"success-2x\",style:{width:\"100%\"}},\"Activate!\"))))))));}):null))))))))))));};const mapStateToProps=state=>{return{userData:state.auth.data};};export default connect(mapStateToProps,{})(BottomAddNewPaymentMethodTabbedHelper);","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/src/components/dashboard/paymentLogic/hackers/mainPaymentLogic/helpers/bottomTabbed/bottomTabbedHelper.js"],"names":["React","Fragment","useState","useEffect","Cards","Row","Col","Button","Card","CardBody","Input","FormGroup","Form","CardHeader","TabContent","TabPane","Nav","NavItem","NavLink","Container","ListGroup","ListGroupItem","Popover","PopoverHeader","PopoverBody","axios","connect","NotificationManager","useHistory","crypto","encryptObject","BottomAddNewPaymentMethodTabbedHelper","currentlyDue","setCurrentlyDue","setModalOpenToDo","setPaymentMethods","userData","handleInputChange","cardInfo","setCardInfo","activeTab","setActiveTab","valid","setValidness","capabilities","setCapabilities","popover","setPopover","capability0","capability1","capability2","history","configuration","params","hackerID","uniqueId","get","process","env","REACT_APP_BASE_URL","then","res","data","message","console","log","arr","length","index","el","id","push","catch","err","calculateType","type","handleActivation","element","idx","status","info","elementID","capability","findIndexMatch","findIndex","x","shallowCopy","prevState","success","setTimeout","error","calculateReadiness","number","name","expiry","cvc","addNewCardToAccount","encryptedCardInfo","config","post","account","focus","cardType","warning","e","value","target","substring","marginLeft","isValid","issuer","width","map","color","textDecorationLine","require","mapStateToProps","state","auth"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport \"./styles.css\";\nimport Cards from 'react-credit-cards';\nimport { Row, Col, Button, Card, CardBody, Input, FormGroup, Form, CardHeader, TabContent, TabPane, Nav, NavItem, NavLink, Container, ListGroup, ListGroupItem, Popover, PopoverHeader, PopoverBody } from 'reactstrap';\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport { NotificationManager } from 'react-notifications';\nimport { useHistory } from \"react-router-dom\";\nimport crypto from \"../../../../../../../utils/crypto.js\";\n\n\nconst { \n    encryptObject \n} = crypto;\n\nconst BottomAddNewPaymentMethodTabbedHelper = ({ currentlyDue, setCurrentlyDue, setModalOpenToDo, setPaymentMethods, userData, handleInputChange, cardInfo, setCardInfo }) => {\n    const [activeTab, setActiveTab] = useState('1');\n    const [ valid, setValidness ] = useState(false);\n    const [ capabilities, setCapabilities ] = useState([]);\n    const [ popover, setPopover ] = useState({\n        capability0: false,\n        capability1: false,\n        capability2: false\n    })\n\n    const history = useHistory();\n\n    useEffect(() => {\n        const configuration = {\n            params: { \n                hackerID: userData.uniqueId\n            }\n        }\n        axios.get(`${process.env.REACT_APP_BASE_URL}/list/employer/capabilities/payments`, configuration).then((res) => {\n            if (res.data.message === \"Successfully gathered payment capabilities!\") {\n                console.log(res.data);\n\n                const { capabilities } = res.data;\n\n                const arr = [];\n\n                if (typeof capabilities.data !== \"undefined\" && capabilities.data.length > 0) {\n                    for (let index = 0; index < capabilities.data.length; index++) {\n                        const el = capabilities.data[index];\n                        if (el.id === \"card_payments\" || el.id === \"us_bank_account_ach_payments\" || el.id === \"link_payments\") {\n                            arr.push(el);\n                        }\n                    }\n                }\n                console.log(\"arr\", arr);\n\n                setCapabilities(arr);\n            } else {\n                console.log(\"Err\", res.data);\n            }\n        }).catch((err) => {\n            console.log(\"Critical errror...:\", err);\n        })\n    }, [])\n\n    const calculateType = (type) => {\n        switch (type) {\n            case \"card_payments\":\n                return \"Card Payment's\"\n                break;\n            case \"link_payments\":\n                return \"Link Payment's\";\n                break;\n            case \"us_bank_account_ach_payments\":\n                return \"US Bank Account ACH Payment's\"\n                break;\n            default:\n                break;\n        }\n    }\n\n    const handleActivation = (element, idx) => {\n\n        const { id, status } = element; \n\n        if (status === \"active\") {\n            NotificationManager.info(\"You've ALREADY activated this option/capability & it is currently set as 'active'. Please try this action again with a 'innactive' or 'unrequested' status types..\", \"Already activated this payment method!\", 4750);\n        } else {\n            const configuration = {\n                params: { \n                    hackerID: userData.uniqueId,\n                    elementID: id\n                }\n            }\n            axios.get(`${process.env.REACT_APP_BASE_URL}/modify/employer/capabilities/payments`, configuration).then((res) => {\n                if (res.data.message === \"Successfully modified payment capabilities!\") {\n                    console.log(res.data);\n\n                    const { capability, elementID } = res.data;\n\n                    const findIndexMatch = capabilities.findIndex(x => x.id === elementID);\n\n                    const shallowCopy = [...capabilities];\n\n                    shallowCopy[findIndexMatch] = capability;\n\n                    setCapabilities(shallowCopy);\n                    \n                    setPopover(prevState => {\n                        return {\n                            ...prevState,\n                            [`capability${idx}`]: false\n                        }\n                    })\n\n                    NotificationManager.success(`Successfully modified the desired capabilities & updated stripe information! You're capability ${elementID} is now ACTIVE!`, `Changed ${elementID} and is now ACTIVE!`, 4750);\n                } else if (res.data.message === \"You must enable further 'onboarding settings' before activating this setting..\") {\n\n                    const { currentlyDue } = res.data;\n\n                    setCurrentlyDue(currentlyDue);\n\n                    setTimeout(() => {\n                        setModalOpenToDo(true);\n                    },  625);\n                } else {\n                    console.log(\"Err\", res.data);\n\n                    NotificationManager.error(\"An unknown error has occurred while attempting to update the desired information and/or capability, Please try this action again and contact support if the problem persists!\", \"Unknown error has occurred!\", 4750);\n                }\n            }).catch((err) => {\n                console.log(\"Critical errror...:\", err);\n\n                NotificationManager.error(\"An unknown error has occurred while attempting to update the desired information and/or capability, Please try this action again and contact support if the problem persists!\", \"Unknown error has occurred!\", 4750);\n            })\n        }\n    }\n\n    console.log(\"capabilities\", capabilities);\n\n    console.log(\"popover\", popover);\n\n    const calculateReadiness = () => {\n        const { number, name, expiry, cvc } = cardInfo;\n\n        if (valid === true && typeof name !== \"undefined\" && name.length > 0 && typeof expiry !== \"undefined\" && expiry.length >= 4 && typeof cvc !== \"undefined\" && cvc.length >= 3) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n    const addNewCardToAccount = () => {\n        const encryptedCardInfo = encryptObject(cardInfo);\n\n        const config = {\n            hackerID: userData.uniqueId,\n            encryptedCardInfo\n        }\n    \n        axios.post(`${process.env.REACT_APP_BASE_URL}/add/new/payment/method/hacker`, config).then((res) => {\n            if (res.data.message === \"Successfully added a new payment method!\") {\n\n                console.log(res.data);\n\n                const { account } = res.data;\n\n                setCardInfo({\n                    cvc: \"\",\n                    expiry: \"\",\n                    focus: \"\",\n                    name: \"\",\n                    number: \"\",\n                    cardType: \"\"\n                })\n\n                setPaymentMethods(prevState => [...prevState, account]);\n\n            } else if (res.data.err === \"This card doesn't appear to be a debit card.\") {\n\n                setCardInfo({\n                    cvc: \"\",\n                    expiry: \"\",\n                    focus: \"\",\n                    name: \"\",\n                    number: \"\",\n                    cardType: \"\"\n                })\n                \n                NotificationManager.error(\"This card type (Anything outside of DEBIT) is NOT allowed! You MUST enter a debit card if you wish to enter a valid card payment type...\", \"Enter a DEBIT card ONLY! This is NOT a debit card.\", 4750);\n\n            } else if (res.data.err === \"This card doesn't appear to support payouts.\") {\n                NotificationManager.warning(\"This card does NOT support 'payouts' (payments sent to YOUR account/card after receiving funds via our platform). Please note that you will NOT be able to receive payouts to this card though!\", \"Payouts NOT allowed with this card!\", 4750);\n            } else {\n                console.log(\"err\", res.data);\n\n                NotificationManager.error(\"An unknown error has occurred, please reload this page or contact support if this problem persists...\", \"An unknown error has occurred!\", 4750);\n            }\n        }).catch((err) => {\n            console.log(err);\n\n            NotificationManager.error(\"An unknown error has occurred, please reload this page or contact support if this problem persists...\", \"An unknown error has occurred!\", 4750);\n        })\n    }\n    return (\n        <Fragment>\n            <Card className=\"card-shadow-card-add\">\n                <Row className=\"product-page-main m-0\">\n                    <Col sm=\"12\">\n                    <Nav tabs className=\"border-tab\">\n                        <NavItem  id=\"myTab\" role=\"tablist\">\n                            <NavLink href=\"#\" className={activeTab === '1' ? 'active' : ''} onClick={() => setActiveTab('1')}>\n                                Add New Card Payment Method\n                            </NavLink>\n                            <div className=\"material-border\"></div>\n                        </NavItem>\n                        <NavItem  id=\"myTab\" role=\"tablist\">\n                            <NavLink href=\"#\"  className={activeTab === '2' ? 'active' : ''} onClick={() => setActiveTab('2')}>\n                                Manage Your Payment Account Capabilities\n                            </NavLink>\n                            <div className=\"material-border\"></div>\n                        </NavItem>\n                    </Nav>\n                    <TabContent activeTab={activeTab}>\n                        <TabPane tabId=\"1\">\n                            <Col lg=\"12\" sm=\"12\" md=\"12\" xl=\"12 xl-100\">\n                                <Card className=\"height-equal credit-form\">\n                                    <CardHeader className=\"py-4\">\n                                        <h5>Add a Credit/Debit Card</h5>\n                                    </CardHeader>\n                                    <CardBody>\n                                        <Row>\n                                            <Col md=\"7\">\n                                                <Form className=\"theme-form mega-form\">\n                                                    <FormGroup>\n                                                        <Input\n                                                            className=\"form-control\"\n                                                            type=\"text\"\n                                                            name=\"name\"\n                                                            value={cardInfo.name}\n                                                            placeholder=\"Name (Full Name - First/Last)\"\n                                                            onChange={(e) => handleInputChange(e)}\n                                                        />\n                                                    </FormGroup>\n                                                    <FormGroup>\n                                                        <Input\n                                                            className=\"form-control\"\n                                                            type=\"text\"\n                                                            name=\"number\"\n                                                            value={cardInfo.number}\n                                                            placeholder=\"Enter your card number..\"\n                                                            onChange={(e) => handleInputChange(e)}\n                                                        />\n                                                    </FormGroup>\n                                                    <FormGroup>\n                                                        <Row>\n                                                            <select onChange={(e) => {\n                                                                const value = e.target.value;\n\n                                                                if (value !== \"\") {\n                                                            \n                                                                    cardInfo.expiry = value + cardInfo.expiry.substring(2, 5);\n\n                                                                    setCardInfo(prevState => {\n                                                                        return {\n                                                                            ...prevState,\n                                                                            expiry: cardInfo.expiry\n                                                                        }\n                                                                    })\n                                                                }\n                                                            }} style={{ marginLeft: \"15px\" }} className=\"form-control digits year-date-format\" name='expireMM' id='expireMM'>\n                                                                <option value=''>Select a month</option>\n                                                                <option value='01'>January</option>\n                                                                <option value='02'>February</option>\n                                                                <option value='03'>March</option>\n                                                                <option value='04'>April</option>\n                                                                <option value='05'>May</option>\n                                                                <option value='06'>June</option>\n                                                                <option value='07'>July</option>\n                                                                <option value='08'>August</option>\n                                                                <option value='09'>September</option>\n                                                                <option value='10'>October</option>\n                                                                <option value='11'>November</option>\n                                                                <option value='12'>December</option>\n                                                            </select> \n                                                            <select onChange={(e) => {\n                                                                const value = e.target.value;\n\n                                                                if (value !== \"\") {\n                                                                    \n                                                                    cardInfo.expiry = cardInfo.expiry.substring(0, 2) + value;\n\n                                                                    setCardInfo(prevState => {\n                                                                        return {\n                                                                            ...prevState,\n                                                                            expiry: cardInfo.expiry\n                                                                        }\n                                                                    })\n                                                                }\n                                                            }} className=\"form-control digits year-date-format\" name='expireYY' id='expireYY'>\n                                                                <option value=''>Select a year</option>\n                                                                <option value='20'>2020</option>\n                                                                <option value='21'>2021</option>\n                                                                <option value='22'>2022</option>\n                                                                <option value='23'>2023</option>\n                                                                <option value='24'>2024</option>\n                                                                <option value='25'>2025</option>\n                                                                <option value='26'>2026</option>\n                                                                <option value='27'>2027</option>\n                                                                <option value='28'>2028</option>\n                                                                <option value='29'>2029</option>\n                                                                <option value='30'>2030</option>\n                                                                <option value='31'>2031</option>\n                                                                <option value='32'>2032</option>\n                                                                <option value='33'>2033</option>\n                                                                <option value='34'>2034</option>\n                                                                <option value='35'>2035</option>\n                                                                <option value='36'>2036</option>\n                                                            </select> \n                                                        </Row>\n                                                    </FormGroup>\n                                                    <FormGroup>\n                                                        <Input\n                                                            className=\"form-control\"\n                                                            type=\"text\"\n                                                            name=\"cvc\"\n                                                            placeholder=\"CVC... (Security Code On Back)\"\n                                                            value={cardInfo.cvc}\n                                                            onChange={(e) => handleInputChange(e)}\n                                                        />\n                                                    </FormGroup>\n                                                </Form>\n                                            </Col>\n                                            <Col md=\"5\" className=\"text-center\">\n                                                <Cards\n                                                    callback={(type, isValid) => {\n                                                        setCardInfo(prevState => {\n                                                            return {\n                                                                ...prevState,\n                                                                cardType: type.issuer\n                                                            }\n                                                        })\n                                                        setValidness(isValid);\n                                                    }}\n                                                    cvc={cardInfo.cvc}\n                                                    expiry={cardInfo.expiry}\n                                                    focused={cardInfo.focus}\n                                                    name={cardInfo.name}\n                                                    number={cardInfo.number}\n                                                />\n                                            </Col>\n                                        </Row>\n                                    </CardBody>\n                                    <Row>\n                                        <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                                            <Button onClick={addNewCardToAccount} disabled={calculateReadiness()} style={{ width: \"100%\" }} color=\"success\" className=\"btn-square-success\">\n                                                <i className=\"fa fa-submit mr-1\"></i> Submit New Payment Method\n                                            </Button>\n                                        </Col>\n                                    </Row>\n                                </Card>\n                            </Col>\n                        </TabPane>\n                        <TabPane tabId=\"2\">\n                            <Container fluid={true}>\n                                <Row>\n                                    <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                                        <Card className='card-payment-entirely-halved'>\n                                            <CardHeader>\n                                                <h3 className='capabilities-header'>Capabilities related to payment method's</h3>\n                                                <hr />\n                                                <p className='lead'>Capabilities are the 'activated/enabled' various payment features and/or functionality on your account. The below table will display what features ARE ENABLED and which ones are NOT enabled but can be enabled by clicking the animated 'plus sign' image..</p>\n                                            </CardHeader>\n                                            <CardBody>\n                                                <ListGroup className=\"list-group-flush\">\n                                                    {typeof capabilities !== \"undefined\" && capabilities.length > 0 ? capabilities.map((element, idx) => {\n                                                        return (\n                                                            <ListGroupItem key={idx}>\n                                                                <Row>\n                                                                    <Col sm=\"12\" md=\"4\" lg=\"4\" xl=\"4\">\n                                                                        <strong>Payment Type:</strong>\n                                                                    </Col>\n                                                                    <Col sm=\"12\" md=\"4\" lg=\"4\" xl=\"4\">\n                                                                        <strong style={{ color: \"#f73164\", textDecorationLine: \"underline\" }}>{calculateType(element.id)}</strong>\n                                                                    </Col>\n                                                                    <Col className='target-me' sm=\"12\" md=\"4\" lg=\"4\" xl=\"4\">\n                                                                        <div className={\"create-row-capability\"}>\n                                                                            <strong style={{ color: \"#7366ff\", textDecorationLine: \"underline\" }}>{element.status}</strong>\n                                                                            <img id={`capability${idx}`} onClick={() => {\n                                                                                setPopover(prevState => {\n                                                                                    return {\n                                                                                        ...prevState,\n                                                                                        [`capability${idx}`]: true\n                                                                                    }\n                                                                                })\n                                                                            }} src={require(\"../../../../../../../assets/gifs/add.gif\")} className={\"gif-add-capability\"} />\n                                                                            <div onMouseLeave={() => {\n                                                                                setPopover(prevState => {\n                                                                                    return {\n                                                                                        ...prevState,\n                                                                                        [`capability${idx}`]: false\n                                                                                    }\n                                                                                })\n                                                                            }} className='zindex-pop-me'>\n                                                                                <Popover className={\"elevate-popover\"} placement=\"bottom\" isOpen={popover[`capability${idx}`]} target={`capability${idx}`} toggle={() => {\n                                                                                    setPopover(prevState => {\n                                                                                        return {\n                                                                                            ...prevState,\n                                                                                            [`capability${idx}`]: !popover[`capability${idx}`]\n                                                                                        }\n                                                                                    })\n                                                                                }}>\n                                                                                    <PopoverHeader>Update/Activate Capability</PopoverHeader>\n                                                                                    <PopoverBody>Would you like to update and 'activate' this capability? You MUST have previously completed the 'onboarding-flow'.\n                                                                                    <hr />\n                                                                                    <Button onClick={() => handleActivation(element, idx)} className={\"btn-square-success\"} outline color={\"success-2x\"} style={{ width: \"100%\" }}>Activate!</Button>\n                                                                                    </PopoverBody>\n                                                                                </Popover>\n                                                                            </div>\n                                                                        </div>\n                                                                    </Col>\n                                                                </Row>\n                                                            </ListGroupItem>\n                                                        );\n                                                    }) : null}\n                                                </ListGroup>\n                                            </CardBody>\n                                        </Card>\n                                    </Col>\n                                </Row>\n                            </Container>\n                        </TabPane>\n                    </TabContent>\n                    </Col>\n                </Row>\n            </Card>\n        </Fragment>\n    );\n}\nconst mapStateToProps = (state) => {\n    return {\n        userData: state.auth.data\n    }\n}\nexport default connect(mapStateToProps, {  })(BottomAddNewPaymentMethodTabbedHelper);"]},"metadata":{},"sourceType":"module"}