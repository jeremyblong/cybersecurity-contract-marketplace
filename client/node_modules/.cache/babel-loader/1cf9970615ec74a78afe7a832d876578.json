{"ast":null,"code":"import React, { Component } from 'react';\nimport * as SendBird from \"sendbird\";\nimport { connect } from \"react-redux\";\nimport { saveSendbirdInitialData } from \"./redux/actions/messaging/initialization/initSBLogic.js\";\nimport _ from \"lodash\";\nconst sb = new SendBird({\n  appId: process.env.REACT_APP_SENDBIRD_APP_ID,\n  localCacheEnabled: true\n});\nsaveSendbirdInitialData(sb);\n\nclass MountingLogicRedux extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      saveSendbirdInitialData,\n      authenticated,\n      accountData,\n      SBData\n    } = this.props;\n    console.log(\"prevProps\", prevProps, prevState, SBData);\n  }\n\n  render() {\n    const {\n      authenticated,\n      accountData\n    } = this.props; // run other SENDBIRD Logic init\n\n    if (authenticated === true) {\n      console.log(\"validating - connecting user MESSAGING logic...\", sb);\n      sb.connect(accountData.uniqueId, (user, error) => {\n        if (error) {\n          // Handle error.\n          console.log(\"Messaging connection error... :\", error);\n        } // The user is connected to Sendbird server.\n\n\n        console.log(`The user - ${accountData.uniqueId} - is connected to Sendbird server`, user); // change mounted state to prevent further renders (will revert back to FALSE upon page refresh)\n        // setMountedState(true);\n      });\n    }\n\n    return null;\n  }\n\n}\n\nconst mapStateToProps = state => {\n  console.log(\"Stateeeeeee\", state);\n  return {\n    authenticated: _.has(state.auth.data, \"accountType\") ? true : false,\n    accountData: state.auth.data,\n    SBData: state.sendbirdInitData.sendbirdInitData\n  };\n};\n\nexport default connect(mapStateToProps, {\n  saveSendbirdInitialData\n})(MountingLogicRedux);","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/mountingLogicRedux.js"],"names":["React","Component","SendBird","connect","saveSendbirdInitialData","_","sb","appId","process","env","REACT_APP_SENDBIRD_APP_ID","localCacheEnabled","MountingLogicRedux","constructor","props","state","componentDidUpdate","prevProps","prevState","authenticated","accountData","SBData","console","log","render","uniqueId","user","error","mapStateToProps","has","auth","data","sendbirdInitData"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,QAAZ,MAA0B,UAA1B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,uBAAT,QAAwC,yDAAxC;AACA,OAAOC,CAAP,MAAc,QAAd;AAGA,MAAMC,EAAE,GAAG,IAAIJ,QAAJ,CAAa;AAAEK,EAAAA,KAAK,EAAEC,OAAO,CAACC,GAAR,CAAYC,yBAArB;AAAgDC,EAAAA,iBAAiB,EAAE;AAAnE,CAAb,CAAX;AAEAP,uBAAuB,CAACE,EAAD,CAAvB;;AAEA,MAAMM,kBAAN,SAAiCX,SAAjC,CAA2C;AAC3CY,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa,EAAb;AAGH;;AACGC,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACrC,UAAM;AAAEd,MAAAA,uBAAF;AAA2Be,MAAAA,aAA3B;AAA0CC,MAAAA,WAA1C;AAAuDC,MAAAA;AAAvD,QAAkE,KAAKP,KAA7E;AAEAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBN,SAAzB,EAAoCC,SAApC,EAA+CG,MAA/C;AACH;;AACDG,EAAAA,MAAM,GAAI;AACN,UAAM;AAAEL,MAAAA,aAAF;AAAiBC,MAAAA;AAAjB,QAAiC,KAAKN,KAA5C,CADM,CAEN;;AACA,QAAIK,aAAa,KAAK,IAAtB,EAA4B;AACxBG,MAAAA,OAAO,CAACC,GAAR,CAAY,iDAAZ,EAA+DjB,EAA/D;AAEAA,MAAAA,EAAE,CAACH,OAAH,CAAWiB,WAAW,CAACK,QAAvB,EAAiC,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC9C,YAAIA,KAAJ,EAAW;AACP;AACAL,UAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CI,KAA/C;AACH,SAJ6C,CAK9C;;;AACAL,QAAAA,OAAO,CAACC,GAAR,CAAa,cAAaH,WAAW,CAACK,QAAS,oCAA/C,EAAoFC,IAApF,EAN8C,CAO9C;AACA;AACH,OATD;AAUH;;AACD,WAAO,IAAP;AACH;;AA/BsC;;AAiC3C,MAAME,eAAe,GAAIb,KAAD,IAAW;AAC/BO,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BR,KAA3B;AACA,SAAO;AACHI,IAAAA,aAAa,EAAEd,CAAC,CAACwB,GAAF,CAAMd,KAAK,CAACe,IAAN,CAAWC,IAAjB,EAAuB,aAAvB,IAAwC,IAAxC,GAA+C,KAD3D;AAEHX,IAAAA,WAAW,EAAEL,KAAK,CAACe,IAAN,CAAWC,IAFrB;AAGHV,IAAAA,MAAM,EAAEN,KAAK,CAACiB,gBAAN,CAAuBA;AAH5B,GAAP;AAKH,CAPD;;AAQA,eAAe7B,OAAO,CAACyB,eAAD,EAAkB;AAAExB,EAAAA;AAAF,CAAlB,CAAP,CAAsDQ,kBAAtD,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport * as SendBird from \"sendbird\";\nimport { connect } from \"react-redux\";\nimport { saveSendbirdInitialData } from \"./redux/actions/messaging/initialization/initSBLogic.js\";\nimport _ from \"lodash\";\n\n\nconst sb = new SendBird({ appId: process.env.REACT_APP_SENDBIRD_APP_ID, localCacheEnabled: true });\n\nsaveSendbirdInitialData(sb);\n\nclass MountingLogicRedux extends Component {\nconstructor(props) {\n    super(props);\n\n    this.state = {\n\n    }\n}\n    componentDidUpdate(prevProps, prevState) {\n        const { saveSendbirdInitialData, authenticated, accountData, SBData } = this.props;\n\n        console.log(\"prevProps\", prevProps, prevState, SBData);\n    }\n    render () {\n        const { authenticated, accountData } = this.props;\n        // run other SENDBIRD Logic init\n        if (authenticated === true) {\n            console.log(\"validating - connecting user MESSAGING logic...\", sb);\n            \n            sb.connect(accountData.uniqueId, (user, error) => {\n                if (error) {\n                    // Handle error.\n                    console.log(\"Messaging connection error... :\", error);\n                }\n                // The user is connected to Sendbird server.\n                console.log(`The user - ${accountData.uniqueId} - is connected to Sendbird server`, user);\n                // change mounted state to prevent further renders (will revert back to FALSE upon page refresh)\n                // setMountedState(true);\n            });\n        }\n        return null;\n    }\n}\nconst mapStateToProps = (state) => {\n    console.log(\"Stateeeeeee\", state);\n    return {\n        authenticated: _.has(state.auth.data, \"accountType\") ? true : false,\n        accountData: state.auth.data,\n        SBData: state.sendbirdInitData.sendbirdInitData\n    }\n}\nexport default connect(mapStateToProps, { saveSendbirdInitialData })(MountingLogicRedux);"]},"metadata":{},"sourceType":"module"}