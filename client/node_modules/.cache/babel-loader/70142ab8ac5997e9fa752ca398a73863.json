{"ast":null,"code":"var _jsxFileName = \"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/src/components/dashboard/learning/tutorialVideos/create/formSteps/pageOne/formPageOne.js\";\nimport React, { Fragment } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { Row, Col, Form, Label, Input, ListGroupItem, ListGroup } from 'reactstrap';\nimport { WithContext as ReactTags } from 'react-tag-input';\nimport { NotificationManager } from \"react-notifications\";\nconst KeyCodes = {\n  comma: 188,\n  enter: [10, 13]\n};\nconst delimiters = [...KeyCodes.enter, KeyCodes.comma];\nconst suggestions = [];\n\nconst PageOneVideoCreationHelper = () => {\n  const {\n    register,\n    handleSubmit,\n    control,\n    reset,\n    getValues,\n    setValue,\n    setError,\n    clearErrors,\n    formState: {\n      errors\n    }\n  } = useForm({\n    mode: \"onTouched\",\n    reValidateMode: \"onBlur\"\n  });\n  const gatheredValues = getValues();\n\n  const onSubmit = data => {\n    if (data !== '') {\n      alert('You submitted the form and stuff!');\n    } else {\n      errors.showMessages();\n    }\n  };\n\n  const handleDelete = i => {\n    setValue(\"hashtags\", gatheredValues.hashtags.filter((tag, index) => index !== i), {\n      shouldValidate: true\n    });\n  };\n\n  const handleAddition = tag => {\n    setValue(\"hashtags\", {\n      tags: [...gatheredValues.hashtags, tag]\n    }, {\n      shouldValidate: true\n    });\n  };\n\n  const handleDrag = (tag, currPos, newPos) => {\n    const tags = [...gatheredValues.hashtags];\n    const newTags = tags.slice();\n    newTags.splice(currPos, 1);\n    newTags.splice(newPos, 0, tag); // re-render\n\n    setValue(\"hashtags\", newTags, {\n      shouldValidate: true\n    });\n  };\n\n  const handleInputChange = e => {\n    const {\n      value,\n      name\n    } = e.target;\n    setValue(name, value, {\n      shouldValidate: true\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    className: \"needs-validation\",\n    onSubmit: handleSubmit(onSubmit, (errorsss, e) => {\n      console.log(\"errrrrrs\", errorsss, e);\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: \"12 mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 33\n    }\n  }, \"Video Title\"), /*#__PURE__*/React.createElement(Input, Object.assign({}, register(\"videoTitle\", {\n    required: {\n      value: true,\n      message: \"You MUST enter a value between 15-125 characters\"\n    },\n    minLength: {\n      value: 15,\n      message: \"You must enter AT Least 15 characters\"\n    },\n    maxLength: {\n      value: 125,\n      message: \"You may ONLY enter 125 characters or less\"\n    }\n  }), {\n    className: \"form-control\",\n    onChange: e => handleInputChange(e),\n    value: gatheredValues.videoTitle,\n    name: \"videoTitle\",\n    type: \"text\",\n    placeholder: \"Enter your 'video title' for this tutorial..\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 33\n    }\n  })), errors.videoTitle ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"span-tooltip\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 54\n    }\n  }, errors.videoTitle) : null), /*#__PURE__*/React.createElement(Col, {\n    md: \"12 mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 33\n    }\n  }, \"Video Subtitle\"), /*#__PURE__*/React.createElement(Input, Object.assign({}, register(\"videoSubtitle\", {\n    required: {\n      value: true,\n      message: \"You MUST enter a value between 15-125 characters\"\n    },\n    minLength: {\n      value: 15,\n      message: \"You must enter AT Least 15 characters\"\n    },\n    maxLength: {\n      value: 125,\n      message: \"You may ONLY enter 125 characters or less\"\n    }\n  }), {\n    className: \"form-control\",\n    onChange: e => handleInputChange(e),\n    value: gatheredValues.videoSubtitle,\n    name: \"videoSubtitle\",\n    type: \"text\",\n    placeholder: \"Enter your 'subtitle' for this tutorial..\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 33\n    }\n  })), errors.videoSubtitle ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"span-tooltip\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 57\n    }\n  }, errors.videoSubtitle) : null), /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 33\n    }\n  }, \"Enter relevant tags/hashtags (people will use these tags when searching for specific/condensed results) - \", /*#__PURE__*/React.createElement(\"strong\", {\n    style: {\n      color: \"blue\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 146\n    }\n  }, \"5(MIN) - 15(MAX) Tags\")), /*#__PURE__*/React.createElement(ListGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Controller, Object.assign({\n    control: control,\n    name: \"hashtags\"\n  }, register(\"hashtags\", {\n    required: {\n      value: true,\n      message: \"You MUST enter AT least 5 (five) tags up to a maximum of 15 (fifteen) tags\"\n    }\n  }), {\n    render: _ref => {\n      let {\n        field\n      } = _ref;\n      return /*#__PURE__*/React.createElement(ReactTags, Object.assign({}, field, {\n        tags: gatheredValues.hashtags,\n        name: \"hashtags\",\n        suggestions: suggestions,\n        classNames: {\n          tags: 'hashtagsTagsClass',\n          tagInput: 'hashtagsTagInputClass',\n          tagInputField: 'hashtagsTagInputFieldClass',\n          selected: 'hashtagsSelectedClass',\n          tag: 'hashtagsTagClass badge badge-primary',\n          remove: 'hashtagsRemoveClass',\n          suggestions: 'hashtagsSuggestionsClass',\n          activeSuggestion: 'hashtagsActiveSuggestionClass'\n        },\n        handleDelete: index => {\n          setValue('hashtags', handleDelete(index, gatheredValues.hashtags), {\n            shouldValidate: true\n          });\n        },\n        renderSuggestion: suggestion => {\n          // return list item(s)\n          return /*#__PURE__*/React.createElement(ListGroupItem, {\n            className: \"custom-suggestion-groupitem\",\n            key: suggestion.index,\n            onClick: () => {\n              // run conditional checks\n              if (typeof gatheredValues.hashtags !== \"undefined\") {\n                if (gatheredValues.hashtags.length < 15) {\n                  if (gatheredValues.hashtags.length > 0) {\n                    setValue('hashtags', [...gatheredValues.hashtags, suggestion], {\n                      shouldValidate: true\n                    });\n                  } else {\n                    setValue('hashtags', [suggestion], {\n                      shouldValidate: true\n                    });\n                  }\n                } else {\n                  NotificationManager.warning('You have entered TOO many hashtags & we cannot add your current tag until some are removed.', \"Too many hashtags!\", 4250);\n                }\n              } else {\n                setValue('hashtags', [suggestion], {\n                  shouldValidate: true\n                });\n              }\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 57\n            }\n          }, suggestion.text);\n        },\n        readOnly: false,\n        placeholder: \"Enter a tag (these are how people search & find your listing)\",\n        maxLength: 15,\n        handleAddition: tag => {\n          if (typeof gatheredValues.hashtags !== \"undefined\") {\n            if (gatheredValues.hashtags.length < 15) {\n              if (gatheredValues.hashtags.length > 0) {\n                handleAddition(tag);\n              } else {\n                setValue('hashtags', [tag], {\n                  shouldValidate: true\n                });\n              }\n            } else {\n              NotificationManager.warning('You have entered TOO many hashtags & we cannot add your current tag until some are removed.', \"Too many hashtags!\", 4500);\n            }\n          } else {\n            setValue('hashtags', [tag], {\n              shouldValidate: true\n            });\n          }\n        },\n        handleDrag: (tag, currPos, newPos) => {\n          setValue('hashtags', handleDrag(tag, currPos, newPos, gatheredValues.hashtags), {\n            shouldValidate: true\n          });\n        },\n        delimiters: delimiters,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 45\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 37\n    }\n  }))), errors.hashtags ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"span-tooltip\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 52\n    }\n  }, errors.hashtags.message) : null))))));\n};\n\nexport default PageOneVideoCreationHelper;","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/src/components/dashboard/learning/tutorialVideos/create/formSteps/pageOne/formPageOne.js"],"names":["React","Fragment","useForm","Controller","Row","Col","Form","Label","Input","ListGroupItem","ListGroup","WithContext","ReactTags","NotificationManager","KeyCodes","comma","enter","delimiters","suggestions","PageOneVideoCreationHelper","register","handleSubmit","control","reset","getValues","setValue","setError","clearErrors","formState","errors","mode","reValidateMode","gatheredValues","onSubmit","data","alert","showMessages","handleDelete","i","hashtags","filter","tag","index","shouldValidate","handleAddition","tags","handleDrag","currPos","newPos","newTags","slice","splice","handleInputChange","e","value","name","target","errorsss","console","log","required","message","minLength","maxLength","videoTitle","videoSubtitle","color","field","tagInput","tagInputField","selected","remove","activeSuggestion","suggestion","length","warning","text"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { Row, Col, Form, Label, Input, ListGroupItem, ListGroup } from 'reactstrap';\nimport { WithContext as ReactTags } from 'react-tag-input';\nimport { NotificationManager } from \"react-notifications\";\n\n\nconst KeyCodes = {\n  comma: 188,\n  enter: [10, 13],\n};\n\nconst delimiters = [...KeyCodes.enter, KeyCodes.comma];\n\nconst suggestions = [];\n\nconst PageOneVideoCreationHelper = () => {\n\n    const { register, handleSubmit, control, reset, getValues, setValue, setError, clearErrors, formState: { errors }} = useForm({\n        mode: \"onTouched\",\n        reValidateMode: \"onBlur\"\n    });\n\n    const gatheredValues = getValues();\n\n    const onSubmit = data => {\n\n        if (data !== '') {\n            alert('You submitted the form and stuff!');\n        } else {\n            errors.showMessages();\n        }\n    };\n\n    const handleDelete = (i) => {\n        setValue(\"hashtags\", gatheredValues.hashtags.filter((tag, index) => index !== i), { shouldValidate: true });\n    }\n    const handleAddition = (tag) => {\n        setValue(\"hashtags\", { tags: [...gatheredValues.hashtags, tag] }, { shouldValidate: true });\n    }\n\n    const handleDrag = (tag, currPos, newPos) => {\n        const tags = [...gatheredValues.hashtags];\n        const newTags = tags.slice();\n\n        newTags.splice(currPos, 1);\n        newTags.splice(newPos, 0, tag);\n\n        // re-render\n        setValue(\"hashtags\", newTags, { shouldValidate: true });\n    }\n\n    const handleInputChange = (e) => {\n        const { value, name } = e.target;\n\n        setValue(name, value, { shouldValidate: true });\n    }\n\n    return (\n        <Fragment>\n            <Row>\n                <Col sm=\"12\">\n                    <Form className=\"needs-validation\" onSubmit={handleSubmit(onSubmit, (errorsss, e) => {\n                        console.log(\"errrrrrs\", errorsss, e);\n                    })}>\n                        <div className=\"form-row\">\n                            \n                            <Col md=\"12 mb-3\">\n                                <Label>Video Title</Label>\n                                <Input {...register(\"videoTitle\", { required: {\n                                    value: true,\n                                    message: \"You MUST enter a value between 15-125 characters\"\n                                }, minLength: {\n                                    value: 15,\n                                    message: \"You must enter AT Least 15 characters\"\n                                }, maxLength: {\n                                    value: 125,\n                                    message: \"You may ONLY enter 125 characters or less\"\n                                }})} className=\"form-control\" onChange={(e) => handleInputChange(e)} value={gatheredValues.videoTitle} name=\"videoTitle\" type=\"text\" placeholder=\"Enter your 'video title' for this tutorial..\" />\n                                {errors.videoTitle ? <span className=\"span-tooltip\">{errors.videoTitle}</span> : null}\n                            </Col>\n                            \n                            <Col md=\"12 mb-3\">\n                                <Label>Video Subtitle</Label>\n                                <Input {...register(\"videoSubtitle\", { required: {\n                                    value: true,\n                                    message: \"You MUST enter a value between 15-125 characters\"\n                                }, minLength: {\n                                    value: 15,\n                                    message: \"You must enter AT Least 15 characters\"\n                                }, maxLength: {\n                                    value: 125,\n                                    message: \"You may ONLY enter 125 characters or less\"\n                                }})} className=\"form-control\" onChange={(e) => handleInputChange(e)} value={gatheredValues.videoSubtitle} name=\"videoSubtitle\" type=\"text\" placeholder=\"Enter your 'subtitle' for this tutorial..\" />\n                                {errors.videoSubtitle ? <span className=\"span-tooltip\">{errors.videoSubtitle}</span> : null}\n                            </Col>\n                            <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                                <Label>Enter relevant tags/hashtags (people will use these tags when searching for specific/condensed results) - <strong style={{ color: \"blue\" }}>5(MIN) - 15(MAX) Tags</strong></Label>\n                                <ListGroup>\n                                    <Controller\n                                        control={control}\n                                        name=\"hashtags\"\n                                        {...register(\"hashtags\", { required: {\n                                            value: true,\n                                            message: \"You MUST enter AT least 5 (five) tags up to a maximum of 15 (fifteen) tags\"\n                                        }})}\n                                        render={({ field }) => (\n                                            <ReactTags \n                                                {...field}\n                                                tags={gatheredValues.hashtags}\n                                                name={\"hashtags\"}\n                                                suggestions={suggestions}\n                                                classNames={{\n                                                    tags: 'hashtagsTagsClass',\n                                                    tagInput: 'hashtagsTagInputClass',\n                                                    tagInputField: 'hashtagsTagInputFieldClass',\n                                                    selected: 'hashtagsSelectedClass',\n                                                    tag: 'hashtagsTagClass badge badge-primary',\n                                                    remove: 'hashtagsRemoveClass',\n                                                    suggestions: 'hashtagsSuggestionsClass',\n                                                    activeSuggestion: 'hashtagsActiveSuggestionClass'\n                                                }}\n                                                handleDelete={(index) => {\n                                                    setValue('hashtags', handleDelete(index, gatheredValues.hashtags), { shouldValidate: true });\n                                                }}\n                                                renderSuggestion={(suggestion) => {\n                                                    // return list item(s)\n                                                    return (\n                                                        <ListGroupItem className=\"custom-suggestion-groupitem\" key={suggestion.index} onClick={() => {\n                                                            // run conditional checks\n                                                            if (typeof gatheredValues.hashtags !== \"undefined\") {\n                                                                if (gatheredValues.hashtags.length < 15) {\n                                                                    if (gatheredValues.hashtags.length > 0) {\n                                                                        setValue('hashtags', [...gatheredValues.hashtags, suggestion], { shouldValidate: true });\n                                                                    } else {\n                                                                        setValue('hashtags', [suggestion], { shouldValidate: true });\n                                                                    }\n                                                                } else {\n                                                                    NotificationManager.warning('You have entered TOO many hashtags & we cannot add your current tag until some are removed.', \"Too many hashtags!\", 4250);\n                                                                }\n                                                            } else {\n                                                                setValue('hashtags', [suggestion], { shouldValidate: true });\n                                                            }\n                                                        }}>{suggestion.text}</ListGroupItem>\n                                                    );\n                                                }}\n                                                readOnly={false}\n                                                placeholder={\"Enter a tag (these are how people search & find your listing)\"}\n                                                maxLength={15}\n                                                handleAddition={(tag) => {\n                                                    if (typeof gatheredValues.hashtags !== \"undefined\") {\n                                                        if (gatheredValues.hashtags.length < 15) {\n                                                            if (gatheredValues.hashtags.length > 0) {\n                                                                handleAddition(tag);\n                                                            } else {\n                                                                setValue('hashtags', [tag], { shouldValidate: true });\n                                                            }\n                                                        } else {\n                                                            NotificationManager.warning('You have entered TOO many hashtags & we cannot add your current tag until some are removed.', \"Too many hashtags!\", 4500);\n                                                        }\n                                                    } else {\n                                                        setValue('hashtags', [tag], { shouldValidate: true });\n                                                    }\n                                                }}\n                                                handleDrag={(tag, currPos, newPos) => {\n                                                    setValue('hashtags', handleDrag(tag, currPos, newPos, gatheredValues.hashtags), { shouldValidate: true });\n                                                }}\n                                                delimiters={delimiters} \n                                            />\n                                            \n                                        )}\n                                    />\n                                </ListGroup>\n                                {errors.hashtags ? <span className=\"span-tooltip\">{errors.hashtags.message}</span> : null}\n                            </Col>\n                        </div>\n                    </Form>\n                </Col>\n            </Row>\n        </Fragment>\n    );\n};\n\nexport default PageOneVideoCreationHelper;"]},"metadata":{},"sourceType":"module"}