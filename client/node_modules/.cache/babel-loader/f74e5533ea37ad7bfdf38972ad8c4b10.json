{"ast":null,"code":"var _jsxFileName = \"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/src/components/dashboard/video/createVideoInterview/createVideoChat.js\";\nimport React, { Fragment, useState, useEffect, useRef } from 'react';\nimport \"./styles.css\";\nimport { Container, Row, Col, Card, CardBody, CardHeader, CardFooter, Button } from \"reactstrap\";\nimport Breadcrumb from '../../../../layout/breadcrumb';\nimport { connect as reduxConnect } from \"react-redux\";\nimport { useParams } from 'react-router-dom';\nimport * as Video from 'twilio-video';\nimport axios from \"axios\";\nimport Participant from \"./participant/participant.js\";\nimport { connect as twilioConnect } from \"twilio-video\";\nimport uuid from \"react-uuid\";\n\nconst CreateVideoChatEmployerHelper = _ref => {\n  let {\n    userData\n  } = _ref;\n  const {\n    id\n  } = useParams();\n  const [user, setUser] = useState(null);\n  const [videocall, setVideoCallData] = useState(null);\n  const [videoTracks, setVideoTracks] = useState([]);\n  const [audioTracks, setAudioTracks] = useState([]);\n  const [room, setRoom] = useState(null);\n  const [participants, setParticipants] = useState([]); // Create refs for the HTML elements to attach audio and video to in the DOM\n  // For now, set them to null\n\n  const videoRef = useRef(null);\n  const audioRef = useRef(null);\n\n  const joinRoomVideoChat = async () => {\n    try {\n      // const generatedRoomID = uuid();\n      const response = await axios.get(`${process.env.REACT_APP_BASE_URL}/generate/twilio/access/token`, {\n        params: {\n          uniqueId: userData.uniqueId,\n          accountType: userData.accountType,\n          generatedRoomID: videocall.roomName\n        }\n      });\n\n      if (response) {\n        console.log(\"response\", response);\n        const {\n          data\n        } = response;\n        const room = await twilioConnect(data.token, {\n          name: videocall.roomName,\n          audio: true,\n          video: true\n        });\n        setRoom(room); // if (room) {\n        //     history.push(`/start/video/interview/chat/employer`, { roomID: generatedRoomID })\n        // }\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  console.log(\"room\", room);\n  useEffect(() => {\n    const configuration = {\n      params: {\n        id: userData.uniqueId,\n        accountType: userData.accountType\n      }\n    };\n    axios.get(`${process.env.REACT_APP_BASE_URL}/gather/general/user/data`, configuration).then(res => {\n      if (res.data.message === \"Gathered user!\") {\n        console.log(res.data);\n        const {\n          user\n        } = res.data;\n        setUser(user);\n      } else {\n        console.log(\"err gathering user..:\", res.data);\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []);\n  console.log(\"videocall\", videocall);\n  useEffect(() => {\n    const videoTrack = videoTracks[0];\n\n    if (videoRef && videoRef.current) {\n      if (videoTrack) {\n        videoTrack.attach(videoRef.current);\n        return () => {\n          videoTrack.detach();\n        };\n      }\n    }\n  }, [videoTracks]);\n  useEffect(() => {\n    const audioTrack = audioTracks[0];\n\n    if (audioRef && audioRef.current) {\n      if (audioTrack) {\n        audioTrack.attach(audioRef.current);\n        return () => {\n          audioTrack.detach();\n        };\n      }\n    }\n  }, [audioTracks]);\n  useEffect(() => {\n    const configuration = {\n      params: {\n        id: userData.uniqueId,\n        accountType: userData.accountType,\n        videocallID: id\n      }\n    };\n    axios.get(`${process.env.REACT_APP_BASE_URL}/gather/video/chat/info`, configuration).then(res => {\n      if (res.data.message === \"Gathered info!\") {\n        console.log(res.data);\n        const {\n          videoCall\n        } = res.data;\n        setVideoCallData(videoCall);\n        Video.connect(user.activeVideoChatRoom.tokenized, {\n          name: videoCall.roomName\n        }).then(room => {\n          console.log('Connected to Room', room);\n\n          const participantConnected = participant => {\n            setParticipants(prevParticipants => [...prevParticipants, participant]);\n          };\n\n          const participantDisconnected = participant => {\n            setParticipants(prevParticipants => prevParticipants.filter(p => p !== participant));\n          };\n\n          setRoom(room);\n          room.on('participantConnected', participantConnected);\n          room.on('participantDisconnected', participantDisconnected);\n          room.participants.forEach(participantConnected);\n        });\n      } else {\n        console.log(\"err gathering user..:\", res.data);\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Breadcrumb, {\n    parent: \"Invite Hacker(s) To Video Interview With You!\",\n    title: \"Find, Select & Invite Anyone On Our Platform..\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    md: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    className: \"b-l-secondary b-r-secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"upload-video-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 33\n    }\n  }, \"Initialize a video chat with ANY hacker on our platform (whether you've previously communicated or not!)\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 33\n    }\n  }, \"We \", /*#__PURE__*/React.createElement(\"strong\", {\n    style: {\n      color: \"#f73164\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 56\n    }\n  }, \"HIGHLY SUGGEST\"), \" video interviewing \", /*#__PURE__*/React.createElement(\"strong\", {\n    style: {\n      color: \"#f73164\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 136\n    }\n  }, \"any\"), \" potential candiates for a contracted gig and/or hacking job, \", /*#__PURE__*/React.createElement(\"strong\", {\n    style: {\n      color: \"#f73164\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 247\n    }\n  }, \"ESPECIALLY\"), \" if testing \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 315\n    }\n  }, \"physical infrastructure\"), \" and other related on-site security.\")), /*#__PURE__*/React.createElement(CardBody, {\n    className: \"b-l-success b-r-success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 33\n    }\n  }, room !== null ? room.participants.map((participant, index) => {\n    return /*#__PURE__*/React.createElement(Col, {\n      sm: \"12\",\n      md: \"6\",\n      lg: \"6\",\n      xl: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Participant, {\n      key: room.localParticipant.sid,\n      participant: room.localParticipant,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 49\n      }\n    }));\n  }) : null)), /*#__PURE__*/React.createElement(CardFooter, {\n    className: \"b-l-secondary b-r-secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"btn-square-success\",\n    outline: true,\n    color: \"success-2x\",\n    style: {\n      width: \"100%\"\n    },\n    onClick: joinRoomVideoChat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 33\n    }\n  }, \"Initialize Room\")))))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    userData: state.auth.data\n  };\n};\n\nexport default reduxConnect(mapStateToProps, {})(CreateVideoChatEmployerHelper);","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/src/components/dashboard/video/createVideoInterview/createVideoChat.js"],"names":["React","Fragment","useState","useEffect","useRef","Container","Row","Col","Card","CardBody","CardHeader","CardFooter","Button","Breadcrumb","connect","reduxConnect","useParams","Video","axios","Participant","twilioConnect","uuid","CreateVideoChatEmployerHelper","userData","id","user","setUser","videocall","setVideoCallData","videoTracks","setVideoTracks","audioTracks","setAudioTracks","room","setRoom","participants","setParticipants","videoRef","audioRef","joinRoomVideoChat","response","get","process","env","REACT_APP_BASE_URL","params","uniqueId","accountType","generatedRoomID","roomName","console","log","data","token","name","audio","video","err","configuration","then","res","message","catch","videoTrack","current","attach","detach","audioTrack","videocallID","videoCall","activeVideoChatRoom","tokenized","participantConnected","participant","prevParticipants","participantDisconnected","filter","p","on","forEach","color","map","index","localParticipant","sid","width","mapStateToProps","state","auth"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect, useRef } from 'react';\nimport \"./styles.css\";\nimport { Container, Row, Col, Card, CardBody, CardHeader, CardFooter, Button } from \"reactstrap\";\nimport Breadcrumb from '../../../../layout/breadcrumb';\nimport { connect as reduxConnect } from \"react-redux\";\nimport { useParams } from 'react-router-dom';\nimport * as Video from 'twilio-video';\nimport axios from \"axios\";\nimport Participant from \"./participant/participant.js\";\nimport { connect as twilioConnect } from \"twilio-video\";\nimport uuid from \"react-uuid\";\n\n\nconst CreateVideoChatEmployerHelper = ({ userData }) => {\n\n    const { id } = useParams();\n\n    const [ user, setUser ] = useState(null);\n    const [ videocall, setVideoCallData ] = useState(null);\n    const [ videoTracks, setVideoTracks ] = useState([]);\n    const [ audioTracks, setAudioTracks ] = useState([]);\n    const [ room, setRoom ] = useState(null);\n    const [ participants, setParticipants ] = useState([]);\n  \n    // Create refs for the HTML elements to attach audio and video to in the DOM\n    // For now, set them to null\n    const videoRef = useRef(null);\n    const audioRef = useRef(null);\n\n    const joinRoomVideoChat = async () => {\n        try {\n\n            // const generatedRoomID = uuid();\n\n            const response = await axios.get(`${process.env.REACT_APP_BASE_URL}/generate/twilio/access/token`, {\n                params: {\n                    uniqueId: userData.uniqueId,\n                    accountType: userData.accountType,\n                    generatedRoomID: videocall.roomName\n                }\n            });\n            if (response) {\n                console.log(\"response\", response);\n\n                const { data } = response;\n\n                const room = await twilioConnect(data.token, {\n                    name: videocall.roomName,\n                    audio: true,\n                    video: true\n                });\n                setRoom(room);\n                // if (room) {\n                //     history.push(`/start/video/interview/chat/employer`, { roomID: generatedRoomID })\n                // }\n            }\n        } catch(err) {\n            console.log(err);\n        }\n    }\n\n    console.log(\"room\", room);\n\n    useEffect(() => {\n\n        const configuration = {\n            params: {\n                id: userData.uniqueId, \n                accountType: userData.accountType\n            }\n        }\n\n        axios.get(`${process.env.REACT_APP_BASE_URL}/gather/general/user/data`, configuration).then((res) => {\n            if (res.data.message === \"Gathered user!\") {\n                console.log(res.data);\n\n                const { user } = res.data;\n\n                setUser(user);\n            } else {\n                console.log(\"err gathering user..:\", res.data);\n            }\n        }).catch((err) => {\n            console.log(err);\n        })\n    }, []);\n\n    console.log(\"videocall\", videocall);\n\n    useEffect(() => {\n        const videoTrack = videoTracks[0];\n        if (videoRef && videoRef.current) {\n            if (videoTrack) {\n                videoTrack.attach(videoRef.current);\n                return () => {\n                    videoTrack.detach();\n                };\n            }\n        }\n    }, [ videoTracks ]);\n    \n    useEffect(() => {\n        const audioTrack = audioTracks[0];\n        if (audioRef && audioRef.current) {\n            if (audioTrack) {\n                audioTrack.attach(audioRef.current);\n                return () => {\n                    audioTrack.detach();\n                };\n            }\n        }\n    }, [ audioTracks ]);\n\n    useEffect(() => {\n        const configuration = {\n            params: {\n                id: userData.uniqueId, \n                accountType: userData.accountType,\n                videocallID: id\n            }\n        }\n\n        axios.get(`${process.env.REACT_APP_BASE_URL}/gather/video/chat/info`, configuration).then((res) => {\n            if (res.data.message === \"Gathered info!\") {\n                console.log(res.data);\n\n                const { videoCall } = res.data;\n\n                setVideoCallData(videoCall);\n\n                Video.connect(user.activeVideoChatRoom.tokenized, { name: videoCall.roomName }).then(room => {\n                    console.log('Connected to Room', room);\n\n                    const participantConnected = participant => {\n                        setParticipants(prevParticipants => [...prevParticipants, participant]);\n                    };\n                    const participantDisconnected = participant => {\n                        setParticipants(prevParticipants =>\n                            prevParticipants.filter(p => p !== participant)\n                        );\n                    };\n\n                    setRoom(room);\n                    \n                    room.on('participantConnected', participantConnected);\n                    room.on('participantDisconnected', participantDisconnected);\n                    room.participants.forEach(participantConnected);\n                });\n\n            } else {\n                console.log(\"err gathering user..:\", res.data);\n            }\n        }).catch((err) => {\n            console.log(err);\n        })\n    }, [])\n    \n    return (\n        <Fragment>\n            <Breadcrumb parent=\"Invite Hacker(s) To Video Interview With You!\" title=\"Find, Select & Invite Anyone On Our Platform..\" /> \n            <Container fluid={true}>\n                <Row>\n                    <Col sm=\"12\" lg=\"12\" xl=\"12\" md=\"12\">\n                        <Card>\n                            <CardHeader className=\"b-l-secondary b-r-secondary\">\n                                <h2 className=\"upload-video-header\">Initialize a video chat with ANY hacker on our platform (whether you've previously communicated or not!)</h2>\n                                <p className=\"lead\">We <strong style={{ color: \"#f73164\" }}>HIGHLY SUGGEST</strong> video interviewing <strong style={{ color: \"#f73164\" }}>any</strong> potential candiates for a contracted gig and/or hacking job, <strong style={{ color: \"#f73164\" }}>ESPECIALLY</strong> if testing <strong>physical infrastructure</strong> and other related on-site security.</p>\n                            </CardHeader>\n                            <CardBody className='b-l-success b-r-success'>\n                                <Row>\n                                    {room !== null ? room.participants.map((participant, index) => {\n                                        return (\n                                            <Col sm=\"12\" md=\"6\" lg=\"6\" xl=\"6\">\n                                                <Participant\n                                                    key={room.localParticipant.sid}\n                                                    participant={room.localParticipant}\n                                                />\n                                            </Col>\n                                        );\n                                    }) : null}\n                                </Row>\n                            </CardBody>\n                            <CardFooter className='b-l-secondary b-r-secondary'>\n                                <Button className={\"btn-square-success\"} outline color={\"success-2x\"} style={{ width: \"100%\" }} onClick={joinRoomVideoChat}>Initialize Room</Button>\n                            </CardFooter>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n        </Fragment>\n    );\n}\nconst mapStateToProps = (state) => {\n    return {\n        userData: state.auth.data\n    }\n}\nexport default reduxConnect(mapStateToProps, {})(CreateVideoChatEmployerHelper);"]},"metadata":{},"sourceType":"module"}