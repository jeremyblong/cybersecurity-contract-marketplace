{"ast":null,"code":"var _jsxFileName = \"/home/kali/Documents/cybersecurity/client/src/components/dashboard/learning/educationalCoursesSeminars/createCourse/helpers/pages/pageOne/index.js\";\nimport React, { Fragment, useState, useMemo, useRef } from \"react\";\nimport Dropzone from 'react-dropzone-uploader';\nimport { Row, Col, Card, CardBody, Form, FormGroup, Label, Input, Button, InputGroup, InputGroupText, InputGroupAddon } from 'reactstrap';\nimport { useForm, Controller } from 'react-hook-form';\nimport { connect } from 'react-redux';\nimport { withRouter, Link } from 'react-router-dom';\nimport { ProgressLevel, UploadProjectFile } from '../../../../../../../../constant';\nimport reduxFormHelpers from \"./helpers/reduxFormHelpers.js\";\nimport optionHelper from \"./helpers/options/options.js\";\nimport Select from \"react-select\";\nimport helperFunctions from \"./helpers/helperFunctions/index.js\";\nimport SimpleMDE from \"react-simplemde-editor\";\nimport \"./styles.css\";\nimport uuid from \"react-uuid\";\nimport { Plus } from \"react-feather\";\nimport { NotificationManager } from \"react-notifications\";\nconst courseTitle = reduxFormHelpers().courseTitle;\nconst courseCategory = reduxFormHelpers().courseCategory;\nconst descriptionChecks = reduxFormHelpers().descriptionChecks;\nconst pricing = reduxFormHelpers().pricing;\nconst objectiveChecks = reduxFormHelpers().objectiveChecks;\nconst courseDesignedForChecks = reduxFormHelpers().courseDesignedForChecks;\nconst prerequisitesChecks = reduxFormHelpers().prerequisitesChecks;\nconst {\n  courseCategoryOptions,\n  pricingOptions\n} = optionHelper;\nconst {\n  CourseCreationHashtagHelper\n} = helperFunctions;\n\nconst CreateNewCoursePageOne = () => {\n  // create ref's local\n  const courseCategoryGeneratedRef = useRef(null);\n  const pricingGeneratedRef = useRef(null);\n  const customHashtagsRef = useRef(null); // state initialization\n\n  const [objectives, setObjectiveState] = useState([{\n    partCount0: \"\",\n    id: uuid()\n  }, {\n    partCount1: \"\",\n    id: uuid()\n  }, {\n    partCount2: \"\",\n    id: uuid()\n  }, {\n    partCount3: \"\",\n    id: uuid()\n  }]);\n  const [requirements, setRequirements] = useState([{\n    partCount0: \"\",\n    id: uuid()\n  }]);\n  const [courseContentConcepts, setCourseContentConcepts] = useState([{\n    partCount0: \"\",\n    id: uuid()\n  }]); // state init\n\n  const [hashtags, setHashtags] = useState([]);\n  const [wordCount, setWordCount] = useState(0); // redux form logic\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    reset,\n    getValues,\n    setValue,\n    setError,\n    clearErrors,\n    formState: {\n      errors\n    }\n  } = useForm({\n    mode: \"onTouched\",\n    reValidateMode: \"onBlur\"\n  }); // collect redux-hook-form values\n\n  const currentValues = getValues(); // called every time a file's `status` changes\n\n  const handleChangeStatus = (_ref, status) => {\n    let {\n      meta,\n      file\n    } = _ref;\n    console.log(\"handleChangeStatus ran...\", meta, file, status);\n  };\n\n  const renderErrorsFormUploadContent = (e, errors) => {\n    console.log(\"renderErrorsFormUploadContent ran...\", e, errors);\n  };\n\n  const onSubmission = (e, data) => {\n    console.log(\"onSubmission ran...\", e, data);\n  };\n\n  const calculateWordCountOnBlur = data => {\n    const wordCount = data.split(\" \").length;\n    setWordCount(wordCount);\n  };\n\n  const autofocusNoSpellcheckerOptions = useMemo(() => {\n    return {\n      autofocus: false,\n      spellChecker: false\n    };\n  }, []);\n  console.log(\"state item's : \", objectives, courseContentConcepts, requirements);\n  console.log(\"currentValues[`objective${index}`].length\", currentValues[`objective${index}`].length);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    className: \"theme-form\",\n    onSubmit: handleSubmit(onSubmission, (e, errors) => {\n      return renderErrorsFormUploadContent(e, errors);\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 41\n    }\n  }, courseTitle.label), /*#__PURE__*/React.createElement(Input, Object.assign({}, courseTitle.check(setError, register), {\n    className: \"form-control\",\n    type: courseTitle.type,\n    name: courseTitle.name,\n    placeholder: courseTitle.placeholder,\n    onChange: e => courseTitle.onChange(e, setValue),\n    value: currentValues.courseTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 41\n    }\n  })), errors.courseTitle ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"span-tooltip\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 63\n    }\n  }, errors.courseTitle.message) : null))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"6\",\n    md: \"6\",\n    lg: \"6\",\n    xl: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 41\n    }\n  }, courseCategory.label), /*#__PURE__*/React.createElement(Controller, Object.assign({\n    control: control,\n    name: courseCategory.name\n  }, courseCategory.check(setError, register, clearErrors), {\n    render: _ref2 => {\n      let {\n        field\n      } = _ref2;\n      return /*#__PURE__*/React.createElement(Select, Object.assign({}, field, {\n        ref: courseCategoryGeneratedRef,\n        autoBlur: true,\n        placeholder: courseCategory.placeholder,\n        defaultValue: null,\n        onMenuClose: () => {\n          courseCategoryGeneratedRef.current.blur();\n        },\n        value: currentValues.courseCategory,\n        onChange: selectedOption => courseCategory.onChange(selectedOption, setValue, clearErrors),\n        options: courseCategoryOptions,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 49\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 41\n    }\n  })), errors.courseCategory ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"span-tooltip\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 66\n    }\n  }, errors.courseCategory.message) : null)), /*#__PURE__*/React.createElement(Col, {\n    sm: \"6\",\n    md: \"6\",\n    lg: \"6\",\n    xl: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 41\n    }\n  }, pricing.label), /*#__PURE__*/React.createElement(Controller, Object.assign({\n    control: control,\n    name: pricing.name\n  }, pricing.check(setError, register, clearErrors), {\n    render: _ref3 => {\n      let {\n        field\n      } = _ref3;\n      return /*#__PURE__*/React.createElement(Select, Object.assign({}, field, {\n        ref: pricingGeneratedRef,\n        autoBlur: true,\n        placeholder: pricing.placeholder,\n        defaultValue: null,\n        onMenuClose: () => {\n          pricingGeneratedRef.current.blur();\n        },\n        value: currentValues.pricing,\n        onChange: selectedOption => pricing.onChange(selectedOption, setValue, clearErrors),\n        options: pricingOptions,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 49\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 41\n    }\n  })), errors.pricing ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"span-tooltip\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 59\n    }\n  }, errors.pricing.message) : null))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(CourseCreationHashtagHelper, {\n    customHashtagsRef: customHashtagsRef,\n    setHashtags: setHashtags,\n    hashtags: hashtags,\n    setError: setError,\n    register: register,\n    values: currentValues,\n    errors: errors,\n    setValue: setValue,\n    clearErrors: clearErrors,\n    control: control,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 37\n    }\n  }))), /*#__PURE__*/React.createElement(Row, {\n    style: {\n      paddingTop: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 33\n    }\n  }, \"Enter a description for your listing (markdown is accepted - use the attached buttons to customize the way your content looks)\"), /*#__PURE__*/React.createElement(Controller, Object.assign({\n    control: control,\n    name: descriptionChecks.name,\n    value: currentValues.description\n  }, descriptionChecks.check(clearErrors, register, setError, currentValues, wordCount), {\n    render: _ref4 => {\n      let {\n        field: {\n          ref,\n          onChange,\n          value,\n          ...field\n        }\n      } = _ref4;\n      return /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(SimpleMDE, Object.assign({\n        ref: ref\n      }, field, {\n        placeholder: descriptionChecks.placeholder,\n        name: descriptionChecks.name,\n        onFocus: () => {\n          clearErrors(\"description\");\n        },\n        onBlur: () => descriptionChecks.onBlur(clearErrors, setError, currentValues, wordCount),\n        id: \"editor_container\",\n        onChange: value => {\n          onChange(value); // return value for hook-form logic\n\n          return value;\n        },\n        value: value,\n        options: autofocusNoSpellcheckerOptions,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 49\n        }\n      })), errors.description ? /*#__PURE__*/React.createElement(\"span\", {\n        className: \"span-tooltip\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 71\n        }\n      }, errors.description.message) : null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 37\n    }\n  })))), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"course-custom-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 37\n    }\n  }, \"The following descriptions will be publicly visible on your Course Landing Page and will have a direct impact on your course performance. These descriptions will help learners decide if your course is right for them.\"))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"couse-create-p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 37\n    }\n  }, \"The following descriptions will be publicly visible on your Course Landing Page and will have a direct impact on your course performance. These descriptions will help learners decide if your course is right for them.\"), /*#__PURE__*/React.createElement(\"h5\", {\n    className: \"h5-custom-course\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 37\n    }\n  }, \"What will students learn in your course?\"), \"You must enter at least 4 learning \", /*#__PURE__*/React.createElement(\"a\", {\n    href: \"\",\n    className: \"important-course-link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 72\n    }\n  }, \"objectives or outcomes\"), \" that learners can expect to achieve after completing your course.\")), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 33\n    }\n  }, objectives.map((objective, index) => {\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      style: {\n        paddingTop: \"17.5px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Input, Object.assign({}, objectiveChecks.check(register, `objective${index}`), {\n      onChange: e => {\n        // value\n        const value = e.target.value; // create shallow array copy\n\n        const newArr = [...objectives]; // create new object w/changes\n\n        const newObj = {\n          [`partCount${index}`]: value,\n          id: objective.id\n        }; // replace item\n\n        newArr[index] = newObj; // render onChange logic\n\n        objectiveChecks.onChange(setValue, `objective${index}`, value); // update relevant state\n\n        setObjectiveState(newArr);\n      },\n      value: currentValues[`partCount${index}`],\n      name: `objective${index}`,\n      className: \"form-control no-right-border-input\",\n      type: \"text\",\n      placeholder: objectiveChecks.placeholder,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 57\n      }\n    })), /*#__PURE__*/React.createElement(InputGroupAddon, {\n      className: \"counter-addon-transparent\",\n      addonType: \"append\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(InputGroupText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 133\n      }\n    }, typeof currentValues[`objective${index}`].length !== \"undefined\" ? 160 - currentValues[`objective${index}`].length : 160))), errors[`objective${index}`] ? /*#__PURE__*/React.createElement(\"span\", {\n      className: \"span-tooltip\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 84\n      }\n    }, errors[`objective${index}`].message) : null, /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 53\n      }\n    })));\n  }))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"float-right-absolute\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: () => {\n      if (objectives.length <= 5) {\n        setObjectiveState(prevState => {\n          return [...prevState, {\n            [`partOne${objectives.length}`]: \"\",\n            id: uuid()\n          }];\n        });\n      } else {\n        NotificationManager.warning(\"Error - You cannot enter TOO many inputs as there is a MAXIMUM of 6 TOTAL inputs/fields...Please use your existing fields.\", \"Too many fields/inputs!\", 4500);\n      }\n    },\n    outline: true,\n    color: \"primary-2x\",\n    className: \"btn-square primary\",\n    style: {\n      width: \"35%\",\n      border: \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Plus, {\n    style: {\n      fontSize: 35,\n      marginBottom: \"-7.5px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 143\n    }\n  }), \" Add Another Field\"))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"course-custom-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 37\n    }\n  }, \"What are the requirements or prerequisites for taking your course?\"))), /*#__PURE__*/React.createElement(Row, {\n    style: {\n      marginBottom: \"25px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"couse-create-p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 37\n    }\n  }, \"List the required skills, experience, tools or equipment learners should have prior to taking your course. \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 176\n    }\n  }), \" If there are no requirements, use this space as an opportunity to lower the barrier for beginners.\"))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 33\n    }\n  }, requirements.map((requirement, index) => {\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      style: {\n        paddingTop: \"17.5px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Input, Object.assign({}, prerequisitesChecks.check(register, `requirement${index}`), {\n      onChange: e => {\n        // value from input\n        const value = e.target.value; // shallow copy\n\n        const newArr = [...requirements]; // new data obj\n\n        const newObj = {\n          [`partCount${index}`]: value,\n          id: requirement.id\n        }; // replace item\n\n        newArr[index] = newObj; // render onChange logic\n\n        prerequisitesChecks.onChange(setValue, `requirement${index}`, value); // update the main state\n\n        setRequirements(newArr);\n      },\n      value: currentValues[`partCount${index}`],\n      name: `requirement${index}`,\n      className: \"form-control no-right-border-input\",\n      type: \"text\",\n      placeholder: prerequisitesChecks.placeholder,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 57\n      }\n    })), /*#__PURE__*/React.createElement(InputGroupAddon, {\n      className: \"counter-addon-transparent\",\n      addonType: \"append\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(InputGroupText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 133\n      }\n    }, typeof currentValues[`requirement${index}`].length !== \"undefined\" ? 160 - currentValues[`requirement${index}`].length : 160))), errors[`requirement${index}`] ? /*#__PURE__*/React.createElement(\"span\", {\n      className: \"span-tooltip\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 86\n      }\n    }, errors[`requirement${index}`].message) : null, /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 53\n      }\n    })));\n  }))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"float-right-absolute\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: () => {\n      if (requirements.length <= 2) {\n        setRequirements(prevState => {\n          return [...prevState, {\n            [`partOne${requirements.length}`]: \"\",\n            id: uuid()\n          }];\n        });\n      } else {\n        NotificationManager.warning(\"Error - You cannot enter TOO many inputs as there is a MAXIMUM of 3 TOTAL inputs for this field...Please use your existing fields.\", \"Too many field's!\", 4500);\n      }\n    },\n    outline: true,\n    color: \"primary-2x\",\n    className: \"btn-square primary\",\n    style: {\n      width: \"35%\",\n      border: \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Plus, {\n    style: {\n      fontSize: 35,\n      marginBottom: \"-7.5px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 143\n    }\n  }), \" Add Another Field\"))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"course-custom-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 37\n    }\n  }, \"Who is this course for?\"))), /*#__PURE__*/React.createElement(Row, {\n    style: {\n      marginBottom: \"25px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"couse-create-p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 37\n    }\n  }, \"Write a clear description of the intended learners for your course who will find your course content valuable. \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 180\n    }\n  }), \" This will help you attract the right learners to your course.\"))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 33\n    }\n  }, courseContentConcepts.map((concept, index) => {\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      style: {\n        paddingTop: \"17.5px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Input, Object.assign({}, courseDesignedForChecks.check(register, `concept${index}`), {\n      onChange: e => {\n        // value from input\n        const value = e.target.value; // shallow copy\n\n        const newArr = [...courseContentConcepts]; // new data obj\n\n        const newObj = {\n          [`partCount${index}`]: value,\n          id: concept.id\n        }; // replace item\n\n        newArr[index] = newObj; // onchange handler\n\n        courseDesignedForChecks.onChange(setValue, `concept${index}`, value); // update the main state\n\n        setCourseContentConcepts(newArr);\n      },\n      value: currentValues[`partCount${index}`],\n      className: \"form-control no-right-border-input\",\n      type: \"text\",\n      placeholder: courseDesignedForChecks.placeholder,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 57\n      }\n    })), /*#__PURE__*/React.createElement(InputGroupAddon, {\n      className: \"counter-addon-transparent\",\n      addonType: \"append\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(InputGroupText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 133\n      }\n    }, typeof currentValues[`concept${index}`].length !== \"undefined\" ? 160 - currentValues[`concept${index}`].length : 160))), errors[`concept${index}`] ? /*#__PURE__*/React.createElement(\"span\", {\n      className: \"span-tooltip\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 82\n      }\n    }, errors[`concept${index}`].message) : null, /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 53\n      }\n    })));\n  }))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"float-right-absolute\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: () => {\n      if (courseContentConcepts.length <= 2) {\n        setCourseContentConcepts(prevState => {\n          return [...prevState, {\n            [`partOne${courseContentConcepts.length}`]: \"\",\n            id: uuid()\n          }];\n        });\n      } else {\n        NotificationManager.warning(\"Error - You cannot enter TOO many inputs as there is a MAXIMUM of 3 TOTAL inputs for this field...Please use your existing fields.\", \"Too many field's!\", \"Too many field's!\", 4500);\n      }\n    },\n    outline: true,\n    color: \"primary-2x\",\n    className: \"btn-square primary\",\n    style: {\n      width: \"35%\",\n      border: \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Plus, {\n    style: {\n      fontSize: 35,\n      marginBottom: \"-7.5px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 143\n    }\n  }), \" Add Another Field\"))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 37\n    }\n  }, UploadProjectFile), /*#__PURE__*/React.createElement(Dropzone, {\n    onChangeStatus: handleChangeStatus,\n    maxFiles: 1,\n    multiple: false,\n    canCancel: false,\n    inputContent: \"Drop A File\",\n    styles: {\n      dropzone: {\n        width: '100%',\n        height: 50\n      },\n      dropzoneActive: {\n        borderColor: 'green'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 41\n    }\n  })))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    className: \"mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    style: {\n      width: \"100%\"\n    },\n    color: \"info-2x\",\n    outline: true,\n    className: \"btn-square-info\",\n    className: \"mr-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 41\n    }\n  }, \"Submit & Continue w/Process\"))))))))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    userData: state.auth.data\n  };\n};\n\nexport default connect(mapStateToProps, {})(withRouter(CreateNewCoursePageOne));","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/learning/educationalCoursesSeminars/createCourse/helpers/pages/pageOne/index.js"],"names":["React","Fragment","useState","useMemo","useRef","Dropzone","Row","Col","Card","CardBody","Form","FormGroup","Label","Input","Button","InputGroup","InputGroupText","InputGroupAddon","useForm","Controller","connect","withRouter","Link","ProgressLevel","UploadProjectFile","reduxFormHelpers","optionHelper","Select","helperFunctions","SimpleMDE","uuid","Plus","NotificationManager","courseTitle","courseCategory","descriptionChecks","pricing","objectiveChecks","courseDesignedForChecks","prerequisitesChecks","courseCategoryOptions","pricingOptions","CourseCreationHashtagHelper","CreateNewCoursePageOne","courseCategoryGeneratedRef","pricingGeneratedRef","customHashtagsRef","objectives","setObjectiveState","partCount0","id","partCount1","partCount2","partCount3","requirements","setRequirements","courseContentConcepts","setCourseContentConcepts","hashtags","setHashtags","wordCount","setWordCount","register","handleSubmit","control","reset","getValues","setValue","setError","clearErrors","formState","errors","mode","reValidateMode","currentValues","handleChangeStatus","status","meta","file","console","log","renderErrorsFormUploadContent","e","onSubmission","data","calculateWordCountOnBlur","split","length","autofocusNoSpellcheckerOptions","autofocus","spellChecker","index","label","check","type","name","placeholder","onChange","message","field","current","blur","selectedOption","paddingTop","description","ref","value","onBlur","map","objective","target","newArr","newObj","prevState","warning","width","border","fontSize","marginBottom","requirement","concept","dropzone","height","dropzoneActive","borderColor","mapStateToProps","state","userData","auth"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useMemo, useRef } from \"react\";\nimport Dropzone from 'react-dropzone-uploader';\nimport { Row, Col, Card, CardBody, Form, FormGroup, Label, Input, Button, InputGroup, InputGroupText, InputGroupAddon } from 'reactstrap';\nimport { useForm, Controller } from 'react-hook-form';\nimport { connect } from 'react-redux';\nimport { withRouter, Link } from 'react-router-dom';\nimport { ProgressLevel, UploadProjectFile } from '../../../../../../../../constant';\nimport reduxFormHelpers from \"./helpers/reduxFormHelpers.js\";\nimport optionHelper from \"./helpers/options/options.js\";\nimport Select from \"react-select\";\nimport helperFunctions from \"./helpers/helperFunctions/index.js\";\nimport SimpleMDE from \"react-simplemde-editor\";\nimport \"./styles.css\";\nimport uuid from \"react-uuid\";\nimport { Plus } from \"react-feather\";\nimport { NotificationManager } from \"react-notifications\";\n\nconst courseTitle = reduxFormHelpers().courseTitle;\nconst courseCategory = reduxFormHelpers().courseCategory;\nconst descriptionChecks = reduxFormHelpers().descriptionChecks;\nconst pricing = reduxFormHelpers().pricing;\nconst objectiveChecks = reduxFormHelpers().objectiveChecks;\nconst courseDesignedForChecks = reduxFormHelpers().courseDesignedForChecks;\nconst prerequisitesChecks = reduxFormHelpers().prerequisitesChecks;\n\nconst { courseCategoryOptions, pricingOptions } = optionHelper;\n\nconst { CourseCreationHashtagHelper } = helperFunctions;\n\n\nconst CreateNewCoursePageOne = () => {\n    // create ref's local\n    const courseCategoryGeneratedRef = useRef(null);\n    const pricingGeneratedRef = useRef(null);\n    const customHashtagsRef = useRef(null);\n\n    // state initialization\n    const [ objectives, setObjectiveState ] = useState([\n        {\n            partCount0: \"\",\n            id: uuid()\n        }, {\n            partCount1: \"\",\n            id: uuid()\n        }, {\n            partCount2: \"\",\n            id: uuid()\n        }, {\n            partCount3: \"\",\n            id: uuid()\n        }\n    ]);\n    const [ requirements, setRequirements ] = useState([\n        {\n            partCount0: \"\",\n            id: uuid()\n        }\n    ]);\n    const [ courseContentConcepts, setCourseContentConcepts ] = useState([\n        {\n            partCount0: \"\",\n            id: uuid()\n        }\n    ]);\n\n    // state init\n    const [ hashtags, setHashtags ] = useState([]);\n    const [ wordCount, setWordCount ] = useState(0);\n    // redux form logic\n    const { register, handleSubmit, control, reset, getValues, setValue, setError, clearErrors, formState: { errors }} = useForm({\n        mode: \"onTouched\",\n        reValidateMode: \"onBlur\"\n    });\n    // collect redux-hook-form values\n    const currentValues = getValues();\n\n    // called every time a file's `status` changes\n    const handleChangeStatus = ({ meta, file }, status) => {\n        console.log(\"handleChangeStatus ran...\", meta, file, status);\n    }\n\n    const renderErrorsFormUploadContent = (e, errors) => {\n        console.log(\"renderErrorsFormUploadContent ran...\", e, errors);\n    }\n    const onSubmission = (e, data) => {\n        console.log(\"onSubmission ran...\", e, data);\n    }\n    const calculateWordCountOnBlur = (data) => {\n        const wordCount = data.split(\" \").length;\n\n        setWordCount(wordCount);\n    }\n    const autofocusNoSpellcheckerOptions = useMemo(() => {\n        return {\n          autofocus: false,\n          spellChecker: false,\n        };\n    }, []);\n    console.log(\"state item's : \", objectives, courseContentConcepts, requirements);\n\n    console.log(\"currentValues[`objective${index}`].length\", currentValues[`objective${index}`].length);\n    return (\n        <Fragment>\n            <Row>\n                <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                    <Card>\n                        <CardBody>\n                            <Form className=\"theme-form\" onSubmit={handleSubmit(onSubmission, (e, errors) => {\n                                return renderErrorsFormUploadContent(e, errors);\n                            })}>\n                            <Row>\n                                <Col>\n                                    <FormGroup>\n                                        <Label>{courseTitle.label}</Label>\n                                        <Input {...courseTitle.check(setError, register)} className=\"form-control\" type={courseTitle.type} name={courseTitle.name} placeholder={courseTitle.placeholder} onChange={(e) => courseTitle.onChange(e, setValue)} value={currentValues.courseTitle} />\n                                        {errors.courseTitle ? <span className=\"span-tooltip\">{errors.courseTitle.message}</span> : null}\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col sm=\"6\" md=\"6\" lg=\"6\" xl=\"6\">\n                                    <FormGroup>\n                                        <Label>{courseCategory.label}</Label>\n                                        <Controller\n                                            control={control}\n                                            name={courseCategory.name}\n                                            {...courseCategory.check(setError, register, clearErrors)}\n                                            render={({ field }) => (\n                                                <Select\n                                                    {...field}\n                                                    ref={courseCategoryGeneratedRef}\n                                                    autoBlur={true}\n                                                    placeholder={courseCategory.placeholder}\n                                                    defaultValue={null}\n                                                    onMenuClose={() => {\n                                                        courseCategoryGeneratedRef.current.blur();\n                                                    }}\n                                                    value={currentValues.courseCategory}\n                                                    onChange={(selectedOption) => courseCategory.onChange(selectedOption, setValue, clearErrors)}\n                                                    options={courseCategoryOptions}\n                                                />\n                                            )}\n                                        />\n                                        {errors.courseCategory ? <span className=\"span-tooltip\">{errors.courseCategory.message}</span> : null}\n                                    </FormGroup>\n                                </Col>\n                                <Col sm=\"6\" md=\"6\" lg=\"6\" xl=\"6\">\n                                    <FormGroup>\n                                        <Label>{pricing.label}</Label>\n                                        <Controller\n                                            control={control}\n                                            name={pricing.name}\n                                            {...pricing.check(setError, register, clearErrors)}\n                                            render={({ field }) => (\n                                                <Select\n                                                    {...field}\n                                                    ref={pricingGeneratedRef}\n                                                    autoBlur={true}\n                                                    placeholder={pricing.placeholder}\n                                                    defaultValue={null}\n                                                    onMenuClose={() => {\n                                                        pricingGeneratedRef.current.blur();\n                                                    }}\n                                                    value={currentValues.pricing}\n                                                    onChange={(selectedOption) => pricing.onChange(selectedOption, setValue, clearErrors)}\n                                                    options={pricingOptions}\n                                                />\n                                            )}\n                                        />\n                                        {errors.pricing ? <span className=\"span-tooltip\">{errors.pricing.message}</span> : null}\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                                    <CourseCreationHashtagHelper customHashtagsRef={customHashtagsRef} setHashtags={setHashtags} hashtags={hashtags} setError={setError} register={register} values={currentValues} errors={errors} setValue={setValue} clearErrors={clearErrors} control={control} />\n                                </Col>\n                            </Row>\n                            <Row style={{ paddingTop: \"20px\" }}>\n                                <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                                <Label>Enter a description for your listing (markdown is accepted - use the attached buttons to customize the way your content looks)</Label>\n                                    <Controller\n                                        control={control}\n                                        name={descriptionChecks.name}\n                                        value={currentValues.description}\n                                        {...descriptionChecks.check(clearErrors, register, setError, currentValues, wordCount)}\n                                        render={({ field: { ref, onChange, value, ...field }}) => (\n                                            <Fragment>\n                                                <SimpleMDE\n                                                    ref={ref}\n                                                    {...field}\n                                                    placeholder={descriptionChecks.placeholder}\n                                                    name={descriptionChecks.name}\n                                                    onFocus={() => {\n                                                        clearErrors(\"description\");\n                                                    }}\n                                                    onBlur={() => descriptionChecks.onBlur(clearErrors, setError, currentValues, wordCount)}\n                                                    id=\"editor_container\"\n                                                    onChange={(value) => {\n                                                        onChange(value);\n                                                        // return value for hook-form logic\n                                                        return value;\n                                                    }}\n                                                    value={value}\n                                                    options={autofocusNoSpellcheckerOptions}\n                                                />\n                                                {errors.description ? <span className=\"span-tooltip\">{errors.description.message}</span> : null}\n                                            </Fragment>\n                                        )}\n                                    />\n                                </Col>\n                            </Row>\n                            <hr />\n                            <Row>\n                                <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                                    <h4 className={\"course-custom-title\"}>The following descriptions will be publicly visible on your Course Landing Page and will have a direct impact on your course performance. These descriptions will help learners decide if your course is right for them.</h4>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                                    <p className={\"couse-create-p\"}>The following descriptions will be publicly visible on your Course Landing Page and will have a direct impact on your course performance. These descriptions will help learners decide if your course is right for them.</p>\n                                    <h5 className={\"h5-custom-course\"}>What will students learn in your course?</h5>\n                                    You must enter at least 4 learning <a href={\"\"} className={\"important-course-link\"}>objectives or outcomes</a> that learners can expect to achieve after completing your course.\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                                    {objectives.map((objective, index) => {\n                                        return (\n                                            <Fragment>\n                                                <FormGroup style={{ paddingTop: \"17.5px\" }}>\n                                                    <InputGroup>\n                                                        <Input {...objectiveChecks.check(register, `objective${index}`)} onChange={(e) => {\n                                                            // value\n                                                            const value = e.target.value;\n                                                            // create shallow array copy\n                                                            const newArr = [...objectives];\n                                                            // create new object w/changes\n                                                            const newObj = { [`partCount${index}`]: value, id: objective.id };\n                                                            // replace item\n                                                            newArr[index] = newObj;\n                                                            // render onChange logic\n                                                            objectiveChecks.onChange(setValue, `objective${index}`, value);\n                                                            // update relevant state\n                                                            setObjectiveState(newArr);\n\n                                                        }} value={currentValues[`partCount${index}`]} name={`objective${index}`} className=\"form-control no-right-border-input\" type=\"text\" placeholder={objectiveChecks.placeholder}/>\n                                                        <InputGroupAddon className={\"counter-addon-transparent\"} addonType=\"append\"><InputGroupText>{typeof currentValues[`objective${index}`].length !== \"undefined\" ? 160 - currentValues[`objective${index}`].length : 160}</InputGroupText></InputGroupAddon>\n                                                    </InputGroup>\n                                                    {errors[`objective${index}`] ? <span className=\"span-tooltip\">{errors[`objective${index}`].message}</span> : null}\n                                                    <hr />\n                                                </FormGroup>\n                                            </Fragment>\n                                        );\n                                    })}\n                                </Col>\n                            </Row>\n                            <Row>\n                                <div className={\"float-right-absolute\"}>\n                                    <Button onClick={() => {\n                                        if (objectives.length <= 5) {\n                                            setObjectiveState(prevState => {\n                                                return [...prevState, { [`partOne${objectives.length}`]: \"\", id: uuid() }]\n                                            })\n                                        } else {\n                                            NotificationManager.warning(\"Error - You cannot enter TOO many inputs as there is a MAXIMUM of 6 TOTAL inputs/fields...Please use your existing fields.\", \"Too many fields/inputs!\", 4500);\n                                        }\n                                    }} outline color={\"primary-2x\"} className={\"btn-square primary\"} style={{ width: \"35%\", border: \"none\" }}><Plus style={{ fontSize: 35, marginBottom: \"-7.5px\" }} /> Add Another Field</Button>\n                                </div>\n                            </Row>\n                            <Row>\n                                <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                                    <h4 className={\"course-custom-title\"}>What are the requirements or prerequisites for taking your course?</h4>\n                                </Col>\n                            </Row>\n                            <Row style={{ marginBottom: \"25px\" }}>\n                                <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                                    <p className={\"couse-create-p\"}>List the required skills, experience, tools or equipment learners should have prior to taking your course. <br /> If there are no requirements, use this space as an opportunity to lower the barrier for beginners.</p>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                                    {requirements.map((requirement, index) => {\n                                        return (\n                                            <Fragment>\n                                                <FormGroup style={{ paddingTop: \"17.5px\" }}>\n                                                    <InputGroup>\n                                                        <Input {...prerequisitesChecks.check(register, `requirement${index}`)} onChange={(e) => {\n                                                            // value from input\n                                                            const value = e.target.value;\n                                                            // shallow copy\n                                                            const newArr = [...requirements];\n                                                            // new data obj\n                                                            const newObj = { [`partCount${index}`]: value, id: requirement.id };\n                                                            // replace item\n                                                            newArr[index] = newObj;\n                                                            // render onChange logic\n                                                            prerequisitesChecks.onChange(setValue, `requirement${index}`, value);\n                                                            // update the main state\n                                                            setRequirements(newArr);\n\n                                                        }} value={currentValues[`partCount${index}`]} name={`requirement${index}`} className=\"form-control no-right-border-input\" type=\"text\" placeholder={prerequisitesChecks.placeholder}/>\n                                                        <InputGroupAddon className={\"counter-addon-transparent\"} addonType=\"append\"><InputGroupText>{typeof currentValues[`requirement${index}`].length !== \"undefined\" ? 160 - currentValues[`requirement${index}`].length : 160}</InputGroupText></InputGroupAddon>\n                                                    </InputGroup>\n                                                    {errors[`requirement${index}`] ? <span className=\"span-tooltip\">{errors[`requirement${index}`].message}</span> : null}\n                                                    <hr />\n                                                </FormGroup>\n                                            </Fragment>\n                                        );\n                                    })}\n                                </Col>\n                            </Row>\n                            <Row>\n                                <div className={\"float-right-absolute\"}>\n                                    <Button onClick={() => {\n                                        if (requirements.length <= 2) {\n                                            setRequirements(prevState => {\n                                                return [...prevState, { [`partOne${requirements.length}`]: \"\", id: uuid() }]\n                                            })\n                                        } else {\n                                            NotificationManager.warning(\"Error - You cannot enter TOO many inputs as there is a MAXIMUM of 3 TOTAL inputs for this field...Please use your existing fields.\", \"Too many field's!\", 4500);\n                                        }\n                                    }} outline color={\"primary-2x\"} className={\"btn-square primary\"} style={{ width: \"35%\", border: \"none\" }}><Plus style={{ fontSize: 35, marginBottom: \"-7.5px\" }} /> Add Another Field</Button>\n                                </div>\n                            </Row>\n                            <Row>\n                                <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                                    <h4 className={\"course-custom-title\"}>Who is this course for?</h4>\n                                </Col>\n                            </Row>\n                            <Row style={{ marginBottom: \"25px\" }}>\n                                <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                                    <p className={\"couse-create-p\"}>Write a clear description of the intended learners for your course who will find your course content valuable. <br /> This will help you attract the right learners to your course.</p>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                                    {courseContentConcepts.map((concept, index) => {\n                                        return (\n                                            <Fragment>\n                                                <FormGroup style={{ paddingTop: \"17.5px\" }}>\n                                                    <InputGroup>\n                                                        <Input {...courseDesignedForChecks.check(register, `concept${index}`)} onChange={(e) => {\n                                                            // value from input\n                                                            const value = e.target.value;\n                                                            // shallow copy\n                                                            const newArr = [...courseContentConcepts];\n                                                            // new data obj\n                                                            const newObj = { [`partCount${index}`]: value, id: concept.id };\n                                                            // replace item\n                                                            newArr[index] = newObj;\n                                                            // onchange handler\n                                                            courseDesignedForChecks.onChange(setValue, `concept${index}`, value);\n                                                            // update the main state\n                                                            setCourseContentConcepts(newArr);\n\n                                                        }} value={currentValues[`partCount${index}`]} className=\"form-control no-right-border-input\" type=\"text\" placeholder={courseDesignedForChecks.placeholder}/>\n                                                        <InputGroupAddon className={\"counter-addon-transparent\"} addonType=\"append\"><InputGroupText>{typeof currentValues[`concept${index}`].length !== \"undefined\" ? 160 - currentValues[`concept${index}`].length : 160}</InputGroupText></InputGroupAddon>\n                                                    </InputGroup>\n                                                    {errors[`concept${index}`] ? <span className=\"span-tooltip\">{errors[`concept${index}`].message}</span> : null}\n                                                    <hr />\n                                                </FormGroup>\n                                            </Fragment>\n                                        );\n                                    })}\n                                </Col>\n                            </Row>\n                            <Row>\n                                <div className={\"float-right-absolute\"}>\n                                    <Button onClick={() => {\n                                        if (courseContentConcepts.length <= 2) {\n                                            setCourseContentConcepts(prevState => {\n                                                return [...prevState, { [`partOne${courseContentConcepts.length}`]: \"\", id: uuid() }]\n                                            })\n                                        } else {\n                                            NotificationManager.warning(\"Error - You cannot enter TOO many inputs as there is a MAXIMUM of 3 TOTAL inputs for this field...Please use your existing fields.\", \"Too many field's!\", \"Too many field's!\", 4500);\n                                        }\n                                    }} outline color={\"primary-2x\"} className={\"btn-square primary\"} style={{ width: \"35%\", border: \"none\" }}><Plus style={{ fontSize: 35, marginBottom: \"-7.5px\" }} /> Add Another Field</Button>\n                                </div>\n                            </Row>\n                            <Row>\n                                <Col>\n                                <FormGroup>\n                                    <Label>{UploadProjectFile}</Label>\n                                        <Dropzone\n                                            onChangeStatus={handleChangeStatus}\n                                            maxFiles={1}\n                                            multiple={false}\n                                            canCancel={false}\n                                            inputContent=\"Drop A File\"\n                                            styles={{\n                                                dropzone: { width: '100%', height: 50 },\n                                                dropzoneActive: { borderColor: 'green' },\n                                            }}\n                                        />\n                                </FormGroup>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <FormGroup className=\"mb-0\">\n                                        <Button style={{ width: \"100%\" }} color=\"info-2x\" outline className={\"btn-square-info\"} className=\"mr-3\">Submit & Continue w/Process</Button>\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n                            </Form>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n        </Fragment>\n    );\n}\nconst mapStateToProps = (state) => {\n    return {\n        userData: state.auth.data\n    }\n}\nexport default connect(mapStateToProps, { })(withRouter(CreateNewCoursePageOne));"]},"metadata":{},"sourceType":"module"}