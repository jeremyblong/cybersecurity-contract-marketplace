{"ast":null,"code":"var _jsxFileName = \"/home/kali/Documents/cybersecurity/client/src/components/dashboard/streamingLiveHacks/createLiveStream/createNewStream/helpers/nonFormHelpers.js\";\nimport React, { Component } from 'react';\nimport { WithContext as ReactTags } from 'react-tag-input';\nimport { connect } from \"react-redux\";\nimport { Label } from \"reactstrap\";\nimport _ from \"lodash\";\nimport hookFormHelpers from \"./helperFunctions.js\";\nimport { Controller } from \"react-hook-form\";\nconst KeyCodes = {\n  comma: 188,\n  enter: [10, 13]\n};\nconst delimiters = [...KeyCodes.enter, KeyCodes.comma];\nconst hashtagsChecker = hookFormHelpers().hashtagsChecker;\n\nclass HashtagLiveStreamHelper extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tags: [],\n      suggestions: []\n    };\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleAddition = this.handleAddition.bind(this);\n    this.handleDrag = this.handleDrag.bind(this);\n  }\n\n  handleDelete(i) {\n    const {\n      tags\n    } = this.state;\n    this.setState({\n      tags: tags.filter((tag, index) => index !== i)\n    }, () => {// this.props.saveListingData({\n      //     ...this.props.previousData,\n      //     hashtags: this.state.tags\n      // })\n    });\n  }\n\n  handleAddition(tag) {\n    this.setState(state => {\n      return {\n        tags: [...state.tags, tag]\n      };\n    }, () => {// this.props.saveListingData({\n      //     ...this.props.previousData,\n      //     hashtags: this.state.tags\n      // })\n    });\n  }\n\n  handleDrag(tag, currPos, newPos) {\n    const tags = [...this.state.tags];\n    const newTags = tags.slice();\n    newTags.splice(currPos, 1);\n    newTags.splice(newPos, 0, tag); // re-render\n\n    this.setState({\n      tags: newTags\n    }, () => {// this.props.saveListingData({\n      //     ...this.props.previousData,\n      //     hashtags: newTags\n      // })\n    });\n  }\n\n  componentDidMount() {\n    const {\n      hashtags\n    } = this.props.previousData;\n    this.setState({\n      tags: typeof hashtags !== \"undefined\" && hashtags.length > 0 ? hashtags : []\n    });\n  }\n\n  render() {\n    // setError, register, values, errors, name, clearErrors, control, errors\n    const {\n      tags,\n      suggestions\n    } = this.state; // deconstruct props\n\n    const {\n      setError,\n      register,\n      values,\n      errors,\n      setValue,\n      clearErrors,\n      control\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }, hashtagsChecker.label), /*#__PURE__*/React.createElement(Controller, Object.assign({\n      control: control,\n      name: \"streamHashtags\"\n    }, hashtagsChecker.check(setError, register, values, errors, \"streamHashtags\", clearErrors), {\n      render: _ref => {\n        let {\n          field\n        } = _ref;\n        return /*#__PURE__*/React.createElement(ReactTags // e, setValue\n        , {\n          tags: tags,\n          handleInputBlur: () => hashtagsChecker.onBlurred(tags, setValue),\n          classNames: {\n            tags: 'tagsClass',\n            tagInput: 'tagInputClass',\n            tagInputField: 'form-control',\n            selected: 'selectedClass',\n            tag: 'badge badge-primary',\n            remove: 'removeClass',\n            suggestions: 'suggestionsClass',\n            activeSuggestion: 'activeSuggestionClass'\n          },\n          placeholder: hashtagsChecker.placeholder,\n          maxLength: 10,\n          suggestions: suggestions,\n          handleDelete: this.handleDelete,\n          handleAddition: this.handleAddition,\n          handleDrag: this.handleDrag,\n          delimiters: delimiters,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 25\n          }\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }\n    })), this.props.errors.streamHashtags ? /*#__PURE__*/React.createElement(\"span\", {\n      className: \"span-tooltip\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 53\n      }\n    }, this.props.errors.streamHashtags.message) : null);\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => {\n  return {\n    previousData: _.has(state.listingData, \"listingData\") ? state.listingData.listingData : {}\n  };\n};\n\nconst HashtagHelper = connect(mapStateToProps, {})(HashtagLiveStreamHelper);\nexport default {\n  HashtagHelper\n};","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/streamingLiveHacks/createLiveStream/createNewStream/helpers/nonFormHelpers.js"],"names":["React","Component","WithContext","ReactTags","connect","Label","_","hookFormHelpers","Controller","KeyCodes","comma","enter","delimiters","hashtagsChecker","HashtagLiveStreamHelper","constructor","props","state","tags","suggestions","handleDelete","bind","handleAddition","handleDrag","i","setState","filter","tag","index","currPos","newPos","newTags","slice","splice","componentDidMount","hashtags","previousData","length","render","setError","register","values","errors","setValue","clearErrors","control","label","check","field","onBlurred","tagInput","tagInputField","selected","remove","activeSuggestion","placeholder","streamHashtags","message","mapStateToProps","has","listingData","HashtagHelper"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { WithContext as ReactTags } from 'react-tag-input';\nimport { connect } from \"react-redux\";\nimport { Label } from \"reactstrap\";\nimport _ from \"lodash\";\nimport hookFormHelpers from \"./helperFunctions.js\";\nimport { Controller } from \"react-hook-form\";\n\nconst KeyCodes = {\n  comma: 188,\n  enter: [10, 13],\n};\n\nconst delimiters = [...KeyCodes.enter, KeyCodes.comma];\n\nconst hashtagsChecker = hookFormHelpers().hashtagsChecker;\n\nclass HashtagLiveStreamHelper extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            tags: [],\n            suggestions: []\n        };\n        this.handleDelete = this.handleDelete.bind(this);\n        this.handleAddition = this.handleAddition.bind(this);\n        this.handleDrag = this.handleDrag.bind(this);\n    }\n\n    handleDelete(i) {\n        const { tags } = this.state;\n\n        this.setState({\n            tags: tags.filter((tag, index) => index !== i),\n        }, () => {\n            // this.props.saveListingData({\n            //     ...this.props.previousData,\n            //     hashtags: this.state.tags\n            // })\n        });\n    }\n    handleAddition(tag) {\n        this.setState(state => {\n            return { tags: [...state.tags, tag] }\n        }, () => {\n            // this.props.saveListingData({\n            //     ...this.props.previousData,\n            //     hashtags: this.state.tags\n            // })\n        });\n    }\n\n    handleDrag(tag, currPos, newPos) {\n        const tags = [...this.state.tags];\n        const newTags = tags.slice();\n\n        newTags.splice(currPos, 1);\n        newTags.splice(newPos, 0, tag);\n\n        // re-render\n        this.setState({ tags: newTags }, () => {\n            // this.props.saveListingData({\n            //     ...this.props.previousData,\n            //     hashtags: newTags\n            // })\n        });\n    }\n    componentDidMount() {\n        const { hashtags } = this.props.previousData;\n        this.setState({\n            tags: typeof hashtags !== \"undefined\" && hashtags.length > 0 ? hashtags : []\n        })\n    }\n    render() {\n        // setError, register, values, errors, name, clearErrors, control, errors\n        const { tags, suggestions } = this.state;\n        // deconstruct props\n        const { setError, register, values, errors, setValue, clearErrors, control } = this.props;\n        return (\n            <div>\n                <Label>{hashtagsChecker.label}</Label>\n                <Controller\n                    control={control}\n                    name={\"streamHashtags\"}\n                    {...hashtagsChecker.check(setError, register, values, errors, \"streamHashtags\", clearErrors)}\n                    render={({ field }) => (\n                        <ReactTags  // e, setValue\n                            tags={tags}\n                            handleInputBlur={() => hashtagsChecker.onBlurred(tags, setValue)}\n                            classNames={{\n                                tags: 'tagsClass',\n                                tagInput: 'tagInputClass',\n                                tagInputField: 'form-control',\n                                selected: 'selectedClass',\n                                tag: 'badge badge-primary',\n                                remove: 'removeClass',\n                                suggestions: 'suggestionsClass',\n                                activeSuggestion: 'activeSuggestionClass'\n                            }}\n                            placeholder={hashtagsChecker.placeholder}\n                            maxLength={10}\n                            suggestions={suggestions}\n                            handleDelete={this.handleDelete}\n                            handleAddition={this.handleAddition}\n                            handleDrag={this.handleDrag}\n                            delimiters={delimiters} \n                        />\n                    )}\n                />\n                {this.props.errors.streamHashtags ? <span className=\"span-tooltip\">{this.props.errors.streamHashtags.message}</span> : null}\n            </div>\n        )\n    }\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        previousData: _.has(state.listingData, \"listingData\") ? state.listingData.listingData : {}\n    }\n}\nconst HashtagHelper = connect(mapStateToProps, {  })(HashtagLiveStreamHelper);\n\nexport default {\n    HashtagHelper\n};"]},"metadata":{},"sourceType":"module"}