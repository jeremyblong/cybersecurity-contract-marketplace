{"ast":null,"code":"// helpers logic related to mainly to redux-hook-form\nconst MainHooksCustomHelpers = () => {\n  const calculateWhetherURLIsLegit = data => {\n    // helper function\n    const isValidHttpUrl = string => {\n      let url;\n\n      try {\n        url = new URL(string);\n      } catch (_) {\n        return false;\n      } // return protocol data\n\n\n      return url.protocol === \"http:\" || url.protocol === \"https:\";\n    }; // finally, check if url is VALID\n\n\n    if (isValidHttpUrl(data)) {\n      // url IS VALID\n      return true;\n    } else {\n      // url IS NOT VALID - return error string\n      return false;\n    }\n\n    ;\n  };\n\n  const urlEnteredLinkData = {\n    check: (setError, register, clearErrors, setValue, errors, name) => {\n      return { ...register(name, {\n          required: true,\n          minLength: {\n            value: 8,\n            message: \"You must enter AT Least 8 characters\"\n          },\n          maxLength: {\n            value: 75,\n            message: \"You may ONLY enter 75 characters or less\"\n          },\n          onBlur: e => {\n            // extracted final value from input\n            const value = e.target.value; // check if valid url in helper file.\n\n            const validOrNot = calculateWhetherURLIsLegit(value); // check if valid!\n\n            if (validOrNot === true) {\n              // set value\n              setValue(name, value, {\n                shouldValidate: false\n              }); // clear error after setting proper change state\n\n              setTimeout(() => {\n                clearErrors(name);\n              }, 50);\n            } else {\n              setTimeout(() => {\n                setError(name, {\n                  type: \"manual\",\n                  message: \"You MUST enter a VALID URL including http/https and ://\"\n                });\n              }, 50);\n            }\n          }\n        })\n      };\n    },\n    onChange: (e, setError, clearErrors, setValue, setLinkInput) => {\n      // deconstruct actual value\n      const value = e.target.value; // set state without redux form\n\n      setLinkInput(value); // created timeout variable\n\n      let timed; // set timeout/delay span\n\n      clearTimeout(timed); // set timeout\n\n      timed = setTimeout(() => {\n        // check whether legit URL\n        if (calculateWhetherURLIsLegit(value)) {\n          // clear error (relevant);\n          clearErrors(\"referenceLink\"); // set value\n\n          setValue(\"referenceLink\", value, {\n            shouldValidate: false\n          });\n        } else {\n          setError(\"referenceLink\", {\n            type: \"manual\",\n            message: \"You MUST enter a VALID URL including http/https and ://\"\n          });\n        }\n      }, 50);\n    }\n  };\n  const coverLetterChecks = {\n    check: (setError, register, clearErrors, setValue, name) => {\n      return { ...register(name, {\n          required: true,\n          minLength: {\n            value: 50,\n            message: \"You must enter AT Least 50 characters\"\n          },\n          maxLength: {\n            value: 575,\n            message: \"You may ONLY enter 575 characters or less\"\n          },\n          onBlur: e => {\n            // deconstruct actual value\n            const value = e.target.value; // deconstruct length\n\n            const len = value.length; // check if both min/max values met\n\n            if (len > 0 && len >= 50 && len <= 575) {\n              // clear error\n              clearErrors(name);\n            } else {\n              // set error\n              setTimeout(() => {\n                setError(name, {\n                  type: \"manual\",\n                  message: \"You MUST enter between 50 and 575 charectors in total for your cover letter (CV) before proceeding...\"\n                });\n              }, 50);\n            }\n          }\n        })\n      };\n    },\n    onChange: (e, name, setValue) => {\n      // deconstruct actual value\n      const value = e.target.value;\n      setValue(name, value, {\n        shouldValidate: true\n      });\n    },\n    label: \"Cover Letter (CV)\",\n    name: \"coverLetterText\",\n    placeholder: \"Enter your cover letter information (or upload in attachments)...\"\n  };\n  const messageToEmployerChecks = {\n    check: (setError, register, clearErrors, setValue, name) => {\n      return { ...register(name, {\n          required: true,\n          minLength: {\n            value: 50,\n            message: \"You must enter AT Least 50 characters\"\n          },\n          maxLength: {\n            value: 575,\n            message: \"You may ONLY enter 575 characters or less\"\n          },\n          onBlur: e => {\n            // deconstruct actual value\n            const value = e.target.value; // deconstruct length\n\n            const len = value.length; // check if both min/max values met\n\n            if (len > 0 && len >= 50 && len <= 575) {\n              // clear error\n              clearErrors(name);\n            } else {\n              // set error\n              setTimeout(() => {\n                setError(name, {\n                  type: \"manual\",\n                  message: \"You MUST enter between 50 and 575 charectors total while messaging employer before proceeding...\"\n                });\n              }, 50);\n            }\n          }\n        })\n      };\n    },\n    onChange: (e, name, setValue) => {\n      // deconstruct actual value\n      const value = e.target.value;\n      setValue(name, value, {\n        shouldValidate: true\n      });\n    },\n    label: \"Message To Employer (Direct to employer)\",\n    name: \"messageToEmployer\",\n    placeholder: \"Enter your 'custom' message to the employer...\"\n  };\n  const physicalOrDigitalChecks = {\n    check: (name, register) => {\n      return { ...register(name, {\n          required: {\n            value: true,\n            message: \"You must select a value/option (digital, physical or both) before proceeding\"\n          }\n        })\n      };\n    },\n    placeholder: \"Select your desired hack type (of enabled options)\",\n    name: \"physicalOrDigitalOrBoth\",\n    label: \"Account Type (Digital/Physical-hack type)\"\n  }; // return values to other component\n\n  return {\n    urlEnteredLinkData,\n    coverLetterChecks,\n    messageToEmployerChecks,\n    physicalOrDigitalChecks\n  };\n};\n\nexport default MainHooksCustomHelpers;","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/opportunities/employers/applyToListingHacker/helpers/reactHookFormHelpers.js"],"names":["MainHooksCustomHelpers","calculateWhetherURLIsLegit","data","isValidHttpUrl","string","url","URL","_","protocol","urlEnteredLinkData","check","setError","register","clearErrors","setValue","errors","name","required","minLength","value","message","maxLength","onBlur","e","target","validOrNot","shouldValidate","setTimeout","type","onChange","setLinkInput","timed","clearTimeout","coverLetterChecks","len","length","label","placeholder","messageToEmployerChecks","physicalOrDigitalChecks"],"mappings":"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","sourcesContent":["// helpers logic related to mainly to redux-hook-form\nconst MainHooksCustomHelpers = () => {\n\n    const calculateWhetherURLIsLegit = (data) => {\n        // helper function\n        const isValidHttpUrl = (string) => {\n            let url;\n            \n            try {\n              url = new URL(string);\n            } catch (_) {\n              return false;  \n            }\n            // return protocol data\n            return url.protocol === \"http:\" || url.protocol === \"https:\";\n        }\n        // finally, check if url is VALID\n        if (isValidHttpUrl(data)) {\n            // url IS VALID\n            return true;\n        } else {\n            // url IS NOT VALID - return error string\n            return false;\n        };\n    }\n\n    const urlEnteredLinkData = {\n        check: (setError, register, clearErrors, setValue, errors, name) => {\n            return (\n                {...register(name, { required: true, minLength: {\n                    value: 8,\n                    message: \"You must enter AT Least 8 characters\"\n                }, maxLength: {\n                    value: 75,\n                    message: \"You may ONLY enter 75 characters or less\"\n                }, onBlur: (e) => {\n                    // extracted final value from input\n                    const value = e.target.value;\n                    // check if valid url in helper file.\n                    const validOrNot = calculateWhetherURLIsLegit(value);\n                    // check if valid!\n                    if (validOrNot === true) {\n                        // set value\n                        setValue(name, value, { shouldValidate: false });\n                        // clear error after setting proper change state\n                        setTimeout(() => {\n                            clearErrors(name);\n                        }, 50);\n                    } else {\n                        setTimeout(() => {\n                            setError(name, {\n                                type: \"manual\",\n                                message: \"You MUST enter a VALID URL including http/https and ://\",\n                            });\n                        }, 50)\n                    }\n                }})}\n            );\n        },\n        onChange: (e, setError, clearErrors, setValue, setLinkInput) => {\n            // deconstruct actual value\n            const value = e.target.value;\n            // set state without redux form\n            setLinkInput(value);\n            // created timeout variable\n            let timed;\n            // set timeout/delay span\n            clearTimeout(timed);\n            // set timeout\n            timed = setTimeout(() => {\n                // check whether legit URL\n                if (calculateWhetherURLIsLegit(value)) {\n                    // clear error (relevant);\n                    clearErrors(\"referenceLink\");\n                    // set value\n                    setValue(\"referenceLink\", value, { shouldValidate: false });\n                } else {\n                    setError(\"referenceLink\", {\n                        type: \"manual\",\n                        message: \"You MUST enter a VALID URL including http/https and ://\",\n                    });\n                }\n            },  50);\n        }\n    };\n    const coverLetterChecks = {\n        check: (setError, register, clearErrors, setValue, name) => {\n            return (\n                {...register(name, { required: true, minLength: {\n                    value: 50,\n                    message: \"You must enter AT Least 50 characters\"\n                }, maxLength: {\n                    value: 575,\n                    message: \"You may ONLY enter 575 characters or less\"\n                }, onBlur: (e) => {\n                    // deconstruct actual value\n                    const value = e.target.value;\n                    // deconstruct length\n                    const len = value.length;\n                    // check if both min/max values met\n                    if ((len > 0) && (len >= 50) && (len <= 575)) {\n                        // clear error\n                        clearErrors(name);\n                    } else {\n                        // set error\n                        setTimeout(() => {\n                            setError(name, {\n                                type: \"manual\",\n                                message: \"You MUST enter between 50 and 575 charectors in total for your cover letter (CV) before proceeding...\",\n                            });\n                        }, 50);\n                    }\n                }})}\n            );\n        },\n        onChange: (e, name, setValue) => {\n            // deconstruct actual value\n            const value = e.target.value;\n\n            setValue(name, value, { shouldValidate: true })\n        },\n        label: \"Cover Letter (CV)\",\n        name: \"coverLetterText\",\n        placeholder: \"Enter your cover letter information (or upload in attachments)...\"\n    };\n    const messageToEmployerChecks = {\n        check: (setError, register, clearErrors, setValue, name) => {\n            return (\n                {...register(name, { required: true, minLength: {\n                    value: 50,\n                    message: \"You must enter AT Least 50 characters\"\n                }, maxLength: {\n                    value: 575,\n                    message: \"You may ONLY enter 575 characters or less\"\n                }, onBlur: (e) => {\n                    // deconstruct actual value\n                    const value = e.target.value;\n                    // deconstruct length\n                    const len = value.length;\n                    // check if both min/max values met\n                    if ((len > 0) && (len >= 50) && (len <= 575)) {\n                        // clear error\n                        clearErrors(name);\n                    } else {\n                        // set error\n                        setTimeout(() => {\n                            setError(name, {\n                                type: \"manual\",\n                                message: \"You MUST enter between 50 and 575 charectors total while messaging employer before proceeding...\",\n                            });\n                        }, 50);\n                    }\n                }})}\n            );\n        },\n        onChange: (e, name, setValue) => {\n            // deconstruct actual value\n            const value = e.target.value;\n\n            setValue(name, value, { shouldValidate: true })\n        },\n        label: \"Message To Employer (Direct to employer)\",\n        name: \"messageToEmployer\",\n        placeholder: \"Enter your 'custom' message to the employer...\"\n    };\n    const physicalOrDigitalChecks = {\n        check: (name, register) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: \"You must select a value/option (digital, physical or both) before proceeding\"\n                }})}\n            );\n        },\n        placeholder: \"Select your desired hack type (of enabled options)\",\n        name: \"physicalOrDigitalOrBoth\",\n        label: \"Account Type (Digital/Physical-hack type)\"\n    }\n    // return values to other component\n    return {\n        urlEnteredLinkData,\n        coverLetterChecks,\n        messageToEmployerChecks,\n        physicalOrDigitalChecks\n    }\n}\n\nexport default MainHooksCustomHelpers;"]},"metadata":{},"sourceType":"module"}