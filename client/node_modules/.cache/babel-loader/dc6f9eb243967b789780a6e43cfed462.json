{"ast":null,"code":"// helpers logic related to mainly to redux-hook-form\nconst HookHelpers = () => {\n  const hashtagsChecker = {\n    check: (setError, register) => {\n      return { ...register(\"startBid\", {\n          required: {\n            value: true,\n            message: \"You MUST enter AT least 1 characters to 10 characters & ONLY numbers\"\n          },\n          minLength: {\n            value: 1,\n            message: \"You must enter AT Least 1 characters\"\n          },\n          maxLength: {\n            value: 10,\n            message: \"You may ONLY enter 10 characters or less\"\n          },\n          onBlur: e => {// code here...\n          }\n        })\n      };\n    },\n    name: \"startBid\",\n    placeholder: \"Enter a starting bid...\",\n    type: \"number\",\n    label: \"Enter a starting bid\"\n  };\n  const subcategoryChecker = {\n    check: (setError, register, values, errors, name, clearErrors) => {\n      return { ...register(name, {\n          required: {\n            value: true,\n            message: \"You MUST select an option before starting your LIVE stream\"\n          },\n          onBlur: e => {\n            // log to check whats returned\n            const value = e.target.value; // timeout to delay for state change(s)\n\n            setTimeout(() => {\n              // clear error after proper selection\n              if (typeof value !== \"undefined\" && Object.keys(value).length > 0) {\n                clearErrors(name);\n              } else {\n                // set error as nothing was selected (blank 'click-off' selection of selector)\n                setError(name, {\n                  type: \"manual\",\n                  message: \"You MUST select an option before starting your LIVE stream\"\n                });\n              }\n            }, 50);\n          }\n        })\n      };\n    },\n    name: \"subCategory\",\n    placeholder: \"Enter a 'sub' category for your live stream...\",\n    type: \"text\",\n    label: \"Stream Sub-Category\"\n  };\n\n  const handleSubcategoryCheckerChange = (selectedOption, setValue) => {\n    // run conditionals\n    setValue('quantityAvailableForSale', selectedOption, {\n      shouldValidate: false\n    });\n    quantityAvailableForSaleGeneratedRef.current.blur();\n  };\n\n  return {\n    hashtagsChecker,\n    subcategoryChecker,\n    handleSubcategoryCheckerChange\n  };\n};\n\nexport default HookHelpers;","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/streamingLiveHacks/createLiveStream/createNewStream/helpers/helperFunctions.js"],"names":["HookHelpers","hashtagsChecker","check","setError","register","required","value","message","minLength","maxLength","onBlur","e","name","placeholder","type","label","subcategoryChecker","values","errors","clearErrors","target","setTimeout","Object","keys","length","handleSubcategoryCheckerChange","selectedOption","setValue","shouldValidate","quantityAvailableForSaleGeneratedRef","current","blur"],"mappings":"AAAA;AACA,MAAMA,WAAW,GAAG,MAAM;AAEtB,QAAMC,eAAe,GAAG;AACpBC,IAAAA,KAAK,EAAE,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC3B,aACI,EAAC,GAAGA,QAAQ,CAAC,UAAD,EAAa;AAAEC,UAAAA,QAAQ,EAAE;AACjCC,YAAAA,KAAK,EAAE,IAD0B;AAEjCC,YAAAA,OAAO,EAAE;AAFwB,WAAZ;AAGtBC,UAAAA,SAAS,EAAE;AACVF,YAAAA,KAAK,EAAE,CADG;AAEVC,YAAAA,OAAO,EAAE;AAFC,WAHW;AAMtBE,UAAAA,SAAS,EAAE;AACVH,YAAAA,KAAK,EAAE,EADG;AAEVC,YAAAA,OAAO,EAAE;AAFC,WANW;AAStBG,UAAAA,MAAM,EAAGC,CAAD,IAAO,CACd;AACH;AAXwB,SAAb;AAAZ,OADJ;AAcH,KAhBmB;AAiBpBC,IAAAA,IAAI,EAAE,UAjBc;AAkBpBC,IAAAA,WAAW,EAAE,yBAlBO;AAmBpBC,IAAAA,IAAI,EAAE,QAnBc;AAoBpBC,IAAAA,KAAK,EAAE;AApBa,GAAxB;AAsBA,QAAMC,kBAAkB,GAAG;AACvBd,IAAAA,KAAK,EAAE,CAACC,QAAD,EAAWC,QAAX,EAAqBa,MAArB,EAA6BC,MAA7B,EAAqCN,IAArC,EAA2CO,WAA3C,KAA2D;AAC9D,aACI,EAAC,GAAGf,QAAQ,CAACQ,IAAD,EAAO;AAAEP,UAAAA,QAAQ,EAAE;AAC3BC,YAAAA,KAAK,EAAE,IADoB;AAE3BC,YAAAA,OAAO,EAAE;AAFkB,WAAZ;AAGhBG,UAAAA,MAAM,EAAGC,CAAD,IAAO;AACd;AAEA,kBAAML,KAAK,GAAGK,CAAC,CAACS,MAAF,CAASd,KAAvB,CAHc,CAId;;AACAe,YAAAA,UAAU,CAAC,MAAM;AACb;AACA,kBAAK,OAAOf,KAAP,KAAiB,WAAlB,IAAmCgB,MAAM,CAACC,IAAP,CAAYjB,KAAZ,EAAmBkB,MAAnB,GAA4B,CAAnE,EAAuE;AACnEL,gBAAAA,WAAW,CAACP,IAAD,CAAX;AACH,eAFD,MAEO;AACH;AACAT,gBAAAA,QAAQ,CAACS,IAAD,EAAO;AACXE,kBAAAA,IAAI,EAAE,QADK;AAEXP,kBAAAA,OAAO,EAAE;AAFE,iBAAP,CAAR;AAIH;AACJ,aAXS,EAWP,EAXO,CAAV;AAYH;AApBkB,SAAP;AAAZ,OADJ;AAuBH,KAzBsB;AA0BvBK,IAAAA,IAAI,EAAE,aA1BiB;AA2BvBC,IAAAA,WAAW,EAAE,gDA3BU;AA4BvBC,IAAAA,IAAI,EAAE,MA5BiB;AA6BvBC,IAAAA,KAAK,EAAE;AA7BgB,GAA3B;;AA+BA,QAAMU,8BAA8B,GAAG,CAACC,cAAD,EAAiBC,QAAjB,KAA8B;AACjE;AACAA,IAAAA,QAAQ,CAAC,0BAAD,EAA6BD,cAA7B,EAA6C;AAAEE,MAAAA,cAAc,EAAE;AAAlB,KAA7C,CAAR;AAEAC,IAAAA,oCAAoC,CAACC,OAArC,CAA6CC,IAA7C;AACH,GALD;;AAMA,SAAO;AACH9B,IAAAA,eADG;AAEHe,IAAAA,kBAFG;AAGHS,IAAAA;AAHG,GAAP;AAKH,CAlED;;AAqEA,eAAezB,WAAf","sourcesContent":["// helpers logic related to mainly to redux-hook-form\nconst HookHelpers = () => {\n    \n    const hashtagsChecker = {\n        check: (setError, register) => {\n            return (\n                {...register(\"startBid\", { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 1 characters to 10 characters & ONLY numbers\"\n                }, minLength: {\n                    value: 1,\n                    message: \"You must enter AT Least 1 characters\"\n                }, maxLength: {\n                    value: 10,\n                    message: \"You may ONLY enter 10 characters or less\"\n                }, onBlur: (e) => {\n                    // code here...\n                }})}\n            )\n        },\n        name: \"startBid\",\n        placeholder: \"Enter a starting bid...\",\n        type: \"number\",\n        label: \"Enter a starting bid\"\n    };\n    const subcategoryChecker = {\n        check: (setError, register, values, errors, name, clearErrors) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: \"You MUST select an option before starting your LIVE stream\"\n                }, onBlur: (e) => {\n                    // log to check whats returned\n\n                    const value = e.target.value;\n                    // timeout to delay for state change(s)\n                    setTimeout(() => {\n                        // clear error after proper selection\n                        if ((typeof value !== \"undefined\") && (Object.keys(value).length > 0)) {\n                            clearErrors(name);\n                        } else {\n                            // set error as nothing was selected (blank 'click-off' selection of selector)\n                            setError(name, {\n                                type: \"manual\",\n                                message: \"You MUST select an option before starting your LIVE stream\",\n                            });\n                        }\n                    }, 50);\n                }})}\n            )\n        },\n        name: \"subCategory\",\n        placeholder: \"Enter a 'sub' category for your live stream...\",\n        type: \"text\",\n        label: \"Stream Sub-Category\"\n    };\n    const handleSubcategoryCheckerChange = (selectedOption, setValue) => {\n        // run conditionals\n        setValue('quantityAvailableForSale', selectedOption, { shouldValidate: false });\n\n        quantityAvailableForSaleGeneratedRef.current.blur();\n    }\n    return {\n        hashtagsChecker,\n        subcategoryChecker,\n        handleSubcategoryCheckerChange\n    }\n}\n\n\nexport default HookHelpers;"]},"metadata":{},"sourceType":"module"}