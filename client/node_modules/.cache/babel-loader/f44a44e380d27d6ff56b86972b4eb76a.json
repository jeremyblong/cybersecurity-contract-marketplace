{"ast":null,"code":"var _jsxFileName = \"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/src/components/dashboard/messaging/main/helpers/mainHelperFunctions.js\";\nimport React, { Fragment, useState, Component } from 'react';\nimport { Media, Popover, PopoverHeader, PopoverBody, ListGroup, ListGroupItem } from 'reactstrap';\nimport moment from \"moment\";\nimport start_conversion from '../../../../../assets/images/start-conversion.jpg';\n\nconst handleCheckGroupType = (e, setGroupType, setMessageListState, setChannelState) => {\n  const checked = e.target.checked;\n  setChannelState(null);\n  setMessageListState([]);\n  setGroupType({\n    groupType: checked === true ? \"Public Convo's\" : \"Private Convo's\",\n    checked\n  });\n};\n\nconst handleMessagePressPrivateConvos = (message, channel, sb, setMessageInput, addNewMessageCallback) => {\n  console.log(\"handleMessagePressPrivateConvos clicked/ran...\");\n  const params = new sb.UserMessageParams();\n  params.message = message;\n  params.customType = \"private\"; // params.data = DATA;\n\n  params.mentionType = 'users';\n  params.mentionedUserIds = []; // params.metaArrays = [   // A pair of key-value\n  //     new sendBirds.me.MessageMetaArray('itemType', ['tablet']),\n  //     new sendBirds.me.MessageMetaArray('quality', ['best', 'good'])\n  // ];\n\n  params.translationTargetLanguages = ['en']; // French and German\n\n  params.pushNotificationDeliveryOption = 'default'; // Either 'default' or 'suppress'\n\n  channel.sendUserMessage(params, (userMessage, error) => {\n    if (error) {\n      // Handle error.\n      console.log(\"error sendUserMessage... : \", error);\n    } else {\n      const messageId = userMessage.messageId;\n      console.log(\"Send message SUCCESS private convos --- :\", messageId, userMessage);\n      setMessageInput(\"\");\n      addNewMessageCallback(userMessage);\n    }\n  });\n};\n\nconst handleListItemClickPrivateChannel = (item, SBData, setChannelState, setMessageListState) => {\n  console.log(\"handleListItemClickPrivateChannel clicked... : \", item);\n  SBData.GroupChannel.getChannel(item.url, (groupChannel, error) => {\n    if (error) {\n      // Handle error.\n      console.log(\"getChannel : \", error);\n    } else {\n      const params = new SBData.MessageListParams(); // create param's for message log/chat\n\n      params.prevResultSize = 25;\n      params.nextResultSize = 25;\n      params.isInclusive = true;\n      params.reverse = true;\n      params.replyType = \"all\";\n      params.includeThreadInfo = true;\n      params.includeParentMessageInfo = true; // create timestamp\n\n      const TIMESTAMP = Date.now();\n      groupChannel.markAsDelivered();\n      setChannelState(groupChannel);\n      groupChannel.markAsRead(); // Pass the params as an argument to the `getMessagesByTimestamp()` method.\n\n      groupChannel.getMessagesByTimestamp(TIMESTAMP, params, (messages, error) => {\n        if (error) {\n          // Handle error.\n          console.log(\"error getMessagesByTimestamp :\", error);\n        } else {\n          console.log(\"messages\", messages);\n          setMessageListState(messages);\n        }\n      });\n    }\n  });\n};\n\nconst renderOnlineStatus = (item, userData) => {\n  for (let index = 0; index < item.members.length; index++) {\n    const user = item.members[index];\n\n    if (user.userId !== userData.uniqueId) {\n      return user.connectionStatus;\n    }\n\n    if (item.members.length - 1 === index) {\n      return user.connectionStatus;\n    }\n  }\n};\n\nconst renderNicknamePrivateGroup = (item, userData) => {\n  for (let index = 0; index < item.members.length; index++) {\n    const user = item.members[index];\n\n    if (user.userId !== userData.uniqueId) {\n      return user.nickname;\n    }\n\n    if (item.members.length - 1 === index) {\n      return user.nickname;\n    }\n  }\n};\n\nconst renderNickname = (item, userData) => {\n  for (let index = 0; index < item.operators.length; index++) {\n    const user = item.operators[index];\n\n    if (user.userId !== userData.uniqueId) {\n      return user.nickname;\n    }\n\n    if (item.operators.length - 1 === index) {\n      return \"Chat Invite Pending...\";\n    }\n  }\n};\n\nconst renderStatus = (item, userData) => {\n  for (let index = 0; index < item.operators.length; index++) {\n    const user = item.operators[index];\n\n    if (user.userId !== userData.uniqueId) {\n      return user.isActive;\n    }\n\n    if (item.operators.length - 1 === index) {\n      return user.isActive;\n    }\n  }\n};\n\nconst renderLastProfilePicMainUser = user => {\n  if (typeof user.profilePicsVideos !== \"undefined\" && user.profilePicsVideos.length > 0) {\n    const reversed = user.profilePicsVideos.reverse();\n\n    for (let index = 0; index < reversed.length; index++) {\n      const item = reversed[index];\n\n      if (item.type.includes(\"image\")) {\n        return \"\".concat(process.env.REACT_APP_ASSET_LINK, \"/\").concat(item.link);\n        break;\n      }\n    }\n  } else {\n    return process.env.REACT_APP_PLACEHOLDER_IMAGE;\n  }\n};\n\nconst onKeyPressPrivateSubmitted = e => {\n  console.log(\"onKeyPressPrivateSubmitted pressed...\", e);\n};\n\nconst onKeyPressPublicSubmitted = e => {\n  console.log(\"onKeyPressPublicSubmitted pressed...\", e);\n};\n\nclass RenderMessagListActualMessages extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleMessageClickPopover = (item, index) => {\n      console.log(\"handleMessageClickPopover item/index\", item, index);\n      const {\n        channel\n      } = this.props;\n\n      if (channel !== null) {\n        console.log(\"CHANNEL ISNT NULL handleMessageClickPopover ~ ...\");\n        this.setState({\n          [\"popoverCustom\".concat(channel.url).concat(index)]: true\n        });\n      }\n    };\n\n    this.closeMessagePopover = (item, index) => {\n      console.log(\"closeMessagePopover item/index\", item, index);\n      const {\n        channel\n      } = this.props;\n\n      if (channel !== null) {\n        console.log(\"CHANNEL ISNT NULL closeMessagePopover ~ ...\");\n        this.setState({\n          [\"popoverCustom\".concat(channel.url).concat(index)]: false\n        });\n      }\n    };\n\n    this.state = {};\n  }\n\n  render() {\n    const {\n      messageList,\n      channel,\n      userData\n    } = this.props;\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"ul-messages-custom-reinvented\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }\n    }, messageList.length > 0 ? messageList.map((item, index) => {\n      {\n        /* const participators = allMembers.chats.find(x => x.id === item.sender); */\n      }\n      return /*#__PURE__*/React.createElement(\"li\", {\n        key: index,\n        className: \"clearfix\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        id: \"popoverCustom\".concat(channel.url).concat(index),\n        onClick: () => this.handleMessageClickPopover(item, index),\n        className: \"message add-hover-message-convo-individual my-message \".concat(item._sender.userId !== userData.uniqueId ? '' : 'float-right'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Popover, {\n        className: \"custom-chat-popover\",\n        isOpen: this.state[\"popoverCustom\".concat(channel.url).concat(index)],\n        toggle: () => this.closeMessagePopover(item, index),\n        placement: \"bottom\",\n        target: \"popoverCustom\".concat(channel.url).concat(index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        onMouseLeave: () => {\n          console.log(\"mouse LEFT.\");\n          this.closeMessagePopover(item, index);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(PopoverHeader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 45\n        }\n      }, \" ~ Message Actions/Modification's ~ \"), /*#__PURE__*/React.createElement(PopoverBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(ListGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(ListGroupItem, {\n        className: \"list-group-item-action custom-message-action-listgroup\",\n        onClick: () => null,\n        active: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 53\n        }\n      }, \"DELETE This Message (Permanently Remove)\"), /*#__PURE__*/React.createElement(ListGroupItem, {\n        className: \"list-group-item-action custom-message-action-listgroup\",\n        onClick: () => null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 53\n        }\n      }, \"PIN This Message (Note MSG As IMPORTANT)\"), /*#__PURE__*/React.createElement(ListGroupItem, {\n        className: \"list-group-item-action custom-message-action-listgroup\",\n        onClick: () => null,\n        active: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 53\n        }\n      }, \"MARK As Read (Show You've Seen It)\"), /*#__PURE__*/React.createElement(ListGroupItem, {\n        className: \"list-group-item-action custom-message-action-listgroup\",\n        onClick: () => null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 53\n        }\n      }, \"ADD Extra Data To Existing MSG (MODIFY Message)\"))))), /*#__PURE__*/React.createElement(Media, {\n        src: item._sender.plainProfileUrl,\n        className: \"rounded-circle \".concat(item._sender.userId !== userData.uniqueId ? 'float-left' : 'float-right', \" custom-chat-user-image chat-user-img img-30\"),\n        alt: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 37\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"message-data text-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: item._sender.userId !== userData.uniqueId ? \"message-data-time message-data-time-custom-left float-left\" : \"message-data-time message-data-time-custom-right float-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 41\n        }\n      }, moment(item.createdAt).format(\"MM/DD/YYYY, h:mm:ss a\"), \" by \", item._sender.nickname)), item.message, /*#__PURE__*/React.createElement(\"div\", {\n        className: item._sender.userId !== userData.uniqueId ? \"delivery-status-wrapper-right\" : \"delivery-status-wrapper-left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: item._sender.userId !== userData.uniqueId ? \"delivery-confirmation-right\" : \"delivery-confirmation-left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 41\n        }\n      }, item.sendingStatus === \"succeeded\" ? \"Delivered!\" : \"Pending Delivery...\"))));\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 26\n      }\n    }, /*#__PURE__*/React.createElement(Media, {\n      className: \"img-fluid\",\n      src: start_conversion,\n      alt: \"start conversion \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nexport default {\n  handleCheckGroupType,\n  handleListItemClickPrivateChannel,\n  renderOnlineStatus,\n  renderNicknamePrivateGroup,\n  renderNickname,\n  renderStatus,\n  handleMessagePressPrivateConvos,\n  renderLastProfilePicMainUser,\n  onKeyPressPublicSubmitted,\n  onKeyPressPrivateSubmitted,\n  RenderMessagListActualMessages\n};","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/src/components/dashboard/messaging/main/helpers/mainHelperFunctions.js"],"names":["React","Fragment","useState","Component","Media","Popover","PopoverHeader","PopoverBody","ListGroup","ListGroupItem","moment","start_conversion","handleCheckGroupType","e","setGroupType","setMessageListState","setChannelState","checked","target","groupType","handleMessagePressPrivateConvos","message","channel","sb","setMessageInput","addNewMessageCallback","console","log","params","UserMessageParams","customType","mentionType","mentionedUserIds","translationTargetLanguages","pushNotificationDeliveryOption","sendUserMessage","userMessage","error","messageId","handleListItemClickPrivateChannel","item","SBData","GroupChannel","getChannel","url","groupChannel","MessageListParams","prevResultSize","nextResultSize","isInclusive","reverse","replyType","includeThreadInfo","includeParentMessageInfo","TIMESTAMP","Date","now","markAsDelivered","markAsRead","getMessagesByTimestamp","messages","renderOnlineStatus","userData","index","members","length","user","userId","uniqueId","connectionStatus","renderNicknamePrivateGroup","nickname","renderNickname","operators","renderStatus","isActive","renderLastProfilePicMainUser","profilePicsVideos","reversed","type","includes","process","env","REACT_APP_ASSET_LINK","link","REACT_APP_PLACEHOLDER_IMAGE","onKeyPressPrivateSubmitted","onKeyPressPublicSubmitted","RenderMessagListActualMessages","constructor","props","handleMessageClickPopover","setState","closeMessagePopover","state","render","messageList","map","_sender","plainProfileUrl","createdAt","format","sendingStatus"],"mappings":"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","sourcesContent":["import React,{ Fragment, useState, Component } from 'react';\nimport { Media, Popover, PopoverHeader, PopoverBody, ListGroup, ListGroupItem } from 'reactstrap';\nimport moment from \"moment\";\nimport start_conversion from '../../../../../assets/images/start-conversion.jpg';\n\nconst handleCheckGroupType = (e, setGroupType, setMessageListState, setChannelState) => {\n    const checked = e.target.checked;\n\n    setChannelState(null);\n\n    setMessageListState([]);\n\n    setGroupType({\n        groupType: checked === true ? \"Public Convo's\" : \"Private Convo's\",\n        checked\n    })\n}\nconst handleMessagePressPrivateConvos = (message, channel, sb, setMessageInput, addNewMessageCallback) => {\n    console.log(\"handleMessagePressPrivateConvos clicked/ran...\");\n\n    const params = new sb.UserMessageParams();\n\n    params.message = message;\n    params.customType = \"private\";\n    // params.data = DATA;\n    params.mentionType = 'users';\n    params.mentionedUserIds = [];\n    // params.metaArrays = [   // A pair of key-value\n    //     new sendBirds.me.MessageMetaArray('itemType', ['tablet']),\n    //     new sendBirds.me.MessageMetaArray('quality', ['best', 'good'])\n    // ];\n    params.translationTargetLanguages = ['en'];   // French and German\n    params.pushNotificationDeliveryOption = 'default';  // Either 'default' or 'suppress'\n\n    channel.sendUserMessage(params, (userMessage, error) => {\n        if (error) {\n            // Handle error.\n            console.log(\"error sendUserMessage... : \", error);\n        } else {\n            const messageId = userMessage.messageId;\n\n            console.log(\"Send message SUCCESS private convos --- :\", messageId, userMessage);\n\n            setMessageInput(\"\");\n\n            addNewMessageCallback(userMessage);\n        }\n    });\n}\nconst handleListItemClickPrivateChannel = (item, SBData, setChannelState, setMessageListState) => {\n    console.log(\"handleListItemClickPrivateChannel clicked... : \", item);\n\n    SBData.GroupChannel.getChannel(item.url, (groupChannel, error) => {\n        if (error) {\n            // Handle error.\n            console.log(\"getChannel : \", error);\n        } else {\n            const params = new SBData.MessageListParams();\n            // create param's for message log/chat\n            params.prevResultSize = 25;\n            params.nextResultSize = 25;\n            params.isInclusive = true;\n            params.reverse = true;\n            params.replyType = \"all\";\n            params.includeThreadInfo = true;\n            params.includeParentMessageInfo = true;\n            // create timestamp\n            const TIMESTAMP = Date.now();\n\n            groupChannel.markAsDelivered();\n\n            setChannelState(groupChannel);\n\n            groupChannel.markAsRead();\n\n            // Pass the params as an argument to the `getMessagesByTimestamp()` method.\n            groupChannel.getMessagesByTimestamp(TIMESTAMP, params, (messages, error) => {\n                if (error) {\n                    // Handle error.\n                    console.log(\"error getMessagesByTimestamp :\", error);\n                } else {\n                    console.log(\"messages\", messages);\n\n                    setMessageListState(messages);\n                }\n            });\n        }\n    });\n}\nconst renderOnlineStatus = (item, userData) => {\n    for (let index = 0; index < item.members.length; index++) {\n        const user = item.members[index];\n        if (user.userId !== userData.uniqueId) {\n            return user.connectionStatus;\n        }\n        if ((item.members.length - 1) === index) {\n            return user.connectionStatus;\n        }\n    }\n}\nconst renderNicknamePrivateGroup = (item, userData) => {\n    for (let index = 0; index < item.members.length; index++) {\n        const user = item.members[index];\n        if (user.userId !== userData.uniqueId) {\n            return user.nickname;\n        }\n        if ((item.members.length - 1) === index) {\n            return user.nickname;\n        }\n    }\n}\nconst renderNickname = (item, userData) => {\n    for (let index = 0; index < item.operators.length; index++) {\n        const user = item.operators[index];\n        if (user.userId !== userData.uniqueId) {\n            return user.nickname;\n        }\n        if ((item.operators.length - 1) === index) {\n            return \"Chat Invite Pending...\";\n        }\n    }\n}\nconst renderStatus = (item, userData) => {\n    for (let index = 0; index < item.operators.length; index++) {\n        const user = item.operators[index];\n        if (user.userId !== userData.uniqueId) {\n            return user.isActive;\n        }\n        if ((item.operators.length - 1) === index) {\n            return user.isActive;\n        }\n    }\n}\nconst renderLastProfilePicMainUser = (user) => {\n    if (typeof user.profilePicsVideos !== \"undefined\" && user.profilePicsVideos.length > 0) {\n        const reversed = user.profilePicsVideos.reverse();\n\n        for (let index = 0; index < reversed.length; index++) {\n            const item = reversed[index];\n            if (item.type.includes(\"image\")) {\n                return `${process.env.REACT_APP_ASSET_LINK}/${item.link}`;\n                break;\n            }\n        }\n    } else {\n        return process.env.REACT_APP_PLACEHOLDER_IMAGE;\n    }\n}\nconst onKeyPressPrivateSubmitted = (e) => {\n    console.log(\"onKeyPressPrivateSubmitted pressed...\", e);\n}\nconst onKeyPressPublicSubmitted = (e) => {\n    console.log(\"onKeyPressPublicSubmitted pressed...\", e);\n}\nclass RenderMessagListActualMessages extends Component {\nconstructor (props) {\n    super(props);\n\n    this.state = {\n\n    }\n}\n    handleMessageClickPopover = (item, index) => {\n        console.log(\"handleMessageClickPopover item/index\", item, index);\n\n        const { channel } = this.props;\n\n        if (channel !== null) {\n\n            console.log(\"CHANNEL ISNT NULL handleMessageClickPopover ~ ...\");\n\n            this.setState({\n                [`popoverCustom${channel.url}${index}`]: true\n            }) \n        } \n    }\n\n    closeMessagePopover = (item, index) => {\n        console.log(\"closeMessagePopover item/index\", item, index);\n\n        const { channel } = this.props;\n\n        if (channel !== null) {\n\n            console.log(\"CHANNEL ISNT NULL closeMessagePopover ~ ...\");\n\n            this.setState({\n                [`popoverCustom${channel.url}${index}`]: false\n            })   \n        } \n    }\n    render () {\n        const { messageList, channel, userData } = this.props;\n        return (\n            <Fragment>\n                <ul className={\"ul-messages-custom-reinvented\"}>\n                    {messageList.length > 0 ? messageList.map((item, index) => {\n                        {/* const participators = allMembers.chats.find(x => x.id === item.sender); */}\n                        return (\n                            <li key={index} className=\"clearfix\">\n                                <div id={`popoverCustom${channel.url}${index}`} onClick={() => this.handleMessageClickPopover(item, index)} className={`message add-hover-message-convo-individual my-message ${item._sender.userId !== userData.uniqueId ? '' : 'float-right'}`}>\n                                    <Popover className={\"custom-chat-popover\"} isOpen={this.state[`popoverCustom${channel.url}${index}`]} toggle={() => this.closeMessagePopover(item, index)} placement=\"bottom\" target={`popoverCustom${channel.url}${index}`}>\n                                        <div onMouseLeave={() => {\n                                            console.log(\"mouse LEFT.\");\n\n                                            this.closeMessagePopover(item, index)\n                                        }}>\n                                            <PopoverHeader> ~ Message Actions/Modification's ~ </PopoverHeader>\n                                            <PopoverBody>\n                                                <ListGroup>\n                                                    <ListGroupItem className=\"list-group-item-action custom-message-action-listgroup\" onClick={() => null} active>{\"DELETE This Message (Permanently Remove)\"}</ListGroupItem>\n                                                    <ListGroupItem className=\"list-group-item-action custom-message-action-listgroup\" onClick={() => null}>{\"PIN This Message (Note MSG As IMPORTANT)\"}</ListGroupItem>\n                                                    <ListGroupItem className=\"list-group-item-action custom-message-action-listgroup\" onClick={() => null} active>{\"MARK As Read (Show You've Seen It)\"}</ListGroupItem>\n                                                    <ListGroupItem className=\"list-group-item-action custom-message-action-listgroup\" onClick={() => null}>{\"ADD Extra Data To Existing MSG (MODIFY Message)\"}</ListGroupItem>\n                                                </ListGroup>\n                                            </PopoverBody>\n                                        </div>\n                                    </Popover>\n                                    <Media src={item._sender.plainProfileUrl}\n                                        className={`rounded-circle ${item._sender.userId !== userData.uniqueId ? 'float-left' : 'float-right'} custom-chat-user-image chat-user-img img-30`} alt=\"\" />\n                                    <div className=\"message-data text-right\">\n                                        <span className={item._sender.userId !== userData.uniqueId ? \"message-data-time message-data-time-custom-left float-left\" : \"message-data-time message-data-time-custom-right float-right\"}>{moment(item.createdAt).format(\"MM/DD/YYYY, h:mm:ss a\")} by {item._sender.nickname}</span>\n                                    </div>\n                                    {item.message}\n                                    <div className={item._sender.userId !== userData.uniqueId ? \"delivery-status-wrapper-right\" : \"delivery-status-wrapper-left\"}>\n                                        <p className={item._sender.userId !== userData.uniqueId ? \"delivery-confirmation-right\" : \"delivery-confirmation-left\"}>{item.sendingStatus === \"succeeded\" ? \"Delivered!\" : \"Pending Delivery...\"}</p>\n                                    </div>\n                                </div>\n                            </li>\n                        );\n                    }) : <div>\n                        <Media className=\"img-fluid\" src={start_conversion} alt=\"start conversion \" />\n                    </div>}\n                </ul>\n            </Fragment>\n        );\n    }\n}\nexport default {\n    handleCheckGroupType,\n    handleListItemClickPrivateChannel,\n    renderOnlineStatus,\n    renderNicknamePrivateGroup,\n    renderNickname,\n    renderStatus,\n    handleMessagePressPrivateConvos,\n    renderLastProfilePicMainUser,\n    onKeyPressPublicSubmitted,\n    onKeyPressPrivateSubmitted,\n    RenderMessagListActualMessages\n};"]},"metadata":{},"sourceType":"module"}