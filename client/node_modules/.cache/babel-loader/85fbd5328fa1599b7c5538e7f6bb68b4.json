{"ast":null,"code":"var _jsxFileName = \"/home/kali/Documents/cybersecurity/client/src/components/dashboard/learning/educationalCoursesSeminars/createCourse/helpers/pages/pageOne/index.js\";\nimport React, { Fragment, useState, useEffect, useMemo, useRef } from \"react\";\nimport Dropzone from 'react-dropzone-uploader';\nimport { Row, Col, Card, CardBody, Form, FormGroup, Label, Input, Button, InputGroup, InputGroupText, InputGroupAddon } from 'reactstrap';\nimport DatePicker from \"react-datepicker\";\nimport { useForm, Controller } from 'react-hook-form';\nimport { connect } from 'react-redux';\nimport { withRouter, Link } from 'react-router-dom';\nimport { ProjectTitle, ClientName, ProjectRate, ProjectStatus, ProgressLevel, ProjectSize, Small, Medium, Big, StartingDate, EndingDate, EnterSomeDetails, UploadProjectFile, Add, Cancel, Done, Doing, Maps } from '../../../../../../../../constant';\nimport reduxFormHelpers from \"./helpers/reduxFormHelpers.js\";\nimport optionHelper from \"./helpers/options/options.js\";\nimport Select from \"react-select\";\nimport helperFunctions from \"./helpers/helperFunctions/index.js\";\nimport SimpleMDE from \"react-simplemde-editor\";\nimport \"./styles.css\";\nimport uuid from \"react-uuid\";\nimport { NotificationManager } from \"react-notifications\";\nconst courseTitle = reduxFormHelpers().courseTitle;\nconst courseCategory = reduxFormHelpers().courseCategory;\nconst descriptionChecks = reduxFormHelpers().descriptionChecks;\nconst {\n  courseCategoryOptions\n} = optionHelper;\nconst {\n  CourseCreationHashtagHelper\n} = helperFunctions;\n\nconst CreateNewCoursePageOne = () => {\n  // create ref's local\n  const courseCategoryGeneratedRef = useRef(null);\n  const customHashtagsRef = useRef(null);\n  const [objectives, setObjectiveState] = useState([{\n    partCount0: \"\",\n    id: uuid()\n  }, {\n    partCount1: \"\",\n    id: uuid()\n  }, {\n    partCount2: \"\",\n    id: uuid()\n  }, {\n    partCount3: \"\",\n    id: uuid()\n  }]); // state init\n\n  const [hashtags, setHashtags] = useState([]);\n  const [wordCount, setWordCount] = useState(0); // redux form logic\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    reset,\n    getValues,\n    setValue,\n    setError,\n    clearErrors,\n    formState: {\n      errors\n    }\n  } = useForm({\n    mode: \"onTouched\",\n    reValidateMode: \"onBlur\"\n  }); // collect redux-hook-form values\n\n  const currentValues = getValues(); // called every time a file's `status` changes\n\n  const handleChangeStatus = (_ref, status) => {\n    let {\n      meta,\n      file\n    } = _ref;\n    console.log(\"handleChangeStatus ran...\", meta, file, status);\n  };\n\n  const renderErrorsFormUploadContent = (e, errors) => {\n    console.log(\"renderErrorsFormUploadContent ran...\", e, errors);\n  };\n\n  const onSubmission = (e, data) => {\n    console.log(\"onSubmission ran...\", e, data);\n  };\n\n  const calculateWordCountOnBlur = data => {\n    const wordCount = data.split(\" \").length;\n    setWordCount(wordCount);\n  };\n\n  const autofocusNoSpellcheckerOptions = useMemo(() => {\n    return {\n      autofocus: false,\n      spellChecker: false\n    };\n  }, []);\n  console.log(\"objectives\", objectives);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    className: \"theme-form\",\n    onSubmit: handleSubmit(onSubmission, (e, errors) => {\n      return renderErrorsFormUploadContent(e, errors);\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 41\n    }\n  }, courseTitle.label), /*#__PURE__*/React.createElement(Input, Object.assign({}, courseTitle.check(setError, register), {\n    className: \"form-control\",\n    type: courseTitle.type,\n    name: courseTitle.name,\n    placeholder: courseTitle.placeholder,\n    onChange: e => courseTitle.onChange(e, setValue),\n    value: currentValues.courseTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 41\n    }\n  })), errors.courseTitle ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"span-tooltip\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 63\n    }\n  }, errors.courseTitle.message) : null))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"6\",\n    md: \"6\",\n    lg: \"6\",\n    xl: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 41\n    }\n  }, courseCategory.label), /*#__PURE__*/React.createElement(Controller, Object.assign({\n    control: control,\n    name: courseCategory.name\n  }, courseCategory.check(setError, register, clearErrors), {\n    render: _ref2 => {\n      let {\n        field\n      } = _ref2;\n      return /*#__PURE__*/React.createElement(Select, Object.assign({}, field, {\n        ref: courseCategoryGeneratedRef,\n        autoBlur: true,\n        placeholder: courseCategory.placeholder,\n        defaultValue: null,\n        onMenuClose: () => {\n          courseCategoryGeneratedRef.current.blur();\n        },\n        value: currentValues.courseCategory,\n        onChange: selectedOption => courseCategory.onChange(selectedOption, setValue, clearErrors),\n        options: courseCategoryOptions,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 49\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 41\n    }\n  })), errors.courseCategory ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"span-tooltip\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 66\n    }\n  }, errors.courseCategory.message) : null)), /*#__PURE__*/React.createElement(Col, {\n    sm: \"6\",\n    md: \"6\",\n    lg: \"6\",\n    xl: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 41\n    }\n  }, ProgressLevel), /*#__PURE__*/React.createElement(Input, {\n    type: \"select\",\n    name: \"progress_level\",\n    className: \"form-control digits\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"25\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 45\n    }\n  }, \"25\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"50\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 45\n    }\n  }, \"50\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"70\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 45\n    }\n  }, \"70\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 45\n    }\n  }, \"100\"))))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(CourseCreationHashtagHelper, {\n    customHashtagsRef: customHashtagsRef,\n    setHashtags: setHashtags,\n    hashtags: hashtags,\n    setError: setError,\n    register: register,\n    values: currentValues,\n    errors: errors,\n    setValue: setValue,\n    clearErrors: clearErrors,\n    control: control,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 37\n    }\n  }))), /*#__PURE__*/React.createElement(Row, {\n    style: {\n      paddingTop: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"6\",\n    lg: \"6\",\n    xl: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"6\",\n    lg: \"6\",\n    xl: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(Row, {\n    style: {\n      paddingTop: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 33\n    }\n  }, \"Enter a description for your listing (markdown is accepted - use the attached buttons to customize the way your content looks)\"), /*#__PURE__*/React.createElement(Controller, Object.assign({\n    control: control,\n    name: descriptionChecks.name,\n    value: currentValues.description\n  }, descriptionChecks.check(clearErrors, register, setError, currentValues, wordCount), {\n    render: _ref3 => {\n      let {\n        field: {\n          ref,\n          onChange,\n          value,\n          ...field\n        }\n      } = _ref3;\n      return /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(SimpleMDE, Object.assign({\n        ref: ref\n      }, field, {\n        placeholder: descriptionChecks.placeholder,\n        name: descriptionChecks.name,\n        onFocus: () => {\n          clearErrors(\"description\");\n        },\n        onBlur: () => descriptionChecks.onBlur(clearErrors, setError, currentValues, wordCount),\n        id: \"editor_container\",\n        onChange: value => {\n          onChange(value); // return value for hook-form logic\n\n          return value;\n        },\n        value: value,\n        options: autofocusNoSpellcheckerOptions,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 49\n        }\n      })), errors.description ? /*#__PURE__*/React.createElement(\"span\", {\n        className: \"span-tooltip\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 71\n        }\n      }, errors.description.message) : null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 37\n    }\n  })))), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"course-custom-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 37\n    }\n  }, \"The following descriptions will be publicly visible on your Course Landing Page and will have a direct impact on your course performance. These descriptions will help learners decide if your course is right for them.\"))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"couse-create-p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 37\n    }\n  }, \"The following descriptions will be publicly visible on your Course Landing Page and will have a direct impact on your course performance. These descriptions will help learners decide if your course is right for them.\"), /*#__PURE__*/React.createElement(\"h5\", {\n    className: \"h5-custom-course\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 37\n    }\n  }, \"What will students learn in your course?\"), \"You must enter at least 4 learning \", /*#__PURE__*/React.createElement(\"a\", {\n    href: \"\",\n    className: \"important-course-link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 72\n    }\n  }, \"objectives or outcomes\"), \" that learners can expect to achieve after completing your course.\")), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 33\n    }\n  }, objectives.map((objective, index) => {\n    console.log(\"objective\", objective);\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      style: {\n        paddingTop: \"17.5px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      onChange: e => {\n        const value = e.target.value;\n        const newArr = [...objectives];\n        const newObj = {\n          [`partCount${index}`]: value,\n          id: objective.id\n        };\n        newArr[index] = newObj;\n        setObjectiveState(newArr);\n      },\n      value: objective[`partCount${index}`],\n      className: \"form-control no-right-border-input\",\n      type: \"text\",\n      placeholder: \"Example: Define the roles and responsibilities of a project manager\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 57\n      }\n    }), /*#__PURE__*/React.createElement(InputGroupAddon, {\n      className: \"counter-addon-transparent\",\n      addonType: \"append\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(InputGroupText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 133\n      }\n    }, typeof objective.length !== \"undefined\" ? 160 - objective.length : 160))), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 53\n      }\n    })));\n  }))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"float-right-absolute\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: () => {\n      if (objectives.length <= 5) {\n        setObjectiveState(prevState => {\n          return [...prevState, {\n            [`partOne${objectives.length}`]: \"\",\n            id: uuid()\n          }];\n        });\n      } else {\n        NotificationManager.warning(\"Error - You cannot enter TOO many inputs as there is a MAXIMUM of 6 TOTAL inputs/fields...Please use your existing fields.\", \"Too many fields/inputs!\", 4500);\n      }\n    },\n    outline: true,\n    color: \"secondary-2x\",\n    className: \"btn-square secondary\",\n    style: {\n      width: \"35%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 37\n    }\n  }, \"Add Another Field\"))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"course-custom-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 37\n    }\n  }, \"What are the requirements or prerequisites for taking your course?\"))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"couse-create-p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 37\n    }\n  }, \"List the required skills, experience, tools or equipment learners should have prior to taking your course. \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 176\n    }\n  }), \" If there are no requirements, use this space as an opportunity to lower the barrier for beginners.\"))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 37\n    }\n  }, UploadProjectFile), /*#__PURE__*/React.createElement(Dropzone, {\n    onChangeStatus: handleChangeStatus,\n    maxFiles: 1,\n    multiple: false,\n    canCancel: false,\n    inputContent: \"Drop A File\",\n    styles: {\n      dropzone: {\n        width: '100%',\n        height: 50\n      },\n      dropzoneActive: {\n        borderColor: 'green'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 41\n    }\n  })))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    className: \"mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    style: {\n      width: \"100%\"\n    },\n    color: \"info-2x\",\n    outline: true,\n    className: \"btn-square-info\",\n    className: \"mr-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 41\n    }\n  }, \"Submit & Continue w/Process\"))))))))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    userData: state.auth.data\n  };\n};\n\nexport default connect(mapStateToProps, {})(withRouter(CreateNewCoursePageOne));","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/learning/educationalCoursesSeminars/createCourse/helpers/pages/pageOne/index.js"],"names":["React","Fragment","useState","useEffect","useMemo","useRef","Dropzone","Row","Col","Card","CardBody","Form","FormGroup","Label","Input","Button","InputGroup","InputGroupText","InputGroupAddon","DatePicker","useForm","Controller","connect","withRouter","Link","ProjectTitle","ClientName","ProjectRate","ProjectStatus","ProgressLevel","ProjectSize","Small","Medium","Big","StartingDate","EndingDate","EnterSomeDetails","UploadProjectFile","Add","Cancel","Done","Doing","Maps","reduxFormHelpers","optionHelper","Select","helperFunctions","SimpleMDE","uuid","NotificationManager","courseTitle","courseCategory","descriptionChecks","courseCategoryOptions","CourseCreationHashtagHelper","CreateNewCoursePageOne","courseCategoryGeneratedRef","customHashtagsRef","objectives","setObjectiveState","partCount0","id","partCount1","partCount2","partCount3","hashtags","setHashtags","wordCount","setWordCount","register","handleSubmit","control","reset","getValues","setValue","setError","clearErrors","formState","errors","mode","reValidateMode","currentValues","handleChangeStatus","status","meta","file","console","log","renderErrorsFormUploadContent","e","onSubmission","data","calculateWordCountOnBlur","split","length","autofocusNoSpellcheckerOptions","autofocus","spellChecker","label","check","type","name","placeholder","onChange","message","field","current","blur","selectedOption","paddingTop","description","ref","value","onBlur","map","objective","index","target","newArr","newObj","prevState","warning","width","dropzone","height","dropzoneActive","borderColor","mapStateToProps","state","userData","auth"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect, useMemo, useRef } from \"react\";\nimport Dropzone from 'react-dropzone-uploader';\nimport { Row, Col, Card, CardBody, Form, FormGroup, Label, Input, Button, InputGroup, InputGroupText, InputGroupAddon } from 'reactstrap';\nimport DatePicker from \"react-datepicker\";\nimport { useForm, Controller } from 'react-hook-form';\nimport { connect } from 'react-redux';\nimport { withRouter, Link } from 'react-router-dom';\nimport { ProjectTitle, ClientName, ProjectRate, ProjectStatus, ProgressLevel, ProjectSize, Small, Medium, Big, StartingDate, EndingDate, EnterSomeDetails, UploadProjectFile, Add, Cancel, Done, Doing, Maps } from '../../../../../../../../constant';\nimport reduxFormHelpers from \"./helpers/reduxFormHelpers.js\";\nimport optionHelper from \"./helpers/options/options.js\";\nimport Select from \"react-select\";\nimport helperFunctions from \"./helpers/helperFunctions/index.js\";\nimport SimpleMDE from \"react-simplemde-editor\";\nimport \"./styles.css\";\nimport uuid from \"react-uuid\";\nimport { NotificationManager } from \"react-notifications\";\n\nconst courseTitle = reduxFormHelpers().courseTitle;\nconst courseCategory = reduxFormHelpers().courseCategory;\nconst descriptionChecks = reduxFormHelpers().descriptionChecks;\n\n\nconst { courseCategoryOptions } = optionHelper;\n\nconst { CourseCreationHashtagHelper } = helperFunctions;\n\n\nconst CreateNewCoursePageOne = () => {\n    // create ref's local\n    const courseCategoryGeneratedRef = useRef(null);\n    const customHashtagsRef = useRef(null);\n    const [ objectives, setObjectiveState ] = useState([\n        {\n            partCount0: \"\",\n            id: uuid()\n        }, {\n            partCount1: \"\",\n            id: uuid()\n        }, {\n            partCount2: \"\",\n            id: uuid()\n        }, {\n            partCount3: \"\",\n            id: uuid()\n        }\n    ]);\n\n    // state init\n    const [ hashtags, setHashtags ] = useState([]);\n    const [ wordCount, setWordCount ] = useState(0);\n    // redux form logic\n    const { register, handleSubmit, control, reset, getValues, setValue, setError, clearErrors, formState: { errors }} = useForm({\n        mode: \"onTouched\",\n        reValidateMode: \"onBlur\"\n    });\n    // collect redux-hook-form values\n    const currentValues = getValues();\n\n    // called every time a file's `status` changes\n    const handleChangeStatus = ({ meta, file }, status) => {\n        console.log(\"handleChangeStatus ran...\", meta, file, status);\n    }\n\n    const renderErrorsFormUploadContent = (e, errors) => {\n        console.log(\"renderErrorsFormUploadContent ran...\", e, errors);\n    }\n    const onSubmission = (e, data) => {\n        console.log(\"onSubmission ran...\", e, data);\n    }\n    const calculateWordCountOnBlur = (data) => {\n        const wordCount = data.split(\" \").length;\n\n        setWordCount(wordCount);\n    }\n    const autofocusNoSpellcheckerOptions = useMemo(() => {\n        return {\n          autofocus: false,\n          spellChecker: false,\n        };\n    }, []);\n    console.log(\"objectives\", objectives);\n    return (\n        <Fragment>\n            <Row>\n                <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                    <Card>\n                        <CardBody>\n                            <Form className=\"theme-form\" onSubmit={handleSubmit(onSubmission, (e, errors) => {\n                                return renderErrorsFormUploadContent(e, errors);\n                            })}>\n                            <Row>\n                                <Col>\n                                    <FormGroup>\n                                        <Label>{courseTitle.label}</Label>\n                                        <Input {...courseTitle.check(setError, register)} className=\"form-control\" type={courseTitle.type} name={courseTitle.name} placeholder={courseTitle.placeholder} onChange={(e) => courseTitle.onChange(e, setValue)} value={currentValues.courseTitle} />\n                                        {errors.courseTitle ? <span className=\"span-tooltip\">{errors.courseTitle.message}</span> : null}\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col sm=\"6\" md=\"6\" lg=\"6\" xl=\"6\">\n                                    <FormGroup>\n                                        <Label>{courseCategory.label}</Label>\n                                        <Controller\n                                            control={control}\n                                            name={courseCategory.name}\n                                            {...courseCategory.check(setError, register, clearErrors)}\n                                            render={({ field }) => (\n                                                <Select\n                                                    {...field}\n                                                    ref={courseCategoryGeneratedRef}\n                                                    autoBlur={true}\n                                                    placeholder={courseCategory.placeholder}\n                                                    defaultValue={null}\n                                                    onMenuClose={() => {\n                                                        courseCategoryGeneratedRef.current.blur();\n                                                    }}\n                                                    value={currentValues.courseCategory}\n                                                    onChange={(selectedOption) => courseCategory.onChange(selectedOption, setValue, clearErrors)}\n                                                    options={courseCategoryOptions}\n                                                />\n                                            )}\n                                        />\n                                        {errors.courseCategory ? <span className=\"span-tooltip\">{errors.courseCategory.message}</span> : null}\n                                    </FormGroup>\n                                </Col>\n                                <Col sm=\"6\" md=\"6\" lg=\"6\" xl=\"6\">\n                                    <FormGroup>\n                                        <Label>{ProgressLevel}</Label>\n                                        <Input type=\"select\"  name=\"progress_level\" className=\"form-control digits\">\n                                            <option value=\"25\">{\"25\"}</option>\n                                            <option value=\"50\">{\"50\"}</option>\n                                            <option value=\"70\">{\"70\"}</option>\n                                            <option value=\"100\">{\"100\"}</option>\n                                        </Input>\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                                    <CourseCreationHashtagHelper customHashtagsRef={customHashtagsRef} setHashtags={setHashtags} hashtags={hashtags} setError={setError} register={register} values={currentValues} errors={errors} setValue={setValue} clearErrors={clearErrors} control={control} />\n                                </Col>\n                            </Row>\n                            <Row style={{ paddingTop: \"20px\" }}>\n                                <Col sm=\"12\" md=\"6\" lg=\"6\" xl=\"6\">\n                                    {/* <FormGroup>\n                                        <Label>{courseTitle.label}</Label>\n                                        <Input {...courseTitle.check(setError, register)} className=\"form-control\" type={courseTitle.type} name={courseTitle.name} placeholder={courseTitle.placeholder} onChange={(e) => courseTitle.onChange(e, setValue)} value={currentValues.courseTitle} />\n                                        {errors.courseTitle ? <span className=\"span-tooltip\">{errors.courseTitle.message}</span> : null}\n                                    </FormGroup> */}\n                                </Col>\n                                <Col sm=\"12\" md=\"6\" lg=\"6\" xl=\"6\">\n                                    {/* <FormGroup>\n                                        <Label>{courseTitle.label}</Label>\n                                        <Input {...courseTitle.check(setError, register)} className=\"form-control\" type={courseTitle.type} name={courseTitle.name} placeholder={courseTitle.placeholder} onChange={(e) => courseTitle.onChange(e, setValue)} value={currentValues.courseTitle} />\n                                        {errors.courseTitle ? <span className=\"span-tooltip\">{errors.courseTitle.message}</span> : null}\n                                    </FormGroup> */}\n                                </Col>\n                            </Row>\n                            <Row style={{ paddingTop: \"20px\" }}>\n                                <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                                <Label>Enter a description for your listing (markdown is accepted - use the attached buttons to customize the way your content looks)</Label>\n                                    <Controller\n                                        control={control}\n                                        name={descriptionChecks.name}\n                                        value={currentValues.description}\n                                        {...descriptionChecks.check(clearErrors, register, setError, currentValues, wordCount)}\n                                        render={({ field: { ref, onChange, value, ...field }}) => (\n                                            <Fragment>\n                                                <SimpleMDE\n                                                    ref={ref}\n                                                    {...field}\n                                                    placeholder={descriptionChecks.placeholder}\n                                                    name={descriptionChecks.name}\n                                                    onFocus={() => {\n                                                        clearErrors(\"description\");\n                                                    }}\n                                                    onBlur={() => descriptionChecks.onBlur(clearErrors, setError, currentValues, wordCount)}\n                                                    id=\"editor_container\"\n                                                    onChange={(value) => {\n                                                        onChange(value);\n                                                        // return value for hook-form logic\n                                                        return value;\n                                                    }}\n                                                    value={value}\n                                                    options={autofocusNoSpellcheckerOptions}\n                                                />\n                                                {errors.description ? <span className=\"span-tooltip\">{errors.description.message}</span> : null}\n                                            </Fragment>\n                                        )}\n                                    />\n                                    {/* <FormGroup>\n                                        <Label>{courseTitle.label}</Label>\n                                        <Input {...courseTitle.check(setError, register)} className=\"form-control\" type={courseTitle.type} name={courseTitle.name} placeholder={courseTitle.placeholder} onChange={(e) => courseTitle.onChange(e, setValue)} value={currentValues.courseTitle} />\n                                        {errors.courseTitle ? <span className=\"span-tooltip\">{errors.courseTitle.message}</span> : null}\n                                    </FormGroup> */}\n                                </Col>\n                            </Row>\n                            <hr />\n                            <Row>\n                                <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                                    <h4 className={\"course-custom-title\"}>The following descriptions will be publicly visible on your Course Landing Page and will have a direct impact on your course performance. These descriptions will help learners decide if your course is right for them.</h4>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                                    <p className={\"couse-create-p\"}>The following descriptions will be publicly visible on your Course Landing Page and will have a direct impact on your course performance. These descriptions will help learners decide if your course is right for them.</p>\n                                    <h5 className={\"h5-custom-course\"}>What will students learn in your course?</h5>\n                                    You must enter at least 4 learning <a href={\"\"} className={\"important-course-link\"}>objectives or outcomes</a> that learners can expect to achieve after completing your course.\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                                    {objectives.map((objective, index) => {\n                                        console.log(\"objective\", objective);\n                                        return (\n                                            <Fragment>\n                                                <FormGroup style={{ paddingTop: \"17.5px\" }}>\n                                                    <InputGroup>\n                                                        <Input onChange={(e) => {\n                                                            const value = e.target.value;\n                                                            \n                                                            const newArr = [...objectives];\n                                                            const newObj = { [`partCount${index}`]: value, id: objective.id };\n                                                            newArr[index] = newObj;\n\n                                                            setObjectiveState(newArr);\n\n                                                        }} value={objective[`partCount${index}`]} className=\"form-control no-right-border-input\" type=\"text\" placeholder={\"Example: Define the roles and responsibilities of a project manager\"}/>\n                                                        <InputGroupAddon className={\"counter-addon-transparent\"} addonType=\"append\"><InputGroupText>{typeof objective.length !== \"undefined\" ? 160 - objective.length : 160}</InputGroupText></InputGroupAddon>\n                                                    </InputGroup>\n                                                    <hr />\n                                                </FormGroup>\n                                            </Fragment>\n                                        );\n                                    })}\n                                </Col>\n                            </Row>\n                            <Row>\n                                <div className={\"float-right-absolute\"}>\n                                    <Button onClick={() => {\n                                        if (objectives.length <= 5) {\n                                            setObjectiveState(prevState => {\n                                                return [...prevState, { [`partOne${objectives.length}`]: \"\", id: uuid() }]\n                                            })\n                                        } else {\n                                            NotificationManager.warning(\"Error - You cannot enter TOO many inputs as there is a MAXIMUM of 6 TOTAL inputs/fields...Please use your existing fields.\", \"Too many fields/inputs!\", 4500);\n                                        }\n                                    }} outline color={\"secondary-2x\"} className={\"btn-square secondary\"} style={{ width: \"35%\" }}>Add Another Field</Button>\n                                </div>\n                            </Row>\n                            <Row>\n                                <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                                    <h4 className={\"course-custom-title\"}>What are the requirements or prerequisites for taking your course?</h4>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                                    <p className={\"couse-create-p\"}>List the required skills, experience, tools or equipment learners should have prior to taking your course. <br /> If there are no requirements, use this space as an opportunity to lower the barrier for beginners.</p>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                <FormGroup>\n                                    <Label>{UploadProjectFile}</Label>\n                                        <Dropzone\n                                            onChangeStatus={handleChangeStatus}\n                                            maxFiles={1}\n                                            multiple={false}\n                                            canCancel={false}\n                                            inputContent=\"Drop A File\"\n                                            styles={{\n                                                dropzone: { width: '100%', height: 50 },\n                                                dropzoneActive: { borderColor: 'green' },\n                                            }}\n                                        />\n                                </FormGroup>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <FormGroup className=\"mb-0\">\n                                        <Button style={{ width: \"100%\" }} color=\"info-2x\" outline className={\"btn-square-info\"} className=\"mr-3\">Submit & Continue w/Process</Button>\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n                            </Form>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n        </Fragment>\n    );\n}\nconst mapStateToProps = (state) => {\n    return {\n        userData: state.auth.data\n    }\n}\nexport default connect(mapStateToProps, { })(withRouter(CreateNewCoursePageOne));"]},"metadata":{},"sourceType":"module"}