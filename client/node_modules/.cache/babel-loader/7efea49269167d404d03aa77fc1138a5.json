{"ast":null,"code":"import React, { useState, useRef, useEffect, Fragment } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\n\nconst HookHelpers = () => {\n  const startBidCheck = {\n    check: (setError, register) => {\n      return { ...register(\"startBid\", {\n          required: {\n            value: true,\n            message: \"You MUST enter AT least 1 characters to 10 characters\"\n          },\n          minLength: {\n            value: 1,\n            message: \"You must enter AT Least 1 characters\"\n          },\n          maxLength: {\n            value: 10,\n            message: \"You may ONLY enter 10 characters or less\"\n          },\n          onBlur: e => {// code here...\n            // setError(\"startBid\", {\n            //     type: \"manual\",\n            //     message: \"Enter something at least??\",\n            // });\n          }\n        })\n      };\n    },\n    name: \"startBid\",\n    placeholder: \"Enter a starting bid...\",\n    type: \"number\",\n    label: \"Enter a starting bid\"\n  };\n  const reservePrice = {\n    check: (setError, register) => {\n      return { ...register(\"reservePrice\", {\n          required: {\n            value: true,\n            message: \"You MUST enter AT least 1 characters to 10 characters\"\n          },\n          minLength: {\n            value: 1,\n            message: \"You must enter AT Least 1 characters\"\n          },\n          maxLength: {\n            value: 10,\n            message: \"You may ONLY enter 10 characters or less\"\n          },\n          onBlur: e => {// code here...\n          }\n        })\n      };\n    },\n    name: \"reservePrice\",\n    placeholder: \"Enter a reserve price...\",\n    type: \"number\",\n    label: \"Enter a reserve price\"\n  };\n  const biddingIncrementInterval = {\n    label: \"Listing Timespan/Length - Please select a listing length (up-to a maximum of 10 days however we suggest 7 days on average)\",\n    check: (setError, register, clearErrors) => {\n      return { ...register(\"biddingIncrementInterval\", {\n          required: {\n            value: true,\n            message: \"You must select a value before proceeding\"\n          },\n          onBlur: e => {\n            console.log(\"onBlur...!\", e);\n            const value = e.target.value;\n            setTimeout(() => {\n              // clear error after proper selection\n              if (typeof value !== \"undefined\" && Object.keys(value).length > 0) {\n                clearErrors(\"biddingIncrementInterval\");\n              } else {\n                // set error as nothing was selected (blank 'click-off' selection of selector)\n                setError(\"biddingIncrementInterval\", {\n                  type: \"manual\",\n                  message: \"You haven't selected a 'timespan' & a selection is required before proceeding\"\n                });\n              }\n            }, 50);\n          }\n        })\n      };\n    }\n  };\n  return {\n    startBidCheck,\n    reservePrice,\n    listingTimespan\n  };\n};\n\nexport default HookHelpers;","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/softwareHardwareExchanges/software/createListing/multiStepPages/pageThree/helpers/slideUpPane/helpers/reactHookFormRelated.js"],"names":["React","useState","useRef","useEffect","Fragment","useForm","Controller","HookHelpers","startBidCheck","check","setError","register","required","value","message","minLength","maxLength","onBlur","e","name","placeholder","type","label","reservePrice","biddingIncrementInterval","clearErrors","console","log","target","setTimeout","Object","keys","length","listingTimespan"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, Fragment } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\n\n\n\nconst HookHelpers = () => {\n    \n    const startBidCheck = {\n        check: (setError, register) => {\n            return (\n                {...register(\"startBid\", { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 1 characters to 10 characters\"\n                }, minLength: {\n                    value: 1,\n                    message: \"You must enter AT Least 1 characters\"\n                }, maxLength: {\n                    value: 10,\n                    message: \"You may ONLY enter 10 characters or less\"\n                }, onBlur: (e) => {\n                    // code here...\n                    // setError(\"startBid\", {\n                    //     type: \"manual\",\n                    //     message: \"Enter something at least??\",\n                    // });\n                }})}\n            )\n        },\n        name: \"startBid\",\n        placeholder: \"Enter a starting bid...\",\n        type: \"number\",\n        label: \"Enter a starting bid\"\n    };\n    const reservePrice = {\n        check: (setError, register) => {\n            return (\n                {...register(\"reservePrice\", { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 1 characters to 10 characters\"\n                }, minLength: {\n                    value: 1,\n                    message: \"You must enter AT Least 1 characters\"\n                }, maxLength: {\n                    value: 10,\n                    message: \"You may ONLY enter 10 characters or less\"\n                }, onBlur: (e) => {\n                    // code here...\n                }})}\n            )\n        },\n        name: \"reservePrice\",\n        placeholder: \"Enter a reserve price...\",\n        type: \"number\",\n        label: \"Enter a reserve price\"\n    };\n    const biddingIncrementInterval = {\n        label: \"Listing Timespan/Length - Please select a listing length (up-to a maximum of 10 days however we suggest 7 days on average)\",\n        check: (setError, register, clearErrors) => {\n            return (\n                {...register(\"biddingIncrementInterval\", { required: {\n                    value: true,\n                    message: \"You must select a value before proceeding\"\n                }, onBlur: (e) => {\n\n                    console.log(\"onBlur...!\", e);\n\n                    const value = e.target.value;\n\n                    setTimeout(() => {\n                        // clear error after proper selection\n                        if ((typeof value !== \"undefined\") && (Object.keys(value).length > 0)) {\n                            clearErrors(\"biddingIncrementInterval\");\n                        } else {\n                            // set error as nothing was selected (blank 'click-off' selection of selector)\n                            setError(\"biddingIncrementInterval\", {\n                                type: \"manual\",\n                                message: \"You haven't selected a 'timespan' & a selection is required before proceeding\",\n                            });\n                        }\n                    }, 50);\n                }})}\n            );\n        }\n    }\n\n    return {\n        startBidCheck,\n        reservePrice,\n        listingTimespan\n    }\n}\n\n\nexport default HookHelpers;"]},"metadata":{},"sourceType":"module"}