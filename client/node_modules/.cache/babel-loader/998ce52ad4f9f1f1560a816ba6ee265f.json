{"ast":null,"code":"var _jsxFileName = \"/home/kali/Documents/cybersecurity/client/src/components/dashboard/learning/educationalCoursesSeminars/createCourse/helpers/pages/pageTwo/index.js\";\nimport React, { Fragment, useRef, useState } from \"react\";\nimport \"./styles.css\";\nimport { connect } from \"react-redux\";\nimport Dropzone from 'react-dropzone-uploader';\nimport helpers from \"./helpers/miscFunctions.js\";\nimport { Button, Row, Col, Card, CardBody } from 'reactstrap';\nconst {\n  renderCustomButtonDropzone,\n  handleSubmit\n} = helpers;\n\nconst CreateNewCoursePageTwo = () => {\n  const dropzoneRef = useRef(null); // state initialization\n\n  const [changeOptions, setChangeOptions] = useState(null);\n  const [fileMetaData, setMetaFileData] = useState(null);\n  const [currentFileSelectedUpload, setCurrentUploadFileStatus] = useState(null);\n\n  const getUploadParams = _ref => {\n    let {\n      meta\n    } = _ref;\n    return {\n      url: 'https://httpbin.org/post'\n    };\n  }; // called every time a file's `status` changes\n\n\n  const handleChangeStatus = (_ref2, status) => {\n    let {\n      meta,\n      file\n    } = _ref2;\n    console.log(\"handleChangeStatus ran...\", meta, file, status);\n  };\n\n  const CustomInputHelper = _ref3 => {\n    let {\n      accept,\n      onFiles\n    } = _ref3;\n    const text = \"Drop a file OR select to browse local data\";\n    return /*#__PURE__*/React.createElement(\"label\", {\n      className: \"custom-input-dropzone-copy\",\n      style: {\n        backgroundColor: '#007bff',\n        color: '#fff',\n        cursor: 'pointer',\n        padding: 15,\n        borderRadius: 3\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }\n    }, text, /*#__PURE__*/React.createElement(\"input\", {\n      style: {\n        display: 'none'\n      },\n      type: \"file\",\n      accept: accept,\n      multiple: false,\n      className: \"custom-dropzone-input-actual-input\",\n      onChange: e => {\n        const file = e.target.files[0]; // set current file path to convert to readable URL later\n\n        setCurrentFilePathData(imageChangeAndConversion(file)); // set status update for current file\n\n        setCurrentUploadFileStatus(file); // mark file as READY \n\n        setFileReadyStatus(true); // update \"Dropzone\" component state (NOT this react component state).\n\n        onFiles([file]);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Dropzone, {\n    ref: dropzoneRef,\n    PreviewComponent: data => renderPreviewOfFile(data),\n    maxFiles: 1,\n    autoUpload: true,\n    onChangeStatus: functions => {\n      setChangeOptions(functions);\n    },\n    submitButtonDisabled: false,\n    InputComponent: CustomInputHelper,\n    getFilesFromEvent: null,\n    onSubmit: onSubmitHelper,\n    SubmitButtonComponent: (data, e) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"absolutely-position-submit-btn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 41\n        }\n      }, renderCustomButtonDropzone(data, setMetaFileData, currentFileSelectedUpload));\n    },\n    multiple: false,\n    canCancel: false,\n    styles: {\n      dropzone: {\n        height: 375\n      },\n      dropzoneActive: {\n        borderColor: 'green'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 29\n    }\n  }))))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    userData: state.auth.data\n  };\n};\n\nexport default connect(mapStateToProps, {})(CreateNewCoursePageTwo);","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/learning/educationalCoursesSeminars/createCourse/helpers/pages/pageTwo/index.js"],"names":["React","Fragment","useRef","useState","connect","Dropzone","helpers","Button","Row","Col","Card","CardBody","renderCustomButtonDropzone","handleSubmit","CreateNewCoursePageTwo","dropzoneRef","changeOptions","setChangeOptions","fileMetaData","setMetaFileData","currentFileSelectedUpload","setCurrentUploadFileStatus","getUploadParams","meta","url","handleChangeStatus","status","file","console","log","CustomInputHelper","accept","onFiles","text","backgroundColor","color","cursor","padding","borderRadius","display","e","target","files","setCurrentFilePathData","imageChangeAndConversion","setFileReadyStatus","data","renderPreviewOfFile","functions","onSubmitHelper","dropzone","height","dropzoneActive","borderColor","mapStateToProps","state","userData","auth"],"mappings":"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","sourcesContent":["import React, { Fragment, useRef, useState } from \"react\";\nimport \"./styles.css\";\nimport { connect } from \"react-redux\";\nimport Dropzone from 'react-dropzone-uploader';\nimport helpers from \"./helpers/miscFunctions.js\";\nimport { Button, Row, Col, Card, CardBody } from 'reactstrap';\n\nconst { \n    renderCustomButtonDropzone,\n    handleSubmit \n} = helpers;\n\nconst CreateNewCoursePageTwo = () => {\n\n    const dropzoneRef = useRef(null);\n    // state initialization\n    const [ changeOptions, setChangeOptions ] = useState(null);\n    const [ fileMetaData, setMetaFileData ] = useState(null);\n    const [ currentFileSelectedUpload, setCurrentUploadFileStatus ] = useState(null);\n\n    const getUploadParams = ({ meta }) => { \n        return { \n          url: 'https://httpbin.org/post' \n        }\n    }\n    \n\n    // called every time a file's `status` changes\n    const handleChangeStatus = ({ meta, file }, status) => {\n        console.log(\"handleChangeStatus ran...\", meta, file, status);\n    }\n    const CustomInputHelper = ({ accept, onFiles }) => {\n\n        const text = \"Drop a file OR select to browse local data\";\n    \n        return (\n            <label className=\"custom-input-dropzone-copy\" style={{ backgroundColor: '#007bff', color: '#fff', cursor: 'pointer', padding: 15, borderRadius: 3 }}>\n                {text}\n                <input\n                    style={{ display: 'none' }}\n                    type=\"file\"\n                    accept={accept}\n                    multiple={false}\n                    className={\"custom-dropzone-input-actual-input\"}\n                    onChange={e => {\n                        const file = e.target.files[0];\n                        // set current file path to convert to readable URL later\n                        setCurrentFilePathData(imageChangeAndConversion(file));\n                        // set status update for current file\n                        setCurrentUploadFileStatus(file);\n                        // mark file as READY \n                        setFileReadyStatus(true);\n                        // update \"Dropzone\" component state (NOT this react component state).\n                        onFiles([file])\n                    }}\n                />\n            </label>\n        );\n    }\n    return (\n        <Fragment>\n            <Row>\n                <Col sm=\"12\">\n                    <Card>\n                        <CardBody>\n                            <Dropzone\n                                ref={dropzoneRef}\n                                PreviewComponent={(data) => renderPreviewOfFile(data)}\n                                maxFiles={1}\n                                autoUpload={true}\n                                onChangeStatus={(functions) => {\n                                    setChangeOptions(functions);\n                                }}\n                                submitButtonDisabled={false}\n                                InputComponent={CustomInputHelper}\n                                getFilesFromEvent={null}\n                                onSubmit={onSubmitHelper}\n                                SubmitButtonComponent={(data, e) => {\n                                    return (\n                                        <div className=\"absolutely-position-submit-btn\">\n                                            {renderCustomButtonDropzone(data, setMetaFileData, currentFileSelectedUpload)}\n                                        </div>\n                                    );\n                                }}\n                                multiple={false}\n                                canCancel={false}\n                                styles={{\n                                    dropzone: { height: 375 },\n                                    dropzoneActive: { borderColor: 'green' },\n                                }}\n                            />\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n        </Fragment>\n    );\n}\nconst mapStateToProps = (state) => {\n    return {\n        userData: state.auth.data\n    }\n}\nexport default connect(mapStateToProps, { })(CreateNewCoursePageTwo);"]},"metadata":{},"sourceType":"module"}