{"ast":null,"code":"import React,{Fragment,useState,Component}from'react';import{Media,Popover,PopoverHeader,PopoverBody,ListGroup,ListGroupItem}from'reactstrap';import moment from\"moment\";import start_conversion from'../../../../../assets/images/start-conversion.jpg';const handleCheckGroupType=(e,setGroupType,setMessageListState,setChannelState)=>{const checked=e.target.checked;setChannelState(null);setMessageListState([]);setGroupType({groupType:checked===true?\"Public Convo's\":\"Private Convo's\",checked});};const handleMessagePressPrivateConvos=(message,channel,sb,setMessageInput,addNewMessageCallback)=>{console.log(\"handleMessagePressPrivateConvos clicked/ran...\");const params=new sb.UserMessageParams();params.message=message;params.customType=\"private\";// params.data = DATA;\nparams.mentionType='users';params.mentionedUserIds=[];// params.metaArrays = [   // A pair of key-value\n//     new sendBirds.me.MessageMetaArray('itemType', ['tablet']),\n//     new sendBirds.me.MessageMetaArray('quality', ['best', 'good'])\n// ];\nparams.translationTargetLanguages=['en'];// French and German\nparams.pushNotificationDeliveryOption='default';// Either 'default' or 'suppress'\nchannel.sendUserMessage(params,(userMessage,error)=>{if(error){// Handle error.\nconsole.log(\"error sendUserMessage... : \",error);}else{const messageId=userMessage.messageId;console.log(\"Send message SUCCESS private convos --- :\",messageId,userMessage);setMessageInput(\"\");addNewMessageCallback(userMessage);}});};const handleListItemClickPrivateChannel=(item,SBData,setChannelState,setMessageListState)=>{console.log(\"handleListItemClickPrivateChannel clicked... : \",item);SBData.GroupChannel.getChannel(item.url,(groupChannel,error)=>{if(error){// Handle error.\nconsole.log(\"getChannel : \",error);}else{const params=new SBData.MessageListParams();// create param's for message log/chat\nparams.prevResultSize=25;params.nextResultSize=25;params.isInclusive=true;params.reverse=true;params.replyType=\"all\";params.includeThreadInfo=true;params.includeParentMessageInfo=true;// create timestamp\nconst TIMESTAMP=Date.now();groupChannel.markAsDelivered();setChannelState(groupChannel);groupChannel.markAsRead();// Pass the params as an argument to the `getMessagesByTimestamp()` method.\ngroupChannel.getMessagesByTimestamp(TIMESTAMP,params,(messages,error)=>{if(error){// Handle error.\nconsole.log(\"error getMessagesByTimestamp :\",error);}else{console.log(\"messages\",messages);setMessageListState(messages);}});}});};const renderOnlineStatus=(item,userData)=>{for(let index=0;index<item.members.length;index++){const user=item.members[index];if(user.userId!==userData.uniqueId){return user.connectionStatus;}if(item.members.length-1===index){return user.connectionStatus;}}};const renderNicknamePrivateGroup=(item,userData)=>{for(let index=0;index<item.members.length;index++){const user=item.members[index];if(user.userId!==userData.uniqueId){return user.nickname;}if(item.members.length-1===index){return user.nickname;}}};const renderNickname=(item,userData)=>{for(let index=0;index<item.operators.length;index++){const user=item.operators[index];if(user.userId!==userData.uniqueId){return user.nickname;}if(item.operators.length-1===index){return\"Chat Invite Pending...\";}}};const renderStatus=(item,userData)=>{for(let index=0;index<item.operators.length;index++){const user=item.operators[index];if(user.userId!==userData.uniqueId){return user.isActive;}if(item.operators.length-1===index){return user.isActive;}}};const renderLastProfilePicMainUser=user=>{const reversed=user.profilePicsVideos.reverse();for(let index=0;index<reversed.length;index++){const item=reversed[index];if(item.type.includes(\"image\")){return\"\".concat(process.env.REACT_APP_ASSET_LINK,\"/\").concat(item.link);break;}}};const onKeyPressPrivateSubmitted=e=>{console.log(\"onKeyPressPrivateSubmitted pressed...\",e);};const onKeyPressPublicSubmitted=e=>{console.log(\"onKeyPressPublicSubmitted pressed...\",e);};class RenderMessagListActualMessages extends Component{constructor(props){super(props);this.handleMessageClickPopover=(item,index)=>{console.log(\"handleMessageClickPopover item/index\",item,index);const{channel}=this.props;if(channel!==null){console.log(\"CHANNEL ISNT NULL handleMessageClickPopover ~ ...\");this.setState({[\"popoverCustom\".concat(channel.url).concat(index)]:true});}};this.closeMessagePopover=(item,index)=>{console.log(\"closeMessagePopover item/index\",item,index);const{channel}=this.props;if(channel!==null){console.log(\"CHANNEL ISNT NULL closeMessagePopover ~ ...\");this.setState({[\"popoverCustom\".concat(channel.url).concat(index)]:false});}};this.state={};}render(){const{messageList,channel,userData}=this.props;return/*#__PURE__*/React.createElement(Fragment,null,/*#__PURE__*/React.createElement(\"ul\",{className:\"ul-messages-custom-reinvented\"},messageList.length>0?messageList.map((item,index)=>{{/* const participators = allMembers.chats.find(x => x.id === item.sender); */}return/*#__PURE__*/React.createElement(\"li\",{key:index,className:\"clearfix\"},/*#__PURE__*/React.createElement(\"div\",{id:\"popoverCustom\".concat(channel.url).concat(index),onClick:()=>this.handleMessageClickPopover(item,index),className:\"message add-hover-message-convo-individual my-message \".concat(item._sender.userId!==userData.uniqueId?'':'float-right')},/*#__PURE__*/React.createElement(Popover,{className:\"custom-chat-popover\",isOpen:this.state[\"popoverCustom\".concat(channel.url).concat(index)],toggle:()=>this.closeMessagePopover(item,index),placement:\"bottom\",target:\"popoverCustom\".concat(channel.url).concat(index)},/*#__PURE__*/React.createElement(\"div\",{onMouseLeave:()=>{console.log(\"mouse LEFT.\");this.closeMessagePopover(item,index);}},/*#__PURE__*/React.createElement(PopoverHeader,null,\" ~ Message Actions/Modification's ~ \"),/*#__PURE__*/React.createElement(PopoverBody,null,/*#__PURE__*/React.createElement(ListGroup,null,/*#__PURE__*/React.createElement(ListGroupItem,{className:\"list-group-item-action custom-message-action-listgroup\",onClick:()=>null,active:true},\"DELETE This Message (Permanently Remove)\"),/*#__PURE__*/React.createElement(ListGroupItem,{className:\"list-group-item-action custom-message-action-listgroup\",onClick:()=>null},\"PIN This Message (Note MSG As IMPORTANT)\"),/*#__PURE__*/React.createElement(ListGroupItem,{className:\"list-group-item-action custom-message-action-listgroup\",onClick:()=>null,active:true},\"MARK As Read (Show You've Seen It)\"),/*#__PURE__*/React.createElement(ListGroupItem,{className:\"list-group-item-action custom-message-action-listgroup\",onClick:()=>null},\"ADD Extra Data To Existing MSG (MODIFY Message)\"))))),/*#__PURE__*/React.createElement(Media,{src:item._sender.plainProfileUrl,className:\"rounded-circle \".concat(item._sender.userId!==userData.uniqueId?'float-left':'float-right',\" custom-chat-user-image chat-user-img img-30\"),alt:\"\"}),/*#__PURE__*/React.createElement(\"div\",{className:\"message-data text-right\"},/*#__PURE__*/React.createElement(\"span\",{className:item._sender.userId!==userData.uniqueId?\"message-data-time message-data-time-custom-left float-left\":\"message-data-time message-data-time-custom-right float-right\"},moment(item.createdAt).format(\"MM/DD/YYYY, h:mm:ss a\"),\" by \",item._sender.nickname)),item.message,/*#__PURE__*/React.createElement(\"div\",{className:item._sender.userId!==userData.uniqueId?\"delivery-status-wrapper-right\":\"delivery-status-wrapper-left\"},/*#__PURE__*/React.createElement(\"p\",{className:item._sender.userId!==userData.uniqueId?\"delivery-confirmation-right\":\"delivery-confirmation-left\"},item.sendingStatus===\"succeeded\"?\"Delivered!\":\"Pending Delivery...\"))));}):/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Media,{className:\"img-fluid\",src:start_conversion,alt:\"start conversion \"}))));}}export default{handleCheckGroupType,handleListItemClickPrivateChannel,renderOnlineStatus,renderNicknamePrivateGroup,renderNickname,renderStatus,handleMessagePressPrivateConvos,renderLastProfilePicMainUser,onKeyPressPublicSubmitted,onKeyPressPrivateSubmitted,RenderMessagListActualMessages};","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/src/components/dashboard/messaging/main/helpers/mainHelperFunctions.js"],"names":["React","Fragment","useState","Component","Media","Popover","PopoverHeader","PopoverBody","ListGroup","ListGroupItem","moment","start_conversion","handleCheckGroupType","e","setGroupType","setMessageListState","setChannelState","checked","target","groupType","handleMessagePressPrivateConvos","message","channel","sb","setMessageInput","addNewMessageCallback","console","log","params","UserMessageParams","customType","mentionType","mentionedUserIds","translationTargetLanguages","pushNotificationDeliveryOption","sendUserMessage","userMessage","error","messageId","handleListItemClickPrivateChannel","item","SBData","GroupChannel","getChannel","url","groupChannel","MessageListParams","prevResultSize","nextResultSize","isInclusive","reverse","replyType","includeThreadInfo","includeParentMessageInfo","TIMESTAMP","Date","now","markAsDelivered","markAsRead","getMessagesByTimestamp","messages","renderOnlineStatus","userData","index","members","length","user","userId","uniqueId","connectionStatus","renderNicknamePrivateGroup","nickname","renderNickname","operators","renderStatus","isActive","renderLastProfilePicMainUser","reversed","profilePicsVideos","type","includes","process","env","REACT_APP_ASSET_LINK","link","onKeyPressPrivateSubmitted","onKeyPressPublicSubmitted","RenderMessagListActualMessages","constructor","props","handleMessageClickPopover","setState","closeMessagePopover","state","render","messageList","map","_sender","plainProfileUrl","createdAt","format","sendingStatus"],"mappings":"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","sourcesContent":["import React,{ Fragment, useState, Component } from 'react';\nimport { Media, Popover, PopoverHeader, PopoverBody, ListGroup, ListGroupItem } from 'reactstrap';\nimport moment from \"moment\";\nimport start_conversion from '../../../../../assets/images/start-conversion.jpg';\n\nconst handleCheckGroupType = (e, setGroupType, setMessageListState, setChannelState) => {\n    const checked = e.target.checked;\n\n    setChannelState(null);\n\n    setMessageListState([]);\n\n    setGroupType({\n        groupType: checked === true ? \"Public Convo's\" : \"Private Convo's\",\n        checked\n    })\n}\nconst handleMessagePressPrivateConvos = (message, channel, sb, setMessageInput, addNewMessageCallback) => {\n    console.log(\"handleMessagePressPrivateConvos clicked/ran...\");\n\n    const params = new sb.UserMessageParams();\n\n    params.message = message;\n    params.customType = \"private\";\n    // params.data = DATA;\n    params.mentionType = 'users';\n    params.mentionedUserIds = [];\n    // params.metaArrays = [   // A pair of key-value\n    //     new sendBirds.me.MessageMetaArray('itemType', ['tablet']),\n    //     new sendBirds.me.MessageMetaArray('quality', ['best', 'good'])\n    // ];\n    params.translationTargetLanguages = ['en'];   // French and German\n    params.pushNotificationDeliveryOption = 'default';  // Either 'default' or 'suppress'\n\n    channel.sendUserMessage(params, (userMessage, error) => {\n        if (error) {\n            // Handle error.\n            console.log(\"error sendUserMessage... : \", error);\n        } else {\n            const messageId = userMessage.messageId;\n\n            console.log(\"Send message SUCCESS private convos --- :\", messageId, userMessage);\n\n            setMessageInput(\"\");\n\n            addNewMessageCallback(userMessage);\n        }\n    });\n}\nconst handleListItemClickPrivateChannel = (item, SBData, setChannelState, setMessageListState) => {\n    console.log(\"handleListItemClickPrivateChannel clicked... : \", item);\n\n    SBData.GroupChannel.getChannel(item.url, (groupChannel, error) => {\n        if (error) {\n            // Handle error.\n            console.log(\"getChannel : \", error);\n        } else {\n            const params = new SBData.MessageListParams();\n            // create param's for message log/chat\n            params.prevResultSize = 25;\n            params.nextResultSize = 25;\n            params.isInclusive = true;\n            params.reverse = true;\n            params.replyType = \"all\";\n            params.includeThreadInfo = true;\n            params.includeParentMessageInfo = true;\n            // create timestamp\n            const TIMESTAMP = Date.now();\n\n            groupChannel.markAsDelivered();\n\n            setChannelState(groupChannel);\n\n            groupChannel.markAsRead();\n\n            // Pass the params as an argument to the `getMessagesByTimestamp()` method.\n            groupChannel.getMessagesByTimestamp(TIMESTAMP, params, (messages, error) => {\n                if (error) {\n                    // Handle error.\n                    console.log(\"error getMessagesByTimestamp :\", error);\n                } else {\n                    console.log(\"messages\", messages);\n\n                    setMessageListState(messages);\n                }\n            });\n        }\n    });\n}\nconst renderOnlineStatus = (item, userData) => {\n    for (let index = 0; index < item.members.length; index++) {\n        const user = item.members[index];\n        if (user.userId !== userData.uniqueId) {\n            return user.connectionStatus;\n        }\n        if ((item.members.length - 1) === index) {\n            return user.connectionStatus;\n        }\n    }\n}\nconst renderNicknamePrivateGroup = (item, userData) => {\n    for (let index = 0; index < item.members.length; index++) {\n        const user = item.members[index];\n        if (user.userId !== userData.uniqueId) {\n            return user.nickname;\n        }\n        if ((item.members.length - 1) === index) {\n            return user.nickname;\n        }\n    }\n}\nconst renderNickname = (item, userData) => {\n    for (let index = 0; index < item.operators.length; index++) {\n        const user = item.operators[index];\n        if (user.userId !== userData.uniqueId) {\n            return user.nickname;\n        }\n        if ((item.operators.length - 1) === index) {\n            return \"Chat Invite Pending...\";\n        }\n    }\n}\nconst renderStatus = (item, userData) => {\n    for (let index = 0; index < item.operators.length; index++) {\n        const user = item.operators[index];\n        if (user.userId !== userData.uniqueId) {\n            return user.isActive;\n        }\n        if ((item.operators.length - 1) === index) {\n            return user.isActive;\n        }\n    }\n}\nconst renderLastProfilePicMainUser = (user) => {\n    const reversed = user.profilePicsVideos.reverse();\n\n    for (let index = 0; index < reversed.length; index++) {\n        const item = reversed[index];\n        if (item.type.includes(\"image\")) {\n            return `${process.env.REACT_APP_ASSET_LINK}/${item.link}`;\n            break;\n        }\n    }\n}\nconst onKeyPressPrivateSubmitted = (e) => {\n    console.log(\"onKeyPressPrivateSubmitted pressed...\", e);\n}\nconst onKeyPressPublicSubmitted = (e) => {\n    console.log(\"onKeyPressPublicSubmitted pressed...\", e);\n}\nclass RenderMessagListActualMessages extends Component {\nconstructor (props) {\n    super(props);\n\n    this.state = {\n\n    }\n}\n    handleMessageClickPopover = (item, index) => {\n        console.log(\"handleMessageClickPopover item/index\", item, index);\n\n        const { channel } = this.props;\n\n        if (channel !== null) {\n\n            console.log(\"CHANNEL ISNT NULL handleMessageClickPopover ~ ...\");\n\n            this.setState({\n                [`popoverCustom${channel.url}${index}`]: true\n            }) \n        } \n    }\n\n    closeMessagePopover = (item, index) => {\n        console.log(\"closeMessagePopover item/index\", item, index);\n\n        const { channel } = this.props;\n\n        if (channel !== null) {\n\n            console.log(\"CHANNEL ISNT NULL closeMessagePopover ~ ...\");\n\n            this.setState({\n                [`popoverCustom${channel.url}${index}`]: false\n            })   \n        } \n    }\n    render () {\n        const { messageList, channel, userData } = this.props;\n        return (\n            <Fragment>\n                <ul className={\"ul-messages-custom-reinvented\"}>\n                    {messageList.length > 0 ? messageList.map((item, index) => {\n                        {/* const participators = allMembers.chats.find(x => x.id === item.sender); */}\n                        return (\n                            <li key={index} className=\"clearfix\">\n                                <div id={`popoverCustom${channel.url}${index}`} onClick={() => this.handleMessageClickPopover(item, index)} className={`message add-hover-message-convo-individual my-message ${item._sender.userId !== userData.uniqueId ? '' : 'float-right'}`}>\n                                    <Popover className={\"custom-chat-popover\"} isOpen={this.state[`popoverCustom${channel.url}${index}`]} toggle={() => this.closeMessagePopover(item, index)} placement=\"bottom\" target={`popoverCustom${channel.url}${index}`}>\n                                        <div onMouseLeave={() => {\n                                            console.log(\"mouse LEFT.\");\n\n                                            this.closeMessagePopover(item, index)\n                                        }}>\n                                            <PopoverHeader> ~ Message Actions/Modification's ~ </PopoverHeader>\n                                            <PopoverBody>\n                                                <ListGroup>\n                                                    <ListGroupItem className=\"list-group-item-action custom-message-action-listgroup\" onClick={() => null} active>{\"DELETE This Message (Permanently Remove)\"}</ListGroupItem>\n                                                    <ListGroupItem className=\"list-group-item-action custom-message-action-listgroup\" onClick={() => null}>{\"PIN This Message (Note MSG As IMPORTANT)\"}</ListGroupItem>\n                                                    <ListGroupItem className=\"list-group-item-action custom-message-action-listgroup\" onClick={() => null} active>{\"MARK As Read (Show You've Seen It)\"}</ListGroupItem>\n                                                    <ListGroupItem className=\"list-group-item-action custom-message-action-listgroup\" onClick={() => null}>{\"ADD Extra Data To Existing MSG (MODIFY Message)\"}</ListGroupItem>\n                                                </ListGroup>\n                                            </PopoverBody>\n                                        </div>\n                                    </Popover>\n                                    <Media src={item._sender.plainProfileUrl}\n                                        className={`rounded-circle ${item._sender.userId !== userData.uniqueId ? 'float-left' : 'float-right'} custom-chat-user-image chat-user-img img-30`} alt=\"\" />\n                                    <div className=\"message-data text-right\">\n                                        <span className={item._sender.userId !== userData.uniqueId ? \"message-data-time message-data-time-custom-left float-left\" : \"message-data-time message-data-time-custom-right float-right\"}>{moment(item.createdAt).format(\"MM/DD/YYYY, h:mm:ss a\")} by {item._sender.nickname}</span>\n                                    </div>\n                                    {item.message}\n                                    <div className={item._sender.userId !== userData.uniqueId ? \"delivery-status-wrapper-right\" : \"delivery-status-wrapper-left\"}>\n                                        <p className={item._sender.userId !== userData.uniqueId ? \"delivery-confirmation-right\" : \"delivery-confirmation-left\"}>{item.sendingStatus === \"succeeded\" ? \"Delivered!\" : \"Pending Delivery...\"}</p>\n                                    </div>\n                                </div>\n                            </li>\n                        );\n                    }) : <div>\n                        <Media className=\"img-fluid\" src={start_conversion} alt=\"start conversion \" />\n                    </div>}\n                </ul>\n            </Fragment>\n        );\n    }\n}\nexport default {\n    handleCheckGroupType,\n    handleListItemClickPrivateChannel,\n    renderOnlineStatus,\n    renderNicknamePrivateGroup,\n    renderNickname,\n    renderStatus,\n    handleMessagePressPrivateConvos,\n    renderLastProfilePicMainUser,\n    onKeyPressPublicSubmitted,\n    onKeyPressPrivateSubmitted,\n    RenderMessagListActualMessages\n};"]},"metadata":{},"sourceType":"module"}