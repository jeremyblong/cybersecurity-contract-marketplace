{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/src/components/dashboard/learning/educationalCoursesSeminars/createCourse/helpers/pages/pageTwo/helpers/miscFunctions.js\";\n\nimport React, { Fragment } from \"react\";\nimport { Button } from 'reactstrap';\nimport axios from \"axios\";\nimport { NotificationManager } from 'react-notifications';\nimport { updateCourseInformationData } from \"../../../../../../../../../redux/actions/courses/createNewCourse/index.js\";\nimport { confirmAlert } from 'react-confirm-alert';\n\nvar handleSubmit = function handleSubmit(runSubmit, currentFileSelectedUpload, fileMetaData, setProgress, setShowInitialState, setVideoFileState, setLoadedState, alreadyExisted, setCurrentFilePathData) {\n  var data = new FormData();\n  data.append(\"file\", currentFileSelectedUpload);\n  data.append(\"meta\", fileMetaData);\n  var config = {\n    onUploadProgress: function onUploadProgress(progressEvent) {\n      var percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n      setProgress(percentCompleted);\n    },\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  };\n  axios.post(\"\".concat(process.env.REACT_APP_BASE_URL, \"/upload/misc/file/softare/listing/sale\"), data, config).then(function (res) {\n    if (res.data.message === \"Successfully uploaded file!\") {\n      console.log(res.data);\n      var file = res.data.file; // save file to redux state...\n\n      if (alreadyExisted === true) {\n        var configuration = {\n          method: 'get',\n          url: \"\".concat(process.env.REACT_APP_ASSET_LINK, \"/\").concat(file.link),\n          responseType: 'blob'\n        };\n        axios(configuration).then(function (response) {\n          // create fileready\n          var fileeee = new File([response.data], file.name); // set current file path to convert to readable URL later\n\n          setCurrentFilePathData(URL.createObjectURL(fileeee));\n          setVideoFileState(file);\n          setShowInitialState(false);\n          setLoadedState(true);\n        });\n      } else {\n        setVideoFileState(file);\n        setShowInitialState(false);\n        setLoadedState(true);\n      }\n\n      NotificationManager.success(\"We've successfully uploaded your file! Please proceed filling out your information or add more files.\", 'Successfully uploaded file!', 4500);\n      runSubmit();\n    } else {\n      console.log(\"Err\", res.data);\n    }\n  }).catch(function (err) {\n    console.log(err);\n  });\n};\n\nvar renderCustomButtonDropzone = function renderCustomButtonDropzone(data, setMetaFileData, currentFileSelectedUpload, fileMetaData, fileReady, setFileReadyStatus, setProgress, setVideoFileState, setShowInitialState, setLoadedState, alreadyExisted, setCurrentFilePathData) {\n  var meta = data.files[0].meta;\n\n  if (currentFileSelectedUpload === null) {\n    return null;\n  } else {\n    if (fileReady === true) {\n      return /*#__PURE__*/React.createElement(Fragment, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        style: {\n          marginTop: \"7.5px\"\n        },\n        onClick: function onClick(e) {\n          e.preventDefault(); // file meta data for next action\n\n          setMetaFileData(meta); // set file status as ready or prepared.\n\n          setFileReadyStatus(false);\n          var runSubmit = data.onSubmit;\n          handleSubmit(runSubmit, currentFileSelectedUpload, fileMetaData, setProgress, setShowInitialState, setVideoFileState, setLoadedState, alreadyExisted, setCurrentFilePathData);\n        },\n        className: \"btn-air-info\",\n        color: \"info\",\n        size: \"md\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }\n      }, \"Submit & Upload New File!\"));\n    } else {\n      return /*#__PURE__*/React.createElement(Fragment, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        style: {\n          marginTop: \"7.5px\"\n        },\n        onClick: function onClick() {\n          NotificationManager.warning(\"File is NOT ready to upload yet! Please wait for the preparation steps to complete before submitting.\", 'Still preparing!', 4500);\n        },\n        className: \"btn-air-light\",\n        color: \"light\",\n        size: \"md\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }\n      }, \"Submit & Upload New File!\"));\n    }\n  }\n};\n\nvar handleDeletionConfirmationOpen = function handleDeletionConfirmationOpen() {\n  var defaultState = [{\n    sections: []\n  }];\n  confirmAlert({\n    title: 'Clear/Delete ALL Items?',\n    message: \"Are you SURE you'd like to clear your ENTIRE 'Course Content' already filled out information? This will start a clear-slate and you will start from the beginning. You can also save this data to your account before deleting so please consider that as well.\",\n    buttons: [{\n      label: 'Yes, CLEAR!',\n      onClick: function onClick() {\n        updateCourseInformationData(defaultState);\n      }\n    }, {\n      label: 'No, CANCEL',\n      onClick: function onClick() {// do nothing.\n      }\n    }]\n  });\n};\n\nvar calculateFileType = function calculateFileType(type) {\n  switch (type) {\n    case \"video/mp4\":\n      return \"mp4\";\n      break;\n\n    case \"image/png\":\n      return \"png\";\n      break;\n\n    case \"image/jpeg\":\n      return \"jpeg\";\n      break;\n\n    case \"image/jpg\":\n      return \"jpg\";\n      break;\n\n    case \"image/gif\":\n      return \"gif\";\n      break;\n\n    case \"image/bmp\":\n      return \"bmp\";\n      break;\n\n    case \"application/pdf\":\n      return \"pdf\";\n      break;\n\n    case \"text/csv\":\n      return \"csv\";\n      break;\n\n    case \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\":\n      return \"xlsx\";\n      break;\n\n    case \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\":\n      return \"docx\";\n      break;\n\n    case \"video/webm\":\n      return \"webm\";\n      break;\n\n    case \"audio/mpeg\":\n      return \"mp3\";\n      break;\n\n    default:\n      break;\n  }\n};\n\nvar onSubmitHelper = function onSubmitHelper(files, allFiles) {\n  allFiles.forEach(function (file) {\n    file.remove();\n  });\n};\n\nexport default {\n  renderCustomButtonDropzone: renderCustomButtonDropzone,\n  handleSubmit: handleSubmit,\n  onSubmitHelper: onSubmitHelper,\n  calculateFileType: calculateFileType,\n  handleDeletionConfirmationOpen: handleDeletionConfirmationOpen\n};","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/src/components/dashboard/learning/educationalCoursesSeminars/createCourse/helpers/pages/pageTwo/helpers/miscFunctions.js"],"names":["React","Fragment","Button","axios","NotificationManager","updateCourseInformationData","confirmAlert","handleSubmit","runSubmit","currentFileSelectedUpload","fileMetaData","setProgress","setShowInitialState","setVideoFileState","setLoadedState","alreadyExisted","setCurrentFilePathData","data","FormData","append","config","onUploadProgress","progressEvent","percentCompleted","Math","round","loaded","total","headers","post","process","env","REACT_APP_BASE_URL","then","res","message","console","log","file","configuration","method","url","REACT_APP_ASSET_LINK","link","responseType","response","fileeee","File","name","URL","createObjectURL","success","catch","err","renderCustomButtonDropzone","setMetaFileData","fileReady","setFileReadyStatus","meta","files","marginTop","e","preventDefault","onSubmit","warning","handleDeletionConfirmationOpen","defaultState","sections","title","buttons","label","onClick","calculateFileType","type","onSubmitHelper","allFiles","forEach","remove"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,mBAAT,QAAoC,qBAApC;AACA,SAASC,2BAAT,QAA4C,2EAA5C;AACA,SAASC,YAAT,QAA6B,qBAA7B;;AAGA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,SAAD,EAAYC,yBAAZ,EAAuCC,YAAvC,EAAqDC,WAArD,EAAkEC,mBAAlE,EAAuFC,iBAAvF,EAA0GC,cAA1G,EAA0HC,cAA1H,EAA0IC,sBAA1I,EAAqK;AAEtL,MAAMC,IAAI,GAAG,IAAIC,QAAJ,EAAb;AAEAD,EAAAA,IAAI,CAACE,MAAL,CAAY,MAAZ,EAAoBV,yBAApB;AACAQ,EAAAA,IAAI,CAACE,MAAL,CAAY,MAAZ,EAAoBT,YAApB;AAEA,MAAMU,MAAM,GAAG;AACXC,IAAAA,gBAAgB,EAAE,0BAACC,aAAD,EAAmB;AACjC,UAAIC,gBAAgB,GAAGC,IAAI,CAACC,KAAL,CAAYH,aAAa,CAACI,MAAd,GAAuB,GAAxB,GAA+BJ,aAAa,CAACK,KAAxD,CAAvB;AAEAhB,MAAAA,WAAW,CAACY,gBAAD,CAAX;AACH,KALU;AAMXK,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AANE,GAAf;AAWAzB,EAAAA,KAAK,CAAC0B,IAAN,WAAcC,OAAO,CAACC,GAAR,CAAYC,kBAA1B,6CAAsFf,IAAtF,EAA4FG,MAA5F,EAAoGa,IAApG,CAAyG,UAACC,GAAD,EAAS;AAC9G,QAAIA,GAAG,CAACjB,IAAJ,CAASkB,OAAT,KAAqB,6BAAzB,EAAwD;AACpDC,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACjB,IAAhB;AAEA,UAAQqB,IAAR,GAAiBJ,GAAG,CAACjB,IAArB,CAAQqB,IAAR,CAHoD,CAKpD;;AAEA,UAAIvB,cAAc,KAAK,IAAvB,EAA6B;AACzB,YAAMwB,aAAa,GAAG;AAClBC,UAAAA,MAAM,EAAE,KADU;AAElBC,UAAAA,GAAG,YAAKX,OAAO,CAACC,GAAR,CAAYW,oBAAjB,cAAyCJ,IAAI,CAACK,IAA9C,CAFe;AAGlBC,UAAAA,YAAY,EAAE;AAHI,SAAtB;AAMAzC,QAAAA,KAAK,CAACoC,aAAD,CAAL,CAAqBN,IAArB,CAA0B,UAACY,QAAD,EAAc;AACpC;AACA,cAAMC,OAAO,GAAG,IAAIC,IAAJ,CAAS,CAACF,QAAQ,CAAC5B,IAAV,CAAT,EAA0BqB,IAAI,CAACU,IAA/B,CAAhB,CAFoC,CAGpC;;AACAhC,UAAAA,sBAAsB,CAACiC,GAAG,CAACC,eAAJ,CAAoBJ,OAApB,CAAD,CAAtB;AACAjC,UAAAA,iBAAiB,CAACyB,IAAD,CAAjB;AACA1B,UAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACAE,UAAAA,cAAc,CAAC,IAAD,CAAd;AACH,SARD;AASH,OAhBD,MAgBO;AACHD,QAAAA,iBAAiB,CAACyB,IAAD,CAAjB;AACA1B,QAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACAE,QAAAA,cAAc,CAAC,IAAD,CAAd;AACH;;AAEDV,MAAAA,mBAAmB,CAAC+C,OAApB,0GAAqI,6BAArI,EAAoK,IAApK;AAEA3C,MAAAA,SAAS;AACZ,KAhCD,MAgCO;AACH4B,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBH,GAAG,CAACjB,IAAvB;AACH;AACJ,GApCD,EAoCGmC,KApCH,CAoCS,UAACC,GAAD,EAAS;AACdjB,IAAAA,OAAO,CAACC,GAAR,CAAYgB,GAAZ;AACH,GAtCD;AAuCH,CAzDD;;AA2DA,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACrC,IAAD,EAAOsC,eAAP,EAAwB9C,yBAAxB,EAAmDC,YAAnD,EAAiE8C,SAAjE,EAA4EC,kBAA5E,EAAgG9C,WAAhG,EAA6GE,iBAA7G,EAAgID,mBAAhI,EAAqJE,cAArJ,EAAqKC,cAArK,EAAqLC,sBAArL,EAAgN;AAE/O,MAAQ0C,IAAR,GAAiBzC,IAAI,CAAC0C,KAAL,CAAW,CAAX,CAAjB,CAAQD,IAAR;;AAEA,MAAIjD,yBAAyB,KAAK,IAAlC,EAAwC;AACpC,WAAO,IAAP;AACH,GAFD,MAEO;AACH,QAAI+C,SAAS,KAAK,IAAlB,EAAwB;AACpB,0BACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAE;AAAEI,UAAAA,SAAS,EAAE;AAAb,SAAf;AAAuC,QAAA,OAAO,EAAE,iBAACC,CAAD,EAAO;AACnDA,UAAAA,CAAC,CAACC,cAAF,GADmD,CAEnD;;AACAP,UAAAA,eAAe,CAACG,IAAD,CAAf,CAHmD,CAInD;;AACAD,UAAAA,kBAAkB,CAAC,KAAD,CAAlB;AAEA,cAAMjD,SAAS,GAAGS,IAAI,CAAC8C,QAAvB;AAEAxD,UAAAA,YAAY,CAACC,SAAD,EAAYC,yBAAZ,EAAuCC,YAAvC,EAAqDC,WAArD,EAAkEC,mBAAlE,EAAuFC,iBAAvF,EAA0GC,cAA1G,EAA0HC,cAA1H,EAA0IC,sBAA1I,CAAZ;AACH,SAVD;AAUG,QAAA,SAAS,EAAC,cAVb;AAU4B,QAAA,KAAK,EAAC,MAVlC;AAUyC,QAAA,IAAI,EAAC,IAV9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADJ,CADJ;AAeH,KAhBD,MAgBO;AACH,0BACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAE;AAAE4C,UAAAA,SAAS,EAAE;AAAb,SAAf;AAAuC,QAAA,OAAO,EAAE,mBAAM;AAClDxD,UAAAA,mBAAmB,CAAC4D,OAApB,0GAAqI,kBAArI,EAAyJ,IAAzJ;AACH,SAFD;AAEG,QAAA,SAAS,EAAC,eAFb;AAE6B,QAAA,KAAK,EAAC,OAFnC;AAE2C,QAAA,IAAI,EAAC,IAFhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADJ,CADJ;AAOH;AACJ;AACJ,CAjCD;;AAkCA,IAAMC,8BAA8B,GAAG,SAAjCA,8BAAiC,GAAM;AACzC,MAAMC,YAAY,GAAG,CAAC;AAClBC,IAAAA,QAAQ,EAAE;AADQ,GAAD,CAArB;AAGA7D,EAAAA,YAAY,CAAC;AACT8D,IAAAA,KAAK,EAAE,yBADE;AAETjC,IAAAA,OAAO,EAAE,iQAFA;AAGTkC,IAAAA,OAAO,EAAE,CACP;AACEC,MAAAA,KAAK,EAAE,aADT;AAEEC,MAAAA,OAAO,EAAE,mBAAM;AACXlE,QAAAA,2BAA2B,CAAC6D,YAAD,CAA3B;AACH;AAJH,KADO,EAOP;AACEI,MAAAA,KAAK,EAAE,YADT;AAEEC,MAAAA,OAAO,EAAE,mBAAM,CACX;AACH;AAJH,KAPO;AAHA,GAAD,CAAZ;AAkBH,CAtBD;;AAuBA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,IAAD,EAAU;AAChC,UAAQA,IAAR;AACI,SAAK,WAAL;AACI,aAAO,KAAP;AACA;;AACJ,SAAK,WAAL;AACI,aAAO,KAAP;AACA;;AACJ,SAAK,YAAL;AACI,aAAO,MAAP;AACA;;AACJ,SAAK,WAAL;AACI,aAAO,KAAP;AACA;;AACJ,SAAK,WAAL;AACI,aAAO,KAAP;AACA;;AACJ,SAAK,WAAL;AACI,aAAO,KAAP;AACA;;AACJ,SAAK,iBAAL;AACI,aAAO,KAAP;AACA;;AACJ,SAAK,UAAL;AACI,aAAO,KAAP;AACA;;AACJ,SAAK,mEAAL;AACI,aAAO,MAAP;AACA;;AACJ,SAAK,yEAAL;AACI,aAAO,MAAP;AACA;;AACJ,SAAK,YAAL;AACI,aAAO,MAAP;AACA;;AACJ,SAAK,YAAL;AACI,aAAO,KAAP;AACA;;AACJ;AACI;AAtCR;AAwCH,CAzCD;;AA0CA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACf,KAAD,EAAQgB,QAAR,EAAqB;AACxCA,EAAAA,QAAQ,CAACC,OAAT,CAAiB,UAACtC,IAAD,EAAU;AACvBA,IAAAA,IAAI,CAACuC,MAAL;AACH,GAFD;AAGH,CAJD;;AAKA,eAAe;AACXvB,EAAAA,0BAA0B,EAA1BA,0BADW;AAEX/C,EAAAA,YAAY,EAAZA,YAFW;AAGXmE,EAAAA,cAAc,EAAdA,cAHW;AAIXF,EAAAA,iBAAiB,EAAjBA,iBAJW;AAKXP,EAAAA,8BAA8B,EAA9BA;AALW,CAAf","sourcesContent":["import React, { Fragment } from \"react\";\nimport { Button } from 'reactstrap';\nimport axios from \"axios\";\nimport { NotificationManager } from 'react-notifications';\nimport { updateCourseInformationData } from \"../../../../../../../../../redux/actions/courses/createNewCourse/index.js\";\nimport { confirmAlert } from 'react-confirm-alert';\n\n\nconst handleSubmit = (runSubmit, currentFileSelectedUpload, fileMetaData, setProgress, setShowInitialState, setVideoFileState, setLoadedState, alreadyExisted, setCurrentFilePathData) => {\n\n    const data = new FormData();\n\n    data.append(\"file\", currentFileSelectedUpload);\n    data.append(\"meta\", fileMetaData);\n\n    const config = {\n        onUploadProgress: (progressEvent) => {\n            let percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n\n            setProgress(percentCompleted);\n        },\n        headers: {\n            'Content-Type': 'multipart/form-data'\n        }\n    };\n\n    axios.post(`${process.env.REACT_APP_BASE_URL}/upload/misc/file/softare/listing/sale`, data, config).then((res) => {\n        if (res.data.message === \"Successfully uploaded file!\") {\n            console.log(res.data);\n\n            const { file } = res.data;\n\n            // save file to redux state...\n\n            if (alreadyExisted === true) {\n                const configuration = {\n                    method: 'get',\n                    url: `${process.env.REACT_APP_ASSET_LINK}/${file.link}`,\n                    responseType: 'blob'\n                };\n    \n                axios(configuration).then((response) => {\n                    // create fileready\n                    const fileeee = new File([response.data], file.name); \n                    // set current file path to convert to readable URL later\n                    setCurrentFilePathData(URL.createObjectURL(fileeee));\n                    setVideoFileState(file);\n                    setShowInitialState(false);\n                    setLoadedState(true);\n                })\n            } else {\n                setVideoFileState(file);\n                setShowInitialState(false);\n                setLoadedState(true);   \n            }\n\n            NotificationManager.success(`We've successfully uploaded your file! Please proceed filling out your information or add more files.`, 'Successfully uploaded file!', 4500);\n\n            runSubmit();\n        } else {\n            console.log(\"Err\", res.data);\n        }\n    }).catch((err) => {\n        console.log(err);\n    })\n};\n\nconst renderCustomButtonDropzone = (data, setMetaFileData, currentFileSelectedUpload, fileMetaData, fileReady, setFileReadyStatus, setProgress, setVideoFileState, setShowInitialState, setLoadedState, alreadyExisted, setCurrentFilePathData) => {\n\n    const { meta } = data.files[0];\n\n    if (currentFileSelectedUpload === null) {\n        return null;\n    } else {\n        if (fileReady === true) {\n            return (\n                <Fragment>\n                    <Button style={{ marginTop: \"7.5px\" }} onClick={(e) => {\n                        e.preventDefault();\n                        // file meta data for next action\n                        setMetaFileData(meta);\n                        // set file status as ready or prepared.\n                        setFileReadyStatus(false);\n\n                        const runSubmit = data.onSubmit;\n\n                        handleSubmit(runSubmit, currentFileSelectedUpload, fileMetaData, setProgress, setShowInitialState, setVideoFileState, setLoadedState, alreadyExisted, setCurrentFilePathData);\n                    }} className=\"btn-air-info\" color=\"info\" size=\"md\">Submit & Upload New File!</Button>\n                </Fragment>\n            );\n        } else {\n            return (\n                <Fragment>\n                    <Button style={{ marginTop: \"7.5px\" }} onClick={() => {\n                        NotificationManager.warning(`File is NOT ready to upload yet! Please wait for the preparation steps to complete before submitting.`, 'Still preparing!', 4500);\n                    }} className=\"btn-air-light\" color=\"light\" size=\"md\">Submit & Upload New File!</Button>\n                </Fragment>\n            );\n        }\n    }\n}\nconst handleDeletionConfirmationOpen = () => {\n    const defaultState = [{\n        sections: []\n    }];\n    confirmAlert({\n        title: 'Clear/Delete ALL Items?',\n        message: \"Are you SURE you'd like to clear your ENTIRE 'Course Content' already filled out information? This will start a clear-slate and you will start from the beginning. You can also save this data to your account before deleting so please consider that as well.\",\n        buttons: [\n          {\n            label: 'Yes, CLEAR!',\n            onClick: () => {\n                updateCourseInformationData(defaultState);\n            }\n          },\n          {\n            label: 'No, CANCEL',\n            onClick: () => {\n                // do nothing.\n            }\n          }\n        ]\n    });\n}\nconst calculateFileType = (type) => {\n    switch (type) {\n        case \"video/mp4\":\n            return \"mp4\";\n            break;\n        case \"image/png\":\n            return \"png\";\n            break;\n        case \"image/jpeg\":\n            return \"jpeg\";\n            break;\n        case \"image/jpg\":\n            return \"jpg\";\n            break;\n        case \"image/gif\":\n            return \"gif\";\n            break;\n        case \"image/bmp\":\n            return \"bmp\";\n            break;\n        case \"application/pdf\":\n            return \"pdf\";\n            break;\n        case \"text/csv\":\n            return \"csv\";\n            break;\n        case \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\":\n            return \"xlsx\";\n            break;\n        case \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\":\n            return \"docx\";\n            break;\n        case \"video/webm\":\n            return \"webm\";\n            break;\n        case \"audio/mpeg\":\n            return \"mp3\";\n            break;\n        default:\n            break;\n    }\n}\nconst onSubmitHelper = (files, allFiles) => {\n    allFiles.forEach((file) => {\n        file.remove();\n    })\n}\nexport default {\n    renderCustomButtonDropzone,\n    handleSubmit,\n    onSubmitHelper,\n    calculateFileType,\n    handleDeletionConfirmationOpen\n};"]},"metadata":{},"sourceType":"module"}