{"ast":null,"code":"var _jsxFileName = \"/home/kali/Documents/cybersecurity/client/src/components/dashboard/homepage/employers/main/mainLandingPage.js\";\nimport React, { Component } from 'react';\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\n\nclass MainLandingPageEmployerHelper extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    if (\"geolocation\" in navigator) {\n      console.log(\"Available\");\n      navigator.geolocation.getCurrentPosition(position => {\n        console.log(\"Latitude is :\", position.coords.latitude); //\n\n        console.log(\"Longitude is :\", position.coords.longitude);\n        const location = {\n          longitude: position.coords.longitude,\n          latitude: position.coords.latitude\n        };\n        const {\n          uniqueId\n        } = this.props.userData;\n        axios.post(`${process.env.REACT_APP_BASE_URL}/save/user/geolocation`, {\n          accountType: \"employers\",\n          location,\n          id: uniqueId\n        }).then(res => {\n          if (res.data.message === \"Successfully saved location data to account!\") {\n            console.log(res.data);\n          } else {\n            console.log(\"err\", res.data);\n          }\n        }).catch(err => {\n          console.log(err);\n        });\n      });\n    } else {\n      console.log(\"Not Available\");\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }\n    }, \"~ dashboard employer! ~\"));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    userData: state.auth.data\n  };\n};\n\nexport default connect(mapStateToProps, {})(MainLandingPageEmployerHelper);","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/homepage/employers/main/mainLandingPage.js"],"names":["React","Component","axios","connect","MainLandingPageEmployerHelper","constructor","props","state","componentDidMount","navigator","console","log","geolocation","getCurrentPosition","position","coords","latitude","longitude","location","uniqueId","userData","post","process","env","REACT_APP_BASE_URL","accountType","id","then","res","data","message","catch","err","render","mapStateToProps","auth"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,MAAMC,6BAAN,SAA4CH,SAA5C,CAAsD;AACtDI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa,EAAb;AAGH;;AACGC,EAAAA,iBAAiB,GAAG;AAChB,QAAI,iBAAiBC,SAArB,EAAgC;AAC5BC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AAEAF,MAAAA,SAAS,CAACG,WAAV,CAAsBC,kBAAtB,CAA0CC,QAAD,IAAc;AACnDJ,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BG,QAAQ,CAACC,MAAT,CAAgBC,QAA7C,EADmD,CAEnD;;AACAN,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BG,QAAQ,CAACC,MAAT,CAAgBE,SAA9C;AAEA,cAAMC,QAAQ,GAAG;AACbD,UAAAA,SAAS,EAAEH,QAAQ,CAACC,MAAT,CAAgBE,SADd;AAEbD,UAAAA,QAAQ,EAAEF,QAAQ,CAACC,MAAT,CAAgBC;AAFb,SAAjB;AAKA,cAAM;AAAEG,UAAAA;AAAF,YAAe,KAAKb,KAAL,CAAWc,QAAhC;AAEAlB,QAAAA,KAAK,CAACmB,IAAN,CAAY,GAAEC,OAAO,CAACC,GAAR,CAAYC,kBAAmB,wBAA7C,EAAsE;AAClEC,UAAAA,WAAW,EAAE,WADqD;AAElEP,UAAAA,QAFkE;AAGlEQ,UAAAA,EAAE,EAAEP;AAH8D,SAAtE,EAIGQ,IAJH,CAISC,GAAD,IAAS;AACb,cAAIA,GAAG,CAACC,IAAJ,CAASC,OAAT,KAAqB,8CAAzB,EAAyE;AACrEpB,YAAAA,OAAO,CAACC,GAAR,CAAYiB,GAAG,CAACC,IAAhB;AACH,WAFD,MAEO;AACHnB,YAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBiB,GAAG,CAACC,IAAvB;AACH;AACJ,SAVD,EAUGE,KAVH,CAUUC,GAAD,IAAS;AACdtB,UAAAA,OAAO,CAACC,GAAR,CAAYqB,GAAZ;AACH,SAZD;AAaH,OAzBD;AA0BD,KA7BH,MA6BS;AACLtB,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACH;AACJ;;AACDsB,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADJ,CADJ;AAKH;;AAhDiD;;AAkDtD,MAAMC,eAAe,GAAI3B,KAAD,IAAW;AAC/B,SAAO;AACHa,IAAAA,QAAQ,EAAEb,KAAK,CAAC4B,IAAN,CAAWN;AADlB,GAAP;AAGH,CAJD;;AAKA,eAAe1B,OAAO,CAAC+B,eAAD,EAAkB,EAAlB,CAAP,CAA+B9B,6BAA/B,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\n\nclass MainLandingPageEmployerHelper extends Component {\nconstructor(props) {\n    super(props);\n\n    this.state = {\n\n    }\n}\n    componentDidMount() {\n        if (\"geolocation\" in navigator) {\n            console.log(\"Available\");\n\n            navigator.geolocation.getCurrentPosition((position) => {\n                console.log(\"Latitude is :\", position.coords.latitude);\n                //\n                console.log(\"Longitude is :\", position.coords.longitude);\n\n                const location = {\n                    longitude: position.coords.longitude,\n                    latitude: position.coords.latitude\n                };\n\n                const { uniqueId } = this.props.userData;\n\n                axios.post(`${process.env.REACT_APP_BASE_URL}/save/user/geolocation`, {\n                    accountType: \"employers\",\n                    location,\n                    id: uniqueId\n                }).then((res) => {\n                    if (res.data.message === \"Successfully saved location data to account!\") {\n                        console.log(res.data);\n                    } else {\n                        console.log(\"err\", res.data);\n                    }\n                }).catch((err) => {\n                    console.log(err);\n                });\n            });\n          } else {\n            console.log(\"Not Available\");\n        }\n    }\n    render() {\n        return (\n            <div>\n                <h1>~ dashboard employer! ~</h1>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        userData: state.auth.data\n    }\n}\nexport default connect(mapStateToProps, {  })(MainLandingPageEmployerHelper);\n"]},"metadata":{},"sourceType":"module"}