{"ast":null,"code":"// helpers logic related to mainly to redux-hook-form\nconst MainHooksCustomHelpers=()=>{const calculateWhetherURLIsLegit=data=>{// helper function\nconst isValidHttpUrl=string=>{let url;try{url=new URL(string);}catch(_){return false;}// return protocol data\nreturn url.protocol===\"http:\"||url.protocol===\"https:\";};// finally, check if url is VALID\nif(isValidHttpUrl(data)){// url IS VALID\nreturn true;}else{// url IS NOT VALID - return error string\nreturn false;};};const urlEnteredLinkData={check:(setError,register,clearErrors,setValue,errors,name)=>{return{...register(name,{required:{value:true,message:\"You MUST enter a value for this field between 8 and 75 charactors\"},minLength:{value:8,message:\"You must enter AT Least 8 characters\"},maxLength:{value:75,message:\"You may ONLY enter 75 characters or less\"},onBlur:e=>{// extracted final value from input\nconst value=e.target.value;// check if valid url in helper file.\nconst validOrNot=calculateWhetherURLIsLegit(value);// check if valid!\nif(validOrNot===true){// set value\nsetValue(name,value,{shouldValidate:false});// clear error after setting proper change state\nsetTimeout(()=>{// clear error\nclearErrors(name);},75);}else{setTimeout(()=>{setError(name,{type:\"manual\",message:\"You MUST enter a VALID URL including http/https and ://\"});},75);}}})};},onChange:(e,name,setValue)=>{console.log(\"e name val\",e,name,setValue);// deconstruct actual value\nconst value=e.target.value;console.log(\"valu\",value);// set state without redux form\nsetValue(name,value,{shouldValidate:false});}};const coverLetterChecks={check:(setError,register,clearErrors,name)=>{return{...register(name,{required:{value:true,message:\"You MUST enter a value for this field between 50 and 750 charactors\"},minLength:{value:50,message:\"You must enter AT Least 50 characters\"},maxLength:{value:750,message:\"You may ONLY enter 750 characters or less\"},onBlur:e=>{// deconstruct actual value\nconst value=e.target.value;// deconstruct length\nconst len=value.length;// check if both min/max values met\nif(len>0&&len>=50&&len<=750){// clear error\nclearErrors(name);}else{// set error\nsetTimeout(()=>{setError(name,{type:\"manual\",message:\"You MUST enter between 50 and 750 charectors in total for your cover letter (CV) before proceeding...\"});},50);}}})};},onChange:(e,name,setValue)=>{// deconstruct actual value\nconst value=e.target.value;setValue(name,value,{shouldValidate:true});},label:\"Cover Letter (CV)\",name:\"coverLetterText\",placeholder:\"Enter your cover letter information (or upload in attachments)...\"};const messageToEmployerChecks={check:(setError,register,clearErrors,setValue,name)=>{return{...register(name,{required:{value:true,message:\"You MUST enter a value for this field between 50 and 750 charactors\"},minLength:{value:50,message:\"You must enter AT Least 50 characters\"},maxLength:{value:750,message:\"You may ONLY enter 750 characters or less\"},onBlur:e=>{// deconstruct actual value\nconst value=e.target.value;// deconstruct length\nconst len=value.length;// check if both min/max values met\nif(len>0&&len>=50&&len<=750){// clear error\nclearErrors(name);}else{// set error\nsetTimeout(()=>{setError(name,{type:\"manual\",message:\"You MUST enter between 50 and 750 charectors total while messaging employer before proceeding...\"});},50);}}})};},onChange:(e,name,setValue)=>{// deconstruct actual value\nconst value=e.target.value;setValue(name,value,{shouldValidate:true});},label:\"Message To Employer (Direct to employer)\",name:\"messageToEmployer\",placeholder:\"Enter your 'custom' message to the employer...\"};const physicalOrDigitalChecks={check:(name,register)=>{return{...register(name,{required:{value:true,message:\"You must select a value/option (digital, physical or both) before proceeding\"}})};},placeholder:\"Select your desired hack type (of enabled options)\",name:\"physicalOrDigitalOrBoth\",label:\"Account Type (Digital/Physical-hack type)\"};const participateInBettingWagers={check:(name,register)=>{return{...register(name,{required:{value:true,message:\"You must select a value/option (participate in betting OR not) before proceeding\"}})};},placeholder:\"Select whether or not you'd like to participate in betting/gambling...\",name:\"participateInBettingProcess\",label:\"Would you like to participate in 'betting/waggering' on yourself to WIN more money IF you win the 'hack' or listing competition (WINNER selected by employer at end)\"};const amountWillingToCompleteJob={check:(setError,register,clearErrors,setValue,name)=>{return{...register(name,{required:{value:true,message:\"You MUST enter a value BEFORE proceeding regarding how much you're willing to complete this contract for\"},min:{value:499.99,message:\"You MUST enter a value of AT LEAST $499.99 OR more..\"},onBlur:e=>{// deconstruct actual value\nconst value=e.target.value;// check if both min/max values met\nif(value>=499.99){// clear error\nclearErrors(name);}else{// set error\nsetTimeout(()=>{setError(name,{type:\"manual\",message:\"You MUST enter a value BEFORE proceeding regarding how much you're willing to complete this contract for as well as entering ONLY NUMERIC charactors!\"});},50);}}})};},onChange:(e,name,setValue)=>{// deconstruct actual value\nconst value=e.target.value;setValue(name,value,{shouldValidate:true});},label:\"Enter an amount (USD-$) in which you'd be willing to complete this contract for, this should be the total value (excluding associated fee's) that you'd like to recieve upon completion\",name:\"amountOfMoneyUponCompletion\",placeholder:\"Enter a numerical value in USD ($$$) in which you'd be willing to complete this contract...\"};const approachToSuccessfullyHackCo={check:(setError,register,clearErrors,name)=>{return{...register(name,{required:{value:true,message:\"You MUST enter a value for this field between 50 and 750 charactors\"},minLength:{value:50,message:\"You must enter AT Least 50 characters\"},maxLength:{value:750,message:\"You may ONLY enter 750 characters or less\"},onBlur:e=>{console.log(\"blurred/\");// deconstruct actual value\nconst value=e.target.value;// deconstruct length\nconst len=value.length;// check if both min/max values met\nif(len>0&&len>=50&&len<=750){// clear error\nclearErrors(name);}else{// set error\nsetTimeout(()=>{setError(name,{type:\"manual\",message:\"You MUST enter between 50 and 750 charectors total while 'describing your hack ideas' before proceeding...\"});},50);}}})};},onChange:(e,name,setValue)=>{// deconstruct actual value\nconst value=e.target.value;// set new value\nsetValue(name,value,{shouldValidate:true});},label:\"What is your approach to this 'hack'?\",name:\"technicalApproachToHack\",placeholder:\"Enter your 'approach' to how you expect to successfully hack this company... (don't give out your attack methods - just give a general idea - can be very broad - up to you)\"};// return values to other component\nreturn{urlEnteredLinkData,coverLetterChecks,messageToEmployerChecks,physicalOrDigitalChecks,participateInBettingWagers,approachToSuccessfullyHackCo,amountWillingToCompleteJob};};export default MainHooksCustomHelpers;","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/src/components/dashboard/opportunities/employers/applyToListingHacker/helpers/reactHookFormHelpers.js"],"names":["MainHooksCustomHelpers","calculateWhetherURLIsLegit","data","isValidHttpUrl","string","url","URL","_","protocol","urlEnteredLinkData","check","setError","register","clearErrors","setValue","errors","name","required","value","message","minLength","maxLength","onBlur","e","target","validOrNot","shouldValidate","setTimeout","type","onChange","console","log","coverLetterChecks","len","length","label","placeholder","messageToEmployerChecks","physicalOrDigitalChecks","participateInBettingWagers","amountWillingToCompleteJob","min","approachToSuccessfullyHackCo"],"mappings":"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","sourcesContent":["// helpers logic related to mainly to redux-hook-form\nconst MainHooksCustomHelpers = () => {\n\n    const calculateWhetherURLIsLegit = (data) => {\n        // helper function\n        const isValidHttpUrl = (string) => {\n            let url;\n            \n            try {\n              url = new URL(string);\n            } catch (_) {\n              return false;  \n            }\n            // return protocol data\n            return url.protocol === \"http:\" || url.protocol === \"https:\";\n        }\n        // finally, check if url is VALID\n        if (isValidHttpUrl(data)) {\n            // url IS VALID\n            return true;\n        } else {\n            // url IS NOT VALID - return error string\n            return false;\n        };\n    }\n\n    const urlEnteredLinkData = {\n        check: (setError, register, clearErrors, setValue, errors, name) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: \"You MUST enter a value for this field between 8 and 75 charactors\"\n                }, minLength: {\n                    value: 8,\n                    message: \"You must enter AT Least 8 characters\"\n                }, maxLength: {\n                    value: 75,\n                    message: \"You may ONLY enter 75 characters or less\"\n                }, onBlur: (e) => {\n                    // extracted final value from input\n                    const value = e.target.value;\n                    // check if valid url in helper file.\n                    const validOrNot = calculateWhetherURLIsLegit(value);\n                    // check if valid!\n                    if (validOrNot === true) {\n                        // set value\n                        setValue(name, value, { shouldValidate: false });\n                        // clear error after setting proper change state\n                        setTimeout(() => {\n                            // clear error\n                            clearErrors(name);\n                        }, 75);\n                    } else {\n                        setTimeout(() => {\n                            setError(name, {\n                                type: \"manual\",\n                                message: \"You MUST enter a VALID URL including http/https and ://\",\n                            });\n                        }, 75)\n                    }\n                }})}\n            );\n        },\n        onChange: (e, name, setValue) => {\n            console.log(\"e name val\", e, name, setValue);\n            // deconstruct actual value\n            const value = e.target.value;\n\n            console.log(\"valu\", value);\n            // set state without redux form\n            setValue(name, value, { shouldValidate: false });\n        }\n    };\n    const coverLetterChecks = {\n        check: (setError, register, clearErrors, name) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: \"You MUST enter a value for this field between 50 and 750 charactors\"\n                }, minLength: {\n                    value: 50,\n                    message: \"You must enter AT Least 50 characters\"\n                }, maxLength: {\n                    value: 750,\n                    message: \"You may ONLY enter 750 characters or less\"\n                }, onBlur: (e) => {\n                    // deconstruct actual value\n                    const value = e.target.value;\n                    // deconstruct length\n                    const len = value.length;\n                    // check if both min/max values met\n                    if ((len > 0) && (len >= 50) && (len <= 750)) {\n                        // clear error\n                        clearErrors(name);\n                    } else {\n                        // set error\n                        setTimeout(() => {\n                            setError(name, {\n                                type: \"manual\",\n                                message: \"You MUST enter between 50 and 750 charectors in total for your cover letter (CV) before proceeding...\",\n                            });\n                        }, 50);\n                    }\n                }})}\n            );\n        },\n        onChange: (e, name, setValue) => {\n            // deconstruct actual value\n            const value = e.target.value;\n\n            setValue(name, value, { shouldValidate: true })\n        },\n        label: \"Cover Letter (CV)\",\n        name: \"coverLetterText\",\n        placeholder: \"Enter your cover letter information (or upload in attachments)...\"\n    };\n    const messageToEmployerChecks = {\n        check: (setError, register, clearErrors, setValue, name) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: \"You MUST enter a value for this field between 50 and 750 charactors\"\n                }, minLength: {\n                    value: 50,\n                    message: \"You must enter AT Least 50 characters\"\n                }, maxLength: {\n                    value: 750,\n                    message: \"You may ONLY enter 750 characters or less\"\n                }, onBlur: (e) => {\n                    // deconstruct actual value\n                    const value = e.target.value;\n                    // deconstruct length\n                    const len = value.length;\n                    // check if both min/max values met\n                    if ((len > 0) && (len >= 50) && (len <= 750)) {\n                        // clear error\n                        clearErrors(name);\n                    } else {\n                        // set error\n                        setTimeout(() => {\n                            setError(name, {\n                                type: \"manual\",\n                                message: \"You MUST enter between 50 and 750 charectors total while messaging employer before proceeding...\",\n                            });\n                        }, 50);\n                    }\n                }})}\n            );\n        },\n        onChange: (e, name, setValue) => {\n            // deconstruct actual value\n            const value = e.target.value;\n\n            setValue(name, value, { shouldValidate: true })\n        },\n        label: \"Message To Employer (Direct to employer)\",\n        name: \"messageToEmployer\",\n        placeholder: \"Enter your 'custom' message to the employer...\"\n    };\n    const physicalOrDigitalChecks = {\n        check: (name, register) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: \"You must select a value/option (digital, physical or both) before proceeding\"\n                }})}\n            );\n        },\n        placeholder: \"Select your desired hack type (of enabled options)\",\n        name: \"physicalOrDigitalOrBoth\",\n        label: \"Account Type (Digital/Physical-hack type)\"\n    }\n    const participateInBettingWagers = {\n        check: (name, register) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: \"You must select a value/option (participate in betting OR not) before proceeding\"\n                }})}\n            );\n        },\n        placeholder: \"Select whether or not you'd like to participate in betting/gambling...\",\n        name: \"participateInBettingProcess\",\n        label: \"Would you like to participate in 'betting/waggering' on yourself to WIN more money IF you win the 'hack' or listing competition (WINNER selected by employer at end)\"\n    }\n    const amountWillingToCompleteJob = {\n        check: (setError, register, clearErrors, setValue, name) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: `You MUST enter a value BEFORE proceeding regarding how much you're willing to complete this contract for`\n                }, min: {\n                    value: 499.99,\n                    message: `You MUST enter a value of AT LEAST $499.99 OR more..`\n                }, onBlur: (e) => {\n                    // deconstruct actual value\n                    const value = e.target.value;\n                    // check if both min/max values met\n                    if (value >= 499.99) {\n                        // clear error\n                        clearErrors(name);\n                    } else {\n                        // set error\n                        setTimeout(() => {\n                            setError(name, {\n                                type: \"manual\",\n                                message: `You MUST enter a value BEFORE proceeding regarding how much you're willing to complete this contract for as well as entering ONLY NUMERIC charactors!`,\n                            });\n                        }, 50);\n                    }\n                }})}\n            );\n        },\n        onChange: (e, name, setValue) => {\n            // deconstruct actual value\n            const value = e.target.value;\n\n            setValue(name, value, { shouldValidate: true })\n        },\n        label: `Enter an amount (USD-$) in which you'd be willing to complete this contract for, this should be the total value (excluding associated fee's) that you'd like to recieve upon completion`,\n        name: \"amountOfMoneyUponCompletion\",\n        placeholder: `Enter a numerical value in USD ($$$) in which you'd be willing to complete this contract...`\n    }\n    const approachToSuccessfullyHackCo = {\n        check: (setError, register, clearErrors, name) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: \"You MUST enter a value for this field between 50 and 750 charactors\"\n                }, minLength: {\n                    value: 50,\n                    message: \"You must enter AT Least 50 characters\"\n                }, maxLength: {\n                    value: 750,\n                    message: \"You may ONLY enter 750 characters or less\"\n                }, onBlur: (e) => {\n                    console.log(\"blurred/\");\n                    // deconstruct actual value\n                    const value = e.target.value;\n                    // deconstruct length\n                    const len = value.length;\n                    // check if both min/max values met\n                    if ((len > 0) && (len >= 50) && (len <= 750)) {\n                        // clear error\n                        clearErrors(name);\n                    } else {\n                        // set error\n                        setTimeout(() => {\n                            setError(name, {\n                                type: \"manual\",\n                                message: \"You MUST enter between 50 and 750 charectors total while 'describing your hack ideas' before proceeding...\",\n                            });\n                        }, 50);\n                    }\n                }})}\n            );\n        },\n        onChange: (e, name, setValue) => {\n            // deconstruct actual value\n            const value = e.target.value;\n            // set new value\n            setValue(name, value, { shouldValidate: true })\n        },\n        label: \"What is your approach to this 'hack'?\",\n        name: \"technicalApproachToHack\",\n        placeholder: \"Enter your 'approach' to how you expect to successfully hack this company... (don't give out your attack methods - just give a general idea - can be very broad - up to you)\"\n    }\n    // return values to other component\n    return {\n        urlEnteredLinkData,\n        coverLetterChecks,\n        messageToEmployerChecks,\n        physicalOrDigitalChecks,\n        participateInBettingWagers,\n        approachToSuccessfullyHackCo,\n        amountWillingToCompleteJob\n    }\n}\n\nexport default MainHooksCustomHelpers;"]},"metadata":{},"sourceType":"module"}