{"ast":null,"code":"import _objectSpread from \"/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\n// helpers logic related to mainly to redux-hook-form\nvar HookHelpers = function HookHelpers() {\n  // start helper creations...\n  var listingTitleChecker = {\n    check: function check(setError, register) {\n      return _objectSpread({}, register(\"listingTitle\", {\n        required: {\n          value: true,\n          message: \"You MUST enter AT least 15 characters to 75 characters\"\n        },\n        minLength: {\n          value: 15,\n          message: \"You must enter AT Least 15 characters\"\n        },\n        maxLength: {\n          value: 75,\n          message: \"You may ONLY enter 75 characters or less\"\n        }\n      }));\n    },\n    onChange: function onChange(e, setValue) {\n      var value = e.target.value;\n      setValue(\"listingTitle\", value, {\n        shouldValidate: false\n      });\n    },\n    name: \"listingTitle\",\n    placeholder: \"Enter a stream title...\",\n    type: \"text\",\n    label: \"Enter a stream title (this will be displayed first/foremost w/other streams)\"\n  };\n  var subcategoryChecker = {\n    check: function check(setError, register, values, errors, name, clearErrors) {\n      return _objectSpread({}, register(name, {\n        required: {\n          value: true,\n          message: \"You MUST select an option before starting your LIVE stream\"\n        },\n        onBlur: function onBlur(e) {\n          // log to check whats returned\n          var value = e.target.value; // timeout to delay for state change(s)\n\n          setTimeout(function () {\n            // clear error after proper selection\n            if (typeof value !== \"undefined\" && Object.keys(value).length > 0) {\n              clearErrors(name);\n            } else {\n              // set error as nothing was selected (blank 'click-off' selection of selector)\n              setError(name, {\n                type: \"manual\",\n                message: \"You MUST select an option before starting your LIVE stream\"\n              });\n            }\n          }, 50);\n        }\n      }));\n    },\n    name: \"subCategory\",\n    placeholder: \"Enter a 'sub' category for your live stream (stream filtration)...\",\n    type: \"text\",\n    label: \"Stream Sub-Category\"\n  };\n  var hashtagsChecker = {\n    check: function check(setError, register, values, errors, name, clearErrors) {\n      return _objectSpread({}, register(name, {\n        required: {\n          value: true,\n          message: \"You MUST enter AT least 5 hashtags/tags before attempting to continue\"\n        }\n      }));\n    },\n    onBlurred: function onBlurred(tags, setValue, clearErrors, setError) {\n      setValue(\"streamHashtags\", tags, {\n        shouldValidate: true\n      }); // timeout to delay for state change(s)\n\n      setTimeout(function () {\n        // clear error after proper selection\n        if (typeof tags !== \"undefined\" && tags.length >= 5 && tags.length <= 15) {\n          clearErrors(\"streamHashtags\");\n        } else {\n          // set error as nothing was selected (blank 'click-off' selection of selector)\n          setError(\"streamHashtags\", {\n            type: \"manual\",\n            message: \"You MUST enter BETWEEN 5-15 hashtags/tags before attempting to continue\"\n          });\n        }\n      }, 100);\n    },\n    placeholder: \"Enter between 5-15 hashtags/tags...\",\n    type: \"text\",\n    label: \"Enter BETWEEN 5-15 hashtags to proceed forward - people will use these to find your live stream...\"\n  };\n\n  var calculateBlurOrNot = function calculateBlurOrNot(e, clearErrors, name, setError) {\n    // deconstruct value\n    var valueLen = e.target.value.length; // timeout to delay for state change(s)\n\n    setTimeout(function () {\n      // clear error after proper selection\n      if (valueLen >= 50) {\n        if (valueLen <= 1000) {\n          clearErrors(name);\n        } else {\n          // set error - TOO many characters\n          setError(name, {\n            type: \"manual\",\n            message: \"You may ONLY enter 1000 characters or less\"\n          });\n        }\n      } else {\n        // NOT Long enough\n        setError(name, {\n          type: \"manual\",\n          message: \"You MUST enter AT Least 50 characters\"\n        });\n      }\n    }, 100);\n  };\n\n  var mainDescriptionChecker = {\n    check: function check(setError, register) {\n      return _objectSpread({}, register(\"mainDescription\", {\n        required: {\n          value: true,\n          message: \"You MUST enter AT least 50 characters to 1000 characters\"\n        },\n        minLength: {\n          value: 50,\n          message: \"You MUST enter AT Least 50 characters\"\n        },\n        maxLength: {\n          value: 1000,\n          message: \"You may ONLY enter 1000 characters or less\"\n        }\n      }));\n    },\n    onBlur: function onBlur(e, clearErrors, name, setError) {\n      return calculateBlurOrNot(e, clearErrors, name, setError);\n    },\n    onChange: function onChange(value, setValue) {\n      setValue(\"mainDescription\", value, {\n        shouldValidate: false\n      });\n    },\n    name: \"mainDescription\",\n    placeholder: \"Enter a detailed or basic (totally up to you but at least include 50 characters) for your description\",\n    type: \"textarea\",\n    label: \"Enter a description for your live stream (AT-LEAST 50 characters)\"\n  };\n\n  var handleSubcategoryCheckerChange = function handleSubcategoryCheckerChange(selectedOption, setValue, subCategoryRefSelector) {\n    // run conditionals\n    setValue('subCategory', selectedOption, {\n      shouldValidate: false\n    });\n    subCategoryRefSelector.current.blur();\n  };\n\n  return {\n    hashtagsChecker: hashtagsChecker,\n    subcategoryChecker: subcategoryChecker,\n    handleSubcategoryCheckerChange: handleSubcategoryCheckerChange,\n    listingTitleChecker: listingTitleChecker,\n    mainDescriptionChecker: mainDescriptionChecker\n  };\n};\n\nexport default HookHelpers;","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/src/components/dashboard/streamingLiveHacks/createLiveStream/createNewStream/helpers/helperFunctions.js"],"names":["HookHelpers","listingTitleChecker","check","setError","register","required","value","message","minLength","maxLength","onChange","e","setValue","target","shouldValidate","name","placeholder","type","label","subcategoryChecker","values","errors","clearErrors","onBlur","setTimeout","Object","keys","length","hashtagsChecker","onBlurred","tags","calculateBlurOrNot","valueLen","mainDescriptionChecker","handleSubcategoryCheckerChange","selectedOption","subCategoryRefSelector","current","blur"],"mappings":"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","sourcesContent":["// helpers logic related to mainly to redux-hook-form\nconst HookHelpers = () => {\n    // start helper creations...\n    const listingTitleChecker = {\n        check: (setError, register) => {\n            return (\n                {...register(\"listingTitle\", { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 15 characters to 75 characters\"\n                }, minLength: {\n                    value: 15,\n                    message: \"You must enter AT Least 15 characters\"\n                }, maxLength: {\n                    value: 75,\n                    message: \"You may ONLY enter 75 characters or less\"\n                }})}\n            )\n        },\n        onChange: (e, setValue) => {\n            const value = e.target.value;\n\n            setValue(\"listingTitle\", value, { shouldValidate: false });\n        },\n        name: \"listingTitle\",\n        placeholder: \"Enter a stream title...\",\n        type: \"text\",\n        label: \"Enter a stream title (this will be displayed first/foremost w/other streams)\"\n    };\n    const subcategoryChecker = {\n        check: (setError, register, values, errors, name, clearErrors) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: \"You MUST select an option before starting your LIVE stream\"\n                }, onBlur: (e) => {\n                    // log to check whats returned\n\n                    const value = e.target.value;\n                    // timeout to delay for state change(s)\n                    setTimeout(() => {\n                        // clear error after proper selection\n                        if ((typeof value !== \"undefined\") && (Object.keys(value).length > 0)) {\n                            clearErrors(name);\n                        } else {\n                            // set error as nothing was selected (blank 'click-off' selection of selector)\n                            setError(name, {\n                                type: \"manual\",\n                                message: \"You MUST select an option before starting your LIVE stream\",\n                            });\n                        }\n                    }, 50);\n                }})}\n            )\n        },\n        name: \"subCategory\",\n        placeholder: \"Enter a 'sub' category for your live stream (stream filtration)...\",\n        type: \"text\",\n        label: \"Stream Sub-Category\"\n    };\n    const hashtagsChecker = {\n        check: (setError, register, values, errors, name, clearErrors) => {\n            return (\n                {...register(name, { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 5 hashtags/tags before attempting to continue\"\n                }})}\n            )\n        },\n        onBlurred: (tags, setValue, clearErrors, setError) => {\n            setValue(\"streamHashtags\", tags, { shouldValidate: true });\n            // timeout to delay for state change(s)\n            setTimeout(() => {\n                // clear error after proper selection\n                if ((typeof tags !== \"undefined\") && (tags.length >= 5 && tags.length <= 15)) {\n                    clearErrors(\"streamHashtags\");\n                } else {\n                    // set error as nothing was selected (blank 'click-off' selection of selector)\n                    setError(\"streamHashtags\", {\n                        type: \"manual\",\n                        message: \"You MUST enter BETWEEN 5-15 hashtags/tags before attempting to continue\",\n                    });\n                }\n            }, 100);\n        },\n        placeholder: \"Enter between 5-15 hashtags/tags...\",\n        type: \"text\",\n        label: \"Enter BETWEEN 5-15 hashtags to proceed forward - people will use these to find your live stream...\"\n    };\n    const calculateBlurOrNot = (e, clearErrors, name, setError) => {\n        // deconstruct value\n        const valueLen = e.target.value.length;\n        // timeout to delay for state change(s)\n        setTimeout(() => {\n            // clear error after proper selection\n            if (valueLen >= 50) {\n                if (valueLen <= 1000) {\n                    clearErrors(name);\n                } else {\n                    // set error - TOO many characters\n                    setError(name, {\n                        type: \"manual\",\n                        message: \"You may ONLY enter 1000 characters or less\",\n                    });\n                }\n            } else {\n                // NOT Long enough\n                setError(name, {\n                    type: \"manual\",\n                    message: \"You MUST enter AT Least 50 characters\",\n                });\n            }\n        }, 100);\n    }\n    const mainDescriptionChecker = {\n        check: (setError, register) => {\n            return (\n                {...register(\"mainDescription\", { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 50 characters to 1000 characters\"\n                }, minLength: {\n                    value: 50,\n                    message: \"You MUST enter AT Least 50 characters\"\n                }, maxLength: {\n                    value: 1000,\n                    message: \"You may ONLY enter 1000 characters or less\"\n                }})}\n            )\n        },\n        onBlur: (e, clearErrors, name, setError) => calculateBlurOrNot(e, clearErrors, name, setError),\n        onChange: (value, setValue) => {\n            setValue(\"mainDescription\", value, { shouldValidate: false });\n        },\n        name: \"mainDescription\",\n        placeholder: \"Enter a detailed or basic (totally up to you but at least include 50 characters) for your description\",\n        type: \"textarea\",\n        label: \"Enter a description for your live stream (AT-LEAST 50 characters)\"\n    };\n    const handleSubcategoryCheckerChange = (selectedOption, setValue, subCategoryRefSelector) => {\n        // run conditionals\n        setValue('subCategory', selectedOption, { shouldValidate: false });\n\n        subCategoryRefSelector.current.blur();\n    }\n    return {\n        hashtagsChecker,\n        subcategoryChecker,\n        handleSubcategoryCheckerChange,\n        listingTitleChecker,\n        mainDescriptionChecker\n    }\n}\n\n\nexport default HookHelpers;"]},"metadata":{},"sourceType":"module"}