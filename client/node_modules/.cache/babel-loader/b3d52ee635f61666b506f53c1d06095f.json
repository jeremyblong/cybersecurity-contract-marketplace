{"ast":null,"code":"var _jsxFileName = \"/home/kali/Documents/cybersecurity/client/src/components/dashboard/softwareHardwareExchanges/software/createListing/multiStepPages/pageThree/pageThreeMain.js\";\nimport React, { useState, useRef, useEffect, Fragment } from 'react';\nimport \"./styles.css\";\nimport { connect } from \"react-redux\";\nimport { NotificationManager } from 'react-notifications';\nimport { saveSoftwareListingInfo } from \"../../../../../../../redux/actions/hackers/createSoftwareListing/createNewSoftwareListingSale.js\";\nimport _ from \"lodash\";\nimport { useHistory } from \"react-router-dom\";\nimport helpers from \"./helpers/mainFunctions.js\";\nimport { Col, Button, Form, Label, Input, Card, CardHeader, CardBody, Media, Badge, Row, Popover, PopoverBody, PopoverHeader, Container, ListGroupItem, ListGroup } from 'reactstrap';\nimport { useForm, Controller } from 'react-hook-form';\nimport Select from 'react-select';\nimport { WithContext as ReactTags } from 'react-tag-input';\nimport Dropzone from 'react-dropzone-uploader';\nconst KeyCodes = {\n  comma: 188,\n  enter: [10, 13]\n};\nconst delimiters = [...KeyCodes.enter, KeyCodes.comma];\n\nconst PageThreeHelper = _ref => {\n  let {\n    saveSoftwareListingInfo,\n    previouslySavedSoftwareData,\n    userData\n  } = _ref;\n  // create redirect ability\n  const history = useHistory(); // create Refs...\n\n  const listingTimespanGeneratedRef = useRef(null);\n  const dropzoneRef = useRef(null); // state creation...\n\n  const [validateClass, setValidateClass] = useState(false);\n  const [reviewerPopoverStatus, setPopoverReviewerStatus] = useState(false);\n  const [tags, setTagsState] = useState([]);\n  const [suggestions, setSuggestionsState] = useState(helpers.suggestionsPreselected);\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [selectedFileTwo, setSelectedFileTwo] = useState(null);\n  const [fileReady, setFileReadyStatus] = useState(false);\n  const [currentFileSelectedUpload, setCurrentUploadFileStatus] = useState(null);\n  const [filePathData, setCurrentFilePathData] = useState(null);\n  const [fileMetaData, setMetaFileData] = useState(null);\n  const {\n    register,\n    handleSubmit,\n    control,\n    reset,\n    getValues,\n    setValue,\n    setError,\n    clearErrors,\n    formState: {\n      errors\n    }\n  } = useForm({\n    mode: \"onTouched\",\n    reValidateMode: \"onBlur\"\n  }); // get form-redux values\n\n  const gatheredValues = getValues(); // imported helpers from mainFunctions.js file (deconstructed)\n\n  const {\n    handleDrag,\n    handleDelete,\n    renderPreviewOfFile,\n    imageChangeAndConversion\n  } = helpers; // react state initialization goes here...\n\n  const [data, setData] = useState({\n    demoURL: \"\"\n  }); // const [validateClass , setValidateClass] = useState(false);\n\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    clearErrors(name);\n    setData(prevState => {\n      return { ...prevState,\n        [name]: value\n      };\n    });\n    return value;\n  };\n\n  const onSubmit = (data, e) => {\n    // prevent reload\n    e.preventDefault();\n\n    if (typeof gatheredValues.hashtags !== \"undefined\" && gatheredValues.hashtags.length >= 5) {\n      console.log(\"hashtags have been completed...\"); // run final logic\n\n      if (data !== '') {\n        // everything is properly filled out\n        console.log(\"success! :) - : \", data);\n      } else {\n        errors.showMessages();\n      }\n    } else {\n      setError(\"hashtags\", {\n        type: \"manual\",\n        message: \"You MUST enter a MINIMUM of 5 (five) hashtags\"\n      });\n    }\n  };\n\n  const onError = (errors, e) => {\n    console.log(\"error submitting...!\", errors);\n  };\n\n  const listingTimelineSelectClose = data => {\n    const timespan = gatheredValues.listingTimespan;\n\n    if (typeof timespan !== \"undefined\" && Object.keys(timespan).length > 0) {\n      clearErrors(\"listingTimespan\");\n    }\n\n    ;\n  };\n\n  console.log(\"getValues(listingTimespan)\", getValues());\n\n  const CustomInputHelper = _ref2 => {\n    let {\n      accept,\n      onFiles\n    } = _ref2;\n    const text = \"Drop a file OR select to browse local data\";\n    return /*#__PURE__*/React.createElement(\"label\", {\n      className: \"custom-input-dropzone-copy\",\n      style: {\n        backgroundColor: '#007bff',\n        color: '#fff',\n        cursor: 'pointer',\n        padding: 15,\n        borderRadius: 3\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }\n    }, text, /*#__PURE__*/React.createElement(\"input\", {\n      style: {\n        display: 'none'\n      },\n      type: \"file\",\n      accept: accept,\n      multiple: false,\n      className: \"custom-dropzone-input-actual-input\",\n      onChange: e => {\n        const file = e.target.files[0]; // set current file path to convert to readable URL later\n\n        setCurrentFilePathData(imageChangeAndConversion(file)); // set status update for current file\n\n        setCurrentUploadFileStatus(file); // mark file as READY \n\n        setFileReadyStatus(true); // update \"Dropzone\" component state (NOT this react component state).\n\n        onFiles([file]);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }\n    }));\n  };\n\n  const renderCustomButtonDropzone = (data, e) => {\n    const {\n      meta\n    } = data.files[0];\n\n    if (currentFileSelectedUpload === null) {\n      return null;\n    } else {\n      if (fileReady === true) {\n        return /*#__PURE__*/React.createElement(Fragment, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Button, {\n          style: {\n            marginTop: \"25px\"\n          },\n          onClick: e => {\n            e.preventDefault(); // file meta data for next action\n\n            setMetaFileData(meta); // set file status as ready or prepared.\n\n            setFileReadyStatus(false);\n            const runSubmit = data.onSubmit;\n            handleSubmit(runSubmit);\n          },\n          className: \"btn-air-secondary\",\n          color: \"secondary\",\n          size: \"md\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 25\n          }\n        }, \"Submit & Upload New File!\"));\n      } else {\n        return /*#__PURE__*/React.createElement(Fragment, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Button, {\n          style: {\n            marginTop: \"25px\"\n          },\n          onClick: () => {\n            NotificationManager.warning(`File is NOT ready to upload yet! Please wait for the preparation steps to complete before submitting.`, 'Still preparing!', 4500);\n          },\n          className: \"btn-air-light\",\n          color: \"light\",\n          size: \"md\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 25\n          }\n        }, \"Submit & Upload New File!\"));\n      }\n    }\n  };\n\n  const onSubmitHelper = (files, allFiles) => {\n    allFiles.forEach(file => {\n      file.remove();\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    className: `needs-validation tooltip-validation ${validateClass ? 'validateClass' : ''}`,\n    noValidate: \"\",\n    onSubmit: handleSubmit(onSubmit, onError),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"6\",\n    lg: \"6\",\n    xl: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 29\n    }\n  }, \"Demo URL (\", /*#__PURE__*/React.createElement(\"strong\", {\n    style: {\n      color: \"red\",\n      textDecorationLine: \"underline\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 46\n    }\n  }, \"optional\"), \" - if you want to display working code at an external URL)\"), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, register(\"demoURL\", {\n    required: false,\n    minLength: {\n      value: 15,\n      message: \"You must enter AT Least 15 characters\"\n    },\n    maxLength: {\n      value: 75,\n      message: \"You may ONLY enter 75 characters or less\"\n    },\n    onBlur: e => {\n      // check if valid url in helper file.\n      return helpers.CalculateWhetherURLIsLegit(e.target.value);\n    }\n  }), {\n    className: \"form-control\",\n    name: \"demoURL\",\n    type: \"text\",\n    placeholder: \"Listing title\",\n    onChange: handleInputChange,\n    value: data.demoURL,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"valid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 29\n    }\n  }, \"Looks good!\")), /*#__PURE__*/React.createElement(Col, {\n    className: \"input-surrounding-col\",\n    sm: \"12\",\n    md: \"6\",\n    lg: \"6\",\n    xl: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 29\n    }\n  }, \"Select how long you would like your listing to run for (length of \", /*#__PURE__*/React.createElement(\"em\", {\n    style: {\n      color: \"blue\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 102\n    }\n  }, \"both\"), \" \\\"buy-it-now\\\" & \\\"actions\\\")\"), /*#__PURE__*/React.createElement(Controller, Object.assign({\n    control: control,\n    name: \"listingTimespan\"\n  }, register(\"listingTimespan\", {\n    required: {\n      value: true,\n      message: \"You must select a value before proceeding\"\n    },\n    onBlur: e => {\n      console.log(\"onBlur...!\", e);\n      const value = e.target.value;\n      setTimeout(() => {\n        // clear error after proper selection\n        if (typeof value !== \"undefined\" && Object.keys(value).length > 0) {\n          clearErrors(\"listingTimespan\");\n        } else {\n          // set error as nothing was selected (blank 'click-off' selection of selector)\n          setError(\"listingTimespan\", {\n            type: \"manual\",\n            message: \"You haven't selected a 'timespan' & a selection is required before proceeding\"\n          });\n        }\n      }, 50);\n    }\n  }), {\n    render: _ref3 => {\n      let {\n        field\n      } = _ref3;\n      return /*#__PURE__*/React.createElement(Select, Object.assign({}, field, {\n        ref: listingTimespanGeneratedRef,\n        autoBlur: true,\n        defaultValue: null,\n        onMenuClose: listingTimelineSelectClose,\n        value: gatheredValues.listingTimespan,\n        onChange: selectedOption => {\n          // run conditionals\n          if (typeof gatheredValues.listingTimespan === \"undefined\") {\n            setValue('listingTimespan', selectedOption, {\n              shouldValidate: false\n            });\n          } else {\n            clearErrors(\"listingTimespan\");\n          }\n\n          listingTimespanGeneratedRef.current.blur();\n        },\n        options: helpers.listingTimespanOptions,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 37\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 29\n    }\n  })), errors.listingTimespan ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"span-tooltip\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 55\n    }\n  }, errors.listingTimespan.message) : null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"valid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 29\n    }\n  }, \"Looks good!\"))), /*#__PURE__*/React.createElement(Row, {\n    style: {\n      paddingTop: \"25px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 29\n    }\n  }, \"Enter relevant tags/hashtags (people will use these tags when searching for specific/condensed results) - \", /*#__PURE__*/React.createElement(\"strong\", {\n    style: {\n      color: \"blue\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 142\n    }\n  }, \"5(MIN) - 15(MAX) Tags\")), /*#__PURE__*/React.createElement(ListGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Controller, Object.assign({\n    control: control,\n    name: \"hashtags\"\n  }, register(\"hashtags\", {\n    required: {\n      value: true,\n      message: \"You MUST enter AT least 5 (five) tags up to a maximum of 15 (fifteen) tags\"\n    }\n  }), {\n    render: _ref4 => {\n      let {\n        field\n      } = _ref4;\n      return /*#__PURE__*/React.createElement(ReactTags, Object.assign({}, field, {\n        tags: gatheredValues.hashtags,\n        name: \"hashtags\",\n        suggestions: suggestions,\n        classNames: {\n          tags: 'hashtagsTagsClass',\n          tagInput: 'hashtagsTagInputClass',\n          tagInputField: 'hashtagsTagInputFieldClass',\n          selected: 'hashtagsSelectedClass',\n          tag: 'hashtagsTagClass badge badge-primary',\n          remove: 'hashtagsRemoveClass',\n          suggestions: 'hashtagsSuggestionsClass',\n          activeSuggestion: 'hashtagsActiveSuggestionClass'\n        },\n        handleDelete: index => {\n          setValue('hashtags', handleDelete(index, gatheredValues.hashtags), {\n            shouldValidate: true\n          });\n        },\n        renderSuggestion: suggestion => {\n          // return list item(s)\n          return /*#__PURE__*/React.createElement(ListGroupItem, {\n            className: \"custom-suggestion-groupitem\",\n            key: suggestion.index,\n            onClick: () => {\n              // run conditional checks\n              if (typeof gatheredValues.hashtags !== \"undefined\") {\n                if (gatheredValues.hashtags.length < 15) {\n                  if (gatheredValues.hashtags.length > 0) {\n                    setValue('hashtags', [...gatheredValues.hashtags, suggestion], {\n                      shouldValidate: true\n                    });\n                  } else {\n                    setValue('hashtags', [suggestion], {\n                      shouldValidate: true\n                    });\n                  }\n                } else {\n                  NotificationManager.warning('You have entered TOO many hashtags & we cannot add your current tag until some are removed.', \"Too many hashtags!\", 4250);\n                }\n              } else {\n                setValue('hashtags', [suggestion], {\n                  shouldValidate: true\n                });\n              }\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 49\n            }\n          }, suggestion.text);\n        },\n        readOnly: false,\n        placeholder: \"Enter a tag (these are how people search & find your listing)\",\n        maxLength: 15,\n        handleAddition: tag => {\n          if (typeof gatheredValues.hashtags !== \"undefined\") {\n            if (gatheredValues.hashtags.length < 15) {\n              if (gatheredValues.hashtags.length > 0) {\n                setValue('hashtags', [...gatheredValues.hashtags, tag], {\n                  shouldValidate: true\n                });\n              } else {\n                setValue('hashtags', [tag], {\n                  shouldValidate: true\n                });\n              }\n            } else {\n              NotificationManager.warning('You have entered TOO many hashtags & we cannot add your current tag until some are removed.', \"Too many hashtags!\", 4500);\n            }\n          } else {\n            setValue('hashtags', [tag], {\n              shouldValidate: true\n            });\n          }\n        },\n        handleDrag: (tag, currPos, newPos) => {\n          setValue('hashtags', handleDrag(tag, currPos, newPos, gatheredValues.hashtags), {\n            shouldValidate: true\n          });\n        },\n        delimiters: delimiters,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 37\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 29\n    }\n  }))), errors.hashtags ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"span-tooltip\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 48\n    }\n  }, errors.hashtags.message) : null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"valid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 29\n    }\n  }, \"Looks good!\"))), /*#__PURE__*/React.createElement(Row, {\n    style: {\n      marginTop: \"45px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dz-message needsclick\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Dropzone, {\n    ref: dropzoneRef,\n    PreviewComponent: data => renderPreviewOfFile(data),\n    maxFiles: 1,\n    autoUpload: true,\n    submitButtonDisabled: false,\n    InputComponent: CustomInputHelper,\n    onSubmit: onSubmitHelper,\n    SubmitButtonComponent: (data, e) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"absolutely-position-submit-btn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 45\n        }\n      }, renderCustomButtonDropzone(data, e));\n    },\n    multiple: false,\n    canCancel: false,\n    styles: {\n      dropzone: {\n        height: 325\n      },\n      dropzoneActive: {\n        borderColor: 'green'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 33\n    }\n  })))), /*#__PURE__*/React.createElement(Row, {\n    style: {\n      marginTop: \"45px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 29\n    }\n  }, \"Leave a comment for \\\"\", process.env.REACT_APP_APPLICATION_NAME, \"\\\" \", /*#__PURE__*/React.createElement(\"strong\", {\n    onClick: () => {\n      setPopoverReviewerStatus(true);\n    },\n    id: \"PopoverReviewersInfo\",\n    style: {\n      color: \"red\",\n      textDecorationLine: \"underline\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 99\n    }\n  }, \"reviewers\")), /*#__PURE__*/React.createElement(Popover, {\n    className: \"make-popover-interactive\",\n    placement: \"bottom\",\n    isOpen: reviewerPopoverStatus,\n    target: \"PopoverReviewersInfo\",\n    toggle: () => {\n      setPopoverReviewerStatus(!reviewerPopoverStatus);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(PopoverHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 33\n    }\n  }, \"What is a \\\"Reviewer\\\"? \", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popover-cancel-container\",\n    onClick: () => {\n      setPopoverReviewerStatus(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 70\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: require(\"../../../../../../../assets/icons/close-64.png\"),\n    className: \"small-close-popover-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 36\n    }\n  }))), /*#__PURE__*/React.createElement(PopoverBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    style: {\n      color: \"blue\",\n      textDecorationLine: \"underline\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 46\n    }\n  }, \"What is a reviewer you may ask?\"), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 145\n    }\n  }), \"Reviewers are employee's of \", process.env.REACT_APP_APPLICATION_NAME, \"'s platform that personally review each submission of an \\\"item-for-sale\\\" before posting it publically for safety reasons. This typically takes anywhere from 1-3 days but you will be notified upon the completion of a final decision.\")), /*#__PURE__*/React.createElement(\"textarea\", Object.assign({\n    rows: 8\n  }, register(\"commentToReviewer\", {\n    required: {\n      value: true,\n      message: \"You MUST enter AT least 50 characters with a maximum of 500 characters\"\n    },\n    minLength: {\n      value: 50,\n      message: \"You must enter AT Least 50 characters\"\n    },\n    maxLength: {\n      value: 500,\n      message: \"You may ONLY enter 500 characters or less\"\n    },\n    onBlur: e => {\n      // check whether valid on click-off/blur\n      console.log(\"blurred.\");\n    }\n  }), {\n    className: \"form-control\",\n    name: \"commentToReviewer\",\n    type: \"textarea\",\n    placeholder: \"Leave a comment for our reviewers\",\n    onChange: handleInputChange,\n    value: data.commentToReviewer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 29\n    }\n  })), errors.commentToReviewer ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"span-tooltip\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 57\n    }\n  }, errors.commentToReviewer.message) : null)), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Row, {\n    style: {\n      marginTop: \"45px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"secondary\",\n    style: {\n      width: \"100%\"\n    },\n    type: \"submit\",\n    onClick: () => {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 29\n    }\n  }, \"~ Submit form details and proceed to next page ~\"))))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    userData: state.auth.data,\n    previouslySavedSoftwareData: state.softwareListingSale.softwareListingSaleInfo\n  };\n};\n\nexport default connect(mapStateToProps, {\n  saveSoftwareListingInfo\n})(PageThreeHelper);","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/softwareHardwareExchanges/software/createListing/multiStepPages/pageThree/pageThreeMain.js"],"names":["React","useState","useRef","useEffect","Fragment","connect","NotificationManager","saveSoftwareListingInfo","_","useHistory","helpers","Col","Button","Form","Label","Input","Card","CardHeader","CardBody","Media","Badge","Row","Popover","PopoverBody","PopoverHeader","Container","ListGroupItem","ListGroup","useForm","Controller","Select","WithContext","ReactTags","Dropzone","KeyCodes","comma","enter","delimiters","PageThreeHelper","previouslySavedSoftwareData","userData","history","listingTimespanGeneratedRef","dropzoneRef","validateClass","setValidateClass","reviewerPopoverStatus","setPopoverReviewerStatus","tags","setTagsState","suggestions","setSuggestionsState","suggestionsPreselected","selectedFile","setSelectedFile","selectedFileTwo","setSelectedFileTwo","fileReady","setFileReadyStatus","currentFileSelectedUpload","setCurrentUploadFileStatus","filePathData","setCurrentFilePathData","fileMetaData","setMetaFileData","register","handleSubmit","control","reset","getValues","setValue","setError","clearErrors","formState","errors","mode","reValidateMode","gatheredValues","handleDrag","handleDelete","renderPreviewOfFile","imageChangeAndConversion","data","setData","demoURL","handleInputChange","e","name","value","target","prevState","onSubmit","preventDefault","hashtags","length","console","log","showMessages","type","message","onError","listingTimelineSelectClose","timespan","listingTimespan","Object","keys","CustomInputHelper","accept","onFiles","text","backgroundColor","color","cursor","padding","borderRadius","display","file","files","renderCustomButtonDropzone","meta","marginTop","runSubmit","warning","onSubmitHelper","allFiles","forEach","remove","textDecorationLine","required","minLength","maxLength","onBlur","CalculateWhetherURLIsLegit","setTimeout","field","selectedOption","shouldValidate","current","blur","listingTimespanOptions","paddingTop","tagInput","tagInputField","selected","tag","activeSuggestion","index","suggestion","currPos","newPos","dropzone","height","dropzoneActive","borderColor","process","env","REACT_APP_APPLICATION_NAME","require","commentToReviewer","width","mapStateToProps","state","auth","softwareListingSale","softwareListingSaleInfo"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, Fragment } from 'react';\nimport \"./styles.css\";\nimport { connect } from \"react-redux\";\nimport { NotificationManager } from 'react-notifications';\nimport { saveSoftwareListingInfo } from \"../../../../../../../redux/actions/hackers/createSoftwareListing/createNewSoftwareListingSale.js\";\nimport _ from \"lodash\";\nimport { useHistory } from \"react-router-dom\";\nimport helpers from \"./helpers/mainFunctions.js\";\nimport { Col, Button, Form, Label, Input, Card, CardHeader, CardBody, Media, Badge, Row, Popover, PopoverBody, PopoverHeader, Container, ListGroupItem, ListGroup } from 'reactstrap';\nimport { useForm, Controller } from 'react-hook-form';\nimport Select from 'react-select';\nimport { WithContext as ReactTags } from 'react-tag-input';\nimport Dropzone from 'react-dropzone-uploader';\n\nconst KeyCodes = {\n    comma: 188,\n    enter: [10, 13],\n};\n  \nconst delimiters = [...KeyCodes.enter, KeyCodes.comma];\n\nconst PageThreeHelper = ({ saveSoftwareListingInfo, previouslySavedSoftwareData, userData }) => {\n    // create redirect ability\n    const history = useHistory();\n    // create Refs...\n    const listingTimespanGeneratedRef = useRef(null);\n    const dropzoneRef = useRef(null);\n    // state creation...\n    const [validateClass , setValidateClass] = useState(false);\n    const [ reviewerPopoverStatus, setPopoverReviewerStatus ] = useState(false);\n    const [ tags, setTagsState ] = useState([]);\n    const [ suggestions, setSuggestionsState ] = useState(helpers.suggestionsPreselected);\n    const [selectedFile, setSelectedFile] = useState(null);\n    const [selectedFileTwo, setSelectedFileTwo] = useState(null);\n    const [fileReady, setFileReadyStatus] = useState(false);\n    const [currentFileSelectedUpload, setCurrentUploadFileStatus] = useState(null);\n    const [filePathData, setCurrentFilePathData] = useState(null);\n    const [fileMetaData, setMetaFileData] = useState(null);\n    \n    const { register, handleSubmit, control, reset, getValues, setValue, setError, clearErrors, formState: { errors }} = useForm({\n        mode: \"onTouched\",\n        reValidateMode: \"onBlur\"\n    });\n\n    // get form-redux values\n    const gatheredValues = getValues();\n\n    // imported helpers from mainFunctions.js file (deconstructed)\n    const { handleDrag, handleDelete, renderPreviewOfFile, imageChangeAndConversion } = helpers;\n\n    // react state initialization goes here...\n    const [ data, setData ] = useState({\n        demoURL: \"\"\n    });\n    // const [validateClass , setValidateClass] = useState(false);\n\n    const handleInputChange = (e) => {\n        const { name, value } = e.target;\n    \n        clearErrors(name);\n    \n        setData(prevState => {\n            return {\n                ...prevState,\n                [name]: value\n            }\n        });\n    \n        return value;\n    };\n    const onSubmit = (data, e) => {\n        // prevent reload\n        e.preventDefault();\n\n        if ((typeof gatheredValues.hashtags !== \"undefined\") && (gatheredValues.hashtags.length >= 5)) {\n            console.log(\"hashtags have been completed...\");\n            // run final logic\n            if (data !== '') {\n                // everything is properly filled out\n                console.log(\"success! :) - : \", data);\n            } else {\n                errors.showMessages();\n            }\n        } else {\n            setError(\"hashtags\", {\n                type: \"manual\",\n                message: \"You MUST enter a MINIMUM of 5 (five) hashtags\",\n            });\n        }\n    };\n    const onError = (errors, e) => {\n        console.log(\"error submitting...!\", errors);\n    };\n    const listingTimelineSelectClose = (data) => {\n\n        const timespan = gatheredValues.listingTimespan;\n\n        if ((typeof timespan !== \"undefined\") && (Object.keys(timespan).length > 0)) {\n            clearErrors(\"listingTimespan\");\n        };\n    }\n\n    console.log(\"getValues(listingTimespan)\", getValues());\n\n    const CustomInputHelper = ({ accept, onFiles }) => {\n\n        const text = \"Drop a file OR select to browse local data\";\n\n        return (\n            <label className=\"custom-input-dropzone-copy\" style={{ backgroundColor: '#007bff', color: '#fff', cursor: 'pointer', padding: 15, borderRadius: 3 }}>\n                {text}\n                <input\n                    style={{ display: 'none' }}\n                    type=\"file\"\n                    accept={accept}\n                    multiple={false}\n                    className={\"custom-dropzone-input-actual-input\"}\n                    onChange={e => {\n                        const file = e.target.files[0];\n                        // set current file path to convert to readable URL later\n                        setCurrentFilePathData(imageChangeAndConversion(file));\n                        // set status update for current file\n                        setCurrentUploadFileStatus(file);\n                        // mark file as READY \n                        setFileReadyStatus(true);\n                        // update \"Dropzone\" component state (NOT this react component state).\n                        onFiles([file])\n                    }}\n                />\n            </label>\n        );\n    }\n\n    const renderCustomButtonDropzone = (data, e) => {\n\n        const { meta } = data.files[0];\n    \n        if (currentFileSelectedUpload === null) {\n            return null;\n        } else {\n            if (fileReady === true) {\n                return (\n                    <Fragment>\n                        <Button style={{ marginTop: \"25px\" }} onClick={(e) => {\n                            e.preventDefault();\n                            // file meta data for next action\n                            setMetaFileData(meta);\n                            // set file status as ready or prepared.\n                            setFileReadyStatus(false);\n    \n                            const runSubmit = data.onSubmit;\n    \n                            handleSubmit(runSubmit);\n                        }} className=\"btn-air-secondary\" color=\"secondary\" size=\"md\">Submit & Upload New File!</Button>\n                    </Fragment>\n                );\n            } else {\n                return (\n                    <Fragment>\n                        <Button style={{ marginTop: \"25px\" }} onClick={() => {\n                            NotificationManager.warning(`File is NOT ready to upload yet! Please wait for the preparation steps to complete before submitting.`, 'Still preparing!', 4500);\n                        }} className=\"btn-air-light\" color=\"light\" size=\"md\">Submit & Upload New File!</Button>\n                    </Fragment>\n                );\n            }\n        }\n    }\n    const onSubmitHelper = (files, allFiles) => {\n        allFiles.forEach((file) => {\n            file.remove();\n        })\n    }\n    \n    return (\n        <div>\n            <Container fluid={true}>\n                <Form className={`needs-validation tooltip-validation ${validateClass ? 'validateClass' : ''}`} noValidate=\"\" onSubmit={handleSubmit(onSubmit, onError)}>\n                    <Row>\n                        <Col sm=\"12\" md=\"6\" lg=\"6\" xl=\"6\">\n                            <Label>Demo URL (<strong style={{ color: \"red\", textDecorationLine: \"underline\" }}>optional</strong> - if you want to display working code at an external URL)</Label>\n                            <input {...register(\"demoURL\", { required: false, minLength: {\n                                value: 15,\n                                message: \"You must enter AT Least 15 characters\"\n                            }, maxLength: {\n                                value: 75,\n                                message: \"You may ONLY enter 75 characters or less\"\n                            }, onBlur: (e) => {\n                                // check if valid url in helper file.\n                                return helpers.CalculateWhetherURLIsLegit(e.target.value);\n                            }})} className=\"form-control\" name=\"demoURL\" type=\"text\" placeholder=\"Listing title\" onChange={handleInputChange} value={data.demoURL} />\n                            <div className=\"valid-feedback\">{\"Looks good!\"}</div>\n                        </Col>\n                        <Col className=\"input-surrounding-col\" sm=\"12\" md=\"6\" lg=\"6\" xl=\"6\">\n                            <Label>Select how long you would like your listing to run for (length of <em style={{ color: \"blue\" }}>both</em> \"buy-it-now\" & \"actions\")</Label>\n                            <Controller\n                                control={control}\n                                name=\"listingTimespan\"\n                                {...register(\"listingTimespan\", { required: {\n                                    value: true,\n                                    message: \"You must select a value before proceeding\"\n                                }, onBlur: (e) => {\n\n                                    console.log(\"onBlur...!\", e);\n\n                                    const value = e.target.value;\n\n                                    setTimeout(() => {\n                                        // clear error after proper selection\n                                        if ((typeof value !== \"undefined\") && (Object.keys(value).length > 0)) {\n                                            clearErrors(\"listingTimespan\");\n                                        } else {\n                                            // set error as nothing was selected (blank 'click-off' selection of selector)\n                                            setError(\"listingTimespan\", {\n                                                type: \"manual\",\n                                                message: \"You haven't selected a 'timespan' & a selection is required before proceeding\",\n                                            });\n                                        }\n                                    }, 50);\n                                }})}\n                                render={({ field }) => (\n                                    <Select\n                                        {...field}\n                                        ref={listingTimespanGeneratedRef}\n                                        autoBlur={true}\n                                        defaultValue={null}\n                                        onMenuClose={listingTimelineSelectClose}\n                                        value={gatheredValues.listingTimespan}\n                                        onChange={(selectedOption) => {\n                                            // run conditionals\n                                            if (typeof gatheredValues.listingTimespan === \"undefined\") {\n                                                setValue('listingTimespan', selectedOption, { shouldValidate: false });\n                                            } else {\n                                                clearErrors(\"listingTimespan\");\n                                            }\n\n                                            listingTimespanGeneratedRef.current.blur();\n                                        }}\n                                        options={helpers.listingTimespanOptions}\n                                    />\n                                )}\n                            />\n                            {errors.listingTimespan ? <span className=\"span-tooltip\">{errors.listingTimespan.message}</span> : null}\n                            <div className=\"valid-feedback\">{\"Looks good!\"}</div>\n                        </Col>\n                    </Row>\n                    <Row style={{ paddingTop: \"25px\" }}>\n                        <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                            <Label>Enter relevant tags/hashtags (people will use these tags when searching for specific/condensed results) - <strong style={{ color: \"blue\" }}>5(MIN) - 15(MAX) Tags</strong></Label>\n                            <ListGroup>\n                            <Controller\n                                control={control}\n                                name=\"hashtags\"\n                                {...register(\"hashtags\", { required: {\n                                    value: true,\n                                    message: \"You MUST enter AT least 5 (five) tags up to a maximum of 15 (fifteen) tags\"\n                                }})}\n                                render={({ field }) => (\n                                    <ReactTags \n                                        {...field}\n                                        tags={gatheredValues.hashtags}\n                                        name={\"hashtags\"}\n                                        suggestions={suggestions}\n                                        classNames={{\n                                            tags: 'hashtagsTagsClass',\n                                            tagInput: 'hashtagsTagInputClass',\n                                            tagInputField: 'hashtagsTagInputFieldClass',\n                                            selected: 'hashtagsSelectedClass',\n                                            tag: 'hashtagsTagClass badge badge-primary',\n                                            remove: 'hashtagsRemoveClass',\n                                            suggestions: 'hashtagsSuggestionsClass',\n                                            activeSuggestion: 'hashtagsActiveSuggestionClass'\n                                        }}\n                                        handleDelete={(index) => {\n                                            setValue('hashtags', handleDelete(index, gatheredValues.hashtags), { shouldValidate: true });\n                                        }}\n                                        renderSuggestion={(suggestion) => {\n                                            // return list item(s)\n                                            return (\n                                                <ListGroupItem className=\"custom-suggestion-groupitem\" key={suggestion.index} onClick={() => {\n                                                    // run conditional checks\n                                                    if (typeof gatheredValues.hashtags !== \"undefined\") {\n                                                        if (gatheredValues.hashtags.length < 15) {\n                                                            if (gatheredValues.hashtags.length > 0) {\n                                                                setValue('hashtags', [...gatheredValues.hashtags, suggestion], { shouldValidate: true });\n                                                            } else {\n                                                                setValue('hashtags', [suggestion], { shouldValidate: true });\n                                                            }\n                                                        } else {\n                                                            NotificationManager.warning('You have entered TOO many hashtags & we cannot add your current tag until some are removed.', \"Too many hashtags!\", 4250);\n                                                        }\n                                                    } else {\n                                                        setValue('hashtags', [suggestion], { shouldValidate: true });\n                                                    }\n                                                }}>{suggestion.text}</ListGroupItem>\n                                            );\n                                        }}\n                                        readOnly={false}\n                                        placeholder={\"Enter a tag (these are how people search & find your listing)\"}\n                                        maxLength={15}\n                                        handleAddition={(tag) => {\n                                            if (typeof gatheredValues.hashtags !== \"undefined\") {\n                                                if (gatheredValues.hashtags.length < 15) {\n                                                    if (gatheredValues.hashtags.length > 0) {\n                                                        setValue('hashtags', [...gatheredValues.hashtags, tag], { shouldValidate: true });\n                                                    } else {\n                                                        setValue('hashtags', [tag], { shouldValidate: true });\n                                                    }\n                                                } else {\n                                                    NotificationManager.warning('You have entered TOO many hashtags & we cannot add your current tag until some are removed.', \"Too many hashtags!\", 4500);\n                                                }\n                                            } else {\n                                                setValue('hashtags', [tag], { shouldValidate: true });\n                                            }\n                                        }}\n                                        handleDrag={(tag, currPos, newPos) => {\n                                            setValue('hashtags', handleDrag(tag, currPos, newPos, gatheredValues.hashtags), { shouldValidate: true });\n                                        }}\n                                        delimiters={delimiters} \n                                    />\n                                    \n                                )}\n                            />\n                            </ListGroup>\n                            {errors.hashtags ? <span className=\"span-tooltip\">{errors.hashtags.message}</span> : null}\n                            <div className=\"valid-feedback\">{\"Looks good!\"}</div>\n                        </Col>\n                    </Row>\n                    <Row style={{ marginTop: \"45px\" }}>\n                        <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                            <div className=\"dz-message needsclick\">\n                                <Dropzone\n                                    ref={dropzoneRef}\n                                    PreviewComponent={(data) => renderPreviewOfFile(data)}\n                                    maxFiles={1}\n                                    autoUpload={true}\n                                    submitButtonDisabled={false}\n                                    InputComponent={CustomInputHelper}\n                                    onSubmit={onSubmitHelper}\n                                    SubmitButtonComponent={(data, e) => {\n                                        return (\n                                            <div className=\"absolutely-position-submit-btn\">\n                                                {renderCustomButtonDropzone(data, e)}\n                                            </div>\n                                        );\n                                    }}\n                                    multiple={false}\n                                    canCancel={false}\n                                    styles={{\n                                        dropzone: { height: 325 },\n                                        dropzoneActive: { borderColor: 'green' },\n                                    }}\n                                />\n                            </div>\n                        </Col>\n                    </Row>\n                    <Row style={{ marginTop: \"45px\" }}>\n                        <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                            <Label>Leave a comment for \"{process.env.REACT_APP_APPLICATION_NAME}\" <strong onClick={() => {\n                                setPopoverReviewerStatus(true);\n                            }} id={\"PopoverReviewersInfo\"} style={{ color: \"red\", textDecorationLine: \"underline\" }}>reviewers</strong></Label>\n                            <Popover\n                                className=\"make-popover-interactive\"\n                                placement=\"bottom\" isOpen={reviewerPopoverStatus} target=\"PopoverReviewersInfo\" toggle={() => {\n                                    setPopoverReviewerStatus(!reviewerPopoverStatus);\n                                }}\n                            >\n                                <PopoverHeader>What is a \"Reviewer\"? <div className=\"popover-cancel-container\" onClick={() => {\n                                    setPopoverReviewerStatus(false);\n                                }}><img src={require(\"../../../../../../../assets/icons/close-64.png\")} className=\"small-close-popover-icon\" /></div></PopoverHeader>\n                                <PopoverBody><h6 style={{ color: \"blue\", textDecorationLine: \"underline\" }}>What is a reviewer you may ask?</h6><hr />Reviewers are employee's of {process.env.REACT_APP_APPLICATION_NAME}'s platform that personally review each submission of an \"item-for-sale\" before posting it publically for safety reasons. This typically takes anywhere from 1-3 days but you will be notified upon the completion of a final decision.\n                                </PopoverBody>\n                            </Popover>\n                            <textarea rows={8} {...register(\"commentToReviewer\", { required: {\n                                value: true,\n                                message: \"You MUST enter AT least 50 characters with a maximum of 500 characters\"\n                            }, minLength: {\n                                value: 50,\n                                message: \"You must enter AT Least 50 characters\"\n                            }, maxLength: {\n                                value: 500,\n                                message: \"You may ONLY enter 500 characters or less\"\n                            }, onBlur: (e) => {\n                                // check whether valid on click-off/blur\n                                console.log(\"blurred.\");\n                            }})} className=\"form-control\" name=\"commentToReviewer\" type=\"textarea\" placeholder=\"Leave a comment for our reviewers\" onChange={handleInputChange} value={data.commentToReviewer} />\n                            {errors.commentToReviewer ? <span className=\"span-tooltip\">{errors.commentToReviewer.message}</span> : null}\n                        </Col>\n                    </Row>\n                    <hr />\n                    <Row style={{ marginTop: \"45px\" }}>\n                        <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                            <Button color=\"secondary\" style={{ width: \"100%\" }} type=\"submit\" onClick={() => {\n\n                            }}>~ Submit form details and proceed to next page ~</Button>\n                        </Col>\n                    </Row>\n                </Form>\n            </Container>\n        </div>\n    );\n}\nconst mapStateToProps = (state) => {\n    return {\n        userData: state.auth.data,\n        previouslySavedSoftwareData: state.softwareListingSale.softwareListingSaleInfo\n    }\n}\nexport default connect(mapStateToProps, { saveSoftwareListingInfo })(PageThreeHelper);\n"]},"metadata":{},"sourceType":"module"}