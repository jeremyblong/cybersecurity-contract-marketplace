{"ast":null,"code":"// helpers logic related to mainly to redux-hook-form\nconst MainHookHelpers = () => {\n  const radioSelectionPricingOptionsOne = {\n    check: (setError, register, clearErrors) => {\n      return { ...register(\"purchaseBidBuyError\", {\n          required: {\n            value: true,\n            message: \"You MUST select an option before proceeding with this form - important bidding/purchase information is required.\"\n          },\n          onBlur: e => {\n            // log to check whats returned\n            const value = e.target.value;\n            setTimeout(() => {\n              // clear error after proper selection\n              if (typeof value !== \"undefined\" && value.length > 0) {\n                clearErrors(\"purchaseBidBuyError\");\n              } else {\n                // set error as nothing was selected (blank 'click-off' selection of selector)\n                setError(\"purchaseBidBuyError\", {\n                  type: \"manual\",\n                  message: \"You MUST select an option before proceeding with this form - important bidding/purchase information is required.\"\n                });\n              }\n            }, 50);\n          }\n        })\n      };\n    },\n    id: \"auction-ONLY\",\n    name: \"purchaseBidBuyError\",\n    value: \"purchaseBidBuyError\"\n  };\n  const radioSelectionPricingOptionsTwo = {\n    check: (setError, register, clearErrors) => {\n      return { ...register(\"purchaseBidBuyError\", {\n          required: {\n            value: true,\n            message: \"You MUST select an option before proceeding with this form - important bidding/purchase information is required.\"\n          },\n          onBlur: e => {\n            // log to check whats returned\n            const value = e.target.value;\n            setTimeout(() => {\n              // clear error after proper selection\n              if (typeof value !== \"undefined\" && value.length > 0) {\n                clearErrors(\"purchaseBidBuyError\");\n              } else {\n                // set error as nothing was selected (blank 'click-off' selection of selector)\n                setError(\"purchaseBidBuyError\", {\n                  type: \"manual\",\n                  message: \"You MUST select an option before proceeding with this form - important bidding/purchase information is required.\"\n                });\n              }\n            }, 50);\n          }\n        })\n      };\n    },\n    id: \"auction-AND-buy-it-now\",\n    name: \"purchaseBidBuyError\",\n    value: \"purchaseBidBuyError\"\n  }; // return values to other component\n\n  return {\n    radioSelectionPricingOptionsOne,\n    radioSelectionPricingOptionsTwo\n  };\n};\n\nexport default MainHookHelpers;","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/softwareHardwareExchanges/software/createListing/multiStepPages/pageThree/helpers/reactHookFormHelpers/helpers.js"],"names":["MainHookHelpers","radioSelectionPricingOptionsOne","check","setError","register","clearErrors","required","value","message","onBlur","e","target","setTimeout","length","type","id","name","radioSelectionPricingOptionsTwo"],"mappings":"AAAA;AACA,MAAMA,eAAe,GAAG,MAAM;AAE1B,QAAMC,+BAA+B,GAAG;AACpCC,IAAAA,KAAK,EAAE,CAACC,QAAD,EAAWC,QAAX,EAAqBC,WAArB,KAAqC;AACxC,aACI,EAAC,GAAGD,QAAQ,CAAC,qBAAD,EAAwB;AAAEE,UAAAA,QAAQ,EAAE;AAC5CC,YAAAA,KAAK,EAAE,IADqC;AAE5CC,YAAAA,OAAO,EAAE;AAFmC,WAAZ;AAGjCC,UAAAA,MAAM,EAAGC,CAAD,IAAO;AACd;AACA,kBAAMH,KAAK,GAAGG,CAAC,CAACC,MAAF,CAASJ,KAAvB;AAEAK,YAAAA,UAAU,CAAC,MAAM;AACb;AACA,kBAAK,OAAOL,KAAP,KAAiB,WAAlB,IAAmCA,KAAK,CAACM,MAAN,GAAe,CAAtD,EAA0D;AACtDR,gBAAAA,WAAW,CAAC,qBAAD,CAAX;AACH,eAFD,MAEO;AACH;AACAF,gBAAAA,QAAQ,CAAC,qBAAD,EAAwB;AAC5BW,kBAAAA,IAAI,EAAE,QADsB;AAE5BN,kBAAAA,OAAO,EAAE;AAFmB,iBAAxB,CAAR;AAIH;AACJ,aAXS,EAWP,EAXO,CAAV;AAYH;AAnBmC,SAAxB;AAAZ,OADJ;AAsBH,KAxBmC;AAyBpCO,IAAAA,EAAE,EAAE,cAzBgC;AA0BpCC,IAAAA,IAAI,EAAE,qBA1B8B;AA2BpCT,IAAAA,KAAK,EAAE;AA3B6B,GAAxC;AA6BA,QAAMU,+BAA+B,GAAG;AACpCf,IAAAA,KAAK,EAAE,CAACC,QAAD,EAAWC,QAAX,EAAqBC,WAArB,KAAqC;AACxC,aACI,EAAC,GAAGD,QAAQ,CAAC,qBAAD,EAAwB;AAAEE,UAAAA,QAAQ,EAAE;AAC5CC,YAAAA,KAAK,EAAE,IADqC;AAE5CC,YAAAA,OAAO,EAAE;AAFmC,WAAZ;AAGjCC,UAAAA,MAAM,EAAGC,CAAD,IAAO;AACd;AACA,kBAAMH,KAAK,GAAGG,CAAC,CAACC,MAAF,CAASJ,KAAvB;AAEAK,YAAAA,UAAU,CAAC,MAAM;AACb;AACA,kBAAK,OAAOL,KAAP,KAAiB,WAAlB,IAAmCA,KAAK,CAACM,MAAN,GAAe,CAAtD,EAA0D;AACtDR,gBAAAA,WAAW,CAAC,qBAAD,CAAX;AACH,eAFD,MAEO;AACH;AACAF,gBAAAA,QAAQ,CAAC,qBAAD,EAAwB;AAC5BW,kBAAAA,IAAI,EAAE,QADsB;AAE5BN,kBAAAA,OAAO,EAAE;AAFmB,iBAAxB,CAAR;AAIH;AACJ,aAXS,EAWP,EAXO,CAAV;AAYH;AAnBmC,SAAxB;AAAZ,OADJ;AAsBH,KAxBmC;AAyBpCO,IAAAA,EAAE,EAAE,wBAzBgC;AA0BpCC,IAAAA,IAAI,EAAE,qBA1B8B;AA2BpCT,IAAAA,KAAK,EAAE;AA3B6B,GAAxC,CA/B0B,CA4D1B;;AACA,SAAO;AACHN,IAAAA,+BADG;AAEHgB,IAAAA;AAFG,GAAP;AAIH,CAjED;;AAoEA,eAAejB,eAAf","sourcesContent":["// helpers logic related to mainly to redux-hook-form\nconst MainHookHelpers = () => {\n    \n    const radioSelectionPricingOptionsOne = {\n        check: (setError, register, clearErrors) => {\n            return (\n                {...register(\"purchaseBidBuyError\", { required: {\n                    value: true,\n                    message: \"You MUST select an option before proceeding with this form - important bidding/purchase information is required.\"\n                }, onBlur: (e) => {\n                    // log to check whats returned\n                    const value = e.target.value;\n\n                    setTimeout(() => {\n                        // clear error after proper selection\n                        if ((typeof value !== \"undefined\") && (value.length > 0)) {\n                            clearErrors(\"purchaseBidBuyError\");\n                        } else {\n                            // set error as nothing was selected (blank 'click-off' selection of selector)\n                            setError(\"purchaseBidBuyError\", {\n                                type: \"manual\",\n                                message: \"You MUST select an option before proceeding with this form - important bidding/purchase information is required.\",\n                            });\n                        }\n                    }, 50);\n                }})}\n            );\n        },\n        id: \"auction-ONLY\",\n        name: \"purchaseBidBuyError\",\n        value: \"purchaseBidBuyError\"\n    };\n    const radioSelectionPricingOptionsTwo = {\n        check: (setError, register, clearErrors) => {\n            return (\n                {...register(\"purchaseBidBuyError\", { required: {\n                    value: true,\n                    message: \"You MUST select an option before proceeding with this form - important bidding/purchase information is required.\"\n                }, onBlur: (e) => {\n                    // log to check whats returned\n                    const value = e.target.value;\n\n                    setTimeout(() => {\n                        // clear error after proper selection\n                        if ((typeof value !== \"undefined\") && (value.length > 0)) {\n                            clearErrors(\"purchaseBidBuyError\");\n                        } else {\n                            // set error as nothing was selected (blank 'click-off' selection of selector)\n                            setError(\"purchaseBidBuyError\", {\n                                type: \"manual\",\n                                message: \"You MUST select an option before proceeding with this form - important bidding/purchase information is required.\",\n                            });\n                        }\n                    }, 50);\n                }})}\n            );\n        },\n        id: \"auction-AND-buy-it-now\",\n        name: \"purchaseBidBuyError\",\n        value: \"purchaseBidBuyError\"\n    };\n    // return values to other component\n    return {\n        radioSelectionPricingOptionsOne,\n        radioSelectionPricingOptionsTwo\n    }\n}\n\n\nexport default MainHookHelpers;"]},"metadata":{},"sourceType":"module"}