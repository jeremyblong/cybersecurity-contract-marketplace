{"ast":null,"code":"// helpers logic related to mainly to redux-hook-form\nconst MainHooksCustomHelpers = () => {\n  const calculateWhetherURLIsLegit = data => {\n    // helper function\n    const isValidHttpUrl = string => {\n      let url;\n\n      try {\n        url = new URL(string);\n      } catch (_) {\n        return false;\n      } // return protocol data\n\n\n      return url.protocol === \"http:\" || url.protocol === \"https:\";\n    }; // finally, check if url is VALID\n\n\n    if (isValidHttpUrl(data)) {\n      // url IS VALID\n      return true;\n    } else {\n      // url IS NOT VALID - return error string\n      return \"You *must* enter a valid URL consisting of either https:// OR http:// along with .net/com/etc...\";\n    }\n\n    ;\n  };\n\n  const coverLetterTextFormHelper = {\n    check: (setError, register, clearErrors, name) => {\n      return { ...register(name, {\n          required: true,\n          minLength: {\n            value: 8,\n            message: \"You must enter AT Least 8 characters\"\n          },\n          maxLength: {\n            value: 75,\n            message: \"You may ONLY enter 75 characters or less\"\n          },\n          onBlur: e => {\n            // check if valid url in helper file.\n            const validOrNot = calculateWhetherURLIsLegit(e.target.value); // extracted final value from input\n\n            const value = e.target.value;\n\n            if (validOrNot === true) {\n              setValue(name, value, {\n                shouldValidate: false\n              }); // clear error after setting proper change state\n\n              clearErrors(name);\n            } else {\n              setTimeout(() => {\n                if (!errors[name]) {\n                  setError(name, {\n                    type: \"manual\",\n                    message: \"You MUST enter a VALID URL including http/https and ://\"\n                  });\n                }\n              }, 75);\n            }\n          }\n        })\n      };\n    }\n  }; // return values to other component\n\n  return {\n    coverLetterTextFormHelper\n  };\n};\n\nexport default MainHooksCustomHelpers;","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/opportunities/employers/applyToListingHacker/helpers/reactHookFormHelpers.js"],"names":["MainHooksCustomHelpers","calculateWhetherURLIsLegit","data","isValidHttpUrl","string","url","URL","_","protocol","coverLetterTextFormHelper","check","setError","register","clearErrors","name","required","minLength","value","message","maxLength","onBlur","e","validOrNot","target","setValue","shouldValidate","setTimeout","errors","type"],"mappings":"AAAA;AACA,MAAMA,sBAAsB,GAAG,MAAM;AACjC,QAAMC,0BAA0B,GAAIC,IAAD,IAAU;AACzC;AACA,UAAMC,cAAc,GAAIC,MAAD,IAAY;AAC/B,UAAIC,GAAJ;;AAEA,UAAI;AACFA,QAAAA,GAAG,GAAG,IAAIC,GAAJ,CAAQF,MAAR,CAAN;AACD,OAFD,CAEE,OAAOG,CAAP,EAAU;AACV,eAAO,KAAP;AACD,OAP8B,CAQ/B;;;AACA,aAAOF,GAAG,CAACG,QAAJ,KAAiB,OAAjB,IAA4BH,GAAG,CAACG,QAAJ,KAAiB,QAApD;AACH,KAVD,CAFyC,CAazC;;;AACA,QAAIL,cAAc,CAACD,IAAD,CAAlB,EAA0B;AACtB;AACA,aAAO,IAAP;AACH,KAHD,MAGO;AACH;AACA,aAAO,kGAAP;AACH;;AAAA;AACJ,GArBD;;AAuBA,QAAMO,yBAAyB,GAAG;AAC9BC,IAAAA,KAAK,EAAE,CAACC,QAAD,EAAWC,QAAX,EAAqBC,WAArB,EAAkCC,IAAlC,KAA2C;AAC9C,aACI,EAAC,GAAGF,QAAQ,CAACE,IAAD,EAAO;AAAEC,UAAAA,QAAQ,EAAE,IAAZ;AAAkBC,UAAAA,SAAS,EAAE;AAC5CC,YAAAA,KAAK,EAAE,CADqC;AAE5CC,YAAAA,OAAO,EAAE;AAFmC,WAA7B;AAGhBC,UAAAA,SAAS,EAAE;AACVF,YAAAA,KAAK,EAAE,EADG;AAEVC,YAAAA,OAAO,EAAE;AAFC,WAHK;AAMhBE,UAAAA,MAAM,EAAGC,CAAD,IAAO;AACd;AACA,kBAAMC,UAAU,GAAGrB,0BAA0B,CAACoB,CAAC,CAACE,MAAF,CAASN,KAAV,CAA7C,CAFc,CAGd;;AACA,kBAAMA,KAAK,GAAGI,CAAC,CAACE,MAAF,CAASN,KAAvB;;AAEA,gBAAIK,UAAU,KAAK,IAAnB,EAAyB;AACrBE,cAAAA,QAAQ,CAACV,IAAD,EAAOG,KAAP,EAAc;AAAEQ,gBAAAA,cAAc,EAAE;AAAlB,eAAd,CAAR,CADqB,CAErB;;AACAZ,cAAAA,WAAW,CAACC,IAAD,CAAX;AACH,aAJD,MAIO;AACHY,cAAAA,UAAU,CAAC,MAAM;AACb,oBAAI,CAACC,MAAM,CAACb,IAAD,CAAX,EAAmB;AACfH,kBAAAA,QAAQ,CAACG,IAAD,EAAO;AACXc,oBAAAA,IAAI,EAAE,QADK;AAEXV,oBAAAA,OAAO,EAAE;AAFE,mBAAP,CAAR;AAIH;AACJ,eAPS,EAOP,EAPO,CAAV;AAQH;AACJ;AA1BkB,SAAP;AAAZ,OADJ;AA6BH;AA/B6B,GAAlC,CAxBiC,CAyDjC;;AACA,SAAO;AACHT,IAAAA;AADG,GAAP;AAGH,CA7DD;;AA+DA,eAAeT,sBAAf","sourcesContent":["// helpers logic related to mainly to redux-hook-form\nconst MainHooksCustomHelpers = () => {\n    const calculateWhetherURLIsLegit = (data) => {\n        // helper function\n        const isValidHttpUrl = (string) => {\n            let url;\n            \n            try {\n              url = new URL(string);\n            } catch (_) {\n              return false;  \n            }\n            // return protocol data\n            return url.protocol === \"http:\" || url.protocol === \"https:\";\n        }\n        // finally, check if url is VALID\n        if (isValidHttpUrl(data)) {\n            // url IS VALID\n            return true;\n        } else {\n            // url IS NOT VALID - return error string\n            return \"You *must* enter a valid URL consisting of either https:// OR http:// along with .net/com/etc...\";\n        };\n    }\n\n    const coverLetterTextFormHelper = {\n        check: (setError, register, clearErrors, name) => {\n            return (\n                {...register(name, { required: true, minLength: {\n                    value: 8,\n                    message: \"You must enter AT Least 8 characters\"\n                }, maxLength: {\n                    value: 75,\n                    message: \"You may ONLY enter 75 characters or less\"\n                }, onBlur: (e) => {\n                    // check if valid url in helper file.\n                    const validOrNot = calculateWhetherURLIsLegit(e.target.value);\n                    // extracted final value from input\n                    const value = e.target.value;\n\n                    if (validOrNot === true) {\n                        setValue(name, value, { shouldValidate: false });\n                        // clear error after setting proper change state\n                        clearErrors(name);\n                    } else {\n                        setTimeout(() => {\n                            if (!errors[name]) {\n                                setError(name, {\n                                    type: \"manual\",\n                                    message: \"You MUST enter a VALID URL including http/https and ://\",\n                                });\n                            }\n                        }, 75)\n                    }\n                }})}\n            );\n        }\n    };\n    // return values to other component\n    return {\n        coverLetterTextFormHelper\n    }\n}\n\nexport default MainHooksCustomHelpers;"]},"metadata":{},"sourceType":"module"}