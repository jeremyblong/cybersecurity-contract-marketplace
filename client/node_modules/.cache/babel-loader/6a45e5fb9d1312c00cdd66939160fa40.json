{"ast":null,"code":"var _jsxFileName = \"/home/kali/Documents/cybersecurity/client/src/components/dashboard/verification/initialize/startVerification.js\";\nimport React, { Component, Fragment } from 'react';\nimport VerifyButton from \"@passbase/button/react\";\nimport ReactPlayer from 'react-player';\nimport { Container, Row, Col, Card, CardBody, CardHeader } from \"reactstrap\";\nimport \"./styles.css\";\nimport { connect } from \"react-redux\";\nimport axios from 'axios';\nimport { NotificationManager } from 'react-notifications';\nimport { authentication } from \"../../../../redux/actions/authentication/auth.js\";\n\nclass InitializeVerificationFlowHelper extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmissionOfVerification = identityAccessKey => {\n      console.log(\"handleSubmissionOfVerification ran!\", identityAccessKey);\n      axios.post(`${process.env.REACT_APP_BASE_URL}/save/identity/access/key/verification/flow`, {\n        identityAccessKey,\n        uniqueId: this.props.userData.uniqueId\n      }).then(res => {\n        if (res.data.message === \"Saved verification data!\") {\n          console.log(res.data);\n          const {\n            user\n          } = res.data;\n          this.props.authentication(user);\n          NotificationManager.success(`You've successfully completed the required verification process/flow, we are reviewing your information and will notify you when approved.`, 'Completed Verification Flow!', 4500);\n        } else {\n          console.log(\"err\", res.data);\n          NotificationManager.error(\"We experienced an error while saving your completed verification data...\", 'ERROR saving verification data!', 4500);\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.state = {};\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ReactPlayer, {\n      playing: true,\n      loop: true,\n      muted: true,\n      width: \"100%\",\n      height: \"100vh\",\n      className: \"full-screen-player\",\n      wrapper: \"div\",\n      url: require(\"../../../../assets/video/verification.mp4\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"centered-container-video-overlay\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      fluid: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      sm: \"12\",\n      md: \"12\",\n      lg: \"12\",\n      xl: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      style: {\n        paddingTop: \"25px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(CardHeader, {\n      className: \"b-l-secondary border-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 41\n      }\n    }, \"Start your verification flow by clicking the button below to get started!\")), /*#__PURE__*/React.createElement(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 41\n      }\n    }, \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been\", \"the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley\", \"of type and scrambled. Lorem Ipsum is simply dummy text of the printing and typesetting\", \"industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an\", \"unknown printer took a galley of type and scrambled.\"), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(VerifyButton, {\n      apiKey: process.env.REACT_APP_PASSBASE_PUBLISHABLE_API_KEY,\n      onSubmitted: identityAccessKey => {\n        console.log(\"onSubmitted - identityAccessKey\", identityAccessKey);\n      },\n      onFinish: identityAccessKey => {\n        console.log(\"onFinish - identityAccessKey\", identityAccessKey);\n        this.handleSubmissionOfVerification(identityAccessKey);\n      },\n      onError: errorCode => {\n        console.log(\"errorCode\", errorCode);\n        NotificationManager.error(\"Unfortunately, an error occurred during the verification process and we were unable to complete the verification process/flow.\", 'ERROR Completing Verification!', 4500);\n      },\n      onStart: () => {\n        console.log(\"started flow...!\");\n      },\n      prefillAttributes: {\n        email: this.props.userData.email\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 41\n      }\n    }))))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    userData: state.auth.data\n  };\n};\n\nexport default connect(mapStateToProps, {\n  authentication\n})(InitializeVerificationFlowHelper);","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/verification/initialize/startVerification.js"],"names":["React","Component","Fragment","VerifyButton","ReactPlayer","Container","Row","Col","Card","CardBody","CardHeader","connect","axios","NotificationManager","authentication","InitializeVerificationFlowHelper","constructor","props","handleSubmissionOfVerification","identityAccessKey","console","log","post","process","env","REACT_APP_BASE_URL","uniqueId","userData","then","res","data","message","user","success","error","catch","err","state","render","require","paddingTop","REACT_APP_PASSBASE_PUBLISHABLE_API_KEY","errorCode","email","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport VerifyButton from \"@passbase/button/react\";\nimport ReactPlayer from 'react-player';\nimport { Container, Row, Col, Card, CardBody, CardHeader } from \"reactstrap\";\nimport \"./styles.css\";\nimport { connect } from \"react-redux\";\nimport axios from 'axios';\nimport { NotificationManager } from 'react-notifications';\nimport { authentication } from \"../../../../redux/actions/authentication/auth.js\";\n\nclass InitializeVerificationFlowHelper extends Component {\nconstructor (props) {\n    super(props);\n\n    this.state = {\n        \n    }\n}\n    handleSubmissionOfVerification = (identityAccessKey) => {\n        console.log(\"handleSubmissionOfVerification ran!\", identityAccessKey);\n\n        axios.post(`${process.env.REACT_APP_BASE_URL}/save/identity/access/key/verification/flow`, {\n            identityAccessKey,\n            uniqueId: this.props.userData.uniqueId\n        }).then((res) => {\n            if (res.data.message === \"Saved verification data!\") {\n                console.log(res.data);\n\n                const { user } = res.data;\n\n                this.props.authentication(user);\n\n                NotificationManager.success(`You've successfully completed the required verification process/flow, we are reviewing your information and will notify you when approved.`, 'Completed Verification Flow!', 4500);\n            } else {\n                console.log(\"err\", res.data);\n\n                NotificationManager.error(\"We experienced an error while saving your completed verification data...\", 'ERROR saving verification data!', 4500);\n            }\n        }).catch((err) => {\n            console.log(err);\n        })\n    }\n    render() {\n        return (\n            <Fragment>\n                <ReactPlayer playing={true} loop={true} muted={true} width={\"100%\"} height={\"100vh\"} className={\"full-screen-player\"} wrapper={\"div\"} url={require(\"../../../../assets/video/verification.mp4\")} />\n                <div className=\"centered-container-video-overlay\">\n                    <Container fluid={false}>\n                        <Row>\n                            <Col sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                                <Card style={{ paddingTop: \"25px\" }}>\n                                    <CardHeader className=\"b-l-secondary border-3\">\n                                        <h5>Start your verification flow by clicking the button below to get started!</h5>\n                                    </CardHeader>\n                                    <CardBody>\n                                        <p>\n                                            {\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been\"}\n                                            {\"the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley\"}\n                                            {\"of type and scrambled. Lorem Ipsum is simply dummy text of the printing and typesetting\"}\n                                            {\"industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an\"}\n                                            {\"unknown printer took a galley of type and scrambled.\"}\n                                        </p>\n                                        <hr />\n                                        <VerifyButton\n                                            apiKey={process.env.REACT_APP_PASSBASE_PUBLISHABLE_API_KEY}\n                                            onSubmitted={(identityAccessKey) => {\n                                                console.log(\"onSubmitted - identityAccessKey\", identityAccessKey);\n                                            }}\n                                            onFinish={(identityAccessKey) => {\n                                                console.log(\"onFinish - identityAccessKey\", identityAccessKey);\n\n                                                this.handleSubmissionOfVerification(identityAccessKey);\n                                            }}\n                                            onError={(errorCode) => {\n                                                console.log(\"errorCode\", errorCode);\n\n                                                NotificationManager.error(\"Unfortunately, an error occurred during the verification process and we were unable to complete the verification process/flow.\", 'ERROR Completing Verification!', 4500);\n                                            }}\n                                            onStart={() => {\n                                                console.log(\"started flow...!\");\n                                            }}\n                                            prefillAttributes={{\n                                                email: this.props.userData.email\n                                            }}\n                                        />\n                                    </CardBody>\n                                </Card>\n                            </Col>\n                        </Row>\n                    </Container>\n                </div>\n            </Fragment>\n        )\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        userData: state.auth.data\n    }\n}\nexport default connect(mapStateToProps, { authentication })(InitializeVerificationFlowHelper);\n\n"]},"metadata":{},"sourceType":"module"}