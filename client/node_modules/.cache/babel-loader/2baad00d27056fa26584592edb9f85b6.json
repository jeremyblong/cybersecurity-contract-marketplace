{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.runPreflight = exports.PreflightTest = void 0;\n\nvar constants_1 = require(\"../util/constants\");\n\nvar timer_1 = require(\"./timer\");\n\nvar mos_1 = require(\"./mos\");\n\nvar getCombinedConnectionStats_1 = require(\"./getCombinedConnectionStats\");\n\nvar getturncredentials_1 = require(\"./getturncredentials\");\n\nvar makestat_1 = require(\"./makestat\");\n\nvar syntheticaudio_1 = require(\"./syntheticaudio\");\n\nvar syntheticvideo_1 = require(\"./syntheticvideo\");\n\nvar util_1 = require(\"../util\");\n\nvar WS_SERVER = require('../util/constants').WS_SERVER;\n\nvar Log = require('../util/log');\n\nvar EventEmitter = require('../eventemitter');\n\nvar MovingAverageDelta = require('../util/movingaveragedelta');\n\nvar EventObserver = require('../util/eventobserver');\n\nvar InsightsPublisher = require('../util/insightspublisher');\n\nvar _a = require('../util/sid'),\n    createSID = _a.createSID,\n    sessionSID = _a.sessionSID;\n\nvar _b = require('../util/twilio-video-errors'),\n    SignalingConnectionTimeoutError = _b.SignalingConnectionTimeoutError,\n    MediaConnectionError = _b.MediaConnectionError;\n\nvar SECOND = 1000;\nvar DEFAULT_TEST_DURATION = 10 * SECOND;\n/**\n * progress values that are sent by {@link PreflightTest#event:progress}\n * @enum {string}\n */\n\nvar PreflightProgress = {\n  /**\n   * {@link PreflightTest} has successfully generated synthetic tracks\n   */\n  mediaAcquired: 'mediaAcquired',\n\n  /**\n   * {@link PreflightTest} has successfully connected to twilio server and obtained turn credentials\n   */\n  connected: 'connected',\n\n  /**\n   * SubscriberParticipant successfully subscribed to media tracks.\n   */\n  mediaSubscribed: 'mediaSubscribed',\n\n  /**\n   * Media flow was detected.\n   */\n  mediaStarted: 'mediaStarted',\n\n  /**\n   * Established DTLS connection. This is measured from RTCDtlsTransport `connecting` to `connected` state.\n   * On Safari, Support for measuring this is missing, this event will be not be emitted on Safari.\n   */\n  dtlsConnected: 'dtlsConnected',\n\n  /**\n   * Established a PeerConnection, This is measured from PeerConnection `connecting` to `connected` state.\n   * On Firefox, Support for measuring this is missing, this event will be not be emitted on Firefox.\n   */\n  peerConnectionConnected: 'peerConnectionConnected',\n\n  /**\n   * Established ICE connection. This is measured from ICE connection `checking` to `connected` state.\n   */\n  iceConnected: 'iceConnected'\n};\n\nfunction notEmpty(value) {\n  return value !== null && typeof value !== 'undefined';\n}\n\nvar nInstances = 0;\n/**\n * A {@link PreflightTest} monitors progress of an ongoing preflight test.\n * <br><br>\n * Instance of {@link PreflightTest} is returned by calling {@link module:twilio-video.runPreflight}\n * @extends EventEmitter\n * @emits PreflightTest#completed\n * @emits PreflightTest#failed\n * @emits PreflightTest#progress\n */\n\nvar PreflightTest =\n/** @class */\nfunction (_super) {\n  __extends(PreflightTest, _super);\n  /**\n   * Constructs {@link PreflightTest}.\n   * @param {string} token\n   * @param {?PreflightOptions} [options]\n   */\n\n\n  function PreflightTest(token, options) {\n    var _this = _super.call(this) || this;\n\n    _this._testTiming = new timer_1.Timer();\n    _this._dtlsTiming = new timer_1.Timer();\n    _this._iceTiming = new timer_1.Timer();\n    _this._peerConnectionTiming = new timer_1.Timer();\n    _this._mediaTiming = new timer_1.Timer();\n    _this._connectTiming = new timer_1.Timer();\n    _this._sentBytesMovingAverage = new MovingAverageDelta();\n    _this._packetLossMovingAverage = new MovingAverageDelta();\n    _this._progressEvents = [];\n    _this._receivedBytesMovingAverage = new MovingAverageDelta();\n    var internalOptions = options;\n    var _a = internalOptions.environment,\n        environment = _a === void 0 ? 'prod' : _a,\n        _b = internalOptions.region,\n        region = _b === void 0 ? 'gll' : _b,\n        _c = internalOptions.duration,\n        duration = _c === void 0 ? DEFAULT_TEST_DURATION : _c; // eslint-disable-next-line new-cap\n\n    var wsServer = internalOptions.wsServer || WS_SERVER(environment, region);\n    _this._log = new Log('default', _this, constants_1.DEFAULT_LOG_LEVEL, constants_1.DEFAULT_LOGGER_NAME);\n    _this._testDuration = duration;\n    _this._instanceId = nInstances++;\n\n    _this._testTiming.start();\n\n    _this._runPreflightTest(token, environment, wsServer);\n\n    return _this;\n  }\n\n  PreflightTest.prototype.toString = function () {\n    return \"[Preflight #\" + this._instanceId + \"]\";\n  };\n  /**\n   * stops ongoing tests and emits error\n   */\n\n\n  PreflightTest.prototype.stop = function () {\n    this._stopped = true;\n  };\n\n  PreflightTest.prototype._generatePreflightReport = function (collectedStats) {\n    this._testTiming.stop();\n\n    return {\n      testTiming: this._testTiming.getTimeMeasurement(),\n      networkTiming: {\n        dtls: this._dtlsTiming.getTimeMeasurement(),\n        ice: this._iceTiming.getTimeMeasurement(),\n        peerConnection: this._peerConnectionTiming.getTimeMeasurement(),\n        connect: this._connectTiming.getTimeMeasurement(),\n        media: this._mediaTiming.getTimeMeasurement()\n      },\n      stats: {\n        jitter: makestat_1.makeStat(collectedStats === null || collectedStats === void 0 ? void 0 : collectedStats.jitter),\n        rtt: makestat_1.makeStat(collectedStats === null || collectedStats === void 0 ? void 0 : collectedStats.rtt),\n        packetLoss: makestat_1.makeStat(collectedStats === null || collectedStats === void 0 ? void 0 : collectedStats.packetLoss)\n      },\n      selectedIceCandidatePairStats: collectedStats ? collectedStats.selectedIceCandidatePairStats : null,\n      iceCandidateStats: collectedStats ? collectedStats.iceCandidateStats : [],\n      progressEvents: this._progressEvents,\n      // NOTE(mpatwardhan): internal properties.\n      mos: makestat_1.makeStat(collectedStats === null || collectedStats === void 0 ? void 0 : collectedStats.mos)\n    };\n  };\n\n  PreflightTest.prototype._executePreflightStep = function (stepName, step, timeoutError) {\n    return __awaiter(this, void 0, void 0, function () {\n      var MAX_STEP_DURATION, stepPromise, timer, timeoutPromise, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this._log.debug('Executing step: ', stepName);\n\n            MAX_STEP_DURATION = this._testDuration + 10 * SECOND;\n\n            if (this._stopped) {\n              throw new Error('stopped');\n            }\n\n            stepPromise = Promise.resolve().then(step);\n            timer = null;\n            timeoutPromise = new Promise(function (_resolve, reject) {\n              timer = setTimeout(function () {\n                reject(timeoutError || new Error(stepName + \" timeout.\"));\n              }, MAX_STEP_DURATION);\n            });\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1,, 3, 4]);\n\n            return [4\n            /*yield*/\n            , Promise.race([timeoutPromise, stepPromise])];\n\n          case 2:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result];\n\n          case 3:\n            if (timer !== null) {\n              clearTimeout(timer);\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  PreflightTest.prototype._collectNetworkTimings = function (pc) {\n    var _this = this;\n\n    return new Promise(function (resolve) {\n      var dtlsTransport;\n      pc.addEventListener('iceconnectionstatechange', function () {\n        if (pc.iceConnectionState === 'checking') {\n          _this._iceTiming.start();\n        }\n\n        if (pc.iceConnectionState === 'connected') {\n          _this._iceTiming.stop();\n\n          _this._updateProgress(PreflightProgress.iceConnected);\n\n          if (!dtlsTransport || dtlsTransport && dtlsTransport.state === 'connected') {\n            resolve();\n          }\n        }\n      }); // firefox does not support connectionstatechange.\n\n      pc.addEventListener('connectionstatechange', function () {\n        if (pc.connectionState === 'connecting') {\n          _this._peerConnectionTiming.start();\n        }\n\n        if (pc.connectionState === 'connected') {\n          _this._peerConnectionTiming.stop();\n\n          _this._updateProgress(PreflightProgress.peerConnectionConnected);\n        }\n      }); // Safari does not expose sender.transport.\n\n      var senders = pc.getSenders();\n      var transport = senders.map(function (sender) {\n        return sender.transport;\n      }).find(notEmpty);\n\n      if (typeof transport !== 'undefined') {\n        dtlsTransport = transport;\n        dtlsTransport.addEventListener('statechange', function () {\n          if (dtlsTransport.state === 'connecting') {\n            _this._dtlsTiming.start();\n          }\n\n          if (dtlsTransport.state === 'connected') {\n            _this._dtlsTiming.stop();\n\n            _this._updateProgress(PreflightProgress.dtlsConnected);\n\n            if (pc.iceConnectionState === 'connected') {\n              resolve();\n            }\n          }\n        });\n      }\n    });\n  };\n\n  PreflightTest.prototype._setupInsights = function (_a) {\n    var token = _a.token,\n        _b = _a.environment,\n        environment = _b === void 0 ? constants_1.DEFAULT_ENVIRONMENT : _b,\n        _c = _a.realm,\n        realm = _c === void 0 ? constants_1.DEFAULT_REALM : _c;\n    var eventPublisherOptions = {};\n    var eventPublisher = new InsightsPublisher(token, constants_1.SDK_NAME, constants_1.SDK_VERSION, environment, realm, eventPublisherOptions); // event publisher requires room sid/participant sid. supply fake ones.\n\n    eventPublisher.connect('PREFLIGHT_ROOM_SID', 'PREFLIGHT_PARTICIPANT');\n    var eventObserver = new EventObserver(eventPublisher, Date.now(), this._log); // eslint-disable-next-line no-undefined\n\n    var undefinedValue = undefined;\n    return {\n      reportToInsights: function (_a) {\n        var _b, _c;\n\n        var report = _a.report;\n        var jitterStats = report.stats.jitter || undefinedValue;\n        var rttStats = report.stats.rtt || undefinedValue;\n        var packetLossStats = report.stats.packetLoss || undefinedValue;\n        var mosStats = report.mos || undefinedValue; // stringify important info from ice candidates.\n\n        var candidateTypeToProtocols = new Map();\n        report.iceCandidateStats.forEach(function (candidateStats) {\n          if (candidateStats.candidateType && candidateStats.protocol) {\n            var protocols = candidateTypeToProtocols.get(candidateStats.candidateType) || [];\n\n            if (protocols.indexOf(candidateStats.protocol) < 0) {\n              protocols.push(candidateStats.protocol);\n            }\n\n            candidateTypeToProtocols.set(candidateStats.candidateType, protocols);\n          }\n        });\n        var iceCandidateStats = JSON.stringify(Object.fromEntries(candidateTypeToProtocols));\n        var insightsReport = {\n          name: 'report',\n          group: 'preflight',\n          level: report.error ? 'error' : 'info',\n          payload: {\n            sessionSID: sessionSID,\n            preflightSID: createSID('PF'),\n            progressEvents: JSON.stringify(report.progressEvents),\n            testTiming: report.testTiming,\n            dtlsTiming: report.networkTiming.dtls,\n            iceTiming: report.networkTiming.ice,\n            peerConnectionTiming: report.networkTiming.peerConnection,\n            connectTiming: report.networkTiming.connect,\n            mediaTiming: report.networkTiming.media,\n            selectedLocalCandidate: (_b = report.selectedIceCandidatePairStats) === null || _b === void 0 ? void 0 : _b.localCandidate,\n            selectedRemoteCandidate: (_c = report.selectedIceCandidatePairStats) === null || _c === void 0 ? void 0 : _c.remoteCandidate,\n            iceCandidateStats: iceCandidateStats,\n            jitterStats: jitterStats,\n            rttStats: rttStats,\n            packetLossStats: packetLossStats,\n            mosStats: mosStats,\n            error: report.error\n          }\n        };\n        eventObserver.emit('event', insightsReport);\n        setTimeout(function () {\n          return eventPublisher.disconnect();\n        }, 2000);\n      }\n    };\n  };\n\n  PreflightTest.prototype._runPreflightTest = function (token, environment, wsServer) {\n    return __awaiter(this, void 0, void 0, function () {\n      var localTracks, pcs, reportToInsights, elements_1, iceServers, senderPC_1, receiverPC_1, remoteTracks_1, collectedStats_1, report, error_1, preflightReport;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            localTracks = [];\n            pcs = [];\n            reportToInsights = this._setupInsights({\n              token: token,\n              environment: environment\n            }).reportToInsights;\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 8, 9, 10]);\n\n            elements_1 = [];\n            return [4\n            /*yield*/\n            , this._executePreflightStep('Acquire media', function () {\n              return [syntheticaudio_1.syntheticAudio(), syntheticvideo_1.syntheticVideo({\n                width: 640,\n                height: 480\n              })];\n            })];\n\n          case 2:\n            localTracks = _a.sent();\n\n            this._updateProgress(PreflightProgress.mediaAcquired);\n\n            this.emit('debug', {\n              localTracks: localTracks\n            });\n\n            this._connectTiming.start();\n\n            return [4\n            /*yield*/\n            , this._executePreflightStep('Get turn credentials', function () {\n              return getturncredentials_1.getTurnCredentials(token, wsServer);\n            }, new SignalingConnectionTimeoutError())];\n\n          case 3:\n            iceServers = _a.sent();\n\n            this._connectTiming.stop();\n\n            this._updateProgress(PreflightProgress.connected);\n\n            senderPC_1 = new RTCPeerConnection({\n              iceServers: iceServers,\n              iceTransportPolicy: 'relay',\n              bundlePolicy: 'max-bundle'\n            });\n            receiverPC_1 = new RTCPeerConnection({\n              iceServers: iceServers,\n              bundlePolicy: 'max-bundle'\n            });\n            pcs.push(senderPC_1);\n            pcs.push(receiverPC_1);\n\n            this._mediaTiming.start();\n\n            return [4\n            /*yield*/\n            , this._executePreflightStep('Setup Peer Connections', function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                var remoteTracksPromise, offer, updatedOffer, answer;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      senderPC_1.addEventListener('icecandidate', function (event) {\n                        return event.candidate && receiverPC_1.addIceCandidate(event.candidate);\n                      });\n                      receiverPC_1.addEventListener('icecandidate', function (event) {\n                        return event.candidate && senderPC_1.addIceCandidate(event.candidate);\n                      });\n                      localTracks.forEach(function (track) {\n                        return senderPC_1.addTrack(track);\n                      });\n                      remoteTracksPromise = new Promise(function (resolve) {\n                        var remoteTracks = [];\n                        receiverPC_1.addEventListener('track', function (event) {\n                          remoteTracks.push(event.track);\n\n                          if (remoteTracks.length === localTracks.length) {\n                            resolve(remoteTracks);\n                          }\n                        });\n                      });\n                      return [4\n                      /*yield*/\n                      , senderPC_1.createOffer()];\n\n                    case 1:\n                      offer = _a.sent();\n                      updatedOffer = offer;\n                      return [4\n                      /*yield*/\n                      , senderPC_1.setLocalDescription(updatedOffer)];\n\n                    case 2:\n                      _a.sent();\n\n                      return [4\n                      /*yield*/\n                      , receiverPC_1.setRemoteDescription(updatedOffer)];\n\n                    case 3:\n                      _a.sent();\n\n                      return [4\n                      /*yield*/\n                      , receiverPC_1.createAnswer()];\n\n                    case 4:\n                      answer = _a.sent();\n                      return [4\n                      /*yield*/\n                      , receiverPC_1.setLocalDescription(answer)];\n\n                    case 5:\n                      _a.sent();\n\n                      return [4\n                      /*yield*/\n                      , senderPC_1.setRemoteDescription(answer)];\n\n                    case 6:\n                      _a.sent();\n\n                      return [4\n                      /*yield*/\n                      , this._collectNetworkTimings(senderPC_1)];\n\n                    case 7:\n                      _a.sent();\n\n                      return [2\n                      /*return*/\n                      , remoteTracksPromise];\n                  }\n                });\n              });\n            }, new MediaConnectionError())];\n\n          case 4:\n            remoteTracks_1 = _a.sent();\n            this.emit('debug', {\n              remoteTracks: remoteTracks_1\n            });\n            remoteTracks_1.forEach(function (track) {\n              track.addEventListener('ended', function () {\n                return _this._log.warn(track.kind + ':ended');\n              });\n              track.addEventListener('mute', function () {\n                return _this._log.warn(track.kind + ':muted');\n              });\n              track.addEventListener('unmute', function () {\n                return _this._log.warn(track.kind + ':unmuted');\n              });\n            });\n\n            this._updateProgress(PreflightProgress.mediaSubscribed);\n\n            return [4\n            /*yield*/\n            , this._executePreflightStep('Wait for tracks to start', function () {\n              return new Promise(function (resolve) {\n                var element = document.createElement('video');\n                element.autoplay = true;\n                element.playsInline = true;\n                element.muted = true;\n                element.srcObject = new MediaStream(remoteTracks_1);\n                elements_1.push(element);\n\n                _this.emit('debugElement', element);\n\n                element.oncanplay = resolve;\n              });\n            }, new MediaConnectionError())];\n\n          case 5:\n            _a.sent();\n\n            this._mediaTiming.stop();\n\n            this._updateProgress(PreflightProgress.mediaStarted);\n\n            return [4\n            /*yield*/\n            , this._executePreflightStep('Collect stats for duration', function () {\n              return _this._collectRTCStatsForDuration(_this._testDuration, initCollectedStats(), senderPC_1, receiverPC_1);\n            })];\n\n          case 6:\n            collectedStats_1 = _a.sent();\n            return [4\n            /*yield*/\n            , this._executePreflightStep('Generate report', function () {\n              return _this._generatePreflightReport(collectedStats_1);\n            })];\n\n          case 7:\n            report = _a.sent();\n            reportToInsights({\n              report: report\n            });\n            this.emit('completed', report);\n            return [3\n            /*break*/\n            , 10];\n\n          case 8:\n            error_1 = _a.sent();\n            preflightReport = this._generatePreflightReport();\n            reportToInsights({\n              report: __assign(__assign({}, preflightReport), {\n                error: error_1 === null || error_1 === void 0 ? void 0 : error_1.toString()\n              })\n            });\n            this.emit('failed', error_1, preflightReport);\n            return [3\n            /*break*/\n            , 10];\n\n          case 9:\n            pcs.forEach(function (pc) {\n              return pc.close();\n            });\n            localTracks.forEach(function (track) {\n              return track.stop();\n            });\n            return [7\n            /*endfinally*/\n            ];\n\n          case 10:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  PreflightTest.prototype._collectRTCStats = function (collectedStats, senderPC, receiverPC) {\n    return __awaiter(this, void 0, void 0, function () {\n      var combinedStats, timestamp, bytesSent, bytesReceived, packets, packetsLost, roundTripTime, jitter, selectedIceCandidatePairStats, iceCandidateStats, hasLastData, fractionPacketLost, percentPacketsLost, score;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , getCombinedConnectionStats_1.getCombinedConnectionStats({\n              publisher: senderPC,\n              subscriber: receiverPC\n            })];\n\n          case 1:\n            combinedStats = _a.sent();\n            timestamp = combinedStats.timestamp, bytesSent = combinedStats.bytesSent, bytesReceived = combinedStats.bytesReceived, packets = combinedStats.packets, packetsLost = combinedStats.packetsLost, roundTripTime = combinedStats.roundTripTime, jitter = combinedStats.jitter, selectedIceCandidatePairStats = combinedStats.selectedIceCandidatePairStats, iceCandidateStats = combinedStats.iceCandidateStats;\n            hasLastData = collectedStats.jitter.length > 0;\n            collectedStats.jitter.push(jitter);\n            collectedStats.rtt.push(roundTripTime);\n\n            this._sentBytesMovingAverage.putSample(bytesSent, timestamp);\n\n            this._receivedBytesMovingAverage.putSample(bytesReceived, timestamp);\n\n            this._packetLossMovingAverage.putSample(packetsLost, packets);\n\n            if (hasLastData) {\n              // convert BytesMovingAverage which is in bytes/millisecond to bits/second\n              collectedStats.outgoingBitrate.push(this._sentBytesMovingAverage.get() * 1000 * 8);\n              collectedStats.incomingBitrate.push(this._receivedBytesMovingAverage.get() * 1000 * 8);\n              fractionPacketLost = this._packetLossMovingAverage.get();\n              percentPacketsLost = Math.min(100, fractionPacketLost * 100);\n              collectedStats.packetLoss.push(percentPacketsLost);\n              score = mos_1.calculateMOS(roundTripTime, jitter, fractionPacketLost);\n              collectedStats.mos.push(score);\n            }\n\n            if (!collectedStats.selectedIceCandidatePairStats) {\n              collectedStats.selectedIceCandidatePairStats = selectedIceCandidatePairStats;\n            }\n\n            if (collectedStats.iceCandidateStats.length === 0) {\n              collectedStats.iceCandidateStats = iceCandidateStats;\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  PreflightTest.prototype._collectRTCStatsForDuration = function (duration, collectedStats, senderPC, receiverPC) {\n    return __awaiter(this, void 0, void 0, function () {\n      var startTime, STAT_INTERVAL, remainingDuration;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            startTime = Date.now();\n            STAT_INTERVAL = Math.min(1000, duration);\n            return [4\n            /*yield*/\n            , util_1.waitForSometime(STAT_INTERVAL)];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this._collectRTCStats(collectedStats, senderPC, receiverPC)];\n\n          case 2:\n            _a.sent();\n\n            remainingDuration = duration - (Date.now() - startTime);\n            if (!(remainingDuration > 0)) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , this._collectRTCStatsForDuration(remainingDuration, collectedStats, senderPC, receiverPC)];\n\n          case 3:\n            collectedStats = _a.sent();\n            _a.label = 4;\n\n          case 4:\n            return [2\n            /*return*/\n            , collectedStats];\n        }\n      });\n    });\n  };\n\n  PreflightTest.prototype._updateProgress = function (name) {\n    var duration = Date.now() - this._testTiming.getTimeMeasurement().start;\n\n    this._progressEvents.push({\n      duration: duration,\n      name: name\n    });\n\n    this.emit('progress', name);\n  };\n\n  return PreflightTest;\n}(EventEmitter);\n\nexports.PreflightTest = PreflightTest;\n\nfunction initCollectedStats() {\n  return {\n    mos: [],\n    jitter: [],\n    rtt: [],\n    outgoingBitrate: [],\n    incomingBitrate: [],\n    packetLoss: [],\n    selectedIceCandidatePairStats: null,\n    iceCandidateStats: []\n  };\n}\n/**\n * Represents network timing measurements captured during preflight test\n * @typedef {object} NetworkTiming\n * @property {TimeMeasurement} [connect] - Time to establish signaling connection and acquire turn credentials\n * @property {TimeMeasurement} [media] - Time to start media. This is measured from calling connect to remote media getting started.\n * @property {TimeMeasurement} [dtls] - Time to establish dtls connection. This is measured from RTCDtlsTransport `connecting` to `connected` state. (Not available on Safari)\n * @property {TimeMeasurement} [ice] - Time to establish ice connectivity. This is measured from ICE connection `checking` to `connected` state.\n * @property {TimeMeasurement} [peerConnection] - Time to establish peer connectivity. This is measured from PeerConnection `connecting` to `connected` state. (Not available on Firefox)\n */\n\n/**\n * Represents stats for a numerical metric.\n * @typedef {object} Stats\n * @property  {number} [average] - Average value observed.\n * @property  {number} [max] - Max value observed.\n * @property  {number} [min] - Min value observed.\n */\n\n/**\n * Represents stats for a numerical metric.\n * @typedef {object} SelectedIceCandidatePairStats\n * @property  {RTCIceCandidateStats} [localCandidate] - Selected local ice candidate\n * @property  {RTCIceCandidateStats} [remoteCandidate] - Selected local ice candidate\n */\n\n/**\n * Represents RTC related stats that were observed during preflight test\n * @typedef {object} PreflightReportStats\n * @property {Stats} [jitter] - Packet delay variation in seconds\n * @property {Stats} [rtt] - Round trip time, to the server back to the client in milliseconds.\n * @property {Stats} [packetLoss] - Packet loss as a percent of total packets sent.\n*/\n\n/**\n * A {@link PreflightProgress} event with timing information.\n * @typedef {object} ProgressEvent\n * @property {number} [duration] - The duration of the event, measured from the start of the test.\n * @property {string} [name] - The {@link PreflightProgress} event name.\n */\n\n/**\n * Represents report generated by {@link PreflightTest}.\n * @typedef {object} PreflightTestReport\n * @property {TimeMeasurement} [testTiming] - Time measurements of test run time.\n * @property {NetworkTiming} [networkTiming] - Network related time measurements.\n * @property {PreflightReportStats} [stats] - RTC related stats captured during the test.\n * @property {Array<RTCIceCandidateStats>} [iceCandidateStats] - List of gathered ice candidates.\n * @property {SelectedIceCandidatePairStats} selectedIceCandidatePairStats - Stats for the ice candidates that were used for the connection.\n * @property {Array<ProgressEvent>} [progressEvents] - {@link ProgressEvent} events detected during the test.\n * Use this information to determine which steps were completed and which ones were not.\n */\n\n/**\n * You may pass these options to {@link module:twilio-video.testPreflight} in order to override the\n * default behavior.\n * @typedef {object} PreflightOptions\n * @property {string} [region='gll'] - Preferred signaling region; By default, you will be connected to the\n *   nearest signaling server determined by latency based routing. Setting a value other\n *   than <code style=\"padding:0 0\">gll</code> bypasses routing and guarantees that signaling traffic will be\n *   terminated in the region that you prefer. Please refer to this <a href=\"https://www.twilio.com/docs/video/ip-address-whitelisting#signaling-communication\" target=\"_blank\">table</a>\n *   for the list of supported signaling regions.\n * @property {number} [duration=10000] - number of milliseconds to run test for.\n *   once connected test will run for this duration before generating the stats report.\n */\n\n/**\n * Preflight test has completed successfully.\n * @param {PreflightTestReport} report - Results of the test.\n * @event PreflightTest#completed\n */\n\n/**\n * Preflight test has encountered a failure and is now stopped.\n * @param {TwilioError|Error} error - A TwilioError or a DOMException.\n * Possible TwilioErrors include Signaling and Media related errors which can be found\n * <a href=\"https://www.twilio.com/docs/video/build-js-video-application-recommendations-and-best-practices#connection-errors\" target=\"_blank\">here</a>.\n * @param {PreflightTestReport} report - Partial results gathered during the test. Use this information to help determine the cause of failure.\n * @event PreflightTest#failed\n */\n\n/**\n * Emitted to indicate progress of the test\n * @param {PreflightProgress} progress - Indicates the status completed.\n * @event PreflightTest#progress\n */\n\n/**\n * @method\n * @name runPreflight\n * @description Run a preflight test. This method will start a test to check the quality of network connection.\n * @memberof module:twilio-video\n * @param {string} token - The Access Token string\n * @param {PreflightOptions} options - Options for the test\n * @returns {PreflightTest} preflightTest - An instance to be used to monitor progress of the test.\n * @example\n * var { runPreflight } = require('twilio-video');\n * var preflight = runPreflight(token, preflightOptions);\n * preflightTest.on('progress', progress => {\n *   console.log('preflight progress:', progress);\n * });\n *\n * preflightTest.on('failed', (error, report) => {\n *   console.error('preflight error:', error, report);\n * });\n *\n * preflightTest.on('completed', report => {\n *   console.log('preflight completed:', report));\n * });\n*/\n\n\nfunction runPreflight(token, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var preflight = new PreflightTest(token, options);\n  return preflight;\n}\n\nexports.runPreflight = runPreflight;","map":{"version":3,"sources":["../../lib/preflight/preflighttest.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.runPreflight = exports.PreflightTest = void 0;\nvar constants_1 = require(\"../util/constants\");\nvar timer_1 = require(\"./timer\");\nvar mos_1 = require(\"./mos\");\nvar getCombinedConnectionStats_1 = require(\"./getCombinedConnectionStats\");\nvar getturncredentials_1 = require(\"./getturncredentials\");\nvar makestat_1 = require(\"./makestat\");\nvar syntheticaudio_1 = require(\"./syntheticaudio\");\nvar syntheticvideo_1 = require(\"./syntheticvideo\");\nvar util_1 = require(\"../util\");\nvar WS_SERVER = require('../util/constants').WS_SERVER;\nvar Log = require('../util/log');\nvar EventEmitter = require('../eventemitter');\nvar MovingAverageDelta = require('../util/movingaveragedelta');\nvar EventObserver = require('../util/eventobserver');\nvar InsightsPublisher = require('../util/insightspublisher');\nvar _a = require('../util/sid'), createSID = _a.createSID, sessionSID = _a.sessionSID;\nvar _b = require('../util/twilio-video-errors'), SignalingConnectionTimeoutError = _b.SignalingConnectionTimeoutError, MediaConnectionError = _b.MediaConnectionError;\nvar SECOND = 1000;\nvar DEFAULT_TEST_DURATION = 10 * SECOND;\n/**\n * progress values that are sent by {@link PreflightTest#event:progress}\n * @enum {string}\n */\nvar PreflightProgress = {\n    /**\n     * {@link PreflightTest} has successfully generated synthetic tracks\n     */\n    mediaAcquired: 'mediaAcquired',\n    /**\n     * {@link PreflightTest} has successfully connected to twilio server and obtained turn credentials\n     */\n    connected: 'connected',\n    /**\n     * SubscriberParticipant successfully subscribed to media tracks.\n     */\n    mediaSubscribed: 'mediaSubscribed',\n    /**\n     * Media flow was detected.\n     */\n    mediaStarted: 'mediaStarted',\n    /**\n     * Established DTLS connection. This is measured from RTCDtlsTransport `connecting` to `connected` state.\n     * On Safari, Support for measuring this is missing, this event will be not be emitted on Safari.\n     */\n    dtlsConnected: 'dtlsConnected',\n    /**\n     * Established a PeerConnection, This is measured from PeerConnection `connecting` to `connected` state.\n     * On Firefox, Support for measuring this is missing, this event will be not be emitted on Firefox.\n     */\n    peerConnectionConnected: 'peerConnectionConnected',\n    /**\n     * Established ICE connection. This is measured from ICE connection `checking` to `connected` state.\n     */\n    iceConnected: 'iceConnected'\n};\nfunction notEmpty(value) {\n    return value !== null && typeof value !== 'undefined';\n}\nvar nInstances = 0;\n/**\n * A {@link PreflightTest} monitors progress of an ongoing preflight test.\n * <br><br>\n * Instance of {@link PreflightTest} is returned by calling {@link module:twilio-video.runPreflight}\n * @extends EventEmitter\n * @emits PreflightTest#completed\n * @emits PreflightTest#failed\n * @emits PreflightTest#progress\n */\nvar PreflightTest = /** @class */ (function (_super) {\n    __extends(PreflightTest, _super);\n    /**\n     * Constructs {@link PreflightTest}.\n     * @param {string} token\n     * @param {?PreflightOptions} [options]\n     */\n    function PreflightTest(token, options) {\n        var _this = _super.call(this) || this;\n        _this._testTiming = new timer_1.Timer();\n        _this._dtlsTiming = new timer_1.Timer();\n        _this._iceTiming = new timer_1.Timer();\n        _this._peerConnectionTiming = new timer_1.Timer();\n        _this._mediaTiming = new timer_1.Timer();\n        _this._connectTiming = new timer_1.Timer();\n        _this._sentBytesMovingAverage = new MovingAverageDelta();\n        _this._packetLossMovingAverage = new MovingAverageDelta();\n        _this._progressEvents = [];\n        _this._receivedBytesMovingAverage = new MovingAverageDelta();\n        var internalOptions = options;\n        var _a = internalOptions.environment, environment = _a === void 0 ? 'prod' : _a, _b = internalOptions.region, region = _b === void 0 ? 'gll' : _b, _c = internalOptions.duration, duration = _c === void 0 ? DEFAULT_TEST_DURATION : _c;\n        // eslint-disable-next-line new-cap\n        var wsServer = internalOptions.wsServer || WS_SERVER(environment, region);\n        _this._log = new Log('default', _this, constants_1.DEFAULT_LOG_LEVEL, constants_1.DEFAULT_LOGGER_NAME);\n        _this._testDuration = duration;\n        _this._instanceId = nInstances++;\n        _this._testTiming.start();\n        _this._runPreflightTest(token, environment, wsServer);\n        return _this;\n    }\n    PreflightTest.prototype.toString = function () {\n        return \"[Preflight #\" + this._instanceId + \"]\";\n    };\n    /**\n     * stops ongoing tests and emits error\n     */\n    PreflightTest.prototype.stop = function () {\n        this._stopped = true;\n    };\n    PreflightTest.prototype._generatePreflightReport = function (collectedStats) {\n        this._testTiming.stop();\n        return {\n            testTiming: this._testTiming.getTimeMeasurement(),\n            networkTiming: {\n                dtls: this._dtlsTiming.getTimeMeasurement(),\n                ice: this._iceTiming.getTimeMeasurement(),\n                peerConnection: this._peerConnectionTiming.getTimeMeasurement(),\n                connect: this._connectTiming.getTimeMeasurement(),\n                media: this._mediaTiming.getTimeMeasurement()\n            },\n            stats: {\n                jitter: makestat_1.makeStat(collectedStats === null || collectedStats === void 0 ? void 0 : collectedStats.jitter),\n                rtt: makestat_1.makeStat(collectedStats === null || collectedStats === void 0 ? void 0 : collectedStats.rtt),\n                packetLoss: makestat_1.makeStat(collectedStats === null || collectedStats === void 0 ? void 0 : collectedStats.packetLoss),\n            },\n            selectedIceCandidatePairStats: collectedStats ? collectedStats.selectedIceCandidatePairStats : null,\n            iceCandidateStats: collectedStats ? collectedStats.iceCandidateStats : [],\n            progressEvents: this._progressEvents,\n            // NOTE(mpatwardhan): internal properties.\n            mos: makestat_1.makeStat(collectedStats === null || collectedStats === void 0 ? void 0 : collectedStats.mos),\n        };\n    };\n    PreflightTest.prototype._executePreflightStep = function (stepName, step, timeoutError) {\n        return __awaiter(this, void 0, void 0, function () {\n            var MAX_STEP_DURATION, stepPromise, timer, timeoutPromise, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this._log.debug('Executing step: ', stepName);\n                        MAX_STEP_DURATION = this._testDuration + 10 * SECOND;\n                        if (this._stopped) {\n                            throw new Error('stopped');\n                        }\n                        stepPromise = Promise.resolve().then(step);\n                        timer = null;\n                        timeoutPromise = new Promise(function (_resolve, reject) {\n                            timer = setTimeout(function () {\n                                reject(timeoutError || new Error(stepName + \" timeout.\"));\n                            }, MAX_STEP_DURATION);\n                        });\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, , 3, 4]);\n                        return [4 /*yield*/, Promise.race([timeoutPromise, stepPromise])];\n                    case 2:\n                        result = _a.sent();\n                        return [2 /*return*/, result];\n                    case 3:\n                        if (timer !== null) {\n                            clearTimeout(timer);\n                        }\n                        return [7 /*endfinally*/];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    PreflightTest.prototype._collectNetworkTimings = function (pc) {\n        var _this = this;\n        return new Promise(function (resolve) {\n            var dtlsTransport;\n            pc.addEventListener('iceconnectionstatechange', function () {\n                if (pc.iceConnectionState === 'checking') {\n                    _this._iceTiming.start();\n                }\n                if (pc.iceConnectionState === 'connected') {\n                    _this._iceTiming.stop();\n                    _this._updateProgress(PreflightProgress.iceConnected);\n                    if (!dtlsTransport || dtlsTransport && dtlsTransport.state === 'connected') {\n                        resolve();\n                    }\n                }\n            });\n            // firefox does not support connectionstatechange.\n            pc.addEventListener('connectionstatechange', function () {\n                if (pc.connectionState === 'connecting') {\n                    _this._peerConnectionTiming.start();\n                }\n                if (pc.connectionState === 'connected') {\n                    _this._peerConnectionTiming.stop();\n                    _this._updateProgress(PreflightProgress.peerConnectionConnected);\n                }\n            });\n            // Safari does not expose sender.transport.\n            var senders = pc.getSenders();\n            var transport = senders.map(function (sender) { return sender.transport; }).find(notEmpty);\n            if (typeof transport !== 'undefined') {\n                dtlsTransport = transport;\n                dtlsTransport.addEventListener('statechange', function () {\n                    if (dtlsTransport.state === 'connecting') {\n                        _this._dtlsTiming.start();\n                    }\n                    if (dtlsTransport.state === 'connected') {\n                        _this._dtlsTiming.stop();\n                        _this._updateProgress(PreflightProgress.dtlsConnected);\n                        if (pc.iceConnectionState === 'connected') {\n                            resolve();\n                        }\n                    }\n                });\n            }\n        });\n    };\n    PreflightTest.prototype._setupInsights = function (_a) {\n        var token = _a.token, _b = _a.environment, environment = _b === void 0 ? constants_1.DEFAULT_ENVIRONMENT : _b, _c = _a.realm, realm = _c === void 0 ? constants_1.DEFAULT_REALM : _c;\n        var eventPublisherOptions = {};\n        var eventPublisher = new InsightsPublisher(token, constants_1.SDK_NAME, constants_1.SDK_VERSION, environment, realm, eventPublisherOptions);\n        // event publisher requires room sid/participant sid. supply fake ones.\n        eventPublisher.connect('PREFLIGHT_ROOM_SID', 'PREFLIGHT_PARTICIPANT');\n        var eventObserver = new EventObserver(eventPublisher, Date.now(), this._log);\n        // eslint-disable-next-line no-undefined\n        var undefinedValue = undefined;\n        return {\n            reportToInsights: function (_a) {\n                var _b, _c;\n                var report = _a.report;\n                var jitterStats = report.stats.jitter || undefinedValue;\n                var rttStats = report.stats.rtt || undefinedValue;\n                var packetLossStats = report.stats.packetLoss || undefinedValue;\n                var mosStats = report.mos || undefinedValue;\n                // stringify important info from ice candidates.\n                var candidateTypeToProtocols = new Map();\n                report.iceCandidateStats.forEach(function (candidateStats) {\n                    if (candidateStats.candidateType && candidateStats.protocol) {\n                        var protocols = candidateTypeToProtocols.get(candidateStats.candidateType) || [];\n                        if (protocols.indexOf(candidateStats.protocol) < 0) {\n                            protocols.push(candidateStats.protocol);\n                        }\n                        candidateTypeToProtocols.set(candidateStats.candidateType, protocols);\n                    }\n                });\n                var iceCandidateStats = JSON.stringify(Object.fromEntries(candidateTypeToProtocols));\n                var insightsReport = {\n                    name: 'report',\n                    group: 'preflight',\n                    level: report.error ? 'error' : 'info',\n                    payload: {\n                        sessionSID: sessionSID,\n                        preflightSID: createSID('PF'),\n                        progressEvents: JSON.stringify(report.progressEvents),\n                        testTiming: report.testTiming,\n                        dtlsTiming: report.networkTiming.dtls,\n                        iceTiming: report.networkTiming.ice,\n                        peerConnectionTiming: report.networkTiming.peerConnection,\n                        connectTiming: report.networkTiming.connect,\n                        mediaTiming: report.networkTiming.media,\n                        selectedLocalCandidate: (_b = report.selectedIceCandidatePairStats) === null || _b === void 0 ? void 0 : _b.localCandidate,\n                        selectedRemoteCandidate: (_c = report.selectedIceCandidatePairStats) === null || _c === void 0 ? void 0 : _c.remoteCandidate,\n                        iceCandidateStats: iceCandidateStats,\n                        jitterStats: jitterStats,\n                        rttStats: rttStats,\n                        packetLossStats: packetLossStats,\n                        mosStats: mosStats,\n                        error: report.error\n                    }\n                };\n                eventObserver.emit('event', insightsReport);\n                setTimeout(function () { return eventPublisher.disconnect(); }, 2000);\n            }\n        };\n    };\n    PreflightTest.prototype._runPreflightTest = function (token, environment, wsServer) {\n        return __awaiter(this, void 0, void 0, function () {\n            var localTracks, pcs, reportToInsights, elements_1, iceServers, senderPC_1, receiverPC_1, remoteTracks_1, collectedStats_1, report, error_1, preflightReport;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        localTracks = [];\n                        pcs = [];\n                        reportToInsights = this._setupInsights({ token: token, environment: environment }).reportToInsights;\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 8, 9, 10]);\n                        elements_1 = [];\n                        return [4 /*yield*/, this._executePreflightStep('Acquire media', function () { return [syntheticaudio_1.syntheticAudio(), syntheticvideo_1.syntheticVideo({ width: 640, height: 480 })]; })];\n                    case 2:\n                        localTracks = _a.sent();\n                        this._updateProgress(PreflightProgress.mediaAcquired);\n                        this.emit('debug', { localTracks: localTracks });\n                        this._connectTiming.start();\n                        return [4 /*yield*/, this._executePreflightStep('Get turn credentials', function () { return getturncredentials_1.getTurnCredentials(token, wsServer); }, new SignalingConnectionTimeoutError())];\n                    case 3:\n                        iceServers = _a.sent();\n                        this._connectTiming.stop();\n                        this._updateProgress(PreflightProgress.connected);\n                        senderPC_1 = new RTCPeerConnection({ iceServers: iceServers, iceTransportPolicy: 'relay', bundlePolicy: 'max-bundle' });\n                        receiverPC_1 = new RTCPeerConnection({ iceServers: iceServers, bundlePolicy: 'max-bundle' });\n                        pcs.push(senderPC_1);\n                        pcs.push(receiverPC_1);\n                        this._mediaTiming.start();\n                        return [4 /*yield*/, this._executePreflightStep('Setup Peer Connections', function () { return __awaiter(_this, void 0, void 0, function () {\n                                var remoteTracksPromise, offer, updatedOffer, answer;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            senderPC_1.addEventListener('icecandidate', function (event) { return event.candidate && receiverPC_1.addIceCandidate(event.candidate); });\n                                            receiverPC_1.addEventListener('icecandidate', function (event) { return event.candidate && senderPC_1.addIceCandidate(event.candidate); });\n                                            localTracks.forEach(function (track) { return senderPC_1.addTrack(track); });\n                                            remoteTracksPromise = new Promise(function (resolve) {\n                                                var remoteTracks = [];\n                                                receiverPC_1.addEventListener('track', function (event) {\n                                                    remoteTracks.push(event.track);\n                                                    if (remoteTracks.length === localTracks.length) {\n                                                        resolve(remoteTracks);\n                                                    }\n                                                });\n                                            });\n                                            return [4 /*yield*/, senderPC_1.createOffer()];\n                                        case 1:\n                                            offer = _a.sent();\n                                            updatedOffer = offer;\n                                            return [4 /*yield*/, senderPC_1.setLocalDescription(updatedOffer)];\n                                        case 2:\n                                            _a.sent();\n                                            return [4 /*yield*/, receiverPC_1.setRemoteDescription(updatedOffer)];\n                                        case 3:\n                                            _a.sent();\n                                            return [4 /*yield*/, receiverPC_1.createAnswer()];\n                                        case 4:\n                                            answer = _a.sent();\n                                            return [4 /*yield*/, receiverPC_1.setLocalDescription(answer)];\n                                        case 5:\n                                            _a.sent();\n                                            return [4 /*yield*/, senderPC_1.setRemoteDescription(answer)];\n                                        case 6:\n                                            _a.sent();\n                                            return [4 /*yield*/, this._collectNetworkTimings(senderPC_1)];\n                                        case 7:\n                                            _a.sent();\n                                            return [2 /*return*/, remoteTracksPromise];\n                                    }\n                                });\n                            }); }, new MediaConnectionError())];\n                    case 4:\n                        remoteTracks_1 = _a.sent();\n                        this.emit('debug', { remoteTracks: remoteTracks_1 });\n                        remoteTracks_1.forEach(function (track) {\n                            track.addEventListener('ended', function () { return _this._log.warn(track.kind + ':ended'); });\n                            track.addEventListener('mute', function () { return _this._log.warn(track.kind + ':muted'); });\n                            track.addEventListener('unmute', function () { return _this._log.warn(track.kind + ':unmuted'); });\n                        });\n                        this._updateProgress(PreflightProgress.mediaSubscribed);\n                        return [4 /*yield*/, this._executePreflightStep('Wait for tracks to start', function () {\n                                return new Promise(function (resolve) {\n                                    var element = document.createElement('video');\n                                    element.autoplay = true;\n                                    element.playsInline = true;\n                                    element.muted = true;\n                                    element.srcObject = new MediaStream(remoteTracks_1);\n                                    elements_1.push(element);\n                                    _this.emit('debugElement', element);\n                                    element.oncanplay = resolve;\n                                });\n                            }, new MediaConnectionError())];\n                    case 5:\n                        _a.sent();\n                        this._mediaTiming.stop();\n                        this._updateProgress(PreflightProgress.mediaStarted);\n                        return [4 /*yield*/, this._executePreflightStep('Collect stats for duration', function () { return _this._collectRTCStatsForDuration(_this._testDuration, initCollectedStats(), senderPC_1, receiverPC_1); })];\n                    case 6:\n                        collectedStats_1 = _a.sent();\n                        return [4 /*yield*/, this._executePreflightStep('Generate report', function () { return _this._generatePreflightReport(collectedStats_1); })];\n                    case 7:\n                        report = _a.sent();\n                        reportToInsights({ report: report });\n                        this.emit('completed', report);\n                        return [3 /*break*/, 10];\n                    case 8:\n                        error_1 = _a.sent();\n                        preflightReport = this._generatePreflightReport();\n                        reportToInsights({ report: __assign(__assign({}, preflightReport), { error: error_1 === null || error_1 === void 0 ? void 0 : error_1.toString() }) });\n                        this.emit('failed', error_1, preflightReport);\n                        return [3 /*break*/, 10];\n                    case 9:\n                        pcs.forEach(function (pc) { return pc.close(); });\n                        localTracks.forEach(function (track) { return track.stop(); });\n                        return [7 /*endfinally*/];\n                    case 10: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    PreflightTest.prototype._collectRTCStats = function (collectedStats, senderPC, receiverPC) {\n        return __awaiter(this, void 0, void 0, function () {\n            var combinedStats, timestamp, bytesSent, bytesReceived, packets, packetsLost, roundTripTime, jitter, selectedIceCandidatePairStats, iceCandidateStats, hasLastData, fractionPacketLost, percentPacketsLost, score;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, getCombinedConnectionStats_1.getCombinedConnectionStats({ publisher: senderPC, subscriber: receiverPC })];\n                    case 1:\n                        combinedStats = _a.sent();\n                        timestamp = combinedStats.timestamp, bytesSent = combinedStats.bytesSent, bytesReceived = combinedStats.bytesReceived, packets = combinedStats.packets, packetsLost = combinedStats.packetsLost, roundTripTime = combinedStats.roundTripTime, jitter = combinedStats.jitter, selectedIceCandidatePairStats = combinedStats.selectedIceCandidatePairStats, iceCandidateStats = combinedStats.iceCandidateStats;\n                        hasLastData = collectedStats.jitter.length > 0;\n                        collectedStats.jitter.push(jitter);\n                        collectedStats.rtt.push(roundTripTime);\n                        this._sentBytesMovingAverage.putSample(bytesSent, timestamp);\n                        this._receivedBytesMovingAverage.putSample(bytesReceived, timestamp);\n                        this._packetLossMovingAverage.putSample(packetsLost, packets);\n                        if (hasLastData) {\n                            // convert BytesMovingAverage which is in bytes/millisecond to bits/second\n                            collectedStats.outgoingBitrate.push(this._sentBytesMovingAverage.get() * 1000 * 8);\n                            collectedStats.incomingBitrate.push(this._receivedBytesMovingAverage.get() * 1000 * 8);\n                            fractionPacketLost = this._packetLossMovingAverage.get();\n                            percentPacketsLost = Math.min(100, fractionPacketLost * 100);\n                            collectedStats.packetLoss.push(percentPacketsLost);\n                            score = mos_1.calculateMOS(roundTripTime, jitter, fractionPacketLost);\n                            collectedStats.mos.push(score);\n                        }\n                        if (!collectedStats.selectedIceCandidatePairStats) {\n                            collectedStats.selectedIceCandidatePairStats = selectedIceCandidatePairStats;\n                        }\n                        if (collectedStats.iceCandidateStats.length === 0) {\n                            collectedStats.iceCandidateStats = iceCandidateStats;\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    PreflightTest.prototype._collectRTCStatsForDuration = function (duration, collectedStats, senderPC, receiverPC) {\n        return __awaiter(this, void 0, void 0, function () {\n            var startTime, STAT_INTERVAL, remainingDuration;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        startTime = Date.now();\n                        STAT_INTERVAL = Math.min(1000, duration);\n                        return [4 /*yield*/, util_1.waitForSometime(STAT_INTERVAL)];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, this._collectRTCStats(collectedStats, senderPC, receiverPC)];\n                    case 2:\n                        _a.sent();\n                        remainingDuration = duration - (Date.now() - startTime);\n                        if (!(remainingDuration > 0)) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this._collectRTCStatsForDuration(remainingDuration, collectedStats, senderPC, receiverPC)];\n                    case 3:\n                        collectedStats = _a.sent();\n                        _a.label = 4;\n                    case 4: return [2 /*return*/, collectedStats];\n                }\n            });\n        });\n    };\n    PreflightTest.prototype._updateProgress = function (name) {\n        var duration = Date.now() - this._testTiming.getTimeMeasurement().start;\n        this._progressEvents.push({ duration: duration, name: name });\n        this.emit('progress', name);\n    };\n    return PreflightTest;\n}(EventEmitter));\nexports.PreflightTest = PreflightTest;\nfunction initCollectedStats() {\n    return {\n        mos: [],\n        jitter: [],\n        rtt: [],\n        outgoingBitrate: [],\n        incomingBitrate: [],\n        packetLoss: [],\n        selectedIceCandidatePairStats: null,\n        iceCandidateStats: [],\n    };\n}\n/**\n * Represents network timing measurements captured during preflight test\n * @typedef {object} NetworkTiming\n * @property {TimeMeasurement} [connect] - Time to establish signaling connection and acquire turn credentials\n * @property {TimeMeasurement} [media] - Time to start media. This is measured from calling connect to remote media getting started.\n * @property {TimeMeasurement} [dtls] - Time to establish dtls connection. This is measured from RTCDtlsTransport `connecting` to `connected` state. (Not available on Safari)\n * @property {TimeMeasurement} [ice] - Time to establish ice connectivity. This is measured from ICE connection `checking` to `connected` state.\n * @property {TimeMeasurement} [peerConnection] - Time to establish peer connectivity. This is measured from PeerConnection `connecting` to `connected` state. (Not available on Firefox)\n */\n/**\n * Represents stats for a numerical metric.\n * @typedef {object} Stats\n * @property  {number} [average] - Average value observed.\n * @property  {number} [max] - Max value observed.\n * @property  {number} [min] - Min value observed.\n */\n/**\n * Represents stats for a numerical metric.\n * @typedef {object} SelectedIceCandidatePairStats\n * @property  {RTCIceCandidateStats} [localCandidate] - Selected local ice candidate\n * @property  {RTCIceCandidateStats} [remoteCandidate] - Selected local ice candidate\n */\n/**\n * Represents RTC related stats that were observed during preflight test\n * @typedef {object} PreflightReportStats\n * @property {Stats} [jitter] - Packet delay variation in seconds\n * @property {Stats} [rtt] - Round trip time, to the server back to the client in milliseconds.\n * @property {Stats} [packetLoss] - Packet loss as a percent of total packets sent.\n*/\n/**\n * A {@link PreflightProgress} event with timing information.\n * @typedef {object} ProgressEvent\n * @property {number} [duration] - The duration of the event, measured from the start of the test.\n * @property {string} [name] - The {@link PreflightProgress} event name.\n */\n/**\n * Represents report generated by {@link PreflightTest}.\n * @typedef {object} PreflightTestReport\n * @property {TimeMeasurement} [testTiming] - Time measurements of test run time.\n * @property {NetworkTiming} [networkTiming] - Network related time measurements.\n * @property {PreflightReportStats} [stats] - RTC related stats captured during the test.\n * @property {Array<RTCIceCandidateStats>} [iceCandidateStats] - List of gathered ice candidates.\n * @property {SelectedIceCandidatePairStats} selectedIceCandidatePairStats - Stats for the ice candidates that were used for the connection.\n * @property {Array<ProgressEvent>} [progressEvents] - {@link ProgressEvent} events detected during the test.\n * Use this information to determine which steps were completed and which ones were not.\n */\n/**\n * You may pass these options to {@link module:twilio-video.testPreflight} in order to override the\n * default behavior.\n * @typedef {object} PreflightOptions\n * @property {string} [region='gll'] - Preferred signaling region; By default, you will be connected to the\n *   nearest signaling server determined by latency based routing. Setting a value other\n *   than <code style=\"padding:0 0\">gll</code> bypasses routing and guarantees that signaling traffic will be\n *   terminated in the region that you prefer. Please refer to this <a href=\"https://www.twilio.com/docs/video/ip-address-whitelisting#signaling-communication\" target=\"_blank\">table</a>\n *   for the list of supported signaling regions.\n * @property {number} [duration=10000] - number of milliseconds to run test for.\n *   once connected test will run for this duration before generating the stats report.\n */\n/**\n * Preflight test has completed successfully.\n * @param {PreflightTestReport} report - Results of the test.\n * @event PreflightTest#completed\n */\n/**\n * Preflight test has encountered a failure and is now stopped.\n * @param {TwilioError|Error} error - A TwilioError or a DOMException.\n * Possible TwilioErrors include Signaling and Media related errors which can be found\n * <a href=\"https://www.twilio.com/docs/video/build-js-video-application-recommendations-and-best-practices#connection-errors\" target=\"_blank\">here</a>.\n * @param {PreflightTestReport} report - Partial results gathered during the test. Use this information to help determine the cause of failure.\n * @event PreflightTest#failed\n */\n/**\n * Emitted to indicate progress of the test\n * @param {PreflightProgress} progress - Indicates the status completed.\n * @event PreflightTest#progress\n */\n/**\n * @method\n * @name runPreflight\n * @description Run a preflight test. This method will start a test to check the quality of network connection.\n * @memberof module:twilio-video\n * @param {string} token - The Access Token string\n * @param {PreflightOptions} options - Options for the test\n * @returns {PreflightTest} preflightTest - An instance to be used to monitor progress of the test.\n * @example\n * var { runPreflight } = require('twilio-video');\n * var preflight = runPreflight(token, preflightOptions);\n * preflightTest.on('progress', progress => {\n *   console.log('preflight progress:', progress);\n * });\n *\n * preflightTest.on('failed', (error, report) => {\n *   console.error('preflight error:', error, report);\n * });\n *\n * preflightTest.on('completed', report => {\n *   console.log('preflight completed:', report));\n * });\n*/\nfunction runPreflight(token, options) {\n    if (options === void 0) { options = {}; }\n    var preflight = new PreflightTest(token, options);\n    return preflight;\n}\nexports.runPreflight = runPreflight;\n//# sourceMappingURL=preflighttest.js.map"]},"metadata":{},"sourceType":"script"}