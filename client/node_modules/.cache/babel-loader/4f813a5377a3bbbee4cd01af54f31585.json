{"ast":null,"code":"var _jsxFileName = \"/home/kali/Documents/cybersecurity/client/src/components/dashboard/learning/educationalCoursesSeminars/viewCourses/helpers/comments/helpers/helperFunctions.js\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { Popover, PopoverHeader, PopoverBody, Row, Container, Col } from \"reactstrap\";\n\nconst RenderPopoverEmojiLogic = _ref => {\n  let {\n    reactions,\n    targetAndPopState,\n    setPopoverState,\n    popoverState\n  } = _ref;\n  const [emojiStateArr, setEmojiStateArray] = useState([]);\n  const [stateCount, setStateCount] = useState(0);\n  const [ready, setReady] = useState(false);\n  useEffect(() => {\n    const emojiArray = [];\n    const alreadyAdded = [];\n    let count = 0;\n\n    for (const key in reactions) {\n      const reactionName = key;\n      const reactionOutcome = reactions[key];\n      console.log(\"emoji looped...:\", reactionName, reactionOutcome); // check if emoji is already added - if not... add it!\n\n      if (!alreadyAdded.includes(reactionName)) {\n        count++; // push emoji into array as it doesn't exist yet\n\n        alreadyAdded.push(\"reactionName\");\n      } else {\n        const newItem = {}; // push into array\n\n        emojiArray.push(newItem);\n      }\n    }\n\n    console.log(\"alreadyAdded emojis --- :\", alreadyAdded);\n    setStateCount(count);\n    setEmojiStateArray(emojiArray);\n    setReady(true);\n  }, []);\n  console.log(\"targetAndPopState :\", targetAndPopState);\n  console.log(\"custom pop check --- :\", popoverState[targetAndPopState]);\n\n  const renderMainContentPopover = () => {\n    if (ready === true) {\n      return /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Popover, {\n        placement: \"bottom\",\n        isOpen: popoverState[targetAndPopState],\n        target: targetAndPopState,\n        toggle: () => {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(PopoverHeader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }\n      }, \"Current Comment Reaction's (\", stateCount, \" total response's)\"), /*#__PURE__*/React.createElement(PopoverBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 29\n        }\n      }))));\n    } else {\n      return null;\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, renderMainContentPopover());\n};\n\nexport default {\n  RenderPopoverEmojiLogic\n};","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/learning/educationalCoursesSeminars/viewCourses/helpers/comments/helpers/helperFunctions.js"],"names":["React","Fragment","useEffect","useState","Popover","PopoverHeader","PopoverBody","Row","Container","Col","RenderPopoverEmojiLogic","reactions","targetAndPopState","setPopoverState","popoverState","emojiStateArr","setEmojiStateArray","stateCount","setStateCount","ready","setReady","emojiArray","alreadyAdded","count","key","reactionName","reactionOutcome","console","log","includes","push","newItem","renderMainContentPopover"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,SAASC,OAAT,EAAkBC,aAAlB,EAAiCC,WAAjC,EAA8CC,GAA9C,EAAmDC,SAAnD,EAA8DC,GAA9D,QAAyE,YAAzE;;AAEA,MAAMC,uBAAuB,GAAG,QAAqE;AAAA,MAApE;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,iBAAb;AAAgCC,IAAAA,eAAhC;AAAiDC,IAAAA;AAAjD,GAAoE;AAEjG,QAAM,CAAEC,aAAF,EAAiBC,kBAAjB,IAAwCb,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAAEc,UAAF,EAAcC,aAAd,IAAgCf,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAAEgB,KAAF,EAASC,QAAT,IAAsBjB,QAAQ,CAAC,KAAD,CAApC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AAEZ,UAAMmB,UAAU,GAAG,EAAnB;AACA,UAAMC,YAAY,GAAG,EAArB;AACA,QAAIC,KAAK,GAAG,CAAZ;;AAEA,SAAK,MAAMC,GAAX,IAAkBb,SAAlB,EAA6B;AACzB,YAAMc,YAAY,GAAGD,GAArB;AACA,YAAME,eAAe,GAAGf,SAAS,CAACa,GAAD,CAAjC;AAEAG,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCH,YAAhC,EAA8CC,eAA9C,EAJyB,CAMzB;;AACA,UAAI,CAACJ,YAAY,CAACO,QAAb,CAAsBJ,YAAtB,CAAL,EAA0C;AACtCF,QAAAA,KAAK,GADiC,CAEtC;;AACAD,QAAAA,YAAY,CAACQ,IAAb,CAAkB,cAAlB;AACH,OAJD,MAIO;AACH,cAAMC,OAAO,GAAG,EAAhB,CADG,CAEH;;AACAV,QAAAA,UAAU,CAACS,IAAX,CAAgBC,OAAhB;AACH;AACJ;;AACDJ,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCN,YAAzC;AAEAJ,IAAAA,aAAa,CAACK,KAAD,CAAb;AACAP,IAAAA,kBAAkB,CAACK,UAAD,CAAlB;AACAD,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,GA5BQ,EA4BN,EA5BM,CAAT;AA6BAO,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmChB,iBAAnC;AAEAe,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCd,YAAY,CAACF,iBAAD,CAAlD;;AAEA,QAAMoB,wBAAwB,GAAG,MAAM;AACnC,QAAIb,KAAK,KAAK,IAAd,EAAoB;AAChB,0BACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,OAAD;AAAS,QAAA,SAAS,EAAC,QAAnB;AAA4B,QAAA,MAAM,EAAEL,YAAY,CAACF,iBAAD,CAAhD;AAAqE,QAAA,MAAM,EAAEA,iBAA7E;AAAgG,QAAA,MAAM,EAAE,MAAM,CAAE,CAAhH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAA4CK,UAA5C,uBADJ,eAEI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAFJ,CADJ,CADJ;AAmBH,KApBD,MAoBO;AACH,aAAO,IAAP;AACH;AACJ,GAxBD;;AA0BA,sBACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKe,wBAAwB,EAD7B,CADJ;AAKH,CAtED;;AAwEA,eAAe;AACXtB,EAAAA;AADW,CAAf","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\nimport { Popover, PopoverHeader, PopoverBody, Row, Container, Col } from \"reactstrap\";\n\nconst RenderPopoverEmojiLogic = ({ reactions, targetAndPopState, setPopoverState, popoverState }) => {\n\n    const [ emojiStateArr, setEmojiStateArray ] = useState([]);\n    const [ stateCount, setStateCount ] = useState(0);\n    const [ ready, setReady ] = useState(false);\n\n    useEffect(() => {\n\n        const emojiArray = [];\n        const alreadyAdded = [];\n        let count = 0;\n\n        for (const key in reactions) {\n            const reactionName = key;\n            const reactionOutcome = reactions[key];\n\n            console.log(\"emoji looped...:\", reactionName, reactionOutcome);\n        \n            // check if emoji is already added - if not... add it!\n            if (!alreadyAdded.includes(reactionName)) {\n                count++;\n                // push emoji into array as it doesn't exist yet\n                alreadyAdded.push(\"reactionName\");\n            } else {\n                const newItem = {};\n                // push into array\n                emojiArray.push(newItem);\n            }\n        }\n        console.log(\"alreadyAdded emojis --- :\", alreadyAdded);\n        \n        setStateCount(count);\n        setEmojiStateArray(emojiArray);\n        setReady(true);\n    }, [])\n    console.log(\"targetAndPopState :\", targetAndPopState);\n\n    console.log(\"custom pop check --- :\", popoverState[targetAndPopState]);\n\n    const renderMainContentPopover = () => {\n        if (ready === true) {\n            return (\n                <Fragment>\n                    <Popover placement=\"bottom\" isOpen={popoverState[targetAndPopState]} target={targetAndPopState} toggle={() => {}}>\n                        <PopoverHeader>Current Comment Reaction's ({stateCount} total response's)</PopoverHeader>\n                        <PopoverBody>\n                            <Row>\n                                {/* {typeof emojiStateArr !== \"undefined\" && emojiStateArr.length > 0 ? emojiStateArr.map((emoji, idxxx) => {\n                                    console.log(\"custom emoji rendered...:\", emoji);\n                                    return (\n                                        <Fragment key={idxxx}>\n\n                                        </Fragment>\n                                    );\n                                }) : null} */}\n                            </Row>\n                        </PopoverBody>\n                    </Popover>\n                </Fragment>\n            );\n        } else {\n            return null;\n        }\n    }\n\n    return (\n        <Fragment>\n            {renderMainContentPopover()}\n        </Fragment>\n    );\n}\n\nexport default {\n    RenderPopoverEmojiLogic\n};"]},"metadata":{},"sourceType":"module"}