{"ast":null,"code":"import React from \"react\";\nimport { NotificationManager } from 'react-notifications'; // functions with export ability to slim down main component (pageThreeMain.js)..\n\nconst CalculateWhetherURLIsLegit = data => {\n  // check wether http/https is legitmate and correct...    \n  const isValidHttpUrl = string => {\n    let url;\n\n    try {\n      url = new URL(string);\n    } catch (_) {\n      return false;\n    }\n\n    console.log(\"url : \", url);\n    return url.protocol === \"http:\" || url.protocol === \"https:\";\n  };\n\n  if (isValidHttpUrl(data)) {\n    return true;\n  } else {\n    return false;\n  }\n\n  ;\n};\n\nexport default {\n  CalculateWhetherURLIsLegit\n}; // NotificationManager.success(\"It fuckin' worked!\", \"YAY!\", 45000);","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/softwareHardwareExchanges/software/createListing/multiStepPages/pageThree/helpers/mainFunctions.js"],"names":["React","NotificationManager","CalculateWhetherURLIsLegit","data","isValidHttpUrl","string","url","URL","_","console","log","protocol"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,mBAAT,QAAoC,qBAApC,C,CAEA;;AACA,MAAMC,0BAA0B,GAAIC,IAAD,IAAU;AAEzC;AACA,QAAMC,cAAc,GAAIC,MAAD,IAAY;AAC/B,QAAIC,GAAJ;;AAEA,QAAI;AACFA,MAAAA,GAAG,GAAG,IAAIC,GAAJ,CAAQF,MAAR,CAAN;AACD,KAFD,CAEE,OAAOG,CAAP,EAAU;AACV,aAAO,KAAP;AACD;;AACDC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBJ,GAAtB;AAEA,WAAOA,GAAG,CAACK,QAAJ,KAAiB,OAAjB,IAA4BL,GAAG,CAACK,QAAJ,KAAiB,QAApD;AACH,GAXD;;AAYA,MAAIP,cAAc,CAACD,IAAD,CAAlB,EAA0B;AACtB,WAAO,IAAP;AACH,GAFD,MAEO;AACH,WAAO,KAAP;AACH;;AAAA;AACJ,CApBD;;AAsBA,eAAe;AAAED,EAAAA;AAAF,CAAf,C,CAEA","sourcesContent":["import React from \"react\";\nimport { NotificationManager } from 'react-notifications';\n\n// functions with export ability to slim down main component (pageThreeMain.js)..\nconst CalculateWhetherURLIsLegit = (data) => {\n    \n    // check wether http/https is legitmate and correct...    \n    const isValidHttpUrl = (string) => {\n        let url;\n        \n        try {\n          url = new URL(string);\n        } catch (_) {\n          return false;  \n        }\n        console.log(\"url : \", url);\n\n        return url.protocol === \"http:\" || url.protocol === \"https:\";\n    }\n    if (isValidHttpUrl(data)) {\n        return true;\n    } else {\n        return false;\n    };\n}\n\nexport default { CalculateWhetherURLIsLegit };\n\n// NotificationManager.success(\"It fuckin' worked!\", \"YAY!\", 45000);"]},"metadata":{},"sourceType":"module"}