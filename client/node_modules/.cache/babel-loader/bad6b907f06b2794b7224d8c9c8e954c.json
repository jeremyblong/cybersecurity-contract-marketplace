{"ast":null,"code":"import React, { Fragment, useState } from 'react';\n\nconst handleCheckGroupType = (e, setGroupType, setMessageListState) => {\n  const checked = e.target.checked;\n  setMessageListState([]);\n  setGroupType({\n    groupType: checked === true ? \"Public Convo's\" : \"Private Convo's\",\n    checked\n  });\n};\n\nconst handleMessagePressPrivateConvos = (message, channel) => {\n  console.log(\"handleMessagePressPrivateConvos clicked/ran...\");\n  const params = new sb.UserMessageParams();\n  params.message = message;\n  params.customType = \"private\"; // params.data = DATA;\n\n  params.mentionType = 'users';\n  params.mentionedUserIds = []; // params.metaArrays = [   // A pair of key-value\n  //     new sendBirds.me.MessageMetaArray('itemType', ['tablet']),\n  //     new sendBirds.me.MessageMetaArray('quality', ['best', 'good'])\n  // ];\n\n  params.translationTargetLanguages = ['en']; // French and German\n\n  params.pushNotificationDeliveryOption = 'default'; // Either 'default' or 'suppress'\n\n  channel.sendUserMessage(params, (userMessage, error) => {\n    if (error) {\n      // Handle error.\n      console.log(\"error sendUserMessage... : \", error);\n    } else {\n      const messageId = userMessage.messageId;\n      console.log(\"Send message SUCCESS private convos --- :\", messageId, userMessage);\n    }\n  });\n};\n\nconst handleListItemClickPrivateChannel = (item, SBData, setChannelState, setMessageListState) => {\n  console.log(\"handleListItemClickPrivateChannel clicked... : \", item);\n  SBData.GroupChannel.getChannel(item.url, (openChannel, error) => {\n    if (error) {\n      // Handle error.\n      console.log(\"getChannel : \", error);\n    } else {\n      const params = new SBData.MessageListParams(); // create param's for message log/chat\n\n      params.prevResultSize = 25;\n      params.nextResultSize = 25;\n      params.isInclusive = true;\n      params.reverse = true;\n      params.replyType = \"all\";\n      params.includeThreadInfo = true;\n      params.includeParentMessageInfo = true; // create timestamp\n\n      const TIMESTAMP = Date.now();\n      console.log(\"openChannel\", openChannel);\n      setChannelState(openChannel); // Pass the params as an argument to the `getMessagesByTimestamp()` method.\n\n      openChannel.getMessagesByTimestamp(TIMESTAMP, params, (messages, error) => {\n        if (error) {\n          // Handle error.\n          console.log(\"error getMessagesByTimestamp :\", error);\n        } else {\n          console.log(\"messages\", messages);\n          setMessageListState(messages);\n        }\n      });\n    }\n  });\n};\n\nconst renderOnlineStatus = (item, userData) => {\n  for (let index = 0; index < item.members.length; index++) {\n    const user = item.members[index];\n\n    if (user.userId !== userData.uniqueId) {\n      return user.connectionStatus;\n    }\n\n    if (item.members.length - 1 === index) {\n      return user.connectionStatus;\n    }\n  }\n};\n\nconst renderNicknamePrivateGroup = (item, userData) => {\n  for (let index = 0; index < item.members.length; index++) {\n    const user = item.members[index];\n\n    if (user.userId !== userData.uniqueId) {\n      return user.nickname;\n    }\n\n    if (item.members.length - 1 === index) {\n      return user.nickname;\n    }\n  }\n};\n\nconst renderNickname = (item, userData) => {\n  for (let index = 0; index < item.operators.length; index++) {\n    const user = item.operators[index];\n\n    if (user.userId !== userData.uniqueId) {\n      return user.nickname;\n    }\n\n    if (item.operators.length - 1 === index) {\n      return \"Chat Invite Pending...\";\n    }\n  }\n};\n\nconst renderStatus = (item, userData) => {\n  for (let index = 0; index < item.operators.length; index++) {\n    const user = item.operators[index];\n\n    if (user.userId !== userData.uniqueId) {\n      return user.isActive;\n    }\n\n    if (item.operators.length - 1 === index) {\n      return user.isActive;\n    }\n  }\n};\n\nconst renderLastProfilePicMainUser = user => {\n  const reversed = user.profilePicsVideos.reverse();\n\n  for (let index = 0; index < reversed.length; index++) {\n    const item = reversed[index];\n\n    if (item.type.includes(\"image\")) {\n      return `${process.env.REACT_APP_ASSET_LINK}/${item.link}`;\n      break;\n    }\n  }\n};\n\nconst onKeyPressPrivateSubmitted = e => {\n  console.log(\"onKeyPressPrivateSubmitted pressed...\", e);\n};\n\nconst onKeyPressPublicSubmitted = e => {\n  console.log(\"onKeyPressPublicSubmitted pressed...\", e);\n};\n\nexport default {\n  handleCheckGroupType,\n  handleListItemClickPrivateChannel,\n  renderOnlineStatus,\n  renderNicknamePrivateGroup,\n  renderNickname,\n  renderStatus,\n  handleMessagePressPrivateConvos,\n  renderLastProfilePicMainUser,\n  onKeyPressPublicSubmitted,\n  onKeyPressPrivateSubmitted\n};","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity/client/src/components/dashboard/messaging/main/helpers/mainHelperFunctions.js"],"names":["React","Fragment","useState","handleCheckGroupType","e","setGroupType","setMessageListState","checked","target","groupType","handleMessagePressPrivateConvos","message","channel","console","log","params","sb","UserMessageParams","customType","mentionType","mentionedUserIds","translationTargetLanguages","pushNotificationDeliveryOption","sendUserMessage","userMessage","error","messageId","handleListItemClickPrivateChannel","item","SBData","setChannelState","GroupChannel","getChannel","url","openChannel","MessageListParams","prevResultSize","nextResultSize","isInclusive","reverse","replyType","includeThreadInfo","includeParentMessageInfo","TIMESTAMP","Date","now","getMessagesByTimestamp","messages","renderOnlineStatus","userData","index","members","length","user","userId","uniqueId","connectionStatus","renderNicknamePrivateGroup","nickname","renderNickname","operators","renderStatus","isActive","renderLastProfilePicMainUser","reversed","profilePicsVideos","type","includes","process","env","REACT_APP_ASSET_LINK","link","onKeyPressPrivateSubmitted","onKeyPressPublicSubmitted"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,QAAzB,QAAyC,OAAzC;;AAEA,MAAMC,oBAAoB,GAAG,CAACC,CAAD,EAAIC,YAAJ,EAAkBC,mBAAlB,KAA0C;AACnE,QAAMC,OAAO,GAAGH,CAAC,CAACI,MAAF,CAASD,OAAzB;AAEAD,EAAAA,mBAAmB,CAAC,EAAD,CAAnB;AAEAD,EAAAA,YAAY,CAAC;AACTI,IAAAA,SAAS,EAAEF,OAAO,KAAK,IAAZ,GAAmB,gBAAnB,GAAsC,iBADxC;AAETA,IAAAA;AAFS,GAAD,CAAZ;AAIH,CATD;;AAUA,MAAMG,+BAA+B,GAAG,CAACC,OAAD,EAAUC,OAAV,KAAsB;AAC1DC,EAAAA,OAAO,CAACC,GAAR,CAAY,gDAAZ;AAEA,QAAMC,MAAM,GAAG,IAAIC,EAAE,CAACC,iBAAP,EAAf;AAEAF,EAAAA,MAAM,CAACJ,OAAP,GAAiBA,OAAjB;AACAI,EAAAA,MAAM,CAACG,UAAP,GAAoB,SAApB,CAN0D,CAO1D;;AACAH,EAAAA,MAAM,CAACI,WAAP,GAAqB,OAArB;AACAJ,EAAAA,MAAM,CAACK,gBAAP,GAA0B,EAA1B,CAT0D,CAU1D;AACA;AACA;AACA;;AACAL,EAAAA,MAAM,CAACM,0BAAP,GAAoC,CAAC,IAAD,CAApC,CAd0D,CAcZ;;AAC9CN,EAAAA,MAAM,CAACO,8BAAP,GAAwC,SAAxC,CAf0D,CAeN;;AAEpDV,EAAAA,OAAO,CAACW,eAAR,CAAwBR,MAAxB,EAAgC,CAACS,WAAD,EAAcC,KAAd,KAAwB;AACpD,QAAIA,KAAJ,EAAW;AACP;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CW,KAA3C;AACH,KAHD,MAGO;AACH,YAAMC,SAAS,GAAGF,WAAW,CAACE,SAA9B;AAEAb,MAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ,EAAyDY,SAAzD,EAAoEF,WAApE;AACH;AACJ,GATD;AAUH,CA3BD;;AA4BA,MAAMG,iCAAiC,GAAG,CAACC,IAAD,EAAOC,MAAP,EAAeC,eAAf,EAAgCxB,mBAAhC,KAAwD;AAC9FO,EAAAA,OAAO,CAACC,GAAR,CAAY,iDAAZ,EAA+Dc,IAA/D;AAEAC,EAAAA,MAAM,CAACE,YAAP,CAAoBC,UAApB,CAA+BJ,IAAI,CAACK,GAApC,EAAyC,CAACC,WAAD,EAAcT,KAAd,KAAwB;AAC7D,QAAIA,KAAJ,EAAW;AACP;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BW,KAA7B;AACH,KAHD,MAGO;AACH,YAAMV,MAAM,GAAG,IAAIc,MAAM,CAACM,iBAAX,EAAf,CADG,CAEH;;AACApB,MAAAA,MAAM,CAACqB,cAAP,GAAwB,EAAxB;AACArB,MAAAA,MAAM,CAACsB,cAAP,GAAwB,EAAxB;AACAtB,MAAAA,MAAM,CAACuB,WAAP,GAAqB,IAArB;AACAvB,MAAAA,MAAM,CAACwB,OAAP,GAAiB,IAAjB;AACAxB,MAAAA,MAAM,CAACyB,SAAP,GAAmB,KAAnB;AACAzB,MAAAA,MAAM,CAAC0B,iBAAP,GAA2B,IAA3B;AACA1B,MAAAA,MAAM,CAAC2B,wBAAP,GAAkC,IAAlC,CATG,CAUH;;AACA,YAAMC,SAAS,GAAGC,IAAI,CAACC,GAAL,EAAlB;AAEAhC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BoB,WAA3B;AAEAJ,MAAAA,eAAe,CAACI,WAAD,CAAf,CAfG,CAiBH;;AACAA,MAAAA,WAAW,CAACY,sBAAZ,CAAmCH,SAAnC,EAA8C5B,MAA9C,EAAsD,CAACgC,QAAD,EAAWtB,KAAX,KAAqB;AACvE,YAAIA,KAAJ,EAAW;AACP;AACAZ,UAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8CW,KAA9C;AACH,SAHD,MAGO;AACHZ,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBiC,QAAxB;AAEAzC,UAAAA,mBAAmB,CAACyC,QAAD,CAAnB;AACH;AACJ,OATD;AAUH;AACJ,GAjCD;AAkCH,CArCD;;AAsCA,MAAMC,kBAAkB,GAAG,CAACpB,IAAD,EAAOqB,QAAP,KAAoB;AAC3C,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGtB,IAAI,CAACuB,OAAL,CAAaC,MAAzC,EAAiDF,KAAK,EAAtD,EAA0D;AACtD,UAAMG,IAAI,GAAGzB,IAAI,CAACuB,OAAL,CAAaD,KAAb,CAAb;;AACA,QAAIG,IAAI,CAACC,MAAL,KAAgBL,QAAQ,CAACM,QAA7B,EAAuC;AACnC,aAAOF,IAAI,CAACG,gBAAZ;AACH;;AACD,QAAK5B,IAAI,CAACuB,OAAL,CAAaC,MAAb,GAAsB,CAAvB,KAA8BF,KAAlC,EAAyC;AACrC,aAAOG,IAAI,CAACG,gBAAZ;AACH;AACJ;AACJ,CAVD;;AAWA,MAAMC,0BAA0B,GAAG,CAAC7B,IAAD,EAAOqB,QAAP,KAAoB;AACnD,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGtB,IAAI,CAACuB,OAAL,CAAaC,MAAzC,EAAiDF,KAAK,EAAtD,EAA0D;AACtD,UAAMG,IAAI,GAAGzB,IAAI,CAACuB,OAAL,CAAaD,KAAb,CAAb;;AACA,QAAIG,IAAI,CAACC,MAAL,KAAgBL,QAAQ,CAACM,QAA7B,EAAuC;AACnC,aAAOF,IAAI,CAACK,QAAZ;AACH;;AACD,QAAK9B,IAAI,CAACuB,OAAL,CAAaC,MAAb,GAAsB,CAAvB,KAA8BF,KAAlC,EAAyC;AACrC,aAAOG,IAAI,CAACK,QAAZ;AACH;AACJ;AACJ,CAVD;;AAWA,MAAMC,cAAc,GAAG,CAAC/B,IAAD,EAAOqB,QAAP,KAAoB;AACvC,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGtB,IAAI,CAACgC,SAAL,CAAeR,MAA3C,EAAmDF,KAAK,EAAxD,EAA4D;AACxD,UAAMG,IAAI,GAAGzB,IAAI,CAACgC,SAAL,CAAeV,KAAf,CAAb;;AACA,QAAIG,IAAI,CAACC,MAAL,KAAgBL,QAAQ,CAACM,QAA7B,EAAuC;AACnC,aAAOF,IAAI,CAACK,QAAZ;AACH;;AACD,QAAK9B,IAAI,CAACgC,SAAL,CAAeR,MAAf,GAAwB,CAAzB,KAAgCF,KAApC,EAA2C;AACvC,aAAO,wBAAP;AACH;AACJ;AACJ,CAVD;;AAWA,MAAMW,YAAY,GAAG,CAACjC,IAAD,EAAOqB,QAAP,KAAoB;AACrC,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGtB,IAAI,CAACgC,SAAL,CAAeR,MAA3C,EAAmDF,KAAK,EAAxD,EAA4D;AACxD,UAAMG,IAAI,GAAGzB,IAAI,CAACgC,SAAL,CAAeV,KAAf,CAAb;;AACA,QAAIG,IAAI,CAACC,MAAL,KAAgBL,QAAQ,CAACM,QAA7B,EAAuC;AACnC,aAAOF,IAAI,CAACS,QAAZ;AACH;;AACD,QAAKlC,IAAI,CAACgC,SAAL,CAAeR,MAAf,GAAwB,CAAzB,KAAgCF,KAApC,EAA2C;AACvC,aAAOG,IAAI,CAACS,QAAZ;AACH;AACJ;AACJ,CAVD;;AAWA,MAAMC,4BAA4B,GAAIV,IAAD,IAAU;AAC3C,QAAMW,QAAQ,GAAGX,IAAI,CAACY,iBAAL,CAAuB1B,OAAvB,EAAjB;;AAEA,OAAK,IAAIW,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGc,QAAQ,CAACZ,MAArC,EAA6CF,KAAK,EAAlD,EAAsD;AAClD,UAAMtB,IAAI,GAAGoC,QAAQ,CAACd,KAAD,CAArB;;AACA,QAAItB,IAAI,CAACsC,IAAL,CAAUC,QAAV,CAAmB,OAAnB,CAAJ,EAAiC;AAC7B,aAAQ,GAAEC,OAAO,CAACC,GAAR,CAAYC,oBAAqB,IAAG1C,IAAI,CAAC2C,IAAK,EAAxD;AACA;AACH;AACJ;AACJ,CAVD;;AAWA,MAAMC,0BAA0B,GAAIpE,CAAD,IAAO;AACtCS,EAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ,EAAqDV,CAArD;AACH,CAFD;;AAGA,MAAMqE,yBAAyB,GAAIrE,CAAD,IAAO;AACrCS,EAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ,EAAoDV,CAApD;AACH,CAFD;;AAGA,eAAe;AACXD,EAAAA,oBADW;AAEXwB,EAAAA,iCAFW;AAGXqB,EAAAA,kBAHW;AAIXS,EAAAA,0BAJW;AAKXE,EAAAA,cALW;AAMXE,EAAAA,YANW;AAOXnD,EAAAA,+BAPW;AAQXqD,EAAAA,4BARW;AASXU,EAAAA,yBATW;AAUXD,EAAAA;AAVW,CAAf","sourcesContent":["import React,{ Fragment, useState } from 'react';\n\nconst handleCheckGroupType = (e, setGroupType, setMessageListState) => {\n    const checked = e.target.checked;\n\n    setMessageListState([]);\n\n    setGroupType({\n        groupType: checked === true ? \"Public Convo's\" : \"Private Convo's\",\n        checked\n    })\n}\nconst handleMessagePressPrivateConvos = (message, channel) => {\n    console.log(\"handleMessagePressPrivateConvos clicked/ran...\");\n\n    const params = new sb.UserMessageParams();\n\n    params.message = message;\n    params.customType = \"private\";\n    // params.data = DATA;\n    params.mentionType = 'users';\n    params.mentionedUserIds = [];\n    // params.metaArrays = [   // A pair of key-value\n    //     new sendBirds.me.MessageMetaArray('itemType', ['tablet']),\n    //     new sendBirds.me.MessageMetaArray('quality', ['best', 'good'])\n    // ];\n    params.translationTargetLanguages = ['en'];   // French and German\n    params.pushNotificationDeliveryOption = 'default';  // Either 'default' or 'suppress'\n\n    channel.sendUserMessage(params, (userMessage, error) => {\n        if (error) {\n            // Handle error.\n            console.log(\"error sendUserMessage... : \", error);\n        } else {\n            const messageId = userMessage.messageId;\n\n            console.log(\"Send message SUCCESS private convos --- :\", messageId, userMessage)\n        }\n    });\n}\nconst handleListItemClickPrivateChannel = (item, SBData, setChannelState, setMessageListState) => {\n    console.log(\"handleListItemClickPrivateChannel clicked... : \", item);\n\n    SBData.GroupChannel.getChannel(item.url, (openChannel, error) => {\n        if (error) {\n            // Handle error.\n            console.log(\"getChannel : \", error);\n        } else {\n            const params = new SBData.MessageListParams();\n            // create param's for message log/chat\n            params.prevResultSize = 25;\n            params.nextResultSize = 25;\n            params.isInclusive = true;\n            params.reverse = true;\n            params.replyType = \"all\";\n            params.includeThreadInfo = true;\n            params.includeParentMessageInfo = true;\n            // create timestamp\n            const TIMESTAMP = Date.now();\n\n            console.log(\"openChannel\", openChannel);\n\n            setChannelState(openChannel);\n\n            // Pass the params as an argument to the `getMessagesByTimestamp()` method.\n            openChannel.getMessagesByTimestamp(TIMESTAMP, params, (messages, error) => {\n                if (error) {\n                    // Handle error.\n                    console.log(\"error getMessagesByTimestamp :\", error);\n                } else {\n                    console.log(\"messages\", messages);\n\n                    setMessageListState(messages);\n                }\n            });\n        }\n    });\n}\nconst renderOnlineStatus = (item, userData) => {\n    for (let index = 0; index < item.members.length; index++) {\n        const user = item.members[index];\n        if (user.userId !== userData.uniqueId) {\n            return user.connectionStatus;\n        }\n        if ((item.members.length - 1) === index) {\n            return user.connectionStatus;\n        }\n    }\n}\nconst renderNicknamePrivateGroup = (item, userData) => {\n    for (let index = 0; index < item.members.length; index++) {\n        const user = item.members[index];\n        if (user.userId !== userData.uniqueId) {\n            return user.nickname;\n        }\n        if ((item.members.length - 1) === index) {\n            return user.nickname;\n        }\n    }\n}\nconst renderNickname = (item, userData) => {\n    for (let index = 0; index < item.operators.length; index++) {\n        const user = item.operators[index];\n        if (user.userId !== userData.uniqueId) {\n            return user.nickname;\n        }\n        if ((item.operators.length - 1) === index) {\n            return \"Chat Invite Pending...\";\n        }\n    }\n}\nconst renderStatus = (item, userData) => {\n    for (let index = 0; index < item.operators.length; index++) {\n        const user = item.operators[index];\n        if (user.userId !== userData.uniqueId) {\n            return user.isActive;\n        }\n        if ((item.operators.length - 1) === index) {\n            return user.isActive;\n        }\n    }\n}\nconst renderLastProfilePicMainUser = (user) => {\n    const reversed = user.profilePicsVideos.reverse();\n\n    for (let index = 0; index < reversed.length; index++) {\n        const item = reversed[index];\n        if (item.type.includes(\"image\")) {\n            return `${process.env.REACT_APP_ASSET_LINK}/${item.link}`;\n            break;\n        }\n    }\n}\nconst onKeyPressPrivateSubmitted = (e) => {\n    console.log(\"onKeyPressPrivateSubmitted pressed...\", e);\n}\nconst onKeyPressPublicSubmitted = (e) => {\n    console.log(\"onKeyPressPublicSubmitted pressed...\", e);\n}\nexport default {\n    handleCheckGroupType,\n    handleListItemClickPrivateChannel,\n    renderOnlineStatus,\n    renderNicknamePrivateGroup,\n    renderNickname,\n    renderStatus,\n    handleMessagePressPrivateConvos,\n    renderLastProfilePicMainUser,\n    onKeyPressPublicSubmitted,\n    onKeyPressPrivateSubmitted\n};"]},"metadata":{},"sourceType":"module"}