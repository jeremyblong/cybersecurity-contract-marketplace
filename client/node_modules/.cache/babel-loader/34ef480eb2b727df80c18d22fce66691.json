{"ast":null,"code":"// helpers logic related to mainly to redux-hook-form\nconst CreateNewBlogPostReduxFormHelpers = () => {\n  const titleChecker = {\n    check: register => {\n      return { ...register(\"title\", {\n          required: {\n            value: true,\n            message: \"You MUST enter AT least 35 characters to 225 characters\"\n          },\n          minLength: {\n            value: 35,\n            message: \"You MUST enter AT Least 35 characters\"\n          },\n          maxLength: {\n            value: 225,\n            message: \"You may ONLY enter 225 characters or less\"\n          },\n          onBlur: data => {\n            console.log(\"blurrred... data :\", data);\n          }\n        })\n      };\n    },\n    onChange: (value, setValue) => {\n      setValue(\"title\", value, {\n        shouldValidate: true\n      });\n    },\n    name: \"title\",\n    placeholder: \"Enter your 'blog title'...\",\n    type: \"text\"\n  };\n  const subtitleChecker = {\n    check: register => {\n      return { ...register(\"subtitle\", {\n          required: {\n            value: true,\n            message: \"You MUST enter AT least 35 characters to 225 characters\"\n          },\n          minLength: {\n            value: 35,\n            message: \"You MUST enter AT Least 35 characters\"\n          },\n          maxLength: {\n            value: 225,\n            message: \"You may ONLY enter 225 characters or less\"\n          },\n          onBlur: data => {\n            console.log(\"blurrred... data :\", data);\n          }\n        })\n      };\n    },\n    onChange: (value, setValue) => {\n      setValue(\"subtitle\", value, {\n        shouldValidate: true\n      });\n    },\n    name: \"subtitle\",\n    placeholder: \"Enter your 'blog sub-title'...\",\n    type: \"text\"\n  };\n  const hashtagsChecker = {\n    check: register => {\n      return { ...register(\"hashtags\", {\n          required: {\n            value: true,\n            message: \"You MUST enter AT least 5 characters to 15 characters\"\n          },\n          minLength: {\n            value: 5,\n            message: \"You MUST enter AT Least 5 characters\"\n          },\n          maxLength: {\n            value: 15,\n            message: \"You may ONLY enter 15 characters or less\"\n          },\n          onBlur: data => {\n            console.log(\"blurrred... data :\", data);\n          }\n        })\n      };\n    },\n    onChange: (value, setValue) => {\n      setValue(\"hashtags\", value, {\n        shouldValidate: false\n      });\n    },\n    name: \"hashtags\",\n    placeholder: \"Enter your 'blog sub-title'...\",\n    type: \"text\"\n  };\n  const descriptionChecker = {\n    check: register => {\n      return { ...register(\"description\", {\n          required: {\n            value: true,\n            message: \"You MUST enter AT least 500 characters to 7000 characters\"\n          },\n          minLength: {\n            value: 500,\n            message: \"You MUST enter AT Least 500 characters\"\n          },\n          maxLength: {\n            value: 7000,\n            message: \"You may ONLY enter 7000 characters or less\"\n          },\n          onBlur: data => {\n            console.log(\"blurrred... data :\", data);\n          }\n        })\n      };\n    },\n    onChange: (value, setValue) => {\n      setValue(\"description\", value, {\n        shouldValidate: false\n      });\n    },\n    name: \"description\",\n    placeholder: \"Enter your 'blog sub-title'...\",\n    type: \"text\"\n  }; // return values to other component\n\n  return {\n    titleChecker,\n    subtitleChecker,\n    hashtagsChecker,\n    descriptionChecker\n  };\n};\n\nexport default CreateNewBlogPostReduxFormHelpers;","map":{"version":3,"sources":["/home/kali/Documents/cybersecurity-bounty-hunting-platform/client/src/components/dashboard/blogging/blogCreation/helpers/reduxFormHelpers.js"],"names":["CreateNewBlogPostReduxFormHelpers","titleChecker","check","register","required","value","message","minLength","maxLength","onBlur","data","console","log","onChange","setValue","shouldValidate","name","placeholder","type","subtitleChecker","hashtagsChecker","descriptionChecker"],"mappings":"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","sourcesContent":["\n// helpers logic related to mainly to redux-hook-form\nconst CreateNewBlogPostReduxFormHelpers = () => {\n    const titleChecker = {\n        check: (register) => {\n            return (\n                {...register(\"title\", { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 35 characters to 225 characters\"\n                }, minLength: {\n                    value: 35,\n                    message: \"You MUST enter AT Least 35 characters\"\n                }, maxLength: {\n                    value: 225,\n                    message: \"You may ONLY enter 225 characters or less\"\n                }, onBlur: (data) => {\n                    console.log(\"blurrred... data :\", data);\n                }})}\n            )\n        },\n        onChange: (value, setValue) => {\n            setValue(\"title\", value, { shouldValidate: true });\n        },\n        name: \"title\",\n        placeholder: \"Enter your 'blog title'...\",\n        type: \"text\"\n    };\n    const subtitleChecker = {\n        check: (register) => {\n            return (\n                {...register(\"subtitle\", { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 35 characters to 225 characters\"\n                }, minLength: {\n                    value: 35,\n                    message: \"You MUST enter AT Least 35 characters\"\n                }, maxLength: {\n                    value: 225,\n                    message: \"You may ONLY enter 225 characters or less\"\n                }, onBlur: (data) => {\n                    console.log(\"blurrred... data :\", data);\n                }})}\n            )\n        },\n        onChange: (value, setValue) => {\n            setValue(\"subtitle\", value, { shouldValidate: true });\n        },\n        name: \"subtitle\",\n        placeholder: \"Enter your 'blog sub-title'...\",\n        type: \"text\"\n    };\n    const hashtagsChecker = {\n        check: (register) => {\n            return (\n                {...register(\"hashtags\", { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 5 characters to 15 characters\"\n                }, minLength: {\n                    value: 5,\n                    message: \"You MUST enter AT Least 5 characters\"\n                }, maxLength: {\n                    value: 15,\n                    message: \"You may ONLY enter 15 characters or less\"\n                }, onBlur: (data) => {\n                    console.log(\"blurrred... data :\", data);\n                }})}\n            )\n        },\n        onChange: (value, setValue) => {\n            setValue(\"hashtags\", value, { shouldValidate: false });\n        },\n        name: \"hashtags\",\n        placeholder: \"Enter your 'blog sub-title'...\",\n        type: \"text\"\n    };\n    const descriptionChecker = {\n        check: (register) => {\n            return (\n                {...register(\"description\", { required: {\n                    value: true,\n                    message: \"You MUST enter AT least 500 characters to 7000 characters\"\n                }, minLength: {\n                    value: 500,\n                    message: \"You MUST enter AT Least 500 characters\"\n                }, maxLength: {\n                    value: 7000,\n                    message: \"You may ONLY enter 7000 characters or less\"\n                }, onBlur: (data) => {\n                    console.log(\"blurrred... data :\", data);\n                }})}\n            )\n        },\n        onChange: (value, setValue) => {\n            setValue(\"description\", value, { shouldValidate: false });\n        },\n        name: \"description\",\n        placeholder: \"Enter your 'blog sub-title'...\",\n        type: \"text\"\n    };\n    // return values to other component\n    return {\n        titleChecker,\n        subtitleChecker,\n        hashtagsChecker,\n        descriptionChecker\n    }\n}\n\nexport default CreateNewBlogPostReduxFormHelpers;"]},"metadata":{},"sourceType":"module"}