/** Font names as displayed in the customization section in the dashboard */
export interface Fonts {
	primary?: string;
	secondary?: string;
	cta?: string;
}
/** Available UI Customization properties */
export interface Theme {
	fonts?: Fonts;
	accentColor?: string;
	darkMode?: boolean;
}
/**
 * During the verification flow,
 * your users will be asked to provide some information
 * which you might already have in your application.
 */
export declare type PrefillAttributes = {
	/** Populate this field if you already know
	 * your user's email address
	 * to speed up the verification flow. */
	email?: string | undefined;
	/** An ISO-3166 compliant country code.
	 * For the ID document country selection screen,
	 * this will pre-select the country of the ID document
	 * in the dropdown menu for your users */
	country?: string | undefined;
};
declare enum StepID {
	Start = "START",
	Consent = "CONSENT",
	Email = "EMAIL",
	Country = "COUNTRY",
	ResourceChoice = "RESOURCE_CHOICE",
	ResourceExplanation = "RESOURCE_EXPLANATION",
	Resource = "RESOURCE",
	Summary = "SUMMARY",
	Finished = "FINISHED",
	ReusableResources = "REUSABLE_RESOURCES"
}
declare enum ErrorCode {
	UserCancelled = "CANCELLED_BY_USER",
	BiometricAuthenticationFailed = "BIOMETRIC_AUTHENTICATION_FAILED",
	FatalError = "FATAL_ERROR"
}
/** Additional error context information
 * (contains the step where the error occurred) */
export declare type ErrorContext = {
	step?: StepID;
};
/** Method that is being called once
 * a user starts the verification flow. */
export declare type OnStartCallback = () => void;
/** This callback method is triggered
 * when a user canceled the verification flow
 * or the verification finished with an error.
 * You can use this to find out
 * if users dropped out of your verification flow. */
export declare type OnErrorCallback = (error: ErrorCode, context: ErrorContext) => void;
/** Method that is being called once
 * a user clicks the "Finish" button
 * identityAccessKey: UUID of the completed verification.
 * You can use this to query our API. */
export declare type OnFinishCallback = (identityAccessKey: string) => void;
/** Method that is being called once
 * verification data is submitted to Passbase
 * identityAccessKey: UUID of the completed verification.
 * You can use this to query our API. */
export declare type OnSubmittedCallback = (identityAccessKey: string) => void;
export declare type ButtonCallbacks = {
	onStart?: OnStartCallback;
	onError?: OnErrorCallback;
	onFinish?: OnFinishCallback;
	onSubmitted?: OnSubmittedCallback;
};
export declare type IframeInitMessageDataApiKey = {
	/** The public API Key you obtained
	 * from the developer dashboard. */
	apiKey: string;
};
export declare type IframeInitMessageDataMain = {
	/** During the verification flow,
	 * your users will be asked to provide some information
	 * which you might already have in your application.
	 */
	prefillAttributes?: PrefillAttributes;
	/** Encrypted JSON string via
	 * the private key encoded in base64. */
	metaData?: string;
	/** UI Customization options */
	theme?: Theme;
	/** Hides prebuilt UI button */
	hidden?: boolean;
};
export declare type VerifyButtonProps = IframeInitMessageDataApiKey & IframeInitMessageDataMain & ButtonCallbacks;
export declare type VerifyButtonComponent = (props: VerifyButtonProps) => JSX.Element;
export declare function start(): void;
declare const _default: VerifyButtonComponent;
export default _default;

export {};
